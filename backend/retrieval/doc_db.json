[
  {
    "id": "1",
    "text": "I'm looking at laterna now and I'm not quite sure\nMaybe something about the way it displays characters in cells means that a new line wont implicitly move to a cell below?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "2",
    "text": "I'm currently doing some experimentation getting a vscode WebView REPL with REBL like viewing, although it's very prototype and early days currently. Full code editing would require literally throwing out vscode's editor and using a custom one however, since it's quite strict about what you can do within a vanilla text editor.\nThis is *definitely* a path I feel needs pursuing to it's fullest though, even if it means dropping vscode and building a dedicated electron application.\nI never saw the Interlisp version of that, though I've read many times how friendly it was considered to be. The only experience I have with lispms is mid-90's Symbolics machines, are there any emulators, videos, or perhaps surviving documentation that describe it?\nI need to convert file to PDF, but:\n- things have to be precise to each mm\n- input file has to be in format easy to edit by user, PhotoShop, some kind of drawing in web browser, maybe even XML\n- if font is too big to fit text into space it needs to decrease font\n\nI don\u2019t any good solution to do it. Generating PDF is a nightmare.\n* Unless I want to pay a lot for some extra payment SaaS or libraries\nBut idea is to make a product from it, so I don\u2019t want to stick with any sick high price licence\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "3",
    "text": "especially for label printers\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "4",
    "text": "Depending on how you want to deliver this to users, the cheap-and-cheerful option is to make a printer-friendly HTML page and let users print to PDF (or paper) themselves\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "5",
    "text": "In what way can something be precise to each mm, but also auto-adjust text size?  I don't understand how those two desires can be satisfied at the same time.\nimho it's always a nightmare, even with paid add ons\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "6",
    "text": "I feel like I must be missing something\u2026 why is it that when I call `keys` on a `sorted-map`, I don\u2019t get a sorted collection? I am trying to implement a simple interval tree, and this gap is a sticking point.\nwhat do you mean by a sorted collection?\nif you mean a seq of the keys in order, I am not sure, but I would be surprised if that is not what you get, so I wonder what makes you think that is not what you are getting\n```\nuser=&gt; \n(let [x (shuffle (range 32))]\n  (= (sort x)\n     (keys (into (sorted-map) (zipmap x x)))))\ntrue\nuser=&gt; \n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "7",
    "text": "maybe postscript would be helpful?\n_in general_ what you want to do might be a headache and a half, but it might be possible to hack together something specific\nLike, a brute force way might be (if you are printing only one line on a label) to pick a font size based on a heuristic (12, lets say) and then render a pdf. Run an image of that pdf through handwriting recognition software and see if it reads it correctly\nthen just find the largest font size on which you can read everything\nand if there is none then you can send a message back to your users that there is no way for you to do it\nas an upside you can throw \"uses machine learning\" on whatever your product is\nas a downside there is everything else\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "8",
    "text": "I don\u2019t know any way to do it with precision to each 1 mm\nOnly with Java and even then it is super hard. But with Java code users can\u2019 really give an input as a file\nWhat is the best way in your opinion to convert input (file, XML, etc.) to PDF with precision to 1 mm?\n<@Rosaline> I mean something that implements `clojure.lang.Sorted` so you can use `subseq` on it.\nThey do come back in the expected order, but not implementing the right interfaces to take full advantage of that.\nAh,  but it turns out the map itself does implement sorted, so I can use `subseq` directly on that, which addresses my efficient interval matching quite effectively.\nThat\u2019s what I was missing. ^_^\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "9",
    "text": "I'm confused about when to use what style of namespaced keys. I know how they work, I just don't know what is best from a maintainability standpoint. For example is `:user/email` a good namespaced key? Or should it be namespaced to the company such as `com.company.user/email`? Or perhaps namespaced to the project `com.company.project.user/email` or even a project file namespace such as `com.company.project.spec.user/email`. Should any way be used exclusively, or are there use cases where either style might be used? I'm thinking that `:user/email` still might result in naming collisions if two systems deal with `user` in a different way. I'm hoping to figure out an optimal solution for systems spanning many projects in an organisation.\nI think I remember a Rich Hickey talk on this but I don't remember which one\nproject level is pretty good, I don't care very much for using the names of code namespaces for keyword namespaces\nI think a good rule of thumb is to imagine all your data that exists in memory exists in a sql database, the namespaces would be the table names and the names would be the column names\nand then imagine everyone's data is in the same global table space, and what would you need to name your tables to avoid collisions\nWhen you say everyone's data, are you referring to company level namespace like `com.company.user/email`?\nthat would be one possible solution to that, prefixing all your table names with some string that you \"own\"\nanother solution would be using uuids, which would work but are not very friendly\nAnother factor to consider <@Alix> is how \"global\" your data is going to be. Is this just a map of data that will exist inside your company? Inside just this project? How unique does the name need to be?\nIf you produce it from a library you put out there for everyone to use, it needs to be \"more unique\" so that it can't conflict with any similar data used by any of the users of your library.\nAnd the issue was that it coupled our key names with the namespace\n So I'd say be careful about that\nRight so it looks like there is no real convention around this. And I should just go with what makes the most sense given the factors.\nSome examples:\nIf I need a db uri for my users db in my company I could namespace like this `:db.users/uri`. I wouldn't want to use `:db/uri` as I might have many databases in my company. I also didn't namespace to the company because this key will be accessed only within the company\nAnd I could use `:user/email` if users in my company are global among all projects. But if my company had two products I would namespace the user attributes accordingly such as `:project1.user/email` &amp; `:project2.user/email` but only if some of the code was shared in any way.\nThat's where my thinking is after considering the feedback\n<@Otelia> If there was 2 databases for users (employees, clients) then the business logic for dealing with the two types of users would probably be different. And the data is stored is two different places. To me this because of the 2 datasources, I would think to namespace to two separate namespaces. The namespace gives me the ability to inspect my data and decide if I want to do something with a client or an employee. And I can tell the difference because of the namespace. If there was no difference, then there would be no reason to store client &amp; employee separately or differently (with some technical exceptions such as security). Because they're essentially the same I would namespace them the same. I'm still working all this out but that's my thinking.\nYea that's something I've though about also. For example the namespaces seem redundant for this data structure `{:orgs [{:org/employees [{:employee/paychecks [{:paycheck/id 1}]}]}]}` because each level up contains the context. Perhaps the namespace allows you to avoid passing in the context or more information than that is needed. For a paycheck/id=1 instead of giving `{:employee/paychecks [{:paycheck/id 1}`, you just give `{:paycheck/id 1}` and the namespace allows you to determine the context.\nI think you must be right.\nBut it would be interesting to know what specific benefits others have found for the unique keywords.\nYea I'd like to know also. I've never written code like and I'd like to know if others how found it practical for production use\nThe most practical scenarios I can think of is dynamic spec validation. It could just lookup the spec for all its keys and avoid knowing any context apart from the keys\nI've never done that though so I'm not sure how if at all it would work\nOr even if it's a good idea. I feel like you would want to explicitly specify what spec you're validating against\nOTOH, a spec for :person/email would probably work for email addresses in all tables.\nHowever you could still do that with unique keys and some mapping.\nBut your thinking raises another question for me. So far I've assumed that the namespace of keys in a map would be the same. Are there any use cases for them to be different? Perhaps what your suggesting might also be a correct way of doing this. `{:person/id \"123\" :person/name \"Caleb\" :employee/number \"001\"}`\nAs long as there would be no way that the information stored in the shared keys would need to be handled differently I would think\nYes, I've wondered about that. But I don't have enough experience in Clojure to say. Someone with more experience will probably chime in. I can admit that unique keywords give you the most flexibility for treating them differently, if necessary, just don't know specifically when it's necessary.\nYea I agree. How far is too far. Perhaps there are times when you would use them and times when you wouldn't.\nWhen you're looking at nested data structures, remember that sometimes you'll just be passing part of it around -- so you don't always have the parental context.\nQualified keys are designed to \"avoid conflicts\" and to \"uniquely identify an entity in a given context\". So they really are about _context_.\nFor example, at work, we have a billing subsystem and we generally have all the keys in maps associated with billing qualified with `wsbilling`. The context we need to convey is that \"this data all belongs to billing\", so the maps within that system tend to have keys like `:wsbilling/member-id`, `:wsbilling/initial-amount` and so on -- unique within the context of billing and the systems that it interacts with.\nAnother part of the system deals with multiple \"layers\" of domain logic so it uses qualifiers that identify the different layers.\nRight that makes sense. And expanding upon mixing namespaces in a map as I previously suggested. Looking back on work with datomic, your entities wouldn't contain maps with mixed namespaced keys. They would nest them under a ref.\nSome of these qualifiers match actual namespaces, some don't.\nSo perhaps the second nesting would be better than mixing namespaces\nThe idea is you use whatever qualifiers make sense for your data in your context. Making these \"as unique as they need to be\".\n<@Celestine> And would the use of qualifiers matching actual namespaces be almost exclusively used for keywords private to the namespace? Are there other reasons you might do this?\n(which is why there are no specific rules of thumb about this whole thing :slightly_smiling_face: )\nYea Clojure is very interesting in that regard. It's like the complete opposite of something opinionated like ruby on rails. Everyone sort of does what works for them. It does make it a little difficult if you're new however as its hard to copy what other people do because everyone does it so differently. I imagine it's an experienced developers dream though as they can do everything exactly how they like it.\nIt means you need to understand more of the abstractions and concepts, yes.\n<@Alix> It's more so that people program with abstractions, and the concrete code that comes out varies\nThanks Sean, I see your point about nested data structures. And it is good to know that there is no standard convention.\n\nAnother question: If you have both :employee/email and :client/email, don't you sometimes want to treat all emails the same or similarly, and in that case do you use the keyword name to identify it as an email? Just curious if you'd encountered that situation.\n<@Nova> That blows my mind a little bit. When deciding on how to implement something I've usually started by figuring out what worked for me in the past or finding out what other people have done. Pretty much just lots of practice. Perhaps to improve myself I should spend some more time reading up on the theory.\n<@Alix> It's not so much about theory, as much as it's about understanding 'what needs to happen'\n<@Otelia> If you've named them `:employee/email` and `:client/email` it'll generally be because you want to be able to tell them apart in a particular context. If you want to do something email-generic, you can pass either value to a function that just takes \"an email address\" or you can construct a new map containing the bits you might want under more generic names.\nWhen you get into specs, you also have to consider whether these fields have the same underlying spec or not.\n<@Alix> I find that when programming in Lisps, especially clojure, I rarely need to think about writing code. I spend most of my time thinking about architecture or specification. I find this also leads to better applications.\nFor example, your spec for `:employee/email` might be a regex that has a fixed `@` domain name part (for your company).\n<@Alix> Clojure certainly rewards thinking at a higher level of abstraction a lot of the time... and can punish thinking at a lower level sometimes :slightly_smiling_face:\n<@Celestine> I feel like that's a bit unfair, because the flexibility of the language allows you to do far-reaching optimizations with lower-level code changes. Perhaps more accurate to say that Clojure punishes premature optimization more than other languages?\nMy takeaway from this conversation is that I am free to use keyword namespaces for whatever purpose is most suited to my app, which turns the focus back to the app data model. It's a nice freedom. Thanks everyone for the comments and help.\nLikewise thank you for the help\n<@Nova> OK, yeah, that's what I was reaching for really.\nBut also if you try to dive in and think about problems the way you might in other languages -- where mutable variables and loops are the basic building blocks -- you'll find Clojure working against you.\nSo you often have to step back and think in terms of collections rather than elements, and abstractions rather than implementation, in order to get the \"shape\" of a Clojure solution.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "10",
    "text": "I know I've used `::`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "11",
    "text": "This issue of keyword namespaces is very confusing to me. What advantage is there to making the keyword completely unique across, for example, the organization? In other words, what harm is there in using :user/email for the email column in two different DBs in an organization? Is the keyword alone really used to determine which table an attribute belongs to?\nMaybe :person/email would be an even better example.\nI understand what you're saying. I'm just surprised that there wouldn't always be context available (client vs employee) and that the keyword alone must be unique to get the context.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "12",
    "text": "wondering which is more intuitive for people to read, dispatching async work in future or async/thread , any opinions ? i don't really care for results that much but i need to dispatch a bunch of i/o bound threads and wait for all of them to finish\nand count of threads is likely to be bigger than core count because i/o has latency :disappointed:\nit appears they both easily scale beyond the count of cores available\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "13",
    "text": "I am doing some timeseries analytics with clojure, and I have noticed some strange performance issues in loading data. I load timeseries from CSV files (size 500KB each), and I find that slurping data in takes 10ms, and then the CSV parsing takes 100ms (I parse timestamp, and floats). I compared this to incanter csv load (which takes 300ms, so worse). I used taoensso.tufte for performance tracking. I wonder if there are any ideashow to improve performance of such stimple things? If reading from disk takes 10ms, then the parsing should be perhaps another 10ms, but not longer, as disks typically are the bottomleg.  I spend a lot of time just to get simple benchmarks, because I had to remove all the lazyness via \"doall\".  Any ideas on how to speed Clojure up? Any tricks or recommendations?\ndid you measure the timings before and after jit got kicked in as well ?\nI assume the Java JIT runs the first time a function is called.\nI ran my performance numbers many times.\nSo I dont think this is the culprit.\nthey dont get compiled on the first time\nthat number is either in hundreds or thousands before java kicks it's jit into motion\nbut if you had files of 500kb then yes it should have kicked in at some point\ncan you try to isolate the slowness part by excluding parts of parsing ?\ndate parsing does sound a little bit of annoying , so i would try to avoid that at first\nI now track everything\nif it turns out to be the slowpoint you'll figure out what to optimize\nBut I still miss about 50% of the total time.\nhow many rows do you have in those 500kb ? and how many columns ?\nNone\n5000 rows, 6 cols\nsorry, I could not post to this thread my performance snippet.\nWhat is really bizarre that the slurping is so fast,\nand the parsing so slow.\nIt is order of magnitudes opposite how it should be.\nthis is the source\ni tried this over here\ngenerating a csv file with\n```\nfor((i=0; i &lt; 25000; i++)); do echo \"`date -Iseconds`,$i.25,\\\"anytext\\\"\"; done &gt; somecsv.csv\n```\nand then tried this code to read the result:\n```\n(defn do-parsing[]\n  (let [data (slurp \"somecsv.csv\")]\n    (last (csv/read-csv data))))\n\n(defn time-parsing []\n  (time (do-parsing)))\n\n; (time-parsing)\n```\nindeed seems like feeding it into the read-csv added 200ms of execution time\nbizarre, isnt it?\nI thought that perhaps the clojure csv library is somehow not performance optimized,\nSo this is why I tried incanter.\nBut incanter is even slower.\ni would rather look for a pure java csv parser and wrap it into something comfy\nit looks to me that already splitting the lines apart by linebreaks is slower than slurping it from the disk\ni tried to parallelize the work\n```\n\n(defn do-parallel-parsing[]\n  (let [data (slurp \"somecsv.csv\")\n        rows (clojure.string/split-lines data)\n        parsed-rows (pmap csv/read-csv rows)]\n    (last parsed-rows)))\n\n(defn time-parallel-parsing []\n  (time (do-parallel-parsing)))\n\n; (time-parallel-parsing)\n\n```\nand that was a bit faster but still slow by all means :slightly_smiling_face:\nand had a chance of introducing bugs due to linebreaks within cell values\nperhaps nobody every uses csv files in clojure\nso this might be the reason.\nbut even the split lines here took the execution time to 50ms already before any csv action\nline splitting can be a performance cost,\npeople use csv for sure :slightly_smiling_face: but yeah probably they don't go after the milliseconds but have more slowness somewhere else\nif it is not done correctly.\nbecause one has to create thousands of sub strings\nand this is expensive.\nwell,\nmy thinking is,\nthat csv parsing should be a fraction of the time it takes to read it from disk.\nI have written a library in c# for .net\nthat had that performance.\nso something is really wrong here.\nBut I have no clue what.\nI am too much novice of clojure to find that out.\ni tried to use java's own string splitting .. yes it's in a class of it's own\nWhen I wrote my c# csv parser,\n```\n\n(defn do-parallel-parsing[]\n  (let [data (slurp \"somecsv.csv\")\n        rows (into [] (.split data \"\\n\"))\n        parsed-rows (pmap csv/read-csv rows)]\n    (last parsed-rows)))\n```\njust like that\nI bascically created my own string class,\nmy example went from 100ms to 50-60 range\nthat allowed you to take sub-strings.\nso I have avoided all the senseless copying of strings.\nand in the parsing,\nbut now my son is requesting my attention ... good luck  (and yeah. get an efficient java lib for the heavy loading)\nI wrote my own parser,\nby reading from my own datastructure\nThanks a lot kulminaator!\nHappy new year!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "14",
    "text": "Hi! I am in a bit of a pickle. I would like to use generative testing as part of my test suit and to this end wrote the following test:\n```\n(deftest generative\n  (is (successful? (stest/check `term-&gt;ast))))\n```\nWhen running this, however, I get the following error:\n```\nException: java.util.concurrent.ExecutionException: Syntax error compiling at (clojure/test/check/clojure_test.cljc:95:1).\n...\n```\nThis only happens if the assertion fails; if it passes everything is fine. Any idea why?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "15",
    "text": "I really love Clojure and Clojure REPL is the most productive environment I have ever used. Now I encountered one puzzle with Clojure REPL that I can't figure out how to do it. I needed to create a couple of gen-classes for a Java API I'm using via Clojure/Java interop. Before those gen-classes using Clojure REPL was a breeze. If I wanted to refresh all namespaces in Clojure REPL I just called function\n(do (require '[clojure.tools.namespace.repl :refer [refresh]]) (refresh))\n... in Clojure REPL. But after implementing those gen-classes I get error: \"namespace 'mygenclass' not found after loading 'mygenclass\". I was wondering if there is some standard procedure  or best practice with gen-classes I have missed?\n<@Nannette> By the way, which REPL are you using? Are you using :gen-class in the ns declaration or a free-standing (gen-class)? Anyway, I do not know c.t.n.repl, but I sometimes see that error message, in Cider, after trying to reload a ns that has errors in it OR trying to reload a ns whose name does not correspond to its filename.\nI'm using Cursive REPL with IntelliJ IDEA. I really love Cursive. I have configured all kinds of hotkeys for IntelliJ/Cursive and using those hotkeys I can jump back and forth between editor and REPL, send S-tokens from editor to REPL etc. I really love it. This refresh issue with gen-class is the only thing that causes a bit of nuisance.\nI'm using :gen-class in the ns declaration. Example in comment thread.\nExample:\n(ns simpleserver.util.azuregenclass.session\n  (:import (com.microsoft.azure.storage.table TableServiceEntity))\n  (:gen-class\n    :extends com.microsoft.azure.storage.table.TableServiceEntity\n    :constructors {[] []}\n    :init init\n    :prefix \"bean-\"\n    :state state))\n\n(defn bean-init\n  ([]\n    ))\nbtw. after giving the jvm a good chance at jit compiling the whole thing i reverted the code pretty much to original\nlooks like the repl is just getting into my way here :slightly_smiling_face:\nwith code like this\n```\n(ns silly-csv-parser.core\n  (:require [clojure.data.csv :as csv])\n  (:gen-class))\n\n(defn do-parsing[]\n  (let [data (slurp \"somecsv.csv\")]\n    (last (csv/read-csv data))))\n\n(defn time-parsing [_]\n  (time (do-parsing)))\n\n(defn -main\n  \"I don't do a whole lot ... yet.\"\n  [&amp; args]\n  (mapv time-parsing (range 1 25)))\n```\nrunning the (time (do-parsing)) from the repl was always like 200ms\nhowever ,  lein uberjar and then running that jar was a wastly different result\nThat exception comes from `defspec` in `clojure.test.check.clojure-test` -- which doesn't match the code you shared <@Matha>\n```\n$ lein uberjar\nCompiling silly-csv-parser.core\n$ java -jar target/uberjar/silly-csv-parser-0.1.0-SNAPSHOT-standalone.jar \n\"Elapsed time: 301.065242 msecs\"\n\"Elapsed time: 66.629456 msecs\"\n\"Elapsed time: 112.770513 msecs\"\n\"Elapsed time: 46.826564 msecs\"\n\"Elapsed time: 54.771694 msecs\"\n\"Elapsed time: 47.163652 msecs\"\n\"Elapsed time: 45.761238 msecs\"\n\"Elapsed time: 46.835782 msecs\"\n\"Elapsed time: 49.504536 msecs\"\n\"Elapsed time: 37.032187 msecs\"\n\"Elapsed time: 37.907508 msecs\"\n\"Elapsed time: 44.113467 msecs\"\n\"Elapsed time: 34.527459 msecs\"\n\"Elapsed time: 34.381777 msecs\"\n\"Elapsed time: 35.217125 msecs\"\n\"Elapsed time: 34.771945 msecs\"\n\"Elapsed time: 40.187299 msecs\"\n\"Elapsed time: 34.952462 msecs\"\n\"Elapsed time: 35.637608 msecs\"\n\"Elapsed time: 34.520076 msecs\"\n\"Elapsed time: 35.482058 msecs\"\n\"Elapsed time: 34.636292 msecs\"\n\"Elapsed time: 35.011732 msecs\"\n\"Elapsed time: 35.886221 msecs\"\n```\nyou can see pretty well where the jit and proper memory management seem to kick in :slightly_smiling_face:\nOk. Thanks for info. Let's hope that patch will fix this issue some day. :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "16",
    "text": "IIRC, this is related to <https://dev.clojure.org/jira/browse/CLJ-2343>, and would be fixed if that patch was applied\nNicola would know for sure\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "17",
    "text": "went and upvoted the issue, since I happened to stumble on genclassing lately too\nmore upvotes might help :slightly_smiling_face:\nI signed in to Clojure JIRA and upvoted as well. :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "18",
    "text": "could anyone provide some pointers on a macro I\u2019m trying to write? I want a function or macro that I can call with a map of let bindings (symbols to values) and then execute some form in the body of that let. I have it working for some cases but not all.\nNone\nreally? :disappointed:\nyes\nyou are trying to build a structure at compile time that depends on a value at runtime\n<@Celestine> I am most definitely running `deftest`; I just tried it again after clearing the cache :thinking_face:\nhm is there no way to achieve the same goal? eval some code with different values for particular symbols as supplied by some map?\nyou're existing implementation is also broken for the case were it \"works\" because it ends up double evaling\nwhat you are describing is a function\ncode parameterized by different arguments\nlol. yeah in abstract I guess. in this case I\u2019m taking code as input and want to replace the meaning of some things using data. Should I just be walking the form and making replacements instead of trying to keep the same symbols but assign different values than what they\u2019d otherwise resolve to?\nI guess maybe that\u2019s better\nWhat is the rest of the stack trace?\n<https://github.com/ztellman/riddley> is a library that might be helpful (I've never used it, I would be more inclined to write an interpreter for a dsl then to try and transform clojure expressions and call eval on them)\n<@Celestine> <https://gist.github.com/hmaurer/447392ac3ddee94250d26f580f6c7310>\nthanks, I\u2019ll take a look\nperhaps the fact that I am using kaocha as a test runner is the issue :thinking_face:\nnah it\u2019s not; I am getting the same error with vanilla `lein test`\n<@Celestine> problem solved in the end; it was an issue with `lein test` monkey-patching `clojure.test` :face_with_rolling_eyes:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "19",
    "text": "you cannot do that in the general case\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "20",
    "text": "There is a lot of machinery in that stack trace beyond `clojure.test` and I see you're also using `respeced.test$successful_QMARK_.invokeStatic (test.cljc:104)` which seems to be what is actually leading to the error here...\nOuch!\nIt's not compatible with `respeced`?\n<@Celestine> <https://dev.clojure.org/jira/browse/TCHECK-113> if you are interested (thanks to <@Clarine> for finding this). The issue is tangential to `respeced`.\nAlso `test.check v0.10.0-alpha3` doesn\u2019t seem to have the issue\nrespeced has nothing to do with it, it\u2019s a clojure.test.check + lein issue\nah yes, tangential wasn\u2019t the right choice of word; I meant they were unrelated :slightly_smiling_face:\nwell, they are related, so I get it. but the problem is really with lein\u2019s monkey patching I guess\n<@Clarine> Cool. Was just curious when I saw it in the stacktrace -- I hadn't looked at the code.\n<@Clarine> do you use `test.check` v`0.10.0` yourself?\nno, but I haven\u2019t used lein for testing for a long while\nLein's monkey-patching has caused problems with other tooling in the past (and, lately, `~/.lein/profiles.clj` seems to be the bane of every beginner's life).\n(also haven't used Leiningen for a long time -- switched to Boot three years ago and switched to `clj`/`deps.edn` this year)\nI\u2019m going along the same path. For work we\u2019re using boot still, but for newer personal projects I tend to choose TADA\nWe were very heavy Boot users until this year. We just started having too many problems with it :disappointed:\nbeing able to use git and local deps really makes a difference\nwe don\u2019t have many problems with it at work, so no need to migrate for now.\n<@Celestine> I wanted to use Boot but there was a nice template project for Fulcro + shadow-cljs with lein\n<@Celestine> what do you use now? deps.edn?\nSee 14 minutes ago in this thread :slightly_smiling_face: \"(also haven't used Leiningen for a long time -- switched to Boot three years ago and switched to clj/deps.edn this year)\"\nSo we run tests with Cognitect's `test-runner`\nI use that one also, if I\u2019m not using my own test runner script.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "21",
    "text": "<@Vita> if you're taking code as input at runtime, I think that's basically the definition of what `eval` is for\nif the code has unbound locals, which I _think_ is what you're describing, I've used a trick to wrap it in a function that takes the named arguments you want to supply\n\ne.g.,\n```\n(eval `(fn [{:keys [~@some-arg-names]}] ~the-expression-with-unbound-locals))\n```\nthen you can call that function with a map\nooh\nI think that would do the trick. thanks for the idea!\nshould\u2019ve known I was trying to do too much in one macro + eval instead of just using a function lol\nthanks <@Ferne> that allowed me to do what I was trying to.\nI\u2019m not actually trying to rebind merge to inc.. just an example. lol\nthough a \u201cguess what function I replaced your original function with\u201d game sounds fun\nNice\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "22",
    "text": "Is there something like <https://github.com/lightyear/sql-logging#options> but for Clojure?\n\ntldr it aides you see if you have costly SQL being emitted, and actually points out the culprit LOC\nOn second thoughts, probably this library wouldn't make _that_ much sense in Clojure, given \"magical\" ORMs aren't the norm here... so emitted SQL should have no surprises\n\n...but still I can see myself using some simple metrics, e.g. query _x_ took 30ms\n<@Mariela> I believe there are Java libraries that can act as a proxy for the actual JDBC driver and provide that sort of statistical logging.\nthanks! will look into it\n<https://github.com/ttddyy/datasource-proxy>\n<@Mariela> you can always just hook the function yourself too if you can find the place you want to instrument\nUser guide <http://ttddyy.github.io/datasource-proxy/docs/current/user-guide/index.html>\nFantastic. TIL :slightly_smiling_face:\nHandy, thanks! :beers:\nIf you have any problems integrating it with `clojure.java.jdbc`, ping me in the <#C1Q164V29|sql> channel and I'll see if I can help.\nnp! and if you want to see what code led to it you could create an exception and parse the stack trace (or I think later versions of java have mechanisms to reflect on the stack without making exceptions). Obviously this solution has potential issues with laziness or the arguments not containing the info you want, but it\u2019s often a quick easy option for local dev and can be applied to almost any clojure library.\nGot it, good call!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "23",
    "text": "OMG!\nI thought that the REPL compiles the same way how it would be compiled to a JAR. I don't get it...\nBut thank you so much! I honestly would  never have believed that such great differences possibly could exist between repl and jar!! :+1::heart:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "24",
    "text": "why does `(read-string \"07\")` return `7`, but `(read-string \"08\")` throws an exception?\na leading zero often means that the following number is octal\n8 however, is not a valid literal in octal\n`(read-string \"010\")` is also 8 (base 10) instead of the 10 (base 10) you would have expected\nWHY they decided to have `0` be the prefix for octal instead of `0o` is beyond me. As the hex/binary prefix is `0x` and `0b` respectively\u2026\nYay Java. I remember that one hitting me way back when I was doing Java for my degree...\nYeah, but, \u201cbecause language X did it\u201d is not a technically sound argument IMO :wink:\nAt some point, someone needs to decide that that is crazy, and throw it out of (newer) languages\nWas there ever an A?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "25",
    "text": "thx\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "26",
    "text": "Because everything dating back to C did it. Technically back to B, C's predecessor. B's predecessor BCPL used # for octal but B used that as an operator. So leading 0 means octal in almost every language out there today. \nOctal was much more common back in the day. I worked with octal a lot. Then later \"graduated\" to hex. So those early conventions were very strong for a generation of programmers, maybe even two generations. And those were the folks that designed and built all the languages we use today. \nRight, it makes sense. But endlessly sticking with the convensions of your predecessors ends up with situations where newer developers wonder why a leading zero changes `read-string` to a base that is hardly used anymore.\nBCPL -&gt; B -&gt; C. There could have been a P but instead we got C++ and D. Although we did also get PL/1. Programmers are such wits :upside_down_face:\nSince BCPL was influenced by CPL which in turn was influenced by ALGOL 60, I guess you could say A was ALGOL? :grinning:\nI wonder if I'm the only one here who has programmed in BCPL and ALGOL 60? :confused:\nI did C and Java at Uni. Nothing older than that\nI played with ASM a bit, I think that\u2019s the oldest language I\u2019ve worked with.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "27",
    "text": "if i have an input array of strings, and i want to pick those that are also in a predefined set of valid strings, is it better to use `(filter #{\"valid1\" \"valid\",,,} input)` or some other way?\nI think with the set is quite elegant\n`def` the set of accepted strings somewhere, or make a predicate `is-allowed-string?` I guess\nyeah that's the plan. i was wondering if for example `set/intersection` would be a better choice?\n(Fun fact, Rust, which is a relatively young language, chose to adopt `0o` for its octal syntax)\nthe result would need to be all unique too, so i'd need to fit a `distinct` in there\nintersection would work too if your input is a set\nit isn't\n(remember, all set operations are explicitly undefined for non-sets)\ni'd need to cast the input to set, making me again wonder if that's faster or running `distinct` on it\ntest it ^^\nBenchmark it with criterium\ntiming it now\nUnless performance is a bottleneck, pick the appropriate semantics.\ni.e, if order doesn't matter and you don't care about duplicates\nuse clojure.set/intersection\nin the normal case it isn't (as only 3-4 elements should be in the input), but i'd rather not accidentally create an attack vector\nelse (filter #{\"input1\" \"input2\" ...} input)\n`distinct` has an \u2026 interesting implementation\nthis is interesting\n```\nuser=&gt; (time (-&gt;&gt; input distinct (filter valid)))\n\"Elapsed time: 0.229339 msecs\"\n\nuser=&gt; (time (-&gt;&gt; input distinct (filter valid) sort))\n\"Elapsed time: 0.581802 msecs\"\n\nuser=&gt; (time (set/intersection valid (set input)))\n\"Elapsed time: 0.219935 msecs\"\n\nuser=&gt;   (time (sort (set/intersection valid (set input))))\n\"Elapsed time: 0.199401 msecs\"\n```\nwhy is sort so slow? the resulting filtered collection in the second case is only 4 elements, why is it taking such a toll?\nyou have to be careful on some of those - filter is lazy and you aren\u2019t forcing realization\nso the first timing isn\u2019t doing the filter at all\nall of the other ops here are eager so will force realization\ntiming a single instance of any of these is also likely meaningless\nwill into serve that purpose?\ndoall would work\nbut really you should time 1000s of instances of these ops to compare\nlike `(dotimes [i 5] (time (dotimes [i 1000] (-&gt;&gt; input distinct (filter valid) sort))))`\nthe outer loop is 5 trials, the inner loop is 1000 reps per trial\nyou\u2019ll usually notice it gets faster as the jit warms up\ncritierium is a fancier version of this\ni see\nthanks for the advice!\nusing sets seems to be significantly faster\nlike 3-4 times\nhah, I did not expect that. I expected converting to a set to be a pricey operation\ni tried generating the input randomly so the jvm would sweat a little\n```\nuser=&gt; (time (dotimes [m 10000] (-&gt;&gt; (input) distinct (filter valid) sort)))\n\"Elapsed time: 693.849881 msecs\"\nuser=&gt; (time (dotimes [m 10000] (sort (set/intersection valid (set (input))))))\n\"Elapsed time: 279.379693 msecs\"\n```\ni didn't expect this big a difference\nmoving `distinct` after the `filter` makes it a little faster but still twice as slow\ntry making it a set in the first one, i wonder if that'll speed it up at all\nusing `set` instead of `distinct` made it 2-3 times faster\nno, i need it to be distinct so it's perfect\n```\nuser=&gt; (time (dotimes [m 10000] (-&gt;&gt; (input) set (filter valid) sort)))\n\"Elapsed time: 272.51252 msecs\"\nuser=&gt; (time (dotimes [m 10000] (-&gt;&gt; (input) set (set/intersection valid) sort)))\n\"Elapsed time: 271.146103 msecs\"\n```\nbasically no difference\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "28",
    "text": "input being a list?\nsure did.\ni suspect using the filter set predicate is using some sort of set-based stuff under the hood that makes comparisons to other sets much faster than comparing against a list\nthe only issue is if your input has duplicates\nand you need them for some reason\n<@Tressa> Just FYI, `(time (dotimes ..))` doesn't always give you accurate benchmarks -- check out criterium for a better approach.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "29",
    "text": "(uh-oh, is Alex going to correct me?)\nwith a big enough N and enough sample points, dotimes is sufficient, imo\nSo obviously people are not \"endlessly\" sticking with conventions of predecessors?\nUsing `0o`, `0b`, `0x` as prefixes is certainly more consistent.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "30",
    "text": "Haha, you are right andy. I actually made my statement before looking up whether newer gen languages would have adapted. As often, Rust serves as a positive surprise\nSwift also goes for `0o` whereas Go goes for the traditional `0`. Interesting\nAnd criterium is the agreed definition of \"a big enough N and enough sample points\" !\nthe fact that it loudly warns you if JIT is turned off is also a bonus\ngenerally this is much faster than using criterium\nI also don\u2019t find that usually the gc stuff in criterium is worth much\nand if you don\u2019t use leiningen you never run into the jit thing :)\nI made this a while ago for that purpose: <https://github.com/RutledgePaulV/clj-embed> I keep meaning to come back and update it a bit. If you end up using it let me know and I\u2019ll bring it up to date and cut a new release\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "31",
    "text": "I find the benefit of NOT using criterium is that you can see when the jit is sufficiently warm when the sample stabilize\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "32",
    "text": "Does anyone know of a good way to \"sandbox\" the loading of namespaces?\nI'm trying to find a way to load and evaluate a namespace from an external source without interfering with the bindings in my current Clojure process' instance of the same namespace.\n<@Kirby> Perhaps look at the `clojail` project?\nThat will also make it safe to load and run that code (or at least _safer_) since it's coming from an external source...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "33",
    "text": "There is a mranderson library that can create a \"shadowed\" version of a namespace, meaning renamed.  I have not used it myself, but I know some other libraries have used it: <https://github.com/benedekfazekas/mranderson>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "34",
    "text": "Does anyone have an example of deploying a clojure library to clojars from gitlab-ci?\nIs leading `0o` used for anything *else*? It would be nice if we could see older languages adopting that pattern too. At least then if `0o` and `0` both represented octal people could start writing code where it was clearer that a number was intended to be octal\nI would say that alternatives in syntax are actually worse than having inconsistent, but only one, syntax\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "35",
    "text": "in for answer\n;\nIs there any syntax that will help me include a specific key/val in a map depending on clojure/clojurescript target?\nI know of `#?(:clj)`, but usable inside a map form\nI can wrap the whole thing in assoc of course, but still\ncan you use the splicing reader conditional?\nI guess not\ncould use a cond-&gt; whose test is a reader conditional\n`(cond-&gt; { \u2026 } #?(:clj true :cljs false) (assoc :clj-only :foo))`\n<@Jasmine> Thanks, splicing reader was what I was looking for.\ndid the splicing reader work for you?\nand for map\n`{#?@(:clj [:key :val])}`\nI\u2019m a little surprised that works but I guess it makes sense\nA happy accident?\nit wouldn\u2019t surprise me if that gives trouble to other tools with their own lexers\nInteresting syntax tho, `#?@(...)`\nas it looks like a map with an odd number of elements until it\u2019s read\nwould that break edn reading of a file with those forms?\nedn doesn\u2019t have reader conditionals\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "36",
    "text": "Does anyone know how to configure the built-in MacOS firewall to permanently accept incoming connections? I've added the version of java to the firewall but I'm stick stuck clicking \"allow\" each time I restart the server.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "37",
    "text": "Thanks guys!  I had seen mranderson from where refactor-nrepl uses it to deal with this problem, but that solution seems a little more finicky than I was hoping for.\nclj-embed looks cool!  The classloader solution-route was what I was hoping to find examples for.\nIn the short term, I think I will forgo the namespace isolation requirement in my project, in order to focus on exercising the other aspects of the project.  Later, I'll plan on attempting to incorporate clj-embed. So no hurry <@Vita>, but thank you.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "38",
    "text": "Is there any way to determine in custom macro whether passed symbol is macro or function?\nmy test is `(:macro (meta (var loop)))`\nof course this doesn't work here\n```\n(defmacro is-macro? [sym]\n  (let [m? (:macro (meta (var sym)))]\n    `~m?))\n```\nis there any way to resolve `sym` within a macro?\n`resolve`?\n(Note that you can't resolve vars in Clojurescript macros.)\nit's in Clojure\nworks! thanks a lot\njust for curiosity can you explain why you need to know?\nExcept at compile-time, depending on... things\nI banged on this until it worked. It might not work in all situations though <https://github.com/johnmn3/dispacio/blob/master/src/dispacio/alpha/core.cljc#L156>\nInteresting, thanks!! Earlier I couldn't figure out a way to do it, and just found a way to avoid the need for it, but I'll hang on to this for future reference.\nI have math functions and some of them are expressed as macros (java calls) and some of them are clj functions. I want to wrap such macros into functions (and avoid wrapping functions) to generate rest of the code.\nIt doesn't work in most ways, you're right. There's just certain situations where you can get it to work.\nso my macro checks symbol and generated function or leave symbol unwrapped ```(if (:macro (meta (resolve f))) `(fn [v#] (~f v#)) f)``` which is used in final generated code\nAnd I don't understand the interplay well enough to explain when it does or doesn't. But it works there :slightly_smiling_face:\nCould come in handy.\none possible gotcha is if you get a function literal instead of a symbol bound to an fn\n\"cannot embed object in bytecode\" is the error message IIRC\nfortunately I operate on symbols here, it's a private macro and should be ok in my case\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "39",
    "text": "None\ngot some... fun recursion\nWhy recur with objs in one tail, and sorted-objs in another, when both are the same value?\noh I see, there's a path where you want to use sorted-objs, even as objs got rebound, I get it now\nyeah, the fact that it is confusing is my reason for posting\nhad a hope someone would have insight on how to simplify it\nmaybe there's a way to turn the path that recurs with `rest` into a normal reduce, and the one that recurs with sorted-objs into a recur on the enclosing fn?\njust a thought\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "40",
    "text": "Weird request, but working on a perf improvement to something and want to provide a realistic benchmark on public data. Tried randomly generating data, but issue is time is dominated by things that are artifacts of random data you wouldn't see in practice (for instance, all keywords are distinct and very long). I don't want to try to generate \"realsitic data since that seems bad and want to know if someone has some large public batch of EDN data laying around that might be 'representative' of real-world data, or even better something someone's used to benchmark before\nmbrainz?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "41",
    "text": "Is there something like <https://github.com/NoRedInk/rspec-retry> for clojure.test?\nTo refresh specific tests, or refresh in general?\nTo re-run a test that is failing, operating under the assumption that the test is flaky\ntest-refresh?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "42",
    "text": "Ah, none that I'm aware of then\nhave used it in the past. I don't recall that it re-reruns failed tests speculatively\n&gt; Runs previously failing tests first, giving you feedback even quicker.\noh speculatively, yeah i don't know about that\n<@Harmony> in addition to the official datomic docs, this might be helpful summary <http://tonsky.me/blog/unofficial-guide-to-datomic-internals/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "43",
    "text": "how to get a hash of a data structure in Clojure?\n`(hash datastructure)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "44",
    "text": "reminds me my question from yesterday: how to resolve a symbol in a macro? answer: `(resolve s)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "45",
    "text": "Hello! I'm new here, I posted this message in <#C053AK3F9|beginners> but I think it's not the best place... here it goes:\nWe are working on a project were Datomic is being used. We want to analyze de data using ML alorightms (we are data analyst). The thing is we don't event know where to start from!! Could someone point me in any direction?\nIt's basically a stream of datoms, which you can just use like data however you want\nthx John, I'll check it now :slightly_smiling_face: I'm sure I'll find interesting things there\nSlice up history using `as-of` and `since` <https://docs.datomic.com/on-prem/filters.html>\nThere's more convo about it over in <#C03RZMDSH|datomic> def ask around in there too\n<@Harmony> are you already familiar with datalog?\nIf you aren't: <http://www.learndatalogtoday.org/>\n(uses Datomic)\nI've read the documentation about it, but I haven't use it. So I wouldnt say Iam \"familiar\"\nanyway,my question was more related to arquitecture\nfor example, can I somehow connect Spark to Datomic?\nthx <@Stasia>\nI've seen that there's a way to connect python to datomic with the pydatomic library, which access datomic DBMS via the REST API\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "46",
    "text": "`defrecord` can't catch closure? ```(let [x 3] (defrecord Foo [] IFoo (foo [this] x)))```\nno\n`reify` can be used to create instances of an interface that close over state\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "47",
    "text": "Is there a way to run a clojure -main from outside the project dir like?\n```cd ~/Projects\nclj --dir ~/Projects/find-git-files -m find-git-files.cmdline ./```\nis there a native way to deploy an `uberjar` with `lein` ? I am trying to do this using a CI Server with `lein` installed on it.\nI think I figured it out, I can use the -Sdeps flag pointing to the repo to include it in the classpath\n```clj -Sdeps \"{:deps {find-git-remotes {:local/root \\\"./find-git-remotes\\\"}}}\" -m find-git-remotes``` seems to be working but I\u2019m curious if there\u2019s a cleaner way to do that.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "48",
    "text": "Struggling with lein's uberjar feature, I'm confused why we're not making this not easier for people\nHere's my summary:\n\n- most of the time AOT compilation is not desirable\n- ns-level forms are executed during AOT compilation, which is confusing\n- the only reason why most people use AOT is to set the entry point for the uberjar so that you can `java -jar uberjar.jar` instead of the - often superior - `java -cp uberjar.jar -m foo.main`\nThe whole situation confuses people:\n\n- people don't understand how gen-class works or why it's necessary\n- leiningen warns and unnecessarily suggests that you should set `:aot :all` - which doesn't seem like a good default to me\n- if you specify `:aot [foo.main]` explicitly, that works but due to a bug in lein it compiles the ns twice if you also set `:main foo.main` <https://github.com/technomancy/leiningen/issues/2521>\nReally all you want is to generate a class that does the equivalent of these two lines: <https://github.com/pesterhazy/lein-aot-example/blob/master/src/foo/main.clj#L7-L8>\nAIUI most projects will be better off doing that than AOT'ing everything\n... given that the Clojure compiler is very fast, it doesn't blur the line between compile time and run time and other issues with AOT'ing\nIs there something I'm missing here?\nCan you deploy an uberjar with `lein deploy` ?\nyou shouldn\u2019t, at least not in public repos\nI think there's also a perception that AOT helps with startup time\n<@Meagan> I mean it'll be faster because the compile step isn't needed but is there any advantage to aot'ing other than that?\n \u00af\\_(\u30c4)_/\u00af\nif you\u2019re deploying an application: AOT is fine. library: don\u2019t AOT\nyes, it helps with startup time significantly\n<https://clojure.org/reference/compilation>\nis the bible on it, not whatever lein says\n<@Marlyn> that distinction between lib and app code is useful, thanks\nlein uberjar generally does _both_ `tar` and AOT\nby default `lein uberjar` doesn't aot, unless you specify `:main` or `:aot` AFAIK\nWrote this tiny cli tool to update git remotes in all of my projects. However, since I need to write to the file I\u2019m reading I have to read all the lines of each config file into a seq, process them, then write to the file, move to next file. Is there a way to make that more efficient so I don\u2019t need to load an entire config into memory at once like in line #23?\n<@Marlyn> also thanks for providing the link to the justification for aot'ing. Part of the problem is that leiningen is undocumented, except for the sample project.clj\na better default for lein, I think, would be to do the moral equivalent of `lein run` in the uberjar\nthen users would be able to enable aot'ing as necessary, irrespective of whether they're building an uberjar or not\nas it is, lein unnecessarily complects aot'ing and creating uberjars\nthat is not true\nugh\nit is, that must have changed at some point\nugh, five years ago\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "49",
    "text": "Oops! Too much context. Boiled the question down and asked in beginners channel where it more likely belongs :slightly_smiling_face:\nI figured out how to deploy an uberjar `lein do uberjar, deploy [release-repo] [identifer] [version] path/to/uberjar, deploy [release-repo]`\n<@Yen> does the last step do anything?\nis that if you want to deploy both a jar and an uberjar?\n<@Dann>, Yeah I should have specified that. I wanted to deploy both a jar and an uberjar. I knew how to deploy a jar but not an uberjar.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "50",
    "text": "<@Harmony> the REST API is legacy now, see <https://docs.datomic.com/on-prem/rest.html> , it's replaced by the Client API\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "51",
    "text": "hmm I noticed that pulling in git dependencies from a deps.edn is not possible when pulling over ssh with an ed25519 keypair. I know thats a limitation of the JGit library (<https://bugs.eclipse.org/bugs/show_bug.cgi?id=520927>), but shouldn\u2019t that be something that is worth documenting in tools.gitlib\u2019s readme?\nOr is there some workaround I am missing\nit\u2019s annoying but make sure you use an ssh agent <@Tammera>\nexport SSH_AUTH_SOCK=\u2026path to your agent socket\nyou also may have to modify entries within .ssh/config \u2014 specifically remove IdentityFile and let your ssh-agent be smart about it\nRight, but only the ed25519 public key is known to GH right.\nHmm maybe I have multiple issues at the same time :\u2019), eyeballing <https://dev.clojure.org/jira/browse/TDEPS-91>\nyes, that\u2019s a separate issue\nI believe it\u2019s probably something you can get around by editing your ~/.ssh/known_hosts, but certainly not the best\nI\u2019d like to make the switch to just using git but I need to strategize how to best do that without breaking lots of people\nright, because that would need git to be explicitly installed right\nas in the C binaries + all other git fluff\n<@Jasmine> Maybe attempt to shell out to `git` and fallback to jgit if that fails?\nwell I\u2019m thinking that we would maybe initially ship with support for both and have some way for user to override\nbut default logic would probably be git falling back to jgit (as I\u2019d like to eventually remove jgit entirely)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "52",
    "text": "Hey, all. I'm using deps.edn and building my project on Gitlab. It takes ages because it pulls the clojars deps everytime. How can I find out where on the filesystem those deps end up so that I can cache them?\nI was expecting it to be ~/.m2, but that seems not to be the case...\nare all your dependencies maven artifacts? those should all end up in m2\nany git dependencies will be in ~/.gitlibs\nbut if you are downloading stuff from clojars, then it should end up in ~/.m2 then I would double check your build environment, you building in a container or something and getting a fresh ~/.m2 everytime, etc\nCheers, will dig more.\n<@Venice> it seems that `.m2` is the location they use by default: <https://gitlab.com/gitlab-org/gitlab-ce/blob/master/lib/gitlab/ci/templates/Maven.gitlab-ci.yml> and caching the dir `.m2/repository` should work\n<@Clarine> Thanks, I've actually seen that before, it didn't seem to work for me.\nI'll just do a find and bruteforce my way to finding out where they are.\nno need to brute force.\nwrite the output of find to a file. Then run find again after into a different file.\nthen do:\n`vim -d file1 file2` to see the difference between the two :slightly_smiling_face:\nYea, well, that's really what I mean by bruteforce.\n<@Venice> you can also run `clojure -Spath`\n<@Clarine> perfect!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "53",
    "text": "Is this a bug?\nno\ntype returns a instance of java.lang.Class\nclojure.lang.Keyword is a symbol (that evaluates to a java.lang.Class object) and case test-constants are not evaluated\n`case` only works with compile time literals. Try `condp =` instead\n<https://puredanger.github.io/tech.puredanger.com/2010/05/30/learning-clojure-15-case/>\nthank you very much:)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "54",
    "text": "When writing websites, is it recommended to stick to standard HTML? Writing with a DSL such as Hiccup seems powerful, but I'm wondering about how I should handle CSS/Javascript then.\nFor css you might try <https://github.com/noprompt/garden> if you are looking for a DSL similar to hiccup.\nAdditionally because hiccup emits HTML, you can just write plain css or js to accompany it and link those resources as you would normally. Otherwise, <#C0FQERS0H|garden> and <#C03S1L9DN|clojurescript> are the likely recommendations you will see if you plan on using hiccup to serve templated HTML.\nThat makes sense.\n<@Gilda> is it kosher to have both clojurescript + clojure in same project? I'm using ring + compojure for the backend.\nThanks for help btw.\nIt's perfectly alright to have both clojure and clojurescript in the same project. In fact, clojure supports reader conditionals <https://clojure.org/guides/reader_conditionals> to maximize code sharing between the two. Many fullstack applications have a considerable amount of code written in .cljc files in order to facilitate this.\nIf you are using leiningen you might take a look at <https://github.com/emezeske/lein-cljsbuild> for getting started.\nWill lein-cljsbuild work with lein-repl?\nCurrently I run lein repl :headless and then connect with cider in emacs.\nTo reset the state of the webserver I run (mount/start)\n<@Tonya> I created CHP because it is better to use hiccup instead of HTML <https://bitbucket.org/sonwh98/chp/src/master/>\n<@Karena> <@Rosaline> case is different in Clojure and ClojureScript. Clojure case does not evaluate the stanza handles. CLJS does.\ncljs also doesn't have clojure.lang.Keyword\noh\nwell the trivia is the point\ncase is like the millionth place where clojure and cljs diverge, and if you complain about someone will popup and say \"oh, its just an edge case\"\n<https://dev.clojure.org/jira/browse/CLJS-2102>\n\"As discussed in that thread we're not re-breaking a thing we broke 2 years ago. It's simply not that important and far too late.\"\nHey that Jira issue has a link to a Google Group thread that I started!\nAnyway opinions differ as to whether Clojure's case is the broken one.\nthat is nonsense\nclojure's case behaves the way it does because it has to. case provides constant time dispatch, in order to compute the jump table it has to have the values on hand, which in the general case means they have to be unevaluated constants\nClojureScript\u2019s `case` is constant-time as well.\n(For most uses.)\nhilariously the non-constant time cases are the cases where its semantics match clojure's, if I recall\noh right, that is exactly what the ticket I linked is for\nthe cond fallback the clojurescript macro uses treats symbols differently then the constant time dispatch part\nYeah, there\u2019s also the unfortunate handling of const vars <http://blog.fikesfarm.com/posts/2015-06-15-clojurescript-case-constants.html>\nbasically clojurescript's case was implemented by someone who didn't entirely understand case, and now it is enshrined forever as an asterisk on any discussion of clojurescript / clojure portability\nRight. A similar thing happened with `binding` (the parallel aspect) but that was fixed.\nIt feels like we are down to this hastening only once or twice a year now (where a mistaken difference is discovered and a decision needs to be taken on whether to fix it).\nAnother recent one sitting there is the handling of empty regex s, but those differ anyway\nI just remember arguing with dnolen on irc way back because he insisted that clojurescript just be referred to as clojure, and clearly there are differences enough that the distinction must be made\nHah, yeah. The same concept arises with self-hosted ClojureScript. Ideally you could just pretend it is the same language, but perhaps it is another (albeit close) dialect\nclojure, clojure', clojure'', ...\nYep. Three targets.\n0h forgot about CLR\nCLR is the most compatible with the JVM version\nwho works on that version these days?\n<https://github.com/clojure/clojure-clr/graphs/contributors>\nDavid Miller\nif CLR wasn't a microsoft project and there was a tool like lein for clojure-clr, I bet Clojure-CLR would see a lot more use\nwow. that is a ton of work. and largely thankless i suppose\nI thought I read somewhere that, back in the day, you would upgrade from one version of Lisp to another by running your source through some Lisp designed to translate :)\n<@Becki> from what I gather the similarities between CLR / JVM and C# / Java mean it's not as bad as you might think\nYou could have like Swift 1, Swift 2, Swift 3, or whatever it is up to now\ni like everything about C# except how tied to windows it was when i used it. winforms, etc, visual studio, etc\nhaven't followed along with the core stuff.\nthere is a very interesting paper somewhere about doing that with sbcl\nmono is usable, but I think MS' reputation still holds CLR back\nit is kind of tricky to think about and do in a clean away\nbecause it is very easy to confuse the source and the target language when you are using the same language and are generating an in memory image to dump to disk\nWell we could have a spec for Clojure, confirm the code, and then unform it to a spec for Clojure2\nGah\ndoesn't elm kinda do this when they do compiler upgrades? you can run something over your code to get the mechanical stuff\n<https://pdfs.semanticscholar.org/98bf/0466dcb0712d2082a7b02d8773bb744ea626.pdf> \"SBCL: a Sanely-Bootstrappable Common Lisp\"\nOh wow :open_mouth: gotta read that \njust downloaded that. thanks!\nI mean, porting Clojure to other platforms is tricky both because Clojure leaves some semantics up to Java, adopts some weirdnesses because of Java, and also lacks a formal spec or a cross target test suite.\nMaybe it is a bit like Unix / C, with just the right amount of looseness at the bottom to let it spread easily.\nIn 2026 we will be coding to the CLOJIX standard.\njust don't forget to run ./configure before you build\nand google how the hell to run autotools and then run them before running configure\nthat paper describes kinda self hosted cljs right? it grabs a js environment, feeds it enough info to become a cljs environment and then compiles the cljs compiler?\nno\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "55",
    "text": "Can anyone here point me to any documentation on the meaning of ::keys for destructuring?\nNotice the second colon.\nI am reading code that uses this and I don't understand how it works.\n<@Maynard> that is called a \u201cnamespaced keyword\u201d: <https://clojure.org/reference/reader#_literals>\nbasically, `::foo` expands to `:the-namespace-your-are-in/foo`\nOk, I know the difference now via some experimentation. I just thought it weird I could not find any documentation. I did find this: <https://clojureverse.org/t/poll-destructuring-namespaced-keywords/1388/5>\nThanks <@Ellyn>\nofficial docs on it are here: <https://clojure.org/guides/destructuring#_namespaced_keywords>\nthough that page still doesn't mention \"::keys\"\nThe meaning is sort of obvious I guess once you try it out.\nso `(pop [])` errors, but `(peek [])` and `(pop nil)` just work\u2026 what\u2019s the reasoning behind that?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "56",
    "text": "hello friends,\n\nQuestion about concurrency: if i have two http requests (ring) coming in, in quick succession, I want to make sure that the first one can do some work, and block the second request for a little bit, and after the first request is done, the other can continue (it\u2019s ok if the 2nd one takes a few milliseconds longer to succeed)\n\nHow should I go about this? I started out with a global `atom`, for simplicity let\u2019s say it\u2019s a boolean `busy?` which is `true` when it\u2019s busy, and `false` otherwise\n\nbut how to \u2018wait\u2019 for the atom? I could of course make a spinning loop but that feels very dirty.\n\nWhich construct from clojure would be suitable?\nmore context: I am integrating with an oauth2 API, which requires me to refresh access tokens\nthe refreshing is done in a ring middleware\nbut if two calls to this api follow each other up quite quickly (which could happen) for the same user\nand the first one is busy refreshing the token via a HTTP POST  call to the external API\nthen the second one will fail because the external api says: \u2018you are using an outdated token\u2019\nI think you're setting yourself up for a world of hurt trying to block that.\nyou could use `locking` if the user\u2019s token is refreshing\naah thanks\nbut I\u2019m not sure if that\u2019s a good idea\n<@Venice> why so?\nI'd say just let them receive the 401 and do the refresh dance.\nit would be better to make it idempotent. so a second refresh just gets you the same token as the first refresh\nyou could make a local atom keeping the tokens and return the same token if it\u2019s still valid\nah yea so move the problem to my clojurescript client\nI mean, cache the tokens server side. the refresh function goes through the cache\nYea, basically, catch the \"invalid token\" message at the clojurescript, do the dance to refresh it with the refresh token, then continue with whatever it was the client was actually requesting.\nah yeah ok\nAvoid trying to do clever things with locking though, I bet it's a total minefield.\nyeah\nI agree\none idea i also have, come to think of it, is to just retry. catch the refresh token outdated exception server-side, re-look in the database (which has a new token in a very short while) and retry\nok but i can work from here\nthanks, i hoped there was some construct that did this for me, so that I came to check here.\nthanks\nI'm assuming you know about <https://github.com/funcool/buddy> ?\nyeah\nhow would that help? i \u2019m integrating with an external api here that i don\u2019t control\nbut i just realize the simple solution is staring me in the face:\n- catch the \u2018outdated token\u2019 refresh action, and just proceed; there must \u2019ve been a previous request which done that\n<@Kristine> I have a similar construct with futures. I\u2019m getting some data from a future and keep those futures in an atom. It doesn\u2019t matter if the future is already realized or still running. If there is already a future, I just wait for that one. If there isn\u2019t one, I create one.\nah yeah\nif the future is not valid anymore, I remove or cancel it\nyeah\ngotcha\nDecided to \u2018keep it simple\u2019. If the refresh failed due to outdated token (ie. race condition), wait 200ms, assume by now the new tokens are stored in the database by the previous request, re-fetch those (they should be valid anyway, since validity is 10minutes), and proceed the handler.\nthe only thing is the thread/sleep\u2026 but at least it\u2019s very clear what\u2019s happening. Not sure if this gives lots of problem when i have a gazillion concurrent users doing things like this, but I\u2019ll come back here when that happens :wink:\nas an aside: again realizing the middleware pattern is awesome. the business logic ring handlers are now simplified so much.\nhere\u2019s a non-blocking way to do it: a function called `is-about-to-expire` and an atom `is-updating`, then in your request have something like this:\n```\n(if (and (is-about-to-expire token) (compare-and-set! is-updating false true))\n  (try\n    (swap! token-atom (get-new-token)))\n    (finally\n      (reset! is-updating false)))\n```\nthat means the first thread that sees that the token is about to expire will fetch a new one, but since the old one hasn\u2019t expired yet everyone can keep making requests\nWhat does a la carte mean? Im having trouble trying to find a good definition on google.\nit\u2019s a restaurant term, it means that you can pick and choose what dishes you want instead of getting a pre-composed menu\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "57",
    "text": "why not make one endpoint for it, that synchronizes the work?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "58",
    "text": "when the refresh has happened, the old token is atomically replaced with the new one\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "59",
    "text": "How do deftest and spec differ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "60",
    "text": "Does anybody know if there are performance improvements or other good or bad side effects in moving from openjdk 8 to 11?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "61",
    "text": "Hi! I'm doing a library that provides optional functionality that depends on `clojure.core.cache`. But since this is optional functionality, I don't want to introduce dependency on `core.cache`, and thinking how can I make this dependency a \"soft\" one. Initially I tried using own protocol similar to `core.cache` and extend it to `core.cache`'s one if it exists like that:\n```\n(when (try\n        (require 'clojure.core.cache)\n        true\n        (catch Exception _\n          false))\n  (extend-protocol Cache\n    (:on-interface clojure.core.cache/CacheProtocol)\n    (lookup [this k]\n      (clojure.core.cache/lookup this k))\n    (has? [this k]\n      (clojure.core.cache/has? this k))\n    (hit [this k]\n      (clojure.core.cache/hit this k))\n    (miss [this k v]\n      (clojure.core.cache/miss this k v))\n    (evict [this k]\n      (clojure.core.cache/evict this k))))\n```\nBut I think this solution sucks, because I can't extend protocol to another protocol, only to interfaces\nI just realized I can check if supplied cache satisfies `clojure.core.cache/CacheProtocol` and wrap it with my cache\n<@Roslyn> <https://github.com/clojure/spec.alpha/blob/master/src/main/clojure/clojure/spec/gen/alpha.clj#L17>\nYou can optionally run some code, depending on whether you\u2019re able to load `clojure.core.cache`\nYeah, I decided to do it like that:\n```\n(def core-cache-protocol\n  (try\n    @(requiring-resolve 'clojure.core.cache/CacheProtocol)\n    (catch Exception _\n      nil)))\n\n(defn -&gt;cache [x]\n  (if (and core-cache-protocol (satisfies? core-cache-protocol x))\n    (let [core-cache-lookup @(resolve 'clojure.core.cache/lookup)\n          core-cache-has? (resolve 'clojure.core.cache/has?)\n          core-cache-hit (resolve 'clojure.core.cache/hit)\n          core-cache-miss (resolve 'clojure.core.cache/miss)\n          core-cache-evict (resolve 'clojure.core.cache/evict)]\n      (reify Cache\n        (lookup [_ k] (core-cache-lookup x k))\n        (has? [_ k] (core-cache-has? x k))\n        (hit [_ k] (core-cache-hit x k))\n        (miss [_ k v] (core-cache-miss x k v))\n        (evict [_ k] (core-cache-evict x k))))\n    x))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "62",
    "text": "I want do serve files from the file system, like with `python -m SimpleHTTPServer`, but from inside a clojure process. I think saw a tweet the other day about a(n old, \"done\") library for this, but I can't seem to find it. Does anyone know which library I'm talking about?\nHow to run `sh` in Clojure to run `wkhtmltopdf` with input stream and output stream if possible? I want to do in from in-memory data instead of files.\nSo as inputs I will have long HTML / js / css code and as output PDF file.\n<@Doreatha> Maybe this will help: <https://github.com/ring-clojure/ring/wiki/Static-Resources>\nIf you know what ring is and how to use it.\nIf not, it\u2019s good to learn. Ring is the standard clj http api.\nok I think the only one way is to use `-` instead of file name for output. Then I will have output in `:out`.\nThanks, I think it was <https://github.com/tailrecursion/lein-simpleton> that I saw. As it turns out it's not exactly what I wanted, but it looks easy enough to just use ring directly.\nso I have to figure out how to make input from memory. Probably with `:in` but this will be long input string.\nhmm looks like it is pretty easy, string is fine\n```\n(sh \"wkhtmltopdf\" \"-B\" \"0\" \"-L\" \"0\" \"-R\" \"0\" \"-T\" \"0\" \"--page-height\" \"58mm\" \"--page-width\" \"43mm\" \"--disable-smart-shrinking\" \"-\" \"foo.pdf\"\n      :in (slurp \"resources/index.html\"))\n```\nDoes it have size limit?\n<https://github.com/cognitect-labs/test-runner> - this library for tests is be default included to `clj` template for new project. Does it have option to watch and test again after each change? Or should I use something else?\nDid somebody read from bardcode reader devices and can share experience how to do it in Clojure / Java?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "63",
    "text": "I have working code where I get hash code of data structures with (hash data-structure) but it works in small amount of them. When I have few millions of data structures it will start giving me duplicate hashes (clash). How to get something more unique when structure of data structure is unknown?\n<@Wanita> hash returns a 32 bit int, so the birthday problem means you'll start to get conflicts regardless\nYou might want to look in to something like sha or md5\nOr design your data structures to work even with hash conflicts, which is what clj itself does \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "64",
    "text": "how do I get pprint to print this with the leading quote?\n```\n(def x '[foo bar])\n(pprint x)\n=&gt; [foo bar]\n```\n`(pprint (list 'quote x))` seems to work\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "65",
    "text": "I've seen that PyDatomic uses the Rest API\nnot the client api\nI think that's the only way to connect Python with datomic\nisn't it?\nhaha\nthat's not a bad news\nthx for your help greywolve\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "66",
    "text": "Yeah, unfortunately :neutral_face: hopefully it continues to work well enough\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "67",
    "text": "<@Clarine> Not sure if it is an idiom, but I often see the sequence\n```\n`'~\n```\nused in macros. It looks a bit like line noise, but perhaps it is an idiom.\nSo for that example\n```\n(pprint `'~x)\n```\ncool. I have used it in macros yeah\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "68",
    "text": "Hey everyone, I have a problem with leiningen, reloaded.repl, Cursive and/or CLJC. I have defined some protocols in .cljc files which are used from clj/s. In an open REPL from Cursive, most of the time when using `reloaded.repl/reset(-all)`, it doesn't pick up my changes at all. If I do a \"manual\" `clojure.tools.namespace/refresh(-all)`, my changes are picked up but all the protocol implementations won't satisfy their respective (newly modified) protocols anymore, so I get exceptions from somewhere near `clojure.core/-cache-protocol-fn`. I need to fully restart the REPL for everything to be picked up again. Is there a way to remedy this, or workarounds? Has anybody encountered this? (my google searches haven't turned up much)\n(My workflow is roughly equivalent of what using chestnut involves)\nthis sounds relevant: <https://lambdaisland.com/blog/2018-02-09-reloading-woes>\n&gt; when you use tools.namespace to reload your code, it effectively creates completely new and separate versions of functions, records, multimethods, vars, even namespace objects, and any state that is left around from before the reload might still be referencing the old ones\nI personally don\u2019t use tools.namespace, but I know that re-evaluating things like multimethods is tricky\nI wonder if records/types that implement protocols is the same\nhave you had any success simply re-evaluating the namespace you\u2019re trying to refresh?\nWell, sort of. It sends me on a wild goose chase through my namespaces, totally arbitrary and non-deterministic\nSooner or later it sometimes works, but not so often that restarting the whole thing isn't much easier and faster\nMultimethods work fine, by the way\nI have lots of `defrecords` implementing various protocols, and those very often \"loose\" their implementations in this way\nwell, specifically, I always run into an issue where you can\u2019t re-evaluate the `(defmulti &lt;dispatch&gt;)` part. re-evaluating the cases works fine :slightly_smiling_face:\nwhich is a bummer since I quite like the architecture so far, but without proper refreshes in the REPL it's very frustrating\nah you're right, I know that one too ^^\nMaybe it's reloaded.repl's alter-var-root! that does something funky?\nso, question: if you create a new instance of the new `defrecord` impl, do you see the correct behavior?\nafter a reload\n(I\u2019m also assuming that you\u2019re interacting with this at a REPL to some extent)\niirc yes, if I switch to the respective namespace and manually instantiate the record, it satisfies the protocol\nbut let me check real quick\n(most of the records are instantiated via an integrant like multimethod mechanism)\nso it sounds like what\u2019s happening is that your `defrecord` is being picked up correctly, but your application is still referring to instances of the old implementations\nI haven\u2019t use integrant, I typically use mount because I\u2019m lazy. but I assume there is a way to stop/start your system with new instances of your records, which would solve the problem you\u2019re encountering I think?\ni'm not using integrant, but the core of the IoC mechanism is a multimethod that's basically integrant's init-key\ni'll look into the REPL utilities to see if there's something that keeps around stuff\nI'd be surprised though since afaik there's one aliases and stuff. reloaded.repl uses alter-var-root! and component/suspendable, so in a reset, it'll call Lifecycle/stop. All the records in question are re-instantiated on start and discarded on stop. But there could be a bug there as well I suppose.\nthere's only aliases*\nhm. oh, so you\u2019re using component?\nyes, but only \"behind the scenes\"\nand really only for repl convience. all components wrap a subsystem which consists of the actual parts of the application\nthe wrapper components discard the subsystem on stop and create a fresh one through the IoC mechanism on start\nwhich is why this protocol issue puzzles me\nreloaded.repl's reset does stop, refresh, start, so in theory the subsystems should be created after the tools.namespace refresh\nand with the new implementations\nbut maybe that's the crux, a combination of cljc processing and protocol/multimethod reloading\nor protocol reloading and multimethod instantiation, rather\nthe reason I suspect something very messy is that very rarely everything breaks completely, even after a REPL restart, and I have to `lein clean` before any of it will work again :sweat_smile:\nhm yeah this all sounds very complex\nFWIW I don\u2019t use reloaded.repl at all. I use mount and re-evaluate the var or namespace I\u2019m in as I develop. Occasionally, if necessary, I call `(mount/stop) (mount/start)`\nbut I also have never used records and rarely use protocols :stuck_out_tongue: so take my advice with a grain of salt!\nwe considered mount but decided on component+reloaded, since they seemed to be made for record/protocol stuff\nand it works quite beautifully, too, except the actual reloading :smile:\nWell, I'll try reproducing this in a minimal test project i think. Maybe it really is something with the code. Otherwise maybe I can try using an atom for REPL development and completely scrap everything on restart, to rule out reloaded\nWho can share experience about <https://github.com/onyx-platform/onyx> ? Do you feel it is right solution for PDF processing when fast response for query by API is needed?\nI remember seeing a comparison table of Clojure web libraries/frameworks. I can't seem to find it now. Anyone have the link?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "69",
    "text": "It showed which ones use macros and which ones are data driven\nYes, that was it, thanks. Forgot it was just comparing routing specifically though.\nI'm contemplating bidi + yada, but not quite sure the practical differences between the libraries\nI don\u2019t know this library but it looks like it is bidi + ring glue\n<@Reiko> ^\nThat could be. They are both from JUXT and is stated as sister libraries\nIt is an alternative to ring though\n\"A yada handler is an instance of the yada.handler/Handler record. Since this record satisfies clojure.lang.IFn, yada handlers behave just like normal Ring handlers and can be used wherever you might use a Ring handler. \"\nthere's this one too <https://github.com/metosin/reitit> \nYeah, looking at that too\nyeah. I think you would use something like: ring (http abstraction) + jetty (web server) + bidi (routing) + yada (resources)\nNo, yada provides the http server and is an alternative to ring\nIt uses Aleph\n:thinking_face: my mistake. must have misread the docs\n<@Reiko> if you have any questions about bidi/yada, there is a subset of us specifically in <#C0CFGN25D|juxt>\nThanks for the recommendations\nCan you elaborate?\nI guess certain extremely complex webservers can benefit from it. But it seems like lots of templates include the structure just in case you need it. Which usually isn't a huge deal, since it doesn't usually get too much in the way even when you don't need it. But then it's just one extra piece of unnecessary complexity.\nAnd in my experience, it's quite easy for projects to evolve and reloading to become broken with life cycles, unless teams maintain good discipline\nIt is. And I guess I'm glad the abstraction has some standard. I just think it's over used\n<@Fredda> What would you recommend for managing resources that have a start/stop lifecycle then, given that you need to be able to retain a live REPL experience (with _some_ level of code reloading).\n<@Celestine> some component like thing, sure. But do all web services really have such complex runtime life cycle interdependent resources? I guess it depends on how you archetect your services. `defonce` is often good enough for simple things imo.\nRan across this from H L Ship of Walmart Labs <https://medium.com/@hlship/tips-and-tricks-for-component-d00832abcdfa>\ndefinitely an enterprise use case\nas opposed to small team\nThere is also \"reloaded.repl\" to go with Component, looks very labor-saving\nDatabase connections, caching layer, environment/configuration setup, tons of other stuff benefits from the start/stop lifecycle\nI haven't found I need to actually refresh namespaces and there are enough gotchas with full reloading that I avoid it.\nAlso if you use Component as dependency injection then it looks like it would let you have several alternative setups or build a mini-system somewhat a la carte\nYeah, large enterprise services\nuh oh gotchas?\nComponent's DI allows you to easily swap in \"mocks\" for testing, yes.\n<@Celestine> You encountered glitches with full reloading?\nI see a lot of people running into problems with it, yes. I've also seen a lot of people who've set up ProtoREPL for Atom using Jason's opinionated guide run into refreshing problems -- and I recommend they *uncheck* those three options in ProtoREPL.\nIf you have all those things, and you have complex runtime dependencies between them, sure. And it's nice that there's a common abstraction for that.\nIt seems like it often blows away things in namespaces that they don't expect and they run into errors relating to that which they don't understand (and have to restart their REPL anyway).\nhm yes everything you've done in the 'user ns is gone.. but as long as the reload-all is preceded by component/stop and followed by component/start, the big picture should be ok!\nOTOH it reloads from disk. So if you draft work in namespaces and do not save it, I guess it's lost\n<@Samual> I tend to work a lot against the REPL by evaluating top-level s-expr's without saving files. I use `comment` blocks for code that I'm using for exploration and tests -- also evaluated directly as s-expr's into the REPL without saving. I have component start/stop calls in comments too, but mostly I start the system and eval code live into it for hours as I develop.\nI don't tend to have a workflow these days where I need to do full reloads -- and even when I need a bit more brute force that just loading a single file into the REPL, a `(require \u2026 :reload-all)` is sufficient.\n<@Antwan> My feeling is that defstate in mount is still global state and should be avoided. I like component's ability to have multiple distinct instances live in my REPL at the same time.\nwhat I like about mount is that it allows me to write my code mostly like I would expect if I _wasn\u2019t_ use mount, e.g. vars referring to other vars in namespaces\nit\u2019s more on the _easy_ side of the simple vs. easy continuum\nbut you do lose some power, like <@Celestine> said\nI like my functions to rely solely on their parameters (and other functions) -- so if they're doing DB stuff, they should be passed the `db-spec` (or something that contains it).\nWhen we got started with Clojure at work back in 2011, we didn't start with Component... and we're still regretting that...\nWe've worked very hard to adopt Component and to refactor code to remove the global state that we had to start with.\nsure. and you can still do that in mount. mount states are just vars\nSo I'm *very* strongly against global shared state these days because of that experience.\nVars are global shared state.\nright. I see what you\u2019re saying\nmaybe a tangent for offtopic, but what were the kinds of issues you ran into?\ntypically the way I end up writing my applications, is that different namespaces might declare different states. those states get introduced into my application at various entrypoints, and are passed around from that point on.\n\nI find that mount pretty much solves the _reloading_ part of my issues, e.g. being in a dirty REPL and wanted to start/stop some resource that things are referring to.\n\nit doesn\u2019t really help you at all with architecting your application, since it allows you to be as strict or loose with how you reference those global states as you want\nthe upside is much less ceremony. but I haven\u2019t been burned too badly yet, so I\u2019m willing to pay that cost for now :wink:\nThere's no \"One True Way\" in Clojure so you can use whatever approach suits you best -- but that also means there's not much guidance and nothing very opinionated, which can be hard when you're getting started. And no frameworks adds to that.\nWe've changed our approach a lot over the years -- and in our suite of apps, some of them are built very differently to other, based on who built the core of it and at what point in our usage it got started. We have about seven and a half years of code now, and over 86K lines of Clojure so there's quite a bit of variety in there.\nI guess I'm not exactly sure what your statement was responding to.\nI was just airing a general complaint, sorry. Your use case may be entirely appropriate.\nI'm just not familiar with mount or component and didn't see it mentioned above it so I was just confused by that. If I knew them I might agree with your complaint.\nFrom a cursory glance of them, it sounds to me like it's another example of OOP mentality trying to claw back in to our functional paradise. :slightly_smiling_face:\nI guess I was reading some backlog in another channel... And I accidentally responded in this channel... Lol\nNo worries. It ended up having a relation indirectly after all\nNow I can't find it :grin:\nInstalled Atom + Chlorine.  No idea how to use it.  Tried \"chlorine connect clojure socket repl\" command, put in the port number, it said it worked.  But\nhow do I evaluate a form?\n<@Samual> Unless you have key bindings, you'll have to do everything through the command palette.\nHappy to share my config in the <#CF02KPG4U|chlorine> channel\nThe console pane is output-only at the moment. The expectation is that you will eval code from your editor pane into the REPL.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "70",
    "text": "I think you might mean this <https://github.com/juxt/bidi/blob/master/README.md>\nFrom what I see yada use bidi under the hood\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "71",
    "text": "Fwiw, it isn't outside the realm of possibilities for yada to work with other web servers, but yada is currently coupled to the async extensions that Aleph adds. We haven't had a need to extend yada to other web servers, so it hasn't happened, and in the mean time, we have added conveniences for starting yada. \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "72",
    "text": "I can also recommend pedestal. Different aims than yada, still a good candidate. \nI try to avoid the life cycle (mount/component) stuff unless absolutely necessary\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "73",
    "text": "\"Component\" itself is an outline of the necessary discipline, no?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "74",
    "text": "(not to interject, but what are the pro/cons of component vs the defstate stuff in mount)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "75",
    "text": "My statement?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "76",
    "text": "Is there a port of <https://common-lisp.net/project/mcclim/> to Clojure anywhere?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "77",
    "text": "Since I love writing templates in Hiccup, I got around to creating a template for clojure built sites on netlify:\n\n<https://github.com/minikomi/simple-static>\n\nHiccup, cljs, garden for css.\ncider-send-ns-form-to-repl and cider-send-ns-form-to-repl-focus\na bit late but :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "78",
    "text": "Thanks for that! I've used it before to learn :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "79",
    "text": "no problem, just a basic thing you can build on.\nAnd since I also love to write templates in Hiccup, it really saddens me that there seems to be very little effort from the community to attract simple front end developers. I've struggled a lot to find good material to ease entrance, both for me and for friends I would like to experience Hiccup/Garden.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "80",
    "text": "What's a good way to provide context/metadata to my transducers? My transformation relies on some collection specific config data.\n- Lexical scoped variable would mean I only need to provide it once however I would need to pass it to all the inner function calls.\n- I could merge it into each element however then I would be duplicating this config data. This might be inefficient as this config data contains a collection itself and I would be repeating that collection for each element in my data.\n- I could also do something with metadata too?\n- Maybe I could provide a function to each element which when called returns the config data?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "81",
    "text": "merge it in\nin memory it is a pointer to the same data, not separate copies of the data\n<@Rosaline> Ah right. That would work great then as the merge is the simplest to implement. Thanks :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "82",
    "text": "Like this? ```(clojure.pprint/pprint ''[foo bar])\n'[foo bar]```\ncan you do that with the x instead of the double quoted vector?\nMaybe not. Is it for edn data or for something else?\ncode generation, but I already have a solution, you\u2019ll see it if you read on :slightly_smiling_face:\nOr indeed ```user=&gt; (defmacro quoted [x] `(quote (quote ~x)))\n#'user/quoted\nuser=&gt; (def x (quoted [foo bar]))\n#'user/x\nuser=&gt; (clojure.pprint/pprint (quoted [foo bar]))\n'[foo bar]```\ncool, i'm curious\nI did it like this: `(list 'quote all-syms-clj)`\nanyone got a tip how I can get highlighted clojure code in keynote?\nnice\nif you use emacs you can just emit html for it via htmlize-region (it will generate all the css that matches your theme/colors) and paste it there somehow (I did that with google presentations not keynote but I guess html might be supported) -&gt; <https://melpa.org/#/htmlize>\n<@Min> cool, that works for me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "83",
    "text": "as an option copy somewhere online with syntax highlight and copy back - keynote might use the colors.\nI use <http://pygments.org/demo/> with the Clojure option and copy back the code which comes with the colors. Supports multiple highlight styles too\nyeah, I copy code of GitHub, and manually fix newlines\nthanks\nlooks like it's a gui toolkit/framework: \"McCLIM is a FOSS implementation of the Common Lisp Interface Manager specification, a powerful toolkit for writing GUIs in Common Lisp.\"\nI\u2019m guessing that compiles down to machine code, as opposed to something like seesaw, that hooks into Java Swing <https://github.com/daveray/seesaw>\n(See also: <https://github.com/fn-fx/fn-fx>)\nI used to be very interested in native GUIs, but lately, you know, the web app is just right there\u2026\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "84",
    "text": "<@Felix> I've never heard of that library, how does it function?\n(if it's cool enough I need a side project regardless)\nI think for customer facing stuff that makes sense, but I've had acquaintances whose job it was to make a tiny internal tool that needed to have a gui\ngod rest their souls\nthey chose swing\nso seesaw looks cool\n<@Tonya> You have a couple of options. One is to just use the built-in support ala <https://github.com/emezeske/lein-cljsbuild/blob/1.1.7/doc/REPL.md>. Another is to use middleware and launch a clojurescript repl from your main repl via something like <https://github.com/nrepl/piggieback>.\n<@Antwan>: not sure, never used McClim. The manual looked impressive, so I was hoping someone had ported it over to Clojure so I could test it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "85",
    "text": "If you took the Clojure survey, and marked \u201cReference docs\u201d as a priority for making improvements, I would be interested to learn more. 1) do you mean something other than the docs at <https://clojure.org/reference/*>. 2) do you think existing docs should be improved or new things added. And then I\u2019m interested in learning if there are specific things (if so, an issue at <https://github.com/clojure/clojure-site/issues> would be best) or if this is something else.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "86",
    "text": "I am attempting to read a serialized function from an `ObjectInputStream`. This code is running in a Java Class and looks like this: `IFn f = (IFn) in.readObject();`. I am getting an exception pointing to that line:\n```\nCaused by: java.io.IOException: java.lang.ClassNotFoundException: compute.connector.serialize$myfn\n```\nI'm guessing this has to do with Clojure's classloader? Do I need to switch the classloader for the thread calling `readObject`?\nRight before that line, I require the namespace: `require.invoke(Clojure.read(namespace));`.\nActually, the code looks almost identical to this: <https://github.com/gorillalabs/sparkling/blob/b6e93ca6005a86b3d67bfae646db5e26d145dc68/src/java/sparkling/serialization/Utils.java#L33-L58>\ndon't IFn instances created via eg. fn get randomized automatic names that don't persist across restarts?\nor are you using something like deftype to get something that implements IFn but has a predictable name?\ndefn results in a fn with the same classname\nFor this first cut I'm defining `myfn` as:\n```\n(defn myfn\n    [x]\n    (inc x))```\nIt's only run once so _I think_ its name would be the same?\nyes, you'll have to use the compiler's classloader\nI would strongly recommend against that\nwhy not serialize the var?\nserializing fn objects is gross\nif you serialize the var, you can still do the namespace require trick with the namespace for the var, then deref the var to get the value, no classloader stuff required\nHmm. I'm not sure. Ultimately it may need to serialize an anonymous function :grimacing:\nthen you run into what I was saying\nor don't even bother to deref the var, because vars implement ifn\nthe name is auto-generated gibberish that changes on reload\ndon't put yourself in a situation of needing to serialize anonymous functions\nI'm not sure if it can be avoided. The anonymous function is calculated through an expensive ML-esque process.\nI've seen this <https://github.com/technomancy/serializable-fn> but that seems kinda gross to me. Perhaps less gross than serializing an anonymous function?\nit's the only technique that will reliably work correctly across restarts / vms though\nthat docstring on that macro is so nice lol\n```\n(defmacro ^{:doc (str (:doc (meta #'clojure.core/fn))\n                      \"\\n\\n  Oh, but it also allows serialization!!!111eleven\")}\n```\n&gt; it's the only technique that will reliably work correctly across restarts / vms though\nHow come?\nWhy?\nbecause anonymous function names are auto-generated\nIf you could get them to be statically generated, would it work?\nhmm - actually, maybe having a predictable name isn't needed for object deserialization? honestly I don't know\nit is\nthe object is an instance of some class\nand the class needs to be defined\nI guess you could serialize the class itself with the instance...\njust don't paint yourself in to the corner of serializing closures\nand like, you are already shipping the clojure code around (otherwise you wouldn't be able to require the namespace)\nso just get what you need from there instead of going through java object serialization\nso you use some weird process to generate your code, instead of generating a code object and using java serialization, have it generate a form, stick that form in a file with a def, require the file, grab the var\nYeah that path seems to have less friction. Curious, have you gone down the serialization path before and hit problems?\nnot really, I can't tell you the last time I've used java serialization, I was present at the seajure meetup were serializable-fn was written, and I have spent a little bit of time thinking about shipping functions around in a distributed systems setting\nI see. Is storing the form as a string still the best approach you've seen?\nIf you absolutely need it, I prefer to define objects so they print with enough info so that the object can be reconstructed on the other side, as defined by some object reader.\nBut that won't be easy for arbitrary closures\nIn an ideal world, storing the data to construct the function would be great. In our case, the data used to create these functions can have thousands of different complex properties. It would be a large undertaking to model that data, and we'd like to push that off for the time being.\nI don't mean a string\nI mean, like, generate a file that contains (def f (fn [...] ...))\nthen load that file\nThat\u2019s not much different than a string, right?\nit depends\nif you have a namespace and load the file via require then multiple loads won't result in new code generation\nthe naive approach of sending a string around and evaling it will\nWhat\u2019s the downside to new code generation?\nit won't be hot\nSome fns also want to close over local state, which won't work very well when you've stringified your form, unless you're careful\nany form of serialization has that problem\nright\nthat's true\nDoesn\u2019t the serializable-fn handle locals?\nit handles them as best it can\n(which in my opinion is not very well)\nthe problem with serializing arbitrary object graphs from memory (which closure serialization is) is pointer identity is not preserved\nvars are sort of like pointers where the identity is preserved\nNot sure I totally understand. Is that a performance trade off or a different behavior than originally expected?\nboth in the case of mutable objects\nthe first in the case of immutable values\nWhat if `serializable-fn` is closing over another closure?\nMay only work with data\nor a ref, or an atom, or some random java object\nright\nlot's of gotchas\nI suppose that\u2019s the trade off I\u2019d be making with taking approach. <@Rosaline> you said you spend some time thinking of this. Was this the best solution you found?\nthere isn't a good general solution, so you should solve your specific problem\nyour specific problem is you have some clojure code you want to distribute\nthe best way to distribute clojure code is as code\n(not serializing java objects from memory)\nthere is some tool that people use for deploying clojure functions as aws lambdas, you might check that out (I forget the name)\nI have trouble believing it works well\nHere is a naive question. I would like to refer a java enum member: java.awt.Desktop.Action.BROWSE. I tried various different forms, yet none works.\njava.awt.Desktop$Action/BROWSE\nfor the first thing, the object owning it is Desktop$Action - that's how inner classes work\nFor instance, (. java.awt.Desktop.Action BROWSE), (java.awt.Desktop.Action/BROWSE)...\nThat\u2019s a great breakdown of the problem. Thank you guys for your input! Going to investigate the serializable-fn approach to see if it will cover the entirety of my problem. \ninner classes are fictional, what actually exists is a class with a $ in the middle of the name\n<@Rosaline> thanks! Let me try it.\nalso the parens are allowed, but not needed\nSeems it is not in the document -- I did read it, :slightly_smiling_face:\n<@Marceline> documented where? The official docs mention how to access an enum and how to access an inner class, but for this case you need to know both\noh maybe they don't directly mention enums...\n<@Dann> I was reading: <https://clojure.org/reference/java_interop>.\nI found it now -- it refers to the $ syntax at one place -- I missed it.\nyeah, I remember things that clearly aren't covered there - it doesn't mention the thing about inner classes and doesn't show using enums either\noh, $ is under \"nested\" not \"inner\"\nenum values are static field on the enum class\nit definitely mentions static fields\nyeah, I guess there's a few things you need to know about the JVM internals before all those docs are clear\nthat isn't really even jvm internals, \"enums\" exist as a java language contstruct\nand they are defined in-language to be equivialent to static fields on an object?\nthat is what the compiler turns them in to\nright, what I'm saying is that there's a piece of information about the internals, that isn't derived from the language ~spec~ docs, needed to understand how to access an enum\nThe official java doc annotate the nested class Action as: java.awt.Desktop.Action -- so java uses . to refer to nested class. Yet clojure uses $.\nright - but the clojure docs actually describe that discrepency\nwhat I was getting at is enums, which are indirectly described (you need to know it's implemented as static fields on a class)\n<https://github.com/clojure/clojure-site/issues>\n<@Jasmine> I will register an issue about this one later today. thanks!\nThanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "87",
    "text": "If only there was a way to register these issues for update\n<@Jasmine> Looking at some of the documentation I sometimes find myself puzzled at what is actually suggested. Take for example <https://clojuredocs.org/clojure.core/reduce-kv>, it tells me that it takes a function with three positions, an `f`/`init`/`coll` and that it applies f to `init`, `k1`, `v1`, and applies `f` to that result, `k2` and `v2`\u2026 etc.\n\nThis particular case tells me \u201chow\u201d and \u201cwhat\u201d, but forgets to tell \u201cwhy\u201d. It is actually, as a beginner in Clojure, surprisingly difficult to quickly find functions that I need due to these highly dense detailed pieces of documentation that \u201cforget\u201d to tell the higher picture.\n\nCertainly written with great intention, and all information is there, but not usually in a very \u201cyes this is what I want\u201d/\u201cno I don\u2019t want this\u201d kinda way. If that makes any sense?\nThat is pretty much by design. The docstrings are not intended to teach you the language, the idioms, etc of the language. They are meant to be concise statements about what each function does.\nWe don\u2019t really have any intention to change that (and in fact, making these much longer and more explanatory would also increase code size and degrade classloading and startup time)\nHowever, it is perfectly reasonable to combine docstrings with ancillary material that is useful to one or more audiences into a documentation site that would be better for those audiences\nyeah ofc, they are pretty printed docstrings, I get that. I am merely saying that, as a beginner, that is often the only thing I have, and dumps quite a bit information on my \u201cnewbie\u201d mind.\n<http://clojuredocs.org/> is such a site - it combines the docstrings with examples, links, etc\nsome efforts that have been made in adding supplementary docstring material but it\u2019s a big effort and one that\u2019s hard to do well\nmaybe some day we will spend more time on this in the core team, but other things seem more pressing at the moment\nthere is a lot of intro Clojure material available in a variety of forms and I\u2019d say all of them are a better way to learn the \u201cwhy\u201d parts than reading docstrings\nRight, link was actually to clojuredocs ^^. Its hard to pinpoint, I\u2019d admit that, but it feels currently that there is a great detailed explanation but no higher level overview. I am merely pointing out what I recently notices was holding me back a bit in terms of documentation. Please take it as no offense\nnone taken! :)\nyou are hardly the first to make such an observation :)\nhaha ofcourse, and I will certainly not be the last. Its easy saying that \u201cclojure documentation is x\u201d, but \u201cwhy I think its x\u201d, thats such a different question.\nAre the examples of `reduce-kv` on the <http://clojuredocs.org|clojuredocs.org> page not explaining a \"why\" here?\nI haven't read this but it may be a good resource for this sort of question <https://www.manning.com/books/clojure-the-essential-reference> (anyone have any input on it?)\nI understand where you're coming from. From my perspective, it's hard to answer the \"why\" because answering that is entirely context dependent.\ni browse it from CIDER `(C-c C-d r)` and just saw that it hotlinks to crossclj to find usages. that's pretty cool\nAh, reading code and finding an unknown function and thinking \"Hmm, why have they used this function?\" \u2026 yeah, I can see that use case... and you're pretty much going to be at the mercy of whatever examples (and comments) folks have added to <http://clojuredocs.org|clojuredocs.org> at that point. At least more examples/comments can be added by the community so now maybe someone here can go add something that would have helped you... or you could add something that would help future you's coming along and hitting the same question/use case.\nRight, I knew that was coming, it is a community resource after all. Ofcourse I want to contribute, but I was just taking this as an example of something that \u201chindered\u201d me as a newbie.\nDo you have any prior experience with the functional paradigm?\nNo worries. There are lots of gaps and rough edges in the public Clojure documentation sphere, unfortunately, and precious few people who have the time/energy to contribute so we all owe them a huge amount of thanks for what we've got so far. None of that helps folks today who hit something that is not well-covered in the docs tho'... :disappointed:\nI wish I had more time to spend on docs and tutorials but I'm really not very good at writing that sort of stuff...\nwe should get the Rust guy who just quit Mozilla. His dream job is Alex's job i think\n(not to replace Alex but to work alongside him :)\nI thought this last example on clojuredocs was helpful as it is so basic it is showing another way of updating a map.\nSteve Klabnik is who i was thinking of\nit's basically merge but restricted to two args\no.O did he quit mozilla\nwhat a loss for the Rust community\nalso `(reduce-kv assoc m e)` does the same thing (though admittedly less clear what it's doing)\nyes. dan luu tweeted about it. and its got some interesting thoughts in it. he was the _lowest_ paid member of his team\nhave a link by any chance, Rust is one of those languages I follow with great interest but with lack of time to invest\ngood thread on it with link to steve's blog: <https://twitter.com/danluu/status/1082321431109795840>\nIt\u2019ll have different behavior if you give it vectors. :smile:\n\"Reduces an associative collection.\"\nmerge only works on vectors accidentally\nThis won't help your general issue of better examples, but for this particular question: <https://stackoverflow.com/questions/48732579/when-to-use-reduce-kv-over-reduce-in-clojure>\nor do you mean this works better on vectors than merge does?\nHaha, I know what it does _now_, its not a hard function, its just hard to parse from the *current* example[s] (or their order), that it really isn\u2019t.\nPersonally I've never had an issue with just destructing the map entries using normal reduce, but then I wasn't considering the performance\nreally sad\nI kinda hope he finds a new home for his Rust work. That language really shows great potential and needs someone like him as much as any other new language.\nWhat's the current preferred libraries for making HTTP requests from an API server?\ni would be quite happy to see him at Cognitect :slightly_smiling_face:\nhaha also, but I kinda also want Rust to succeed\n<@Reiko> we use both `clj-http` and `http-kit` (client).\nThe latter is nice and simple and async by default. The former is comprehensive with a lot more knobs and dials.\nMy current use case does not require fancy tweaking so I'm more looking at performance, size, http compliance, etc\nI would prefer fewer dependencies as it is only a small project\nGoing forward, I think we'll use `http-kit`'s client library more and more (and `clj-http` less) because we really don't need all the bells and whistles that `clj-http` offers -- and we like the simple, async-by-default approach of `http-kit`.\ndef check out <https://github.com/schmee/java-http-clj>\nI haven't tried it out yet but I've been meaning to\ndependency on Java 11 tho\nI hope not. Not for me for sure\nOnly if you have an environment that requires a previous version\nright, I know people who are reluctant to upgrade because of licensing concerns and therefore stay on 8\nStaying on (Oracle) JDK 8 means no more updates unless you pay.\nOpenJDK 11 has 6 months of support, no?\nIsn't the idea that it shouldn't be a big deal moving forward? Just upgrade to 12 when it comes out?\nI thought I remember that being a design goal of the new structure\n(and this should probably go to <#C1AC4BU2K|java> before we suck too much air out of <#C03S1KBA2|clojure> about it)\nYeah, they are on a faster release schedule, I can see how people were concerned the first time they read \u201c6-months of support or upgrade\u201d.\nPersonally, I avoid any software that is coupled to a specific version of Java\nRight also I am heading off, I managed to break my sleep schedule enough as is. Was a pleasure discussing ^^\nI was making a joke.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "88",
    "text": "<@Tammera> I'm curious as to what would have helped you here (specifically)? Were you just looking over all the various core functions thinking \"Hmm, I wonder when I would use that?\" or did you start from a problem, thinking \"Hmm, what core function would solve this problem?\"\n<@Tammera> You may find this helpful: <https://clojure.org/api/cheatsheet>\nThere's also <https://www.conj.io/> which i really like. It has examples which often include more of what you want. IE, if you look up defprotocol you're probably gonna want to glance at extend-type or extend-protocol\n<@Celestine> in this particular case I stumbled upon it because a coworker was using it. I think the \u201cproblem\u201d of the examples here is that there is no base case. The first example is more complex than it should have been, and most other examples feel more esoteric than valid usecases of the particular function. If this particular page just had a very simple `(reduce-kv (fn [memo k v]) ...) init coll)` I would already have been helped tremendously in _quickly_ finding out what it is about. (Also, it was just some example of a page that I remembered took me longer to \u201cparse\u201d than it should have imo, don\u2019t assign too much value to the example ^^)\nyes, have programmed in Haskell before\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "89",
    "text": "Are there any practical differences between them?\n(does my second line answer that or do you want more specifics?)\nMore details would be helpful to weigh them\nI guess it depends on what you need it for. `clj-http` brings in a lot of dependencies (which can be a problem in itself) but it is extremely configurable and has built-in support for a number of over-the-wire protocols and coercions. We've also run into problems with its handling of multipart form POSTs with image files and a few APIs that we needed to interact with (something odd about how it was handling headers I think) and we've switched those to use `http-kit` instead.\nThat seems in line with my thinking, thanks\nBut `clj-http` has been the \"gold standard\" in Clojure for a long time... :slightly_smiling_face:\nthat may be a dealbreaker?\n(if folks are concerned about licensing, they should upgrade to OpenJDK11 -- from somewhere like AdoptJDK :slightly_smiling_face: )\nOpenJDK _from Oracle_ has only six months.\nright, ofcourse\nOther OpenJDK providers are offering longer support periods.\nDepends whether you want long term support and/or are willing to pay Oracle money...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "90",
    "text": "Is there a way to know whether an object satisfies a protocol that's been extended via metadata? `clojure.core/satisfies?` doesn't seem to work?\n```\n  (defprotocol IFoo\n    :extend-via-metadata true\n    (foo [this]))\n\n  (def x (with-meta {} {`foo (fn [x] :foo)}))\n  (foo x)\n  ;; :foo\n  (satisfies? IFoo x)\n  ;; false\n```\nYou can query whether the metadata on a given object has entries for the protocol functions you might want to call -- but it would make `satisfies?` a pretty slow function if it had to walk all the metadata to look for all the protocol functions declared for a given protocol...\n...and you might only provide one or two of the functions (the ones you actually know will be called) rather than all of them.\nIf `IFoo` had two functions, `foo` and `bar`, and you had an object whose metadata defined just `foo`, does it satisfy `IFoo` or not?\n^ <@Dorla>\nThat's a good point. I don't care about performance in this case so it would have been nice if there was a function in core that made a `satisfies?` in the metadata. It's quite easy for me to add (contains? (meta x) `foo) in this case.\nAs for the second point when an object has just defined one of the functions in `IFoo`, I'd expect `satisfies?` to work like it does on other object who hasn't implemented the protocol fully:\n```\n  (defprotocol IFoo\n    (foo [this])\n    (bar [this]))\n\n  (satisfies? IFoo (reify IFoo (foo [this] :foo))) ;; true\n```\nThanks <@Celestine> as always :slightly_smiling_face:\nI guess the check for protocols that can be extended via metadata needs to be ```(if (or (satisfies? IFoo x) (contains? (meta x) `foo)) (foo x) (throw (ex-info \"Don't know how to foo this!\" {:x x})))```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "91",
    "text": "The use of the word \u201cwork\u201d in the context of using `merge` with vectors is quite charitable. I\u2019ve never been in a situation where upon finding that a bug due to a mistaken use of `merge` with vectors was considered \u201cworking\u201d nor have I ever been in a situation where anyone recommended `merge` as a substitute for `conj`.\n<@Reiko> for an API server that is both a server and a client, Zach Tellman's aleph looks excellent.  It's built on Netty so it does all sides of networking.  It's also built on Z.T.'s rip-snorting \"manifold\" async library.  So your non-blocking code that says \"in response to this api request, go ask <http://bla> for something and when it comes back filter it and return it to the end user\" looks perfectly procedural and natural.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "92",
    "text": "haha OK\n(or just let it blow up depending on what you need to do in the non-`foo`-implementing case)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "93",
    "text": "I'm running yada on the frontend, which uses aleph. The backend API is separate so I'm using java-http-clj on that end\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "94",
    "text": "Why isn't there an equivalent `peek!` function for transient vectors in the standard library?\nSay I have a reducing function where each step depends on the previous result and the intermediate steps are all internal\n```\n(reduce\n (fn [acc val]\n   (let [prev (peek acc)]\n     (conj acc (... prev val))))\n [:init]\n coll)\n```\nIt would be nice to easily turn it into a transient version\n```\n(persistent!\n (reduce\n  (fn [acc val]\n    (let [prev (peek! acc)]\n      (conj! acc (... prev val))))\n  (transient [:init])\n  coll))\n```\nThe only thing I could find was a 8 year old SO post <https://stackoverflow.com/questions/3207298/why-is-there-no-peek-function-for-clojure-transient-vectors>\nIs the above code un-idiomatic in some way? I just started learning about transients but I imagine this isn't a rare use case for them.\nSince a transient vector is both Counted and Indexed, I think the following should be O(1): `(defn peek! [t] (nth t (dec (count t)) nil))`\nNot quite as fast as having it built-in but probably good enough if you're going to get enough of a performance boost from switching from persistent to transient vectors in a `reduce` like that...\n`peek` is a read op. seems like it should just work on a transient vector, probably just an oversight\ncan\u2019t say I\u2019ve ever seen this mentioned before, but feel free to file a jira\nWhere can I find information on how defprotocol's :on-interface directive works?\nthat\u2019s not a public feature of defprotocol\nso I don\u2019t know of any info on it\nAlright. I've just seen references in some of Rich's comments pointing towards it in the case someone had a particular use case, and I wanted to know more about it.\nMost notably here: <https://groups.google.com/forum/#!msg/clojure/pZFl8gj1lMs/qVfIjQ4jDDMJ>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "95",
    "text": "Thanks, I filed one at <https://dev.clojure.org/jira/browse/CLJ-2464> - it's my first time using JIRA so I'm not sure if it's done properly.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "96",
    "text": "Is there something like the following for clojure.test (ideally not incurring in the banana-jungle problem; I don't want to change frameworks)\n\n`expect { ... }.to change { ... }.from(1).to(2)`\n\nthat's ruby rspec in case in case it rings a bell. Else: `{ ... }` represents code blocks (which in clj would be fns, or macro bodies)\n\nI actually implemented `expect-change` in clj a couple jobs ago, can't access the source unfortunately\n<@Mariela> sounds like you want `expectations/clojure-test` :slightly_smiling_face:\n<https://github.com/clojure-expectations/clojure-test> -- it provides an \"expect\" style syntax on top of `clojure.test` (so all your existing tooling continues to work).\nIt's not as expressive as rspec\u2026 I believe there was actually a \"port\" of rspec to Clojure years ago but I don't think it is maintained now.\nAlthough I'm not sure what `expect-change` would be in Clojure given the general lack of side-effect-y stuff...?\nhmmm interesting! nice job on the library, I appreciate the bridging of both worlds\n\nI was familiar with Expectations, perhaps I don't like that a lot of stuff seems to rely on positional arguments, so occasionally typos might mean false positives/negatives\n\n&gt; `expect-change` would be in Clojure given the general lack of side-effect-y stuff...?\n\nI'd agree with you for unit testing, but for \"controller\" tests (in Rails lingo) where I assert that hitting API endpoint causes side-effect _x_, the technique becomes more useful.\nAs a random thought, a macro-based impl would rock:\n\n`(expect (inc!) :to-change @foo :from 2 :to 3)`\n\nHere, `(inc!)` and `@foo` are evaluated in a careful, specific order\n```(deftest side-effect-y\n  (expect 2 @foo)\n  (inc!)\n  (expect 3 @foo))``` :rolling_on_the_floor_laughing:\nyeah... doesn't meet my standards :stuck_out_tongue_winking_eye: BDD-y guy here\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "97",
    "text": "is there a way to globally mock out a function during tests?\nlike with-redefs except global\n<@Jasmine> I think I marked this one too. For Clojure as a language the reference docs are pretty complete, as well as for it's core libraries (well done). However, what I think is missing is references on acknowledged Clojure design patterns. E.g. patterns like Component might not be unique to Clojure, but are very relevant for building Clojure applications. Without this knowledge and knowing who is authoritative, it is hard for someone new to know where to start and people will have to reinvent those patterns or wait to be pointed to them by their peers. If they are lucky they are coming from a language where similar patterns existed, if not, good luck.\n\nIMO the same is even more true for the Clojurescript environment, but there I wouldn't even know what the reference patterns are. Is it om.next, something else? Is there even an acknowledged pattern?\ni'd want to mock a helper function from a dependency that's irrelevant during tests without having to with-redefs every single time\nI like to build it in the design of my application. Having dummy implementations for those dependencies, acting similar to the mocked dependency\nactually it's in the dependency of a dependency and mocking that out feels like more trouble than just with-redefsing every test\nI thought you were after an alternative testing way, but if it's about globally overriding the function. ```(alter-var-root #'the-ns/the-function (constantly (fn [&amp; args] \"whatever\"))``` Works too\nBe sure to not put it in production :slightly_smiling_face:\noooooh that's just the kind of thing i was considering\nbe right back trying it out\nThanks for linking that, super helpful that I wish I found before! Seems to lack a printable version, current one seems to take around ~10 pages\nYep, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "98",
    "text": "are you using Component/Integrant? A nice approach would be to define per-environment components\nyup just what needed! thanks a lot!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "99",
    "text": "what are your opinions on websocket libraries (vs. non-libraries)?\n\nI used sente for a side project and had quite some trouble getting started, many concepts to understand and quite opinionated. There\u2019s also the possibility of just hooking into http-kit directly. Anything I\u2019ve missed, what do you prefer?\nWe would prefer on the main site to avoid \u201crecommending\u201d things, especially since those of us working on the site overlap with the authors of some of the books\ncategorization would be ok, but I think it\u2019s difficult to categorize things fairly (this has all the problems of categorizing stuff anywhere else)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "100",
    "text": "I hear ya. Doing this with a few web pages is generally hard. I sensed the same gap and spent two years co-writing Clojure Applied to try to fill it. It\u2019s doubly hard in ClojureScript because things in contact with JS change at a much faster rate even.\nI guess a book is a more appropriate format indeed. I see that your book is mentioned in this list <https://clojure.org/community/books> So that's a start.  An idea for improvement would be if this list is more prominent as a follow up resource and grouped by type of problem or level (your book would be under \"patterns\", \"advanced\")? Maybe even community votes. Just thinking out loud here\nI would then also add links between topics on the website and the books (e.g. <https://clojure.org/reference/transducers> would have links to books that have a significant part about transducers)\nSteve is a powerhouse and the Rust community will be worse-off without him. Any community that he joins will benefit greatly.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "101",
    "text": "I have a simple deps.edn, and when I run clj the java process just hangs. What would be the first step to debugging this beyond making sure the dependency exists?\n\n```\n{:deps {org.clojure/clojure {:mvn/version \"1.10.0\"}\norg.openjfx/javafx-fxml     {:mvn/version \"11.0.1\"}\n```\nupgrade your tools.deps, there was a bug previously\ner, your clojure tool\n<@Marlyn> thanks\nwould explain why perfectly working code didn't work on a different computer\nit\u2019s actually tools.deps doing an infinite loop 100% cpu\nI see what you mean. As a last suggestion, maybe the main site could only link to a separate site not controlled by the same people of the main site to avoid this potential conflict of interest. I'm guessing you have considered many options already\n<@Nova> you\u2019re doing that for REBL?\n<@Marlyn> yes, I was copying a rebl config to a different system\nI'm aware the deps I pasted aren't the full reqs\nit's just the minimum that cause the java process to hang\nwe have a fix for that now:\n<https://github.com/cognitect-labs/REBL-distro/issues/10#issuecomment-451173909>\n<@Marlyn> yes, that's what I'm using\nyeah, definitely make sure you\u2019re using latest clj (now 1.10.0.411)\nif such a thing existed, would be happy to link to it :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "102",
    "text": "is there an alternative to doing `(merge-with (fn [x y] (or x y)) {:a nil} {:a \"val\"})` without having to create an anonymous function?\nisn\u2019t that just `(merge-with or ...)`\noh, macro\nAny chance you can inhibit nils in your map to begin with?\nI can\u2019t think of an alternative that\u2019s clearer (other than to avoid having nils in the first place)\n`#(or %1 %2)` seems less noisy in this case, but I haven't got anything better\n`#(some identity %&amp;)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "103",
    "text": "`(fn [&amp; vs] (some identity vs))` for the variadic case?\nWho could advice good material on integration testing on Clojure please?\ni\u2019m sure the lack of deployment details probably isn\u2019t very helpful, but any place to even start looking would be appreciated\nthe print statements i put in all of the dependencies all appear in the logs, so it looks like they\u2019re all getting compiled, oddly enough\nit\u2019s just the encompassing `require` that seems to be failing somehow\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "104",
    "text": "hey guys, tearing my hair out over this error i\u2019m getting \u2026 some dependency load is failing with `ExceptionInInitializerError`. this only happens when i run the program on our aws deployment. everything works fine locally. anyone seen this sort of thing before?\nare you aot compiling? or are any of your deps aot compiled?\nwhat build tool/dependency manager/classpath builder are you using?\nThere are several PDF variations that print on 2 pages, if the text isn't too small for you to read, including a US letter color version at the \"Download PDF version\" near the top of the page.  Some other variants available within a couple of clicks through the \"Source repo\" link next to that.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "105",
    "text": "Not sure where to report this, but seems that Clojure 1.9 is missing from <https://clojure.org/community/downloads_older> ?\nSpotted because <https://clojure.org/community/downloads> currently lists Clojure 1.10, but other page only goes up to 1.8.\nIf someone points me in the right direction I can raise a PR (.patch?) on this later, but if it's easy to fix now then go ahead\ngotcha, thank you\nthat\u2019s my bad, I\u2019ll fix! Thanks for the catch\u2026\nIf you haven\u2019t completed the 2019 Clojure survey, now\u2019s a great time - takes about 5 minutes. <https://www.surveymonkey.com/r/clojure2019>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "106",
    "text": "I wasn\u2019t sure what to expect with Java usage in the survey but the early results are \u2026 interesting\nCare to share what\u2019s interesting? :smile:\noh, just wasn\u2019t sure how people are rolling with the whole Java 9/10/11 and LTS release schedule\nI\u2019ll refrain from details till we get through the whole survey period\nsounds like a fun project :)\nthat\u2019s not a Maven artifact\nthat\u2019s the clj version (for the Mac brew installer or in the linux scripts at <https://clojure.org/guides/getting_started>)\nSo the 1.10.0 artifact pulls the latest?\nthey are separate things\nyou need clojure (Maven artifact org.clojure/clojure, version 1.10.0)\nand the clj tool (version 1.10.0.411), which you can install with the instructions on the link above\nI misread what you were saying. I'm unfamiliar with the clj tool\nWhat are you trying to do?\nThis thread started with a question about how to use the `clj` tool for REBL with Java 11 and Clojure 1.10\nI just wanted to make sure I was on the latest version. I misread what you were talking about is all.\nok.  1.10.0 is the newest version of Clojure :)\nI am on Arch Linux and just install the `clojure` package. Now I'm just mainly curious if it is the latest version since it just prints out the Clojure version and not the version of the tool itself.\nLooks like it is on 1.10.0.408\nI\u2019m not sure what the Arch package is or who makes it, but that sounds like the clj tool. You should be able to type `clj` at the terminal to get a repl.\nthe version of `clj` is actually independent from the version of Clojure you use\nany version of clj can use any version of the Clojure language\n<https://www.archlinux.org/packages/community/any/clojure/>\nI understand they are two different things so we're good on that\nyeah, that\u2019s just a variant of the linux installers listed at <https://clojure.org/guides/getting_started>\nRight and - usr/share/clojure/libexec/clojure-tools-1.10.0.408.jar\nSo it's slightly behind\nyeah, just one fairly esoteric bugfix in 411 vs 408 so you are highly unlikely to care\nExactly\nah, indeed there is a PDF version! Missed that. Thanks a lot!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "107",
    "text": "What do you think about a site that mines review data on \"clojure\" books via Amazon?  Would you consider that to be objective enough? The referral money for the links on the site could go back to the community (or for sponsoring the development of the site itself)\n<https://github.com/igrishaev/etaoin> works quite nicely for me.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "108",
    "text": "Haha... \"Common household products that can kill you instantly. More at 11\" :joy:\n\nCaptured our interest for sure.\nGetting a maven error for that version string.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "109",
    "text": "Still stuck in Java 7 Land at work... and\n<https://github.com/yetibot/yetibot/issues/804>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "110",
    "text": "Did something change about Clojure memory consumption? Hello worlds still consume 256 MB? I am asking in the context of making N instances in environment like kubernetes. Small services can consume very fast too much memory.\ndoes it consume or request 256m of memory\nright, starting a repl here indeed has a initial heap size of 256 of which only 27 is in use. You could probably use the default memory flags of the JVM to change that\nI was trying it a few years ago and my conclusion was Clojure wrapper for Java takes around 256 MB. I have no idea how it looks today.\n(I checked with VisualVM, the (initial) heapsize is indeed 256, but its not all used, you could probably further restrict that to 64)\nYou seem to be able to pass `:jvm-opts` in your leiningen project file (similarly for `deps.edn`), but the exact correct flags for the JVM are beyond me for now.  Check the usual JVM resources\nSo how many MB are \u201clost\u201d only to run Clojure app?\nI feel confuse how it will behave in practice after such cut of memory\nJVM will use more memory than it requires by default. If you want to see how low you can go with memory, you have to limit the memory that is available to the jvm. For example by passing this `-Xmx64m`\nalso, keep in mind that java 8 cannot determine the memory limits of a container reliably (it will in stead take the memory limit of  the host).\nbut then wouldn\u2019t clojure app have bad performance or other downside?\nYou can get past that with -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap\nthat is what you have to figure out\nall I wanted to say is that JVM will take more memory that strictly needed by default\nheh ok thx :wink: Just curious what is people experience about memory consumption for services in clouds\ndo you use java8?\nnow I use 11\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "111",
    "text": "If you wanted to write as many bytes as possible per second to a file on the file system on clojure-jvm, how would you do it?\ntoo general question, but mainly I will buy fast hard drive :wink:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "112",
    "text": "Let me specify then: Would you recommend any specific programmatic route? I've tried out <http://clojure.java.io/output-stream|clojure.java.io/output-stream> but it's not anywhere close what I get out of dd.\nI never did performance research for such case. I don\u2019t feel competent to answer. From general point of view I will try to read stream from memory if possible, if know size before save create X MB empty file and write to it (not really sure how and if it performance better, but I think it should), if you can use `dd` use it instead clojure library.\nMaybe use bash input stream instead? But it shouldn\u2019t be the case. I guess it is something about `dd` copy whole blocks which is something different than stream.\nI'll probably look at java.nio next.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "113",
    "text": "How would I get the var from my function or macro argument? `(defmacro b [f] (var f))` throws `CompilerException java.lang.RuntimeException: Unable to resolve var: f in this context, compiling:(null:1:17)` and `defn` has the exact same behaviour.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "114",
    "text": "Anyone know of any recent libraries similar to `pallet` and/or `re-ops`? Interested in managing infrastructure from Clojure directly\nThis is interesting. Looks like the symbol needs to resolve to a var at compile time not runtime.\nSomething like this works: ```(defmacro b [f] `(var ~f)) (b x)``` given that x is already a defined var.\nBoth `defn` and `defmacro` are calling `var` special form during evaluation of a `defn` or `defmacro` definition (unless it is quoted).\nThis makes sense because vars represent identities that must not change even though the value that is pointed at by them may change at runtime.\n<@Xiomara> can probably give a better or more accurate explanation here.\nI don\u2019t but I have this feeling I shouldn\u2019t use Clojure as tool for DevOps. I was trying in the past, but\u2026 I had bad experience. Just  because of such solutions are not enough popular to be well supported and integrated.\nBetter to learn good DevOps tool\nIMO\nUnfortunately I have this impression all open source cicd tools are just bad :slightly_smiling_face: <https://concourse-ci.org> is open source and very interesting solution - unfortunately it is doing a little to slow progress while paid competitors are much faster. <https://codefresh.io> and <https://circleci.com> are good paid alternative IMO if you have budget.\n<@Epifania> but doing this in Clojure is a bad idea, because of the reasons which I mentioned above - just my opinion\n<@Isa> yes, so I'm not interested in ci/cd really, but just to manage instances from different cloud hosters. I personally already know Terraform for managing infra, but this project is a bit different. In the end, the UI I'm building is backed by a Clojure application, that app should be able to create/destroy cloud instances for the user, so can't really ask them to just learn Terraform instead :slightly_smiling_face:\noh and gitlab cicd\nprobably will end up with some common interface, then wrappers around existing cloud libs to support that interface in the end. Seems easy enough but wanted to avoid writing it from scratch\nhmm I don\u2019t know details to try help\nIt looks like you have some kind of not standard needs\neh, actually quite simple. Just need to be able to create/destroy/stat(get metrics) from hosts. `pallet` looked really nice for exactly this but seems outdated. If interested, here is the project described: <https://github.com/ipfs-shipyard/cube>\nI remember there was a library for Clojure to create pipelines in Clojure code. But what it does was draw UI. But I don\u2019t remember the name and can\u2019t find it in google.\nIf it help in any way (from UI perspective)\n<https://github.com/flosell/lambdacd> this one, but it doesn\u2019t look like it is well supported\nBut idea was nice :slightly_smiling_face:\n<@Epifania> as alternative maybe you can use kubernetes do deploy / destroy etc. ?\nthen you can use the same way for all cloud providers\n<@Isa> thanks, but kubernetes is the wrong abstraction, still need to create the kubernetes cluster somehow, and that's the missing piece I'm out after right now\nok so as another alternative you can run bash commands. Most of the popular providers let manage instances by bash commands\n<@Isa> well, bash is a horrible language. I'll probably end up going the route described in <https://clojurians.slack.com/archives/C03S1KBA2/p1547043029371400> (with http APIs)\nYou can run bash commands from Clojure. You don\u2019t have to write bash scripts\n<@Isa> you mean with `clojure.java.shell`? In the end the bash commands you talk about end up doing http requests, so can just do the requests directly from clojure instead...\nyes, but it could be easier than interop and update, just saying an alternative\n<@Epifania> if you're serious about functional programming and linux, there's Nixos <https://nixos.org/>\n<@Toby> yeah, I looked at nixos (specifically nixops) before. Didn't find anything that would concretely help me, but I did get some useful ideas from reading and understanding it\n<@Toby> Interesting, what is the real difference in practice\nnixpkg is basically a immutable package manager, which is super useful (especially for work machines). Do an upgrade and something broke? Just rollback the entire system to the previous version and stuff is working again. nixos is a operating system using nixpkgs and the immutable ideas\nHmm but considering for everything I use Docker images\n<@Isa> nixops is for the instance setup itself, not the application runtime you run on the instance.\nto run your images, you need a host + docker daemon somewhere. Nixops would help you operate that host + daemon\nI mean with docker images there is no issues about rollback / update\nJust thinking if NixOS can has benefits for me\n<@Isa> nixpkgs can be used for building package ie your own app, due to its immutability even your app is reproducible (except database and file system)\nanyway, it's a lot to learn, so you may consider cost vs benefit\nWell in this case I am thinking about it more in the sense to be early adopter :wink: Just curious what they did, but probably you are right.\npersonally I hope nix (the package manager) takes over the world. Seems to be the only package manager who does things correctly.\nthe same here :slightly_smiling_face:\nTrue, but I am afraid it is good for developers, not for common people :wink:\neh, common people don't use package managers anyways :slightly_smiling_face:\nthat is why it doesn\u2019t matter for most of the people making it hard to became popular :wink:\nSurely it can be popular within certain populations. As long as we are speaking package managers it makes sense to speak of popularity with users of package managers.\n`var` is a special form - it expects a symbol literal that corresponds with a var.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "115",
    "text": "I wouldn't compare performance to dd.\n<@Reiko> did you finish research about <https://github.com/juxt/yada> ? I am wonder if it is worth to switch to use it\nYeah, I'm using it right now. My site is super basic, but it's been a really nice experience and the amount of code I had to write was tiny\nIs it public repo?\nMy site? No\nHow did you find out this repo exist?\nWhat?\nHow did you get info about <https://github.com/juxt/yada> ?\nI have a question. How can I get arglist from `fn`\n``` clojure\n(defn func1\n  ([a])\n  ([a b]))\n\n(:arglists (meta (var func1)))\n;;=&gt; ([a] [a b])\n\n\n(def func2 (fn\n             ([a] (inc a))\n             ([a b] (+ a b))))\n\n(????? func2)\n;; =&gt; ([a] [a b])\n```\nAsking because maybe I should start read some blog or something, because I miss that info\nyou can't\neven using reflection?\nyou could reflect on the class backing that anonymous function and look for the `invoke` methods, and you'd get the arg numbers\nbut blargh\nwhy do you need this?\nI want to call that function, using map.\n(do-someting func1 {:a 1 :stuck_out_tongue: 2})\n```\n(do-someting func1 {:a 1 :b 2})\n```\nOh. I saw it in my research of popular libraries for creating an API server. It was mentioned in multiple places so I just read the docs at <https://juxt.pro/yada/manual/index.html>\n<https://gist.github.com/hiredman/71b71e4e07e7666fe1b9def9a476c765#file-lrun-clj-L11-L13>\nSlack is kinda weird about triple backticks. To actually get Clojure syntax highlighting you need to add a code snippet with the '+' button.\nthe doc-string for `sort-by` doesn't mention that it is stable but I thought i remember hearing this? Am i mistaken?\n<https://clojuredocs.org/clojure.core/sort-by>\nthanks. wanted to make sure i wasn't just going on rumor\noh. i'm in cljs. and that is conspicuously absent from the docstring\nyeah. just put in <#C07UQ678E|cljs-dev>. It's a comment from Stu Halloway from 8 years  ago that it is stable but the doc string purposefully doesn't promise it\nit's stable _right now_. But this is asking if cljs will promise this for all future versions essentially\nSo i'd think that would be the better documentation than being ambiguous\nit's not ambiguous i suppose. it doesn't promise stability even though it has it. it just seems like this is something that it can promise though is all\nIt's ambiguous by not stating. I'm suggesting it state exactly what you said - currently stable, but not guaranteed in future versions\nThen update the documentation if that changes...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "116",
    "text": "\"Guaranteed to be stable\"\n<@Becki>\nthat was added in clojure at some point a couple releases ago, maybe corresponding needs to be verified and added in cljs\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "117",
    "text": "Why not? Is it stable or not?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "118",
    "text": "<https://github.com/juxt/edge> this could be interesting place with best practices\nat least examples :slightly_smiling_face:\nIf the docstring is updated, it should be to just add \"Not guaranteed to be stable\" -- saying it's stable _now but might change in the future_ isn't useful, IMO.\nIf a docstring says \"property X is true but might change\", folks can't rely on property X remaining true so either they rely on it today (and might have their code broken in subtle/unexpected ways) or they explicitly don't rely on it at all (even tho' it may never actually change).\nIt's better to either explicitly guarantee property X or explicitly not guarantee it.\nagreed. although i'm hoping that the 8 years of stable sort means it will just be acknowledged as a promise. But sean that's a very good comment you should leave on the ticket. Mark it as not guaranteed stable or guaranteed stable to remove confusion?\nWhat ticket?\nJust ran to lunch. New cljs one\n<https://dev.clojure.org/jira/browse/CLJS-3035>\nboth flambo and sparkling haven't done any commits the last 6+ months..\nComment added :slightly_smiling_face:\nappreciate your experience and sharing it :slightly_smiling_face:\nall i'm looking for is what i can bank on for the future. if it is reasonable to promise stability I'm good. If there is no commitment to stability I need to find another solution regardless of current behavior\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "119",
    "text": "hey peeps, any advice which library to use with Spark ?\nI don't agree with that as \"not guaranteed to be stable\" is ambiguous. It is not stating that is or isn't stable, which was Dan's original question. If the documentation were to state that it is \"Stable, but not guaranteed\" now it's not ambiguous.\nI think it would be helpful if we had an explanation on why it may not be stable in the future\nI'm answering this as someone who spent nearly a decade working on ANSI/ISO standards committees. Saying \"Stable, but not guaranteed\" is not useful. Saying \"Not guaranteed to be stable\" provides more useful information.\n(because it makes it clear that the stability of the current implementation is just an implementation detail and not part of the contract)\nPlease explain to me how something that is ambiguous is more useful than something that is not ambiguous\nThe documentation should reflect the current behavior. If that behavior changes then the documentation should change with it. If it is stable now, then it should state that it is stable. If it becomes unstable then the documentation should change with that.\nBehavior in software changes. I don't subscribe to the idea that the documentation should try to predict the future.\nStability of a sort is either part of the contract or part of the implementation. You need to know whether it is part of the contract. Either it is intended to be stable or it is not. That is true across Clojure's APIs in general -- if the implementation happens to provide \"more\" than the docstring, what's in the docstring is all you can rely on.\nIn this case, the docstring provides no guidance (although it _does not guarantee stability_ today so it's actually just fine as it is).\nThat may or may not be meaningful. Clojure libraries have a tendency to be completed for their stated objective(s) and haven't needed to change anything since then.\nIf a Clojure docstring provides a guarantee, that is considered when changes are made in the future -- because the core team have a principle of not breaking guaranteed behavior.\nIf the docstring provides no guarantee, behavior _can_ change without needing to update the documentation (since the behavior was never guaranteed).\nIt's a courtesy for the docstring to be explicit about not guaranteeing a specific behavior. That's kind of Clojure's basic position on a lot of things.\nI am aware of that. However in this specific case Spark is already at 2.4 and the libs are in 2.1\n<https://clojurians.slack.com/archives/C03S1KBA2/p1547055059407300>\nDocumentation of goog.array/stableSort:\n\"Sorts the specified array into ascending order in a stable way. If no opt_compareFn is specified, elements are compared using goog.array.defaultCompare, which compares the elements using the built in &lt; and &gt; operators. This will produce the expected behavior for homogeneous arrays of String(s) and Number(s).\"\nhuh, googles impl of stableSort is actually quite interesting. Expected an actual stable sort algorithm, but instead they change the comparator to also take index into account.\nSo it gains `2n` extra time complexity for looping the array twice to add/remove indices, and `n` memory for the array of value/index pairs that is actually sorted\nRight, and if the decision is to _guarantee a stable sort_ -- as the Clojure docstring does -- then updating the (ClojureScript) docstring to make that same guarantee _about current *and* future behavior_ would be the correct thing to do.\nYou're missing my point that if there is no intended guarantee of that behavior, then the current docstring is accurate: it _makes no guarantee_ about stability.\nClojure's docstrings are generally very careful about what they do and don't guarantee. If they guarantee something, it is a contract that can be relied on and will not break in the future (because Rich says breakage is bad).\nIf a docstring does not guarantee a specific behavior, then that behavior can change (because it wasn't part of the contract).\nDoes that make what I'm saying clearer?\n(Maybe put it like this, that it _uses_ stable sort is an implementation detail, it could as well use quicksort, which is not stable, but that wouldn\u2019t matter as the stability is not required by the contract between caller (you calling sort) and the callee (cljs\u2019s sort))\nthat's an interesting find <@Tammera>\nI guess that calling into v8s default sort algorithm is so much faster, that implementing a stability guarantee in javascript is more performant than implementing a complete stable sort alg.\nOr; it was easiest. But I am not yet prepared to accept that google engineers take shortcuts too.\nyes. it's using the built in sort on arr which probably changes algo depending on size.  i've heard of quick sorts bottoming out into insertion sort at small n, etc\n(not saying that is what is happening here but could be the reason not to duplicate that kind of stuff)\nyeah, lists of less than 10 are actually instertion-sorted\nOkay, I was quite wrong: <https://v8.dev/blog/array-sort>\nSorting in javascript is a complete can of worms\nI've understood what you're saying this whole time; I just don't agree with it. I don't believe my point is being understood, which is that the Clojure version is guaranteed stable and there is no reason that can't be true of the ClojureScript version as the function it is using is guaranteed to be stable. The goog.array library could disappear off of the face of the Earth and we'd still be fine because we could recreate the implementation as it is open source and relies only on essential JS operations that aren't going to change. The fact the CLJS code hasn't changed in 8 years should be a testament to that.\nJust O(n) extra: \"Runtime: Same as Array.prototype.sort, plus an additional O(n) overhead of copying the array twice.\"\nright, `O(n)` and `O(2n)` are the same complexity class: `O(n)`, it really loops over the array twice\nYou're still missing the point: the question isn't how it is implemented but _whether the intent of the design_ is for a stable sort or not on cljs.\nIf David Nolen (or whoever can make that decision) says \"Yeah, we intended it to guarantee stability\" then there's no question: the docstring should be updated to reflect that design intention as a guarantee -- and any future implementation changes should reflect that. If he/they say \"Nope, we are not guaranteeing that for cljs\" then the current docstring is correct, but I think it would be a courtesy to update the docstring to reflect that stability is (explicitly) not guaranteed.\nPlease stop accusing me of missing the point when I've stated I just don't agree with what you're saying. I just referred to that indirectly in my above message. Obviously we still need to check with the powers that be what their intentions are. I stated that, _objectively_, there isn't any reason it couldn't be guaranteed given the expected and current functionality. I am not speaking for the powers that be as that is not my place.\nThat being said it also begs the question as the implementation that has survived 8 years uses an, _explicitly_, stable sort function so I would think it should be pretty clear what the intention was when that code was written as they could have used any other sort function, but deliberately chose that one.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "120",
    "text": "Hi all! I've built a small tool (based on `rewrite-clj`) that allows to search for a certain values in Clojure files (like `grep`)\n\nIdea is that one can try it from command line in seconds (no need to install): <https://github.com/andrewboltachev/fo0001#clojure-value-finder-like-grep>\n\nNot sure if alternatives exist. Feedback appreciated :slightly_smiling_face:\n<https://twitter.com/djleeds/status/1082838230662348800>\nsomeone go make that for Clojure! :)\nIt does exist for java streams: <https://plugins.jetbrains.com/plugin/9696-java-stream-debugger>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "121",
    "text": "cc <@Alison> :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "122",
    "text": "Not for Clojure yet, but it\u2019s on some list I have somewhere.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "123",
    "text": "Anybody around?\nCan someone ban this guy (Tariq Nasheed)\nlol 3...2...1...\nyeah, it\u2019s annoying\nAdmins know about it\nthis guy being <@Celinda>\nI thought at-everyone is disabled\nyeah i was surprised sa well\nStop!\ndude!!!!! dont do that!\nLast time this happened, they were impersonating an existing user, too.\nwhoa\nracists\nthat has to be the most confusing meme i\u2019ve ever seen\nI didn\u2019t type that\nwhite supremacist slack\nhow do you block someone?\njust like that\nUFA3W5N4U is the account that posted\nThe spammers probably found a way to bypass it\nGiven they already have robust impersonation utilities.\nfyi, /collapse can be used to collapse all media in the room\nmaybe this the catalyst for the clojure community moving on from slack?\nand btw: do not download any attachments posted\nPerhaps that\u2019s how they\u2019ve been able to impersonate?\nfunky\nTurn off inline image display in your preferences, too; it's not often needed in this slack, and better safe than sorry\nPreferences &gt; Messeges &amp; Media\nUser deactivated. We're working on deleting the messages wherever they got posted. Feel free to post in <#C04V84U7G|slack-help> with links to ones we haven't gotten to yet. And, yes, these bots are able to get around the restrictions that Slack lets us put in place to prevent non-admins using @ everyone/channel/here...\nHuh, the above comments from \"Tariq\" are interesting. That makes it seem like either a) it was a human troll rather than a bot, or b) the bot watches for its (impersonated) name and then says the stuff above. Bit more sophisticated than I expected.\nAlso if you remap caps lock to control the caps lock button still makes the text box take focus rather than copying :disappointed:\nIt's definitely a human at the wheel, there were direct back-and-forths in the original attack as well\nthat sounds like a rabbithole\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "124",
    "text": ":sweat:\nConfirmed via an article one of the other members here sent me (thank you <@Sebrina>!). You can hack the permission client-side in JS and then spam with immunity it seems. Slack have known about it for two and a half years and confirmed a year and a half ago that they won't fix it. Sigh.\nProbably the only thing we can do at this point is to change the auto-inviter to require moderation somehow.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "125",
    "text": "yeesh, client-side permissions enforcement?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "126",
    "text": "Hello all, I\u00b4ve got this from result `#object[java.util.Optional 0x5c2aa319 Optional[2019-01-09T23:01-02:00[America/Sao_Paulo]]]`, what is that?\nis that any way to convert to `ZonedDateTime`?\nit has a `.get` method <https://docs.oracle.com/javase/8/docs/api/java/util/Optional.html>\nin general, if you get an object that isn't familiar (especially a java.* object) the javadoc is going to be your best bet\nyou might also want to use one of the methods there to do some default action of it's empty, rather than throwing an exception as get will\noh, I got it, thanks\n`.get` did the job\nsome examples of playing with it in a repl: ```(ins)user=&gt; (java.util.Optional/of 1)\n#object[java.util.Optional 0x319bc845 \"Optional[1]\"]\n(ins)user=&gt; (.get *1)\n1\n(ins)user=&gt; (java.util.Optional/of nil)\nNullPointerException   java.util.Objects.requireNonNull (Objects.java:203)\n(ins)user=&gt; (java.util.Optional/ofNullable nil)\n#object[java.util.Optional 0xe84a8e1 \"Optional.empty\"]\n(cmd)user=&gt; (.get *1)\nNoSuchElementException No value present  java.util.Optional.get (Optional.java:135)\n```\nusing a default value instead of throwing: ```\ncmd)user=&gt; (java.util.Optional/ofNullable nil)\n#object[java.util.Optional 0xe84a8e1 \"Optional.empty\"]\n(ins)user=&gt; (.orElse *1 0)\n0\n(ins)user=&gt; (java.util.Optional/of 1)\n#object[java.util.Optional 0x23d1e5d0 \"Optional[1]\"]\n(cmd)user=&gt; (.orElse *1 0)\n1```\nnot that fancy but debux works for me in those cases: <https://github.com/philoskim/debux#81-dbg-inside-dbgn-or-vice-versa>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "127",
    "text": "<@Melynda> I am interested in knowing the exact use case here. What are you trying to accomplish with a macro like that?\n<@Iva> That macro is an MWE. The end goal is to retrieve specs with `s/get-spec`, which requires a var as argument. I was wondering how to get that var.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "128",
    "text": "Got everything working now with yada. Final code is nice and small.\nI see an exotic regression between clojure 1.8 and newer versions. From 1.9 onwards this is now invalidated by clojure spec ```\n(let [f (fn [] \"hi\")]\n  (eval `(defn foo [] (~f))))``` In older versions this was possible\nIs this a bug or a feature? :slightly_smiling_face:\nthe problem has got nothing to do with the fn\nyour `foo` is namespace qualified\nshould be `(defn ~'foo`\nah sharp\nand the fact that it's rejected by spec now is indeed a feature\nThanks, sorry for the noise\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "129",
    "text": "Is there a channel on the slack for telling people that hey, I just published a library on Clojars in case anyone is looking for something similar?\n<#C06MAR553|announcements>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "130",
    "text": "is there a way to fully qualify symbols in a data structure that\u2019s not a literal? e.g.:\n``` \n(qualify (clojure.edn/read-string  \"{str #{:clj :cljs}}\" ))\n```\nwhat is the result you want out of that?\n`{clojure.core/str ....}`\nyou can use `clojure.tools.reader/syntax-quote`\nalthough you probably want the function equivalent\nperhaps in conjunction with this <https://stackoverflow.com/a/43722784/10667553>\n<https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj#L1005-L1006>\n<@Clarine> <@Harris> <https://github.com/clojure/spec-alpha2/blob/639767ebe1491536ec7404d8b478628ecfe9200b/src/main/clojure/clojure/spec_alpha2.clj#L315-L326>\n`explicate` is a great word <@Jasmine>\nthat won't respect quoting\nbut if you don't care it's fine\nif you're using edn you probably don't anyway\nyeah, I\u2019m reading from EDN\nfull example for those interested:\n``` \n(defn- explicate-1 [a-ns form]\n  (walk/postwalk\n   #(cond\n      (keyword? %) %\n      (symbol? %) (or (-&gt;&gt; % (ns-resolve a-ns) symbol) %)\n      :else %)\n   form))\n\n(comment\n  (explicate-1 'clojure.core (clojure.edn/read-string \"{str #{:clj :cljs}}\"))\n  ;; =&gt; #:clojure.core{str #{:clj :cljs}}\n  )\n```\nthanks all\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "131",
    "text": "Hey all, can anyone suggest how I can twist `clj-http's` arm into sending such as request\n```\ncurl -i -XPOST -H \"Content-Type:application/octet-stream\" -H \"Authorization: Bearer blah\" --data-binary \"@/Users/me/Downloads/an-image.png\" <https://upload.contentful.com/spaces/space-id/uploads>\n```\nI've tried\n```\n{:body         (IOUtils/toByteArray (io/input-stream \"Users/me/Downloads/an-image.png\")\n``` but get a 404 from the server\nand what was the rest of your clj-http call?\nare you sure you're hitting the right endpoint with the right http method?\nalso I'd be surprised if clj-http couldn't just use an input-stream directly\n404 seems unlikely to be the result of the body content\nYeah, I believe so, I've tried the same ensuring same url with IntelliJ's http client without specifying the actual binary data, and again receive a 404, so I believe that's the servers behaviour.\nFull request coming after I've stripped secrets :wink:\nare you sure you're doing a POST?\n```(-&gt;&gt; (client/post\n       (str\n         \"<https://upload.contentful.com/>\"\n         (System/getenv \"CONTENTFUL_SPACE_ID\")\n         \"/uploads\")\n       {:body         (IOUtils/toByteArray (io/input-stream \"/Users/will/Downloads/BP TUM Pictures PNG/TUM1 001K.png\"))\n        :headers      {\"Authorization\"             (str \"Bearer \" (System/getenv \"CONTENTFUL_MANAGEMENT_KEY\"))}\n        :content-type \"application/octet-stream\"}))```\nYeah, definitely a post.\n<@Sharika> did you tried using the `input-stream` directly? (remove the `IOUtils/toByteArray`)\nNope, still 404.\n<@Sharika> you might need a `.trim` on the thing you get from `getenv`, i've had that problem before\n```(-&gt;&gt; (client/post\n       (str\n         \"<https://upload.contentful.com/>\"\n         (System/getenv \"CONTENTFUL_SPACE_ID\")\n         \"/uploads\")\n       {:body         (io/input-stream \"/Users/will/Downloads/BPTUMPicturesPNG/TUM1001K.png\")\n        :headers      {\"Authorization\"             (str \"Bearer \" (System/getenv \"CONTENTFUL_MANAGEMENT_KEY\"))}\n        :content-type \"application/octet-stream\"}))```\nInput-stream seems okay ```(io/input-stream \"/Users/will/Downloads/BPTUMPicturesPNG/TUM1001K.png\")\n=&gt; #object[java.io.BufferedInputStream 0x36e4cf6f \"java.io.BufferedInputStream@36e4cf6f\"]\n```\nwhat about directly using the string instead of creating it using getenv (for now) - or at least verifying that CONTENTFUL_SPACE_ID is space-id\nUm... removing the `--data-binary` param from `curl` command returns 400, not 404, so it definitely seems to be something wrong with my clojure code, and not server weird 404s when no file is uploaded :thinking_face:\nWill do :white_check_mark:\n`spaces` is not in the url, while it is in the curl command?\nyeah -that would likely explain it\nunless CONTENTFUL_SPACE_ID was `spaces/space-id` of course\ntrue\nthis is why people hate strings\nHaha, yeah! that will be it! Thank you rubber ducks!\nYeah, that works!\n:duck:\nHaha\nIt's funny when you're learning new tech, libraries, etc, how you assume failures are down to your lack of knowledge about that thing, rather than the basics!\nthere's a clj-http-fake lib, that is useful for separating this kind of issue from server misbehavior <https://github.com/myfreeweb/clj-http-fake>\nOh, and thanks for suggesting removing commons; it's great to remove dependencies!\nIt never stops happening :wink:\n(for me, at least)\nIt certainly hasn't for me either, in my 20 years commercial programming!\naye\nhow does macroexpansion interact with laziness? For instance do I need a `doall` around the `for` here?\n```\n(defmacro defstyle\n  [style-id &amp; styles]\n  `(defstyle* ~style-id\n     ~@(for [style styles]\n         (walk/postwalk (fn [node]\n                          (if (map? node)\n                            (prefix node)\n                            node))\nstyle))))\n```\nthe compiler is eager, so you shouldn't need doall\ngreat, thanks!\nthis all depends on what defstyle* does of course - some forms aren't eager of consuming their arguments...\nbut the absence or presence of doall wouldn't change this\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "132",
    "text": "Not that I'm aware of. But if you find or start a project like that, I'd be happy to contribute!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "133",
    "text": "Has anyone tried to write Kafka Streams code in Clojure? I have googled a few libraries, but haven't found any reports of what works and what does not in reality.\nDunno if this helps but this one was posted to the Clojure reddit a few weeks ago: <https://www.reddit.com/r/Clojure/comments/aa12wz/ziggurat_a_stream_processing_framework_to_build/>\ninteresting. I subconsciously used this as a feature in a test for months now\u2026\n``` \nuser=&gt; (str/includes? {:a 1} \"1\")\ntrue\n```\nThanks, I'll have a look.\nhmm yeah it toStrings the input `(.contains (.toString s) substr)`\nlooks like several of the clojure.string predicates do the same\nit\u2019s because they assume the interface CharSequence as an input, not Object AFIAK\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "134",
    "text": "my company open sourced our kafka-streams library recently, <https://github.com/FundingCircle/jackdaw>\nyeah, it worked accidentally. I changed the code now :wink:\nif only that worked in real life\n\u201cI put a chainsaw in my toaster and it accidentally came out as toast\u201d\nInstaparse question: I have an existing yacc/lex grammar; I assume the yacc one is the least strenuous to port over (there's no embedded code besides `yyerror`), I'd like to use this with instaparse which takes EBNFs -- any chance someone has done something like that and has a converter laying around? I feel like as soon as I'm writign a file called yacc.cfg and lex.y I have taken a wrong turn\n<https://github.com/jrester/EBNF.cr> claims to do this but doesn't work.\n(the endgame here is being able to parse C headerifles and automagically generating the right Clojure bindings)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "135",
    "text": "you might try using, uh, I forget, that tool that generates jni bindings, and then relective over the java to generate the clojure\nis that tool really just javah?\n(it is not)\nswig is what I am thinking of\nI just checked `(doc eduction)` and `(source eduction)` and their doc strings differ. I didn't think this was possible?\nit is\nWell the arg lists i suppose is different to be more precise\nfor example, whatever tooling you use might override doc\nwhich arglists?\n```\n  {:arglists '([xform* coll])\n   :added \"1.7\"}\n  [&amp; xforms]\n```\nand what does doc say?\n```\nuser&gt; (doc eduction)\n-------------------------\nclojure.core/eduction\n([xform* coll])\n```\nWhich lib is better for clojure selenium? <https://github.com/komcrad/webdriver> or <https://github.com/igrishaev/etaoin> or other\nthat matches\nthe arg list in the source is\n```\n  [&amp; xforms]\n  (Eduction. (apply comp (butlast xforms)) (last xforms)))\n```\nthe definition includes custom metadata that overrides the arglist form\nthe arglists meta overrides\n`:arglists '([xform* coll])`\nok. threw me for a loop when i went to check the source.\nthe override is trying to convey something impossible to say in the actual arg list\nwhich is a leading vararg\ni see. thank you\n(side note: `:arglists` can confuse tooling that tries to use that information to check source code -- such as Eastwood -- since the `:argslists` metadata doesn't have to represent a valid actual call)\n<@Celestine> it can also help it. :slightly_smiling_face: ```(defmulti ^{:arglists '([a-map])} do-thing :key)```\nEastwood can't check `defmulti` calls without a hint? I didn't know that.\n`defmulti` can\u2019t attach `:arglists` meta to the var because there\u2019s no general way to derive it from the dispatch-fn.\nWill calling `count` on a vector of lazy seqs realize the lazy seqs?\nNo.\nThought so. This result was confusing:\n```\n(let [xs [(iterate (fn [x]\n                     (inc x)) 0)\n          (iterate (fn [x]\n                     (inc x)) 0)]]\n  (map realized? xs))\n=&gt; (true true)\n```\nGuessing `realized?` must be talking about something else here?\nyeah - I wouldn't trust realized? for lazy inputs - it's reliable for `delay` or `promise` objects\nI tested by adding println inside those function bodies - not even the first element is being produced\n<@Somer> - I had to play with this more - it seems like it kind of works but not for the head of the collection(?) ```(cmd)user=&gt; (def l (iterate println nil))\n#'user/l\n(cmd)user=&gt; (realized? l)\ntrue\n(cmd)user=&gt; (realized? (rest l))\nfalse\n(ins)user=&gt; (realized? (nthrest l 2))\nnil\nfalse\n(cmd)user=&gt; (realized? (rest l))\ntrue\n```\nthat nil after calling nthrest shows one element being realized\nPerhaps because the first element is passed explicitly to `iterate`?\noh! I'll try another thing to test that\nyeah - you figured it out ```(ins)user=&gt; (def l (repeatedly #(println :realized)))\n#'user/l\n(ins)user=&gt; (realized? l)\nfalse\n(cmd)user=&gt; (realized? (rest l))\n:realized\nfalse\n(cmd)user=&gt; (realized? (rest l))\nfalse\n(cmd)user=&gt; (realized? (nthrest l 2))\n:realized\nfalse\n(cmd)user=&gt; (realized? (rest l))\ntrue\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "136",
    "text": "Yeah, the first value in a lazy sequence generated by `iterate` has been \u201cproduced\u201d, and thus the sequence vacuously satisfies `realized?`\n<http://www.learndatalogtoday.org/>\n<https://vvvvalvalval.github.io/posts/2016-07-24-datomic-web-app-a-practical-guide.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "137",
    "text": "`((:close foo))` - how to write instead something like `(-&gt; (:close foo) ())`. I want to make it more readable, but I confused myself :slightly_smiling_face:\nhmm or maybe `((:close foo))` is ok\nwould this look more readable ? `(invoke (:close foo))`?\n<@Isa> maybe something like this?\n```\n(def foo {:bar #(println \"nice\")})\n((-&gt; foo (:bar)))\n```\nI tend to not use `-&gt;` unless it's more nested, one level usually just do `((:bar foo))` directly, but not sure that's idomatic\nwell after rethinking `((:close foo))` is good\nIt is more readable than I thought :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "138",
    "text": "hey all, I started using defmulti/defmethod. Is it intended that you can't use Destructuring with Keyword-arguments in defmethod?\ndispatch function (:type) is applied to three arguments. You should either rewrite youy dispatch function for it to be ready to accept vavarg or get rid of vararg and accept just one map\noh, didn't know that the dispatch-fn will be applied to every arg and not only the first.. Thanks. :+1: I'll use only one map\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "139",
    "text": "You could do\n```\n(let [{:keys [close]} foo]\n  (close))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "140",
    "text": "```\nClojure 1.10.0\nuser=&gt; (take 2 [])\n()\nuser=&gt; (take-last 2 [])\nnil\n```\n\nIs it likely that a patch would be accepted to modify `take-last` to return an empty seq when given an empty seq?\nno\n:+1:\nin general, I would expect any code that uses the result of either of these to work in either case\nexpectation for sequence functions should be that take something seqable and return something seqable\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "141",
    "text": "with Spec, if I have `(s/def my-map (s/keys :req [a b]))` where `a` &amp; `b` are `(s/coll-of something)`, how can I say I want `a` &amp; `b` to have the same length ?\n(not using `:count` - I don't care how long they are, only that they're the same length)\nwrite a function that checks that and s/and it to your spec\n<@Jasmine> much easier than I thought! thankyou\nyou can pretty much write a predicate to check any arbitrary property of data and all predicates are specs\nit's a while since I used Spec, it's all coming back now\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "142",
    "text": "Hijacking a question here, can you specify in an `fspec` what the side-effects of a function may be.  That would basically entail doing something _before_ the fn runs, and _after_.\nFor example, I have a `swap-vals!` kinda thing for redis, I would very much like to assert that the first result you get is the state _prior_ to the function being ran.\n:thinking_face:  :thinking_face:  :thinking_face:  well... nothing stops you from doing effects in your predicates\nmy first instinct is: oh god no\nbut, maybe fine? I wouldn't reach out to your redis instance each time the fn is called\nRight, its an obvious development-only kinda deal right\nmaybe you could have a custom instrumentation that swaps an atom with the before state, then compares in the `:ret`\nIts just that I don\u2019t think you have a hook that is ran _before_ the function is called\n(this is obviously more a code-golfing thing than actually useful, please don\u2019t hate me)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "143",
    "text": "How do I invite a bot to a channel that logs conversations to <https://clojurians-log.clojureverse.org/>\nInvite <@Mi> to your channel\nthere is a web page somewhere that lists api's to third party clojure libraries...help?\n<http://cljdoc.org|cljdoc.org>  &lt;-- found it :slightly_smiling_face:\nAlso <https://crossclj.info/> if you're searching for libraries to solve a specific task.\nThanks Sean, I'll add that to my notes too :slightly_smiling_face:!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "144",
    "text": "<@Celestine> thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "145",
    "text": "Why complicate this? It's calling the function that is returned by the `:close` key. It's perfectly fine the way it is.\nAh, nvm. Didn't see the text that followed.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "146",
    "text": "i've got a pretty lengthy bash command i'd like to execute in clojure. Is there any way i can just execute the full command with all its arguments as a single string?\nsure, via `(clojure.java.shell/sh \"/bin/bash\" \"-c\" cmd)` for example\nyou can do a similar trick with ProcessBuilder if you  need more flexibility about how the command runs\nshell/sh itself doesn't invoke the OS shell - for one thing that's not portable\n<@Fairy> ```ins)user=&gt; (.start (ProcessBuilder. (into-array [\"/bin/bash\" \"-c\" \"ls\"])))\n#object[java.lang.UNIXProcess 0x2a8d39c4 \"java.lang.UNIXProcess@2a8d39c4\"]\n(ins)user=&gt; (slurp (.getInputStream *1))\n\"CHANGELOG.md\\nDockerfile\\nREADME.md\\nTAGS\\nbin\\ndashboards\\ndeploy\\ndev-resources\\ndoc\\ndoc-updates.otl\\ndocker\\ndocker-compose.yml\\neastwood-config.clj\\nprofiles.clj\\nproject.clj\\nresources\\nsrc\\ntarget\\ntest\\n\"```  ```(ins)user=&gt; (require 'clojure.java.shell)\nnil\n(ins)user=&gt; (clojure.java.shell/sh \"/bin/bash\" \"-c\" \"ls\")\n{:exit 0, :out \"CHANGELOG.md\\nDockerfile\\nREADME.md\\nTAGS\\nbin\\ndashboards\\ndeploy\\ndev-resources\\ndoc\\ndoc-updates.otl\\ndocker\\ndocker-compose.yml\\neastwood-config.clj\\nprofiles.clj\\nproject.clj\\nresources\\nsrc\\ntarget\\ntest\\n\", :err \"\"}\n```\nok my issue is parsing out the arguments into an array like that. I tried using conch. And i'm trying to use ffmpeg.\nthis command returns a non-zero exit code at the first step but also returns the info i want, but conch just hangs up at the first error\n```ffmpeg -i /Volumes/Video 1/DRUM_2018-12-19-15-00-54_597.mov 2&gt;&amp;1 | grep Duration | cut -d ' ' -f 4 | sed s/,//```\nyeah, just use ProcessBuilder instead of conch\nyou need to explicitly call bash or sh to get things like `|`\nthose aren't execution features, they are shell features, so you need to start a shell\n(so maybe conch is still OK for you, as long as you start a shell - I found ProcessBuilder much easier to use in anger)\nhaha... so like\n```\n(def output (.start (ProcessBuilder. (into-array [\"/bin/bash\" \"-c\"  \"ffmpeg -i /Volumes/Video 1/DRUM_2018-12-19-15-00-54_597.mov 2&gt;&amp;1 | grep Duration | cut -d ' ' -f 4 | sed s/,//\"]))))\n```\nyeah, but that's more than output - it is a `Process` object that lets you read stdout, stderr, send to stdin, etc.\nin my experience for interactive commands like ffmpeg if I want to send it input lines mid execution etc. Process directly instead of conch was easier\nwow much easier! Thanks!\nglad I could help\nalso, once you have an InputStream you are free to parse each line of input from the process with your own parser if sed and cut aren't \"cutting it\", so to speak\nbut if sed and cut work, no need to reinvent that\nAnybody know how to use missing? with a reverse lookup? Is this supposed to work?\n`[(missing? $ ?l :account/_licenses)]`\n\nAlso, is there a reason why I can't use 2 missing? statements in an or?\n`(or [(missing? $ ?a :account/licenses)] [(missing? $ ?a :account/email)])` (edited)\nError `CompilerException java.lang.RuntimeException: Unable to resolve symbol: $ in this context`\nwhat is \"missing?\"\nyou mean that for the <#C03RZMDSH|datomic>  channel \"?\noh, if it's datomic the who vector should be quoted right?\nyeah... needs to be quoted\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "147",
    "text": "There's more exposure here... but I will politely retreat back to <#C03RZMDSH|datomic> if someone protests me posting here.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "148",
    "text": "Something I discovered today is that YourKit works really well with Clojure in an IntelliJ setup (doesn\u2019t interfere with Cursive).\nFor profiling Clojure code!\nI was reading this earlier: <http://yellerapp.com/posts/2014-05-21-tuning-clojure-an-experience-report.html>\nFiguring out what Java class names correspond to which parts of your Clojure code is kind of difficult though. But otherwise really helpful once you figure out what\u2019s what.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "149",
    "text": "What\u2019s the best way to interop with Java methods that require a java.util.function? I know it can be done with reify but it is a bit verbose. \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "150",
    "text": "There's a library around which provides a macro for that. \nYou'll have better luck asking in the dedicated <#C0FM7N1SM|quil> channel\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "151",
    "text": "Hi, I have a question about quil library. How to I call individual functions in the REPL, e.g. quil.core/random? Most quil function can only be run inside sketch functions  (I think because of state handling). Is the any way to _grab_ the current state in the repl and execute code?\nThanks. didn't know of it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "152",
    "text": "I've just kludged the powershell scripts in <https://dev.clojure.org/jira/browse/INST-15> (and adding the jvm-file and main-file arguments in), and appear to have a working clojure-cli under windows. Has anyone else tried this, and run into further problems down the line?\nI was wondering where those where hiding, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "153",
    "text": "There\u2019s a branch in brew-install with a more up to date version of those\n<https://github.com/clojure/brew-install/tree/windows-port>\nAlthough they are lagging a few of the latest changes \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "154",
    "text": "What is your best stack for authentication and authorization? What do you use?\n- <https://github.com/funcool/buddy> ?\n- With GraphQL or you prefer REST for authentication and GraphQL for authorization with queries?\n- OAuth2?\n- REST API for authentication by POST? Return HTTP 200? JSON input / output?\n\nMy concerns:\n- I want to have GraphQL, but not sure if authentication should be separated as REST API.\n- authentication should return token to use with authorization with GraphQL\n- Users will be able to generate extra tokens for integrations like in GitHub\n\nI confused myself about the way how to solve it. In other words I am asking about your best way how to do it with full details about libraries, methods, concepts, choices :slightly_smiling_face:\n<@Isa> <#C68M60S4F|fulcro> recomends this csrf. I liked it after I met. You generate a token and deliver it on HTML. Then the application send it on body or headers.\n<https://stuarth.github.io/clojure/csrf-pedestal/>\nIt use sessions/cookies. Somehow (pedestal handles it. I dont know how) if the browser do a `F5`, then it deliver the same token.\nThank for that article. That will be for sure something which I will have to do too. For now I confused myself on level of thinking about authentication query / response / library vs my code.\n<https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/dataset#Examples>\n:wink:\nI am talking about BE side mainly now, not FE. Not how to send data by JS, but for example if it should be separate REST API only for auth by POST, accept JSON (not?) and return JSON (not?) by HTTP 200. Or GraphQL, because I want to have it anyway probably.\nHmm my `buddy` can be what I am looking for\nyou can also secure rest api's via jwt\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "155",
    "text": "Is there a way to install dependency from github with a specific sha using leiningen?\n```\n    (case (type x)\n      org.jsoup.nodes.Document x\n```\nI want to dispatch based on the type/class of a thing but this doesn't work as I expected. Do I have to use `if`? Or is there some other construct for this?\nI know that a `deps.edn` can specify that, and I know of integration tools between the two\nbut that may be a bit of a wonky solution\nI guess a class doesn't count as a literal/constant?\nyou could try <https://github.com/reifyhealth/lein-git-down>\nCan\u2019t you define a protocol for this?\nRight, that should work, good idea :+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "156",
    "text": "use `deps.edn`, if you really want to have lein use <https://github.com/RickMoynihan/lein-tools-deps>\nThank you <@Isa>! Since i just wanted to explore hot module reloading with tools.deps.alpha I will definetely stick to deps.edn. \nBtw, may I DM you <@Isa>? I\u2019m seeking for remote job in PL so if you would like to give me some tips then I would be more than grateful.\nsure, I will answer tomorrow. I am going sleep now :slightly_smiling_face:\nSee you!\nHave a deep sleep! :zzz: See you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "157",
    "text": "Classes are not constants\ncondp with = is a good match for this though\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "158",
    "text": "I'm getting this when I run 'clj' on a fresh linux install.\n```cp: cannot stat 'PREFIX/example-deps.edn': No such file or directory```\nok so I found in old slack logs its to do with a botched clojure install\nI can't get it installed though. If I remove the install from linuxbrew then it gives me. bash: `/home/linuxbrew/.linuxbrew/bin/clj: No such file or directory` but if I use brew I get the other error.\nI managed to fix it. I completely removed linuxbrew and followed instructions on Linux install on Clojure website\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "159",
    "text": "Is there not a clojure package in your distro's package manger?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "160",
    "text": "are there core functions/macros that do something similar to this ones I've made\n```(defmacro anon-proxy\n  [draw-fn]\n  `(fn [&amp; ~'args]\n     (apply ~draw-fn ~'args)))\n\n(defmacro map-keyed\n  {:style/indent :defn}\n  [&amp; args]\n  `(-&gt;&gt; (list ~@args)\n        (interleave (map keyword '(~@args)))\n        (apply hash-map)))\n```\nthe first is for live coding with some libraries since you have to have function that calls the one you'll be re-deffing\nthe second is to just get a key/value from a collection of symbols that are in scope.\nGlad to hear, but that may not be necessary if your distro has a package for it. The method on the website is manual updating\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "161",
    "text": "<https://stackoverflow.com/questions/54177410/calling-special-form-set-in-a-clojure-macro>\nI\u2019m having some fun with the cognitect AWS library, specifically with the KMS functions.. is there a good place to ask questions around this..?\nthe hash aws channel here seems dead :disappointed:\n`{\"__type\" \"InvalidCiphertextException\", :cognitect.anomalies/category :cognitect.anomalies/incorrect}` &lt; trying to find out what this means\nthe `:Decrypt` docs say  `:CiphertextBlob blob`\nbut doesn\u2019t really elaborate what blob is\ni\u2019ve tried byte array, buffered input stream, string..\nthe ciphertextblob output from encrypt is a bufferedinputstream\n<@Arturo> have you enabled validation?\nno\nthat sounds like it might be helpful\nhow do I do that..?\nthere\u2019s nothing about validation in the readme\n`(aws/validate-requests some-client true)`?\nyup\nthanks\nthat really should be in the docs.. think they\u2019d take a PR?\nis there ways people work around the fact that strings and other primitives don\u2019t implement IMeta? For a similar use case as REBL I\u2019d like to allow different viewers for data and I\u2019d like this to work for strings and numbers as well\u2026\nPRs not accepted, but file an issue please\nthis info gave me enough to check the Java SDK API docs:\n\n<https://docs.aws.amazon.com/AWSJavaSDK/latest/javadoc/com/amazonaws/services/kms/model/DecryptRequest.html#setCiphertextBlob-java.nio.ByteBuffer->\n\nand it looks like it takes a `java.nio.ByteBuffer`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "162",
    "text": "vars can be invoked and when done, will invoke the function they hold. so I think they already serve this purpose and on the caller side if you just invoked the var, you could change the var binding as much as you want.\nIs there a _generic-ish_ way to transform stateful systems in functional ones? Namely, I have a server serving a complicated stateful protocol (Wayland to be precise), and would like to read some guide or a war story of turning these webs-of-mutating-objects into something more manageable.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "163",
    "text": "```\n{:status 200,\n :headers {\"Content-Type\" \"application/json; charset=utf-8\", \"Vary\" \"Accept\", \"Content-Length\" \"44\"},\n :body #object[java.io.BufferedInputStream 0x109943d3 \"java.io.BufferedInputStream@109943d3\"]}\n```\n\nHow do you show maps with objects like in this example, but converted to the value (string) I need it for developing purpose\n`slurp` it?\nBut I don\u2019t want to do it on `:body`. I would like to have `fn` like `(show-me-values m)`. Perhaps such function doesn\u2019t exist :slightly_smiling_face:\nBut maybe it exists, so I am asking :slightly_smiling_face:\nnot afaik!\n:slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "164",
    "text": "What `buddy` exactly add on top of `ring` `sessions`? <http://funcool.github.io/buddy-auth/latest/#session> ? It doesn\u2019t look like it is adding something special, but maybe I miss something.\n\nAsking in different way: I need to make sessions based on DB, I am thinking about <https://github.com/clojusc/ring-redis-session> . Does it make sense to glue it in some way with `buddy`?\nI used amazonica for now but when i go back to this, will try it out\nit\u2019s all pretty obscure, a couple of helper functions here would be really welcome\n<@Isa> aren't `ring sessions` just for authentication? Buddy seems to give you authorization too\nMaybe. I am not sure what exactly buddy add. I didn\u2019t use it before.\nBut I see in buddy doc Authentication with sessions\nBut there is no info what exactly is the point of using it\nI am trying to figure out if `buddy` is something for me or not. What I can use from there.\nI don\u2019t see too much benefits while I am using `liberator`, but maybe I miss something. Am I miss something?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "165",
    "text": "any advice on how to parse this string (read-string \"09\")...  It's an invalid number, was gonna maybe strip zero's but if there's anything less complicated, i'd love to know :slightly_smiling_face:\n```java.lang.NumberFormatException: Invalid number: 09```\n```\nuser=&gt; (Long/parseLong \"09\" 10)\n9\nuser=&gt; \n```\nusing read-string to turn a string in to a number is using a missile to swat a fly\n`read-string` is not safe\n`(read-string \"#=(prn :code-injection)\")`\nPrefer `edn/read-string`\nBut sure, to parse a number, you can use `Long` or `(bigdec \"09\")`\nlol\nthanks <@Rosaline>!\nalso read-string has security implications if it\u2019s user input\n`(read-string \"#=(slurp \\\"/etc/passwd\\\")\")`\ncool good to know !\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "166",
    "text": "What do you use for sessions in *clouds* with solution like kubernetes? `redis` to store sessions? `sessionAffinity`? I think the best solution is `redis`, but maybe I am in mistake :slightly_smiling_face: What do you use to store sessions and why?\nI've used Redis for session stores all the way back to my Ruby on Rails days, so I just use the same thing in clojure apps.\nBut... my new app uses a datomic db. So I could probably just use that. But I'm also using redis for a message queue, so, why not... If it ain't broke.\nredis is probably faster for session purpose - my guess\nAlso I guess redis is nice too for expiring sessions.\nCool you can use Datomic. It is a little expensive :wink:\nyeah... i presume redis is faster. But then again, I'm storing a session key and a user id value, and then looking the user up in datomic anyways.\nhmm make sense\nbut the point is you have a token for session\n<@Fairy> for temporary session-state type things, redis would be a better fit than datomic\ndatomic is best used as a system of record. for sessions that you want to throw away after 30 mins or whatever, you're going to end up growing your database very quickly and probably don't need a lot of what datomic brings to the table (at the cost of increased overhead)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "167",
    "text": "Best way to implement `first-and-only`, which checks that there is only one item in coll, and throws otherwise?\n\n```\n(first-and-only [1]) =&gt; 1\n(first-and-only []) =&gt; Exception\n(first-and-only [1 2 3]) =&gt; Exception\n(first-and-only nil) =&gt; Exception\n(first-and-only 1) =&gt; Exception\n(first-and-only [nil]) =&gt; nil\n(first-and-only [nil nil]) =&gt; Exception\n```\n```\n(defn first-and-only [x]\n  (if (coll? x)\n    (if (and (seq x)\n             (next x)\n             (first x))\n      (throw (Exception. \"too many\"))\n      (first x))\n    (throw (Exception. \"not a coll\"))))\n```\nis close, but for instance, wouldn't catch the scenario where the `next` element is `nil`\nCan\u2019t you just count and see if it has 1 item in it?\ni don't want to `count` if i can avoid it\nwhy not?\nif it contains 1029438294839248392 elements, i don't want to count all of them\nah that\u2019s fair\nThere\u2019s `bounded-count`\nthere's a way to do this. i've written this maybe 4 times, but i forget the solution\nah, never used bounded-count, but that's cool!\n```\n(defn first-and-only [x]\n  (if (coll? x)\n    (let [bc (bounded-count 1 x)]\n      (condp = bc\n        0 (throw (Exception. \"not enough\"))\n        1 (first x)\n        (throw (Exception. \"too many\")) ))\n    (throw (Exception. \"not a collection\"))))\n```\n\nbleep bloop\n<@Antione> solutin with <#C0FVDQLQ5|specter>\n```\n(select-one! ALL [1])\n;; =&gt; 1\n;; This thows with a 'good' error\n(select-one! ALL [])\n(select-one! ALL (range))\n(select-one! ALL [1 2])\n```\n<@Becki> good point\n<@Becki> mm, it does not throw\nit handles the \"potentially giant unrealized sequence\" scenario\nI meant on a non collection it should throw. It seems like you want exceptions here. \nahhh\nAnd then you just throw if the bounded count is not exactly 1\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "168",
    "text": "If the bounded count throws the right error you might just be able to use and bounded count = 1 and then first\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "169",
    "text": "read-string cannot recognize a decimal number headed with 0, but it recognizes \"00\" - \"07\", why? they're considered as octal ones\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "170",
    "text": "`case`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "171",
    "text": "&gt; As some of you probably know, Christophe Grand has joined nREPL\u2019s team and is working on bringing some amazing features from unrepl to nREPL:\n\n&gt; The ability to upgrade a plain socket REPL to nREPL.\n&gt; Sideloading - allowing clients to act as network classloaders.\n&gt; A rich value printer with collection elision.\n&gt; (Extremely) Exciting times ahead! I cannot thank Christophe enough for the amazing work he has been doing on nREPL recently! People like him are the heart and soul of the Clojure community and the reason why I love being part of it!\nWow, this is very exciting news\n(from <https://metaredux.com/posts/2019/01/15/cider-oslo.html>)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "172",
    "text": "Is there a JSON library which lets you only read what you need from a JSON string, to save performance? Like what you would do when writing your own JSON deserializer for a type in e.g. Java or Haskell.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "173",
    "text": "is there any way I can hook into `ring.middleware.reload` when it's actually doing a reload? Would like to perform some custom task when it's reloaded (specially restart a task that runs every X seconds)\nlooking for something similar to `on-js-reload` from figwheel, which lets you run code when the code has changed\nah, right, so basically just split things up more. Makes sense. Thanks <@Isa>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "174",
    "text": "Ring reload event only if ns which you point to is reloaded. I have dev/user.clj which is wrapper app on core app with extra middleware. You can add to this ns restart task code.\nI am writing from phone. Sorry if too general \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "175",
    "text": "Hi all. Does anyone have any tips on how to deal with clojure metadata on the Java side?\nI have some data with my own metadata attached which I need to pass on to Java code. How do people normally deal with this?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "176",
    "text": "Is there a way to to (str #inst \"2018-10-15T14:45:07.000000000-00:00\") without the time being converted to my time zone?\nYes, you really need to look into java time stamp formatting \nClojure really relies on the jdk for all that stuff\nWill do, thanks\nAnswer to my question: use SimpleDateFormat\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "177",
    "text": "the metadata is accessible via a method on the Object it's attached to, but you can just use `meta` via `Clojure.var` ```IFn meta = Clojure.var(\"clojure.core\", \"meta\");\nmeta.invoke(o);```\nif you cast the object to `IFn`, java should let you call the `meta` method ```o.meta();```, but I think the meta function is more reliable as an entrypoint\nBut maybe I misunderstood? Are you doing this from Clojure and just want to know how to pass the metadata?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "178",
    "text": "Is it possible to read session value with <https://github.com/xeqi/peridot> ? I am doing this now in that way:\n```\n(-&gt;&gt; (get-in mock [:cookie-jar \"localhost\" \"ring-session\" :value])\n               (get @mem)\n               :uuid\n               (some?))\n```\n\nBut it would be nice to use come kind of ring reader from session instead.\nIf you use emacs, use Cider. If Intellij use Cursive. If none, use Cursive, because Intellij is easier than emacs. You don\u2019t want to learn hard editor + Clojure at the same time.\n*harder editor doesn\u2019t mean better. It is different depend on your preference.\nI would love to see stable and extended Clojure plugin for Visual Studio Code. But today you can choose only between emacs + cider / Intellij = Cursive I guess.\n`brew install leiningen clojure` and you are ready to go :slightly_smiling_face:\n`clojure` is `clj` command\nIf you already use Atom, look at Chlorine or ProtoREPL. If you already use VS Code, use Calva. The main thing you want for learning Clojure is an integration between your editor and a REPL, so you can just hit a key combo and evaluate a form, a top-level form, or the entire file into that REPL \u2014 without typing into the REPL. All of those are sufficient.\nFor beginners, not having to struggle with the basics of an editor is a big help :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "179",
    "text": "Hi all! Extreme noob to Clojure here. Cider aside.. which dev environment is most suited for beginner Counterclockwise/ Cursive ? Any links on how to setup a dev environment ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "180",
    "text": "I would suggest Cursive or VS Code + Calva\nCounterclockwise hasn\u2019t seen much love in the past years and so getting support for issues you run into might be difficult\nCCW is no longer developed and I don\u2019t think works on newer versions of Java/Clojure\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "181",
    "text": "(and if you use vim, look at fireplace? I\u2019m not familiar with the vim/Clojure ecosystem, sorry)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "182",
    "text": "Hey! Thanks\nYes, I'm doing it from Clojure, but the data needs to go through some Java and back.\nSo I'm thinking what's the best way of doing that.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "183",
    "text": "A macro question:\n```\n(defmacro transact!\n  \"\"\n  [&amp; body] \n  `(jdbc/with-db-transaction [conn# db]\n     ~@(map (fn [transaction]\n              `(jdbc/execute! conn# ~(honeysql/format transaction)))\n            body)))\n\n&gt; (macroexpand-1 '(transact!\n                                    (-&gt; (insert-into :foo)\n                                        (values [{:id (java.util.UUID/randomUUID)}]))))\n=&gt;\n(clojure.java.jdbc/with-db-transaction\n [conn__27812__auto__ db-adapter.sqlite/db]\n (clojure.java.jdbc/execute!\n  conn__27811__auto__\n  (honeysql.core/format\n   (-&gt;\n    (insert-into :foo)\n    (values [{:id (java.util.UUID/randomUUID)}])))))\n```\nThe inner `conn#`, expanded, is a different one than the outer `conn#`. How to make the `conn#`s the same symbol?\n<@Raelene> it has to do with the two layers of quoting\ntry removing the quote on `(jdbc/execute! ...)`\n```\n(defmacro foo\n  [&amp; body]\n  `(let [conn# ~body]\n     (prn conn#)))\n;; conn# is the same \n\n(defmacro foo\n  [&amp; body]\n  `(let [conn# ~body]\n     `(prn conn#)))\n;; conn# is different\n```\nYep, it is the layering but removing the quoting does not work in this case. Because the `map` is evaluated, it tries to evaluate `conn#` at compile time which is not possible.\n<@Raelene> I would make the macro ```(jdbc/with-db-transaction [conn# db] (doto conn# ~@(map (fn [transaction] `(jdbc/execute! ~(honeysql/format transaction))))))``` &lt;-- admittedly just avoids the problem\ncan you use a let binding in the macro to capture `conn#` and then use that common binding in both quoted forms?\nan example: <https://github.com/ztellman/manifold/blob/master/src/manifold/deferred.clj#L309-L325>\n<@Becki> Great, this seems to be the solution around this multi-layer-macro problem.\ni think ztellman solves this problem as well in ridley with a way to unify gensyms across quote boundaries like this\n<@Lemuel> Thanks, this works too, great.\n<@Raelene> read this section of zach's Potemkin library: <https://github.com/ztellman/potemkin#unify-gensyms>   (not advocating use necessarily. not advocating use but he for sure has thought of a great many problems)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "184",
    "text": "Is there any way to collect the statistics from a `criterium` benchmark? Trying to determine the time complexity of an algorithm by running it against different inptus\n<@Loria> not sure what you mean by statistics, but if you referring to the outputs of e.g. `bench`, run it against all your inputs inside `with-out-str` and transform/write the resulting string somewhere.\noh.. I suppose that's one way to do it\nStrange to have to write a parser when surely those values are around as actual numbers somewhere? I tried searching through the documentation but couldn't find anything\n<@Loria> Yep, thats stupid :slightly_smiling_face: `criterium.core/benchmark` returns the result as data <http://hugoduncan.org/criterium/0.4/api/criterium.core.html#var-benchmark>\nthanks, that's exactly what I needed!\n```\n(def timing-results\n  (doall\n   (for [n [5 10 15 20]]\n     (criterium/quick-benchmark\n      (fib n) nil))))\n\n(map #(get-in % [:mean 0]) timing-results)\n;; =&gt;\n;; (6.82956017409221E-7\n;;  8.839126734896198E-6\n;;  1.0012795602974459E-4\n;;  0.0010987932789473685)\n```\nnow to write a function which will look at that and estimate if it's O(n), O(n^2), O(n! log (n)) , etc.:thinking_face:\nYeah, I don't need it to be very rigorous, just using this as a way of getting my head around the performance characteristics of `core.logic` programs - which seem really hard to reason about and blow up exponentially in unexpected ways.\nI ended up just hacking together something in Python notebook which plots out the points and the regression lines for `logn n, nlogn, n^2 , 2^n`, then eyeball which curve fits best :sweat_smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "185",
    "text": "That is probably more tricky than you would expect. I wouldn\u2019t be surprised if there are mathematicians who spend their lives on that.\nYep, especially since you will see things in the curve, that are due to the machine, not the ideal algorithm. E.g. jumps when certain chunk sizes are passed etc. Mathematicians usually don't care about such things.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "186",
    "text": "the `meta` function retrieves the metadata, then you can use it with the java methods in whatever way makes sense\nand if you need to round-trip, you can use with-meta to attach the metadata to a new data structure if needed - but this only works with Clojure things (vars, functions, persistent collections, symbols etc.)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "187",
    "text": "why would I be getting an error about manifest type when depending on a git source?\n```\n             cider/piggieback                {:git/url \"<https://github.com/dpsutton/piggieback.git>\"\n                                              :sha \"fd99b9e3cfd2069a2484ba9e75dcd1bb04b78ed8\"}\n```\n\n```\nError building classpath. Manifest type not detected when finding deps for cider/piggieback in coordinate {:git/url \"<https://github.com/dpsutton/piggieback.git>\", :sha \"fd99b9e3cfd2069a2484ba9e75dcd1bb04b78ed8\"}\n```\ntools.deps is trying to determine the transitive dependencies for piggieback, but is not finding a manifest it understands (deps.edn or pom.xml)\ncurrently tools.deps doesn\u2019t know how to read lein project.clj files\none option is to forcibly declare it as a deps.edn project (it then treats a missing deps.edn as no transitive deps)\nyou can do this by adding `:deps/manifest :deps` to your coordinate\ni can run `lein pom` and push that to the remote too, can't i?\nyou could\nmake sure you move your sha then\nuse 0ab53c69a12812b6eb4000862f12447b4874a949\nmade a branch based on that change with a pom file added\ngotcha, awesome, thanks!\nnice\nseems like we're not quite there yet,\n\nbut at this point I'm creating extra work for you, so I'll just pull it down and see if it works with a local dependency\nNone\ntry c4fbfdadb28a0d3c8700901677ab104d59ddbc27\ntrying...\none more:\n403142e5017628ce447aebf2e4c0c82d482488c3\nsame error\ntrying...\nthe pom had an issue with a dep on tools.nrepl\n{:git/url \"<https://github.com/dpsutton/piggieback.git>\"  :sha \"403142e5017628ce447aebf2e4c0c82d482488c3\"}\n\nsame error with that\nthe generated pom just isn\u2019t including your source files\nyou could just use a deps.edn file like:\n```\n{:deps\n {org.clojure/clojure {:mvn/version \"1.8.0\"}\n  org.clojure/clojurescript {:mvn/version \"1.9.946\"}\n  nrepl {:mvn/version \"0.4.5\"}}}```\nprobably don\u2019t even need nrepl there\noh, maybe you do, not sure\nassumes src dir without explicitly putting that? I think it was lacking dirs from the lein generated pom due to profiles\nthe nrepl is for working with intellij\nby default it uses `src` as the source directory\nbut you could add `:paths [\"src\"]` to be explicit\nok. that's what i thought. just making sure i didn't end up with the same problem\none more:\n7bbe53ed38dfd79c3e9375d875d8c755a143a4b0\non it\nthis switches to deps.edn\n:+1:\nSUCCESS!\nill play with it for a bit and make sure nothing is weird\nthanks for the help <@Jasmine>\n:+1:\nIf I\u2019m using `doto`, is there a clearer way to call `doseq` inside of it instead of wrapping an anonymous function in a function literal? If I want to use `doto` right now I have to do this -\n```\n(doto (Ctor.)\n (#(doseq [[a b] c]\n     (.aMethod % a b))))\n```\nyessss this is so great.  feels so good to be able to do this again\nLeaning towards just doing this because I think it reads better -\n```\n(let [obj (Ctor.)]\n  (do\n    (doseq [[a b] c]\n      (.aMethod obj a b))\n    obj))\n```\nah, the old doodooseq\n`(reduce #(doto %1 (.aMethod (first %2) (second %2))) obj c)`\nthat is assuming c isn't static, if c is a known value, I would write some code to generate the method calls and just paste them in\nlol, I have no idea what those values are\n<https://github.com/clojure/clojure/blob/28b87d53909774af28f9f9ba6dfa2d4b94194a57/src/jvm/clojure/lang/AFn.java#L143>\nYeah that makes sense, and this isn\u2019t even a static method\nBut will reflect\nwhen I load open the project I'm interactively developing in emacs/cider, I have to open all the clj files that contain functions I call in my main 'runner' file and eval them to avoid class not found errors... what am I doing wrong?\nOh interesting, didn\u2019t know about `memfn`\nif it has a valid ns form with deps it should pull all of that in as normal\nI did load the main runner file with C-c C-k without incident but still having to go load all the namespaces mentioned.\nusing lein repl, and cider-connect, if it matters.\nyou need to require the namespaces that your runner accesses\nand are you in the namespace of the main runner?\nI believe I did those things, but I'll do it all from scratch to double check everything; stand by (and thanks!).\ni'm wondering if there is some confusion that those deps required by the main runner are \"visible\" in that namespace but not visible from the current ns. Its hard to tell if this is a bug or users error\noh yeah +1 about memfn, thats neat!\n<@Becki> <@Dann> lesson learned, and never forgotten. I was missing the parent directory in src with the project name; my clj files were directly in src for some reason; everything evaluates now.\nthe former for me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "188",
    "text": "```\n(dorun (map (comp (partial apply .aMethod)\n                       (juxt (constantly obj) first second))  c))\n```\nthere we go\nas a small thing, you can replace `(dorun (map ...))` with `(run! ...)`\nFeel like that\u2019s going to generate reflection warnings?\nOur project fails compilation if there are any reflection warnings, but I\u2019ve never tried `apply .someJavaMethod`\nthat simply doesn't work\ngreat tip!  i didnt know that!\nhahaha\nYeahh seemed dubious haha\nsorry!  i diidnt test my solution at all :joy:\nAlso people on my team would hate me for that\n`apply` relies on :point_up:\nlet already has an implicit do in the body btw, so using do there is redundant\nnot only that, but .someJavaMethod isn't a thing we can put on the stack\n. is an interop form, on compilation it generates code to (optionally reflect) and invoke a method\nit doesn't point to any real thing that you can use as an arg or put in a collection\nalright everyone, I hate my idea too\nyou can succinctly make a function that calls a method via memfn: `(memfn someJavaMethod)` - this is first class, can be used with apply or map etc.\n<@Noemi> did you load the main runner file? `cider-load-buffer` (C-c C-k) by default\nthat should either error (if they can't be found) or guarantee they are loaded\nas long as you access the function from the main runner properly, there's no need to be in that ns\n<@Dann> you've really made it worth my while to hang out here today!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "189",
    "text": "`(map #(foo % baz) bars)` vs `(map foo bars (repeat baz))`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "190",
    "text": "I'd recommend Cursive. It's been the most complete environment for me and gets solid updates. Other environments I've been left in a broken state when the developer(s) of the tool get upset that something changed in core and they leave instead of fixing it. I can't deal with that instability.\nI don't know about Chlorine, but I know ProtoRepl doesn't really support ClojureScript. If the person is only writing Clojure then it works well.\nPSA: Slack supports syntax highlighting for Clojure(Script) if you use the code snippet function over the code blocks. Makes your code easier to read here!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "191",
    "text": "My understanding is that Chlorine is great if you're using `shadow-cljs` but not other ClojureScript build/dev tools. Since Chlorine is written in cljs and uses `shadow-cljs` and that's how it is developed (using itself).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "192",
    "text": "```\n(map fn coll)\n```\nHmm\nNot the same as GitHub\u2019s\nOh you mean by clicking the \u201c+\u201d icon\nYeah but that\u2019s a pain\nAt least for small things\nYeah I wanted it to work that way too <@Dann>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "193",
    "text": "It's actually less work than typing out the backticks...and it's also a pain to read a bunch of lisp code with no syntax highlighting, especially when someone is asking for help on it.\nNaturally, for a single line of code that wouldn't be necessary.\nabsolutely <@Reiko>\nWell that's good to know. I use shadow-cljs myself, but the issue is if I need to use some other tool for whatever reason then now I have to change my entire development environment over a tool being switched out. That's disruptive.\nThanks!\nGo open an issue on the Chlorine repo then :slightly_smiling_face:\nI'm pretty sure the maintainer is very open to supporting a broader set of cljs workflows. He seems very receptive and helpful in the <#CF02KPG4U|chlorine> channel.\nThat's great, but the reality is that it only supports one tool and thus creates this situation. I'm sure I'm not the first to address such a concern. If that changes in the future I'd be happy to check it out.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "194",
    "text": "Could someone explain this result? I thought that the value of an atom is always fully realized (not lazy), so I would expect the `pr-str` to take much less time.\n```=&gt; (let [a (atom (take 10 (repeatedly #(Thread/sleep 1000))))]\n    (time (pr-str @a)))\n\"Elapsed time: 10043.797237 msecs\"\n```\nYou're deref'ing the atom to get its value -- which is a lazy seq -- and then you're printing it to a string which is realizing the value.\nSo the 10 seconds is the time it takes `pr-str` to realize the `take 10` -- the deref `@a` would have been near-instantaneous.\n```user=&gt; (let [a (atom (take 10 (repeatedly #(Thread/sleep 1000))))]\n         (time @a))\n\"Elapsed time: 0.007343 msecs\"\n```\nAn atom can contain anything -- it's just a container, and it doesn't \"do\" anything to its contents.\n^ <@Mireille> does that help?\n<@Celestine> I see, so if I want the value to be realized before any derefs, I'd need to do that explicitly, like wrap the computation with `doall`. thanks for the insight\nYes, the same applies to laziness vs eagerness anywhere in Clojure really.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "195",
    "text": "well, it should only contain immutable values since the swap! function can be applied more than once in the case of concurrent updates\nI\u2019m thinking of writing a boot task for replacing shortcodes in a markdown file using user-defined functions that return hiccup. Based on other libs I think there should be a `defshortcode` macro for defining them. How are those handled in other libs? Does it update an atom with a map of properties and a function body?\nI think data wise it\u2019s important to know the defined shortcodes up front\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "196",
    "text": "is there any way to run some simple fns inside a clojure jar on android with a much faster startup speed?\nhow are people dealing with communication between components in `stuartsierra/component`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "197",
    "text": "Two components can communicate by one of them depending on another and using it. Do you have some other communication in mind?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "198",
    "text": "Well, I might misunderstand something regarding the usage of component... So let's say I have a DB and Web components. The Web component depends on the DB one to do responses with values from the DB. But if I want to change the DB from Web, the state is within DB and cannot be changed from Web.\nright now I'm just doing the DB as a simple map that get's stored/load to/from disk. Seemingly, I need to implement this as global state together with the DB component, but then I'm relying on global state...\nThe web component has a refererence to the db component, so it can read and write to the DB. I don\u2019t understand your problem.\nA DB is one huge global mutable variable, so that seems OK\nyou can model the DB with an atom that has a map in it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "199",
    "text": "started trying out spec after having used schema and core.typed. one thing I noticed, compared to core.typed, spec\u2019ing records is kind of laborious and overly verbose. is this something spec proper would ever address (even if just a macro) or should every one fend for themselves and write their own macros? I suppose there\u2019s a third option which is the core team wants to discourage the use of records and/or their use with spec?\nkind of a latent question\nyou can spec them as maps with s/keys and :req-un\nthere are some ideas we have in spec 2 that might apply better but TBD\nyep, I have, and it\u2019s gross. =P we wrote a macro to fix that, but curious if the need to write such a macro indicates we\u2019re using Clojure in a way not intended by the core team\n(or if it\u2019s just because spec is alpha)\nnah, just have never resolved what to do about records\nspec is centered around the idea of semantics associated with (qualified) attributes\nrecords sit in a weird place with that as the attributes are unqualified but records types themselves are qualified\nwe\u2019ve kicked around a bunch of ideas but never got something we liked\nyeah, exactly part of the pain I was feeling with registering specs for record fields\nok, thanks for the info. wanted to make sure I wasn\u2019t missing anything about the design or philosophy of spec\nnope, just some unfinished business\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "200",
    "text": "Hi guys, I am in doubt about what is the better way to solve the following problem.\n\nScenario:\nBase: `{:response [{:users [{:id 1} {:id 2}]} {:users [{:id 3} {:id 4}]}]}`\nPath to: `[:response :users]`\nReplace with: `[[{:id 1, :name \"Rafa\"} {:id 2, :name \"Ana\"}]`\n                           `[{:id 3, :name \"Jonas\"} {:id 2, :name \"Leo\"}]]`\n\nExpected:  `[{:users [{:id 1, :name \"Rafa\"} {:id 2, :name \"Ana\"}]}`\n                       `{:users [{:id 3, :name \"Jonas\"} {:id 2, :name \"Leo\"}]}]`\n\n\n\nI am thinking about recursion but I would like to know if there is a better way (using something like clojure.walk). Any thoughts?\nwhat does the data structure containing the `:name`s look like?\n<@Zenaida> It looks like you want to join on the `:id` attribute. See <https://clojuredocs.org/clojure.set/join>\nSorry, I was not clear in my problem... It is not a fixed structure. It's like this: Given a base, path and \"Replace with data\", return base replaced with data\nNice! Thank you very much. But Can I use it lists that have maps and lists... ?\nahh, then you can use `assoc-in`! <https://clojuredocs.org/clojure.core/assoc-in>\ni.e `(assoc-in original-data [:response :users] new-data)`\nThe problem with using assoc-in is that the path don`t know if  some key, like :users, is a list or not.\nokay, now I see what you mean. is this part of a larger example? otherwise it might be easier to wrap the new data structure in `:users`:\n```\n(def new (mapv #(hash-map :users %) new-data))\n```\nand then `(assoc old-data :response new)`\nis `:id` unique?\n:id is just a key... Could be anything and could not exist. I am trying now to manipulate the path. So, using the previous example, generate something like: [:response 0 :users] and [:response 1 :users]\nI highly recommend Specter for things like this: <https://github.com/nathanmarz/specter/>\nhere\u2019s an example:\n```\nuser=&gt; m\n{1 {:id 1, :name \"Rafa\"},\n 2 {:id 2, :name \"Ana\"},\n 3 {:id 3, :name \"Jonas\"},\n 4 {:id 4, :name \"Leo\"}}\n\nuser=&gt; base\n{:response [{:users [{:id 1} {:id 2}]} {:users [{:id 3} {:id 4}]}]}\n\nuser=&gt; (transform [:response ALL :users ALL] #(get m (:id %)) base)\n{:response [{:users [{:id 1, :name \"Rafa\"} {:id 2, :name \"Ana\"}]}\n            {:users [{:id 3, :name \"Jonas\"} {:id 4, :name \"Leo\"}]}]}```\nbasically, for problems like this the details matter: exactly what the input is, what the data you want to place there instead etc. determines what the best approach is\nbut for the general problem of \u201creplace something in a nested data structure with something else\u201d Specter is IMO the way to go :slightly_smiling_face:\nNice! Thank you! I will give it a shot =D\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "201",
    "text": "`(clojure.walk/postwalk-replace (into {} (juxt #(select-keys % [:id]) identity) replacements) base)`\n<https://github.com/clojure/clojure/commit/178d8c42609d899208e745b76b89297c4287c078>\n<https://dev.clojure.org/jira/browse/CLJ-665>\n<http://clojure-log.n01se.net/date/2010-10-29.html#09:11>\nby which I\u2019d say, yes\ncool\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "202",
    "text": "You can definitely look at specter but to modify nested data structures in clojure using the \"core library\" you also have zippers. It takes a bit of playing around to get used to them (if you're not already) but once you know them you will be able to apply them in many scenarios.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "203",
    "text": "The changelogs of Clojure only go back to 1.3. I want to know if I remember this correctly: binding was allowed to rebind any var instead of only dynamic vars in the early versions of Clojure. Later on you could only do that with dynamic vars. with-redefs was introduced for rebinding the root values of vars e.g. for testing. Was that related to the change to binding?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "204",
    "text": "is there a nice idiomatic way to take a vector of maps `[{:a 1 :b 2} {:c 3 :d 4}]` and turn it into a map based off some key in  the vec\u2019s map? `{1 {:a 1 :b 2} 3 {:c 3 :d 4} ...`?\nobviously a reduce would work, but it feels icky\n`(reduce #(assoc %1 (:the-key %2) %2) {} the-vec)`\n(now i see that the above is confusing, assume each map entry in the vector has _the same_ keys)\n`(into {} (map (juxt :a identity)) coll)`\ngroup-by\n! `group-by` is exactly it, thanks <@Rosaline>\nwell, it seems you assume that the vector of maps has a unique value for the same key in each map?\ninteresting \u2026 seems weird to juxt with an identity, but necessary because of how into works I assume? takes [k v] pairs\nyes, i do \u2014 which fits for this particular dataset\ngood heads-up thinking though\nso then it\u2019s slightly different than group-by. we have a function called index-by for that, I can look it up\n``` \n(defn index-by\n  \"Returns a map which indexes values by the result of calling kfn\n  with given value.\"\n  ([kfn values]\n   (index-by kfn values nil))\n  ([kfn values flat?]\n   (tzipmap (map kfn values) values flat?)))\n```\nyes you want a sequence of [(:a thing) thing] as your key value pairs which will go into the map\n(where `tzipmap` is a transient-based version of `zipmap`)\ni think the `(into {} (map (juxt :a identity)) coll)` will use transients for free because of into\ncould be, this code probably stems from before transducers ,etc.\nthere's the similar `clojure.set/index` as well - allows multiple relations to index and multiple matches for each value of the index\n```egret.run=&gt; (clojure.set/index [{:a 0 :b 1} {:a 1 :b 1}] [:a])\n{{:a 0} #{{:a 0, :b 1}}, {:a 1} #{{:a 1, :b 1}}}\n```\ni love `clojure.set`, i use it almost everywhere\nits so much easier for me to think about data as just sets and joins/unions/etc\nthis finds `group-by`  as the closest built-in thing:\n<https://re-find.it/?args=%5B%7B%3Aa%201%7D%20%7B%3Aa%202%7D%5D%20%3Aa&amp;ret=%7B1%20%7B%3Aa%201%7D%202%20%7B%3Aa%202%7D%7D&amp;more=true>\nwoah. that\u2019s a great idea for a tool\u2026\nwhere has this been all my life\nset/index comes up first when you use `[{:a 1} {:a 2}] [:a]` as the args.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "205",
    "text": "I\u2019m spinning up some old projects with `lein repl` and getting this error:\n```No such var: nrepl.transport/uri-scheme```\nI have lein 2.8.3, clojure 1.8.0\nI clearly have something out of sync somewhere\ndowngrade to lein 2.8.1 and try\n`yes | lein upgrade 2.8.1`\nyeah - lein changed nrepl versions with a recent release, and that could break old projects if they or their middleware relied on the way nrepl used to work\nmaybe you have some incompatible nrepl in your profiles.clj?\nit could break all your projects if your profiles.clj pulled in a middleware for the old nrepl\nYes, I was hoping to use an older project to do some cider hacking. And it\u2019s complaining about middleware as well. I feel a bit lost, lol.\nEverything used to just work\nI\u2019m sure the new stuff is great, of course :wink:\nwell, the CIDER maintainer also maintains nrepl, so they should at least evolve together now\nok, I have a repl\u2026 that\u2019s good\u2026. now let\u2019s try cider\u2026.\nHmm. So for CIDER\u2026 can I upgrade the deps and the latest CIDER while keeping lein at 2.8.1?\nno unfortunately. CIDER was straddling both tools.nrepl and nrepl/nrepl through 0.19 but the most recent 0.20 dropped tools.nrepl support. now the entire application needs to be newer nrepl throughout\nSo\u2026 if I want to make the leap\u2026 is there an upgrade guide?\nwe can chat in <#C0617A8PQ|cider> but just check your deps for tools.nrepl.\nCool, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "206",
    "text": "any recommendations for sending email from clojure? I was looking at postal but wanted to check if there was anything else I should consider\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "207",
    "text": "hi folks, I want some help, recently sometimes I can't ssh my server that run a clojure application(the only one). the error is `shell request failed on channel 0`, after some searching, I think it may because somewhere is leaking process? I'm not sure how to investigate further. any suggestion will be very helpful. thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "208",
    "text": "Hello - where can I get help on using the Clojure CLI? It's not picking up the location of `.m2/repository` properly and I'm not sure why...\nIt's trying to access `/var/empty/.m2/repository/` instead of `$HOME/.m2/repository`\n<@Morton> try inspecting your environment variables, if they set some alternative location for m2?\nThere are 0 env vars, this is building inside a nix environment\nIs there an env var that clojure looks at for the location of m2?\nis there a settings.xml in .m2 maybe?\nenv of system could be redirected by `export M2_REPO=`\nand if you use lein, the key [:local-repo :repositories] in the profiles.clj also could redirect to other folders\nIf I google on var/empty nix maven I find some stuff. maybe it\u2019s the home dir location in the nix shell that\u2019s set to /var/empty\n```\nHOME=$PWD\nexport M2_REPO=$HOME/.m2\nclojure -A:test\n```\nStill has the clojure cli go toward `/var/empty/.m2`\n\nand `HOME` is set to a proper non `/var/empty/` location :confused:\nis `M2_REPO` a thing?\nYou could try this: <https://maven.apache.org/guides/mini/guide-configuring-maven.html>\n\nConfiguring your Local Repository\nThe location of your local repository can be changed in your user configuration. The default value is\n``` \n${user.home}/.m2/repository/.\n\n&lt;settings&gt;\n  ...\n  &lt;localRepository&gt;/path/to/local/repo/&lt;/localRepository&gt;\n  ...\n&lt;/settings&gt;\n```\nyeup, it doesn't pick it up - placed the settings file in both `$HOME/.m2` and `$HOME/.m2/repository` just to be safe\nif I introduce syntax errors in the XML, it complains\nbut doesn't obey the local repo setting\nmaybe try: <https://stackoverflow.com/questions/1261215/maven-command-to-determine-which-settings-xml-file-maven-is-using>\nAlready when doing `mvn -X help:effective-settings` it's not able to populate due to trying to go against `/var/empty`\nso that's at least one positive, it's not a clojure specific thing :slightly_smiling_face:\nty for the halp!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "209",
    "text": "clj uses the Java system property user.home to build the maven repo location\nI\u2019m not sure how that would be off but that\u2019s likely why\nYou can hardcode in your deps.edn though with :mvn/local-repo attribute at the root\nIf that lets you move forward\n<@Morton> ^\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "210",
    "text": "We ended up being able to globally set the user.home property and now everything is gucci\nthanks for the help folks :wave:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "211",
    "text": "Hi! Quick request for advice: what would you say is the most \u201cmodern\u201d/\u201cwell maintained\u201d way of working with a Postgres database in Clojure? HugSQL? Something else? (I lean towards a raw SQL approach over ORM)\nI don\u2019t know about \u201cwell maintained\u201d, but I forked yesql some years ago and am actively using it in production <https://github.com/tatut/jeesql>\nIf you want your SQL external to your code, use HugSQL. If you want a DSL to builds SQL, use HoneySQL. With both of those, use `org.clojure/java.jdbc`.\nI personally like hugsql, but I think different people have different preferences. Seems like a variety of solid choices available.\nAlso <https://github.com/tatut/specql>, but that\u2019s not \u201craw SQL\u201d\n(if you just want raw SQL strings in your code, you don't need anything beyond the latter)\nThanks! Do you use HugSQL or HoneySQL yourself? I\u2019m not quite sure which approach to go for\nWe use HoneySQL extensively (and I took over as maintainer recently).\nMy former colleague, Fumiko Hanreich, gave a talk at Clojure/West about our use of HoneySQL (in 2012? 2013? I'll get you the link).\n<@Neil> thanks! I\u2019ll check it out\n<@Matha> I\u2019m loving HugSQL. yesql is dead to me :wink:\nI like my SQL in my code where I can see it alongside the code that uses it which is why I don't use HugSQL.\nSome people love that separation tho'...\n<@Celestine> thanks! I might use HoneySQL then. My use case is fairly basic, but I don\u2019t want it to get in the way of using some postgres-specific features\n(and I don\u2019t want it to be too smart; just build the queries I expect it to build)\n<https://www.youtube.com/watch?v=alkcjyhesjI> -- 30 minute talk from 2015 (I was off by several years)\nThere's a Postgres-specific extension project for HoneySQL you might want then.\n<https://github.com/nilenso/honeysql-postgres>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "212",
    "text": "Is there a tool to generate a visual graph of my clojure dependencies, a la <https://github.com/pahen/madge>\nActually, I know there is, it just escapes me atm.\n<@Rheba> I believe <@Clemente> had something like that: <https://github.com/walmartlabs/vizdeps>\nI\u2019m sorry, I said dependencies, implying libraries, but I meant namespaces.\noh that. maybe <https://github.com/hilverd/lein-ns-dep-graph>?\nI\u2019m good at googling :stuck_out_tongue:\nI think I\u2019ve used it in the distant past\nAwesome! Thanks. Because there\u2019s a Lein plug in for everything!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "213",
    "text": "also, making a graph of references between namespaces and using it to generate a graphiz input is a fun weekend hack\nyeah - clojure on its own isn't opinionated about IPC, you can use the same libs you would with Java, or in most cases the same lib you would use with NodeJS or Ruby\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "214",
    "text": "GraphViz is a very easy format to generate in general\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "215",
    "text": "Anyone knows where I can read or have any tips regarding polling and clustering. Lets say I make an api call and create something. I get an ID back and there is another endpoint which I must call every 6 minutes to poll for a status. If  I have node A and B and B goes down while executing the polling I want node A to take over. Afaik one can use a MQ for this.\nI would like at something like aws step functions\nin general what you'll want to do is have some kind of shared(between A and B) transactional store, represent the polling as a simple fsm, and keep the state in the store\nAnd a watchdog service running health checks on the nodes you want watched\nthe simplest case would be to, instead of having fail over between A and B, having A and B running concurrently(which is why the transactional store), which would avoid the need for some kind of watchdog and failover check\nI will have a look at the :point_up: thanks.\nI will have one node A. When I get more traffic I will pop up another node,  and another... and when the traffic goes down I will kill them.\nif you are on aws, I would look at directly using step functions <https://docs.aws.amazon.com/step-functions/latest/dg/sample-project-job-poller.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "216",
    "text": "<@Matha> have you looked at Walkable? <https://walkable.gitlab.io/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "217",
    "text": "anyone got a quick example how to postwalk an edn file using clj-rewrite? I simply want to replace a few keywords by postwalking it, but the README doesn\u2019t have a good example of this\nI want to preserve whitespace and comments, therefore normal clojure postwalk doesn\u2019t suffice\nI vaguely remember <@Korey> sending me a snippet of this a while ago\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "218",
    "text": "is anyone aware of a persistent data structure library for Java that is adapted for primitives, like a persistent vector that is based on `int[]`? i.e something like FastUtil or Agrona but persistent. Does such a thing even make sense?\n<@Ellyn> I think bifurcan has those. You\u2019ll hardly find anything better <https://github.com/lacuna/bifurcan>\nBifurcan has an `IntMap`, but it implements `ISortedMap&lt;java.lang.Long,V&gt;` so it still uses boxed longs, not primitives :confused:\n<@Ellyn> Clojure has them: `(conj (vector-of :int) 1)`\nhah, in 5 years of Clojure I\u2019ve never seen those! :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "219",
    "text": "they\u2019re useful for java interop \narray-of is equally useful \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "220",
    "text": "note that while vector-of helps with primitive storage, boxing will still happen on access\nas it\u2019s going through the same Clojure interfaces that take objects\nthat\u2019s not necessarily true for arrays - with care you can avoid boxing in most uses of arrays\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "221",
    "text": "hello, how can I push a repo using tool.deps to clojars?\n<@Bree> this is great, thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "222",
    "text": "I wrote about this just today: <https://cjohansen.no/tools-deps-figwheel-main-devcards-emacs/>\nIt focuses on clojurescript, but should work for Clojure too\nScroll down to the part about publishing \n:+1:\nI am heavily making use of reader conditionals, but this is about macro-expanding code differently depending on backend settings. Basically you can use core.async on both JVM and JS, but sync code on the JVM.\nHi all.... I ama but stuck on this one...\nthis works for me: `(apply conj #{1 2 3} '(4 5 6 ))` as expected...\nbut when the set is in an atom I can't do this `(swap! atom-with-a-set-in-it apply conj '(4 5 6))`\nthe I get an error: `Wrong number of args (4) passed to: PersistentHashSet`\nTry `(swap! atom-with-a-set (partial apply conj) \u2018(4 5 6))`\nyes, that looks good... but why the partial as well?\nWhat you have ends up being `(apply a-set conj '(4 5 6))`\n`(partial apply conj)` returns a function that is is passed the set as its first parameter and your `(4 5 6)` as its second parameter \nmakes sense. thank you <@Isela>\noops. should have gone through the source right away (:content-id for the same mime part map works)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "223",
    "text": "Is there a way to parametrize namespaces or dependencies? I am at the moment fiddeling around this to make code optionally core.async compatible, but leave it synchronous on the JVM.\nSo cljs and clj do different things <@Burl>? That sounds like reader conditionals. <https://clojure.org/guides/reader_conditionals>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "224",
    "text": "<https://juxt.pro/blog/posts/pack-maven.html> I also wrote this :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "225",
    "text": "There's a hacky way I parameterize namespaces in CLJS here: <https://clojurians-log.clojureverse.org/cljs-dev/2019-01-08/1546981037.172600> It CLJ it might be a little more straightforward for namespaces, though not sure about the dependency part.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "226",
    "text": "hey has anybody worked with postal? I can't quite figure out how to set mime content-id header for the attachment (or whether it's possible at all)?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "227",
    "text": "Hi, is this a bug in clojure spec?\n```\n(require [clojure.spec.alpha :as s])\n(s/def ::foobar keyword?)\n(s/def ::bugged keyword?)\n(s/def ::form1 (s/keys :req [::foobar]))\n(s/def ::form2 (s/keys :req [::bugged]))\n(s/explain ::form1 {::foobar :d})\n(s/explain ::form1 {::foobar :d ::bugged nil})\n```\nThe second `(s/explain)` fails.\nOthers can answer more authoritatively than I can, but I believe this is expected behavior.  `::form1` only requires `::foobar`, and it allows other key/value pairs to be present as well.  _If_ one of those other keys that is present has a spec, then its value must satisfy that spec.\nIf one of those other keys that is present does not have a spec, then its value is not checked to see what it is.\nHmm, I saw this paragraph in the docs, for `s/keys`\n```\nIn addition, the values of *all* namespace-qualified keys will be validated\n(and possibly destructured) by any registered specs. Note: there is\nno support for inline value specification, by design.\n```\nSo there's no way to prevent `::bugged` from being checked right?\nI guess a question would be, if the only valid kind of value to associate with the key ::bugged is  a keyword, then why do you hope for no error to occur when you give that key a value nil?\nAnd if nil _is_ a valid value to associate with the keyword ::bugged, then maybe you want to change the spec for ::bugged to allow nil\nWell, I could imagine that you sometimes don\u2019t care about what is in `::bugged`\nYou know, after some form of transform that you would make a stronger guarantee\nSpec certainly lends itself well to doing that by calling the pre-transform and the post-transform things by different keys.\nbut not sure if that conflicts with other goals you may have.\nYeah, I was merely stating why I would maybe want to have such an option\nI don\u2019t think its good or bad about spec to expect each key to have a single (canonical/always applying) spec, its just surprising ^^\nYes, this is something that was surprising to me, and took me a while to figure out if this was a bug with my code, `spec`, or of my understanding with spec\nOn the other hand, unqualified keywords works the opposite\n```\n(s/def ::form1 (s/keys :req-un [::foobar]))\n(s/explain ::form1 {:foobar :d :bugged nil}) ;; Success!\n(s/def ::form2 (s/keys :req [::foobar]))\n(s/explain ::form2 {::foobar :d ::bugged nil}) ;; fails\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "228",
    "text": "How do you guys exit the clojure repl from `clj` or `clojure` ?\nctrl+d\nMe too, but I thought I was doing something hacky.\n[Edit]\nThanks\nTrying to understand aliases invoked via `clojure` or `clj` could someone please explain what this most likely means `clojure -A:dev:build:dev/rebel`.\n\nI see `dev` and `build` are aliases that should be in `deps.edn` but I don't quite get it.\naliases let you selectively add functionality/dependencies. so you just basically combine several aliases to get to the result you want\n<@Johnson> and the `dev/rebel` that's also an alias in the `deps.edn`?\nyes thats just a namespaced keyword\nbut deps can be \"inherited\" from system configs\nso you can also define an alias in `~/.clojure/deps.edn`\nif you want something that is generic and not specific to a project\n<@Johnson> So in this case there's likely a `deps.edn` file along the lines of:\n```\n{:aliases \n  {:dev/rebel ...}}\n```\n\nright?\nyes\nprobably this <https://github.com/bhauman/rebel-readline#quick-try>\nYes it's that, rebel. Okay, let me state the larger issue. I'm trying to get  familiar with this tool edge but to understand it I think I need to figure out yada. Docs on both are however out of sync with the repo.\nIf one tries to follow <https://juxt.pro/yada/manual/index.html#_build_run> you'll see the edge repo has no app dir\n<https://github.com/juxt/edge>\n<@Tammera> if you don\u2019t care, then `:opt` instead of `:req` or define spec which let `::bugged` be `nil`\nprobably got reorgnized. maybe that is the `main` dir now?\nYa but docs didn't update. Thanks I get it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "229",
    "text": "I have a protocol which defines the function `last`. how do I refer this function without replacing `clojure.core/last`?\nEither fully qualify with the namespace where the protocol is defined or alias that namespace and refer to it via the alias\n<@Kellee> you can also use :refer-clojure to exclude last from core and then refer to clojure.core/last when you need it.\nbut that can become confusing, since last is probably used often\nIs there a variation of `or` in which the first non-nil value (e.g. false) is returned?\nyeah, I know how to write a function for it, that wasn\u2019t my question :slightly_smiling_face: the difference between a function and a macro like or is that or short-circuits. of course I could also write my own or.\nyeah, or `(first (filter some? ...))`, but I wanted to avoid first filter :wink:\nI can't think of a way of implementing this with `some` without an `if` expression inside off the back of my head - but if anyone can I'd love to hear it!\nI'm quite certain this will do the same, `drop-while` will yield a lazy seq which will be realized by `first` so it should stop the moment you get an actual head of your seq back.\nokay, so there's no way to somehow say that the protocol just extends `last` to include this new datatype?\nyeah, but then you should first create a lazy-seq of things you already don\u2019t want to evaluate.\ne.g.:\n`(or 1 (throw (Exception. \"no\")))`\nI'm trying to use `name.stadig.deque` to get deques, but for some reason it has separate a function for `last`\nwhat about `(some (complement nil?) ...)`\n```\nuser=&gt; (some (complement nil?) [false])\ntrue\n```\nups :smiley:\n<@Kellee> you can try `(:refer-clojure :exclude [last])` in your ns form\n(some identity \u2026)\nshould work\nnope, same problem :stuck_out_tongue_winking_eye:\nugh, right\n<@Clarine> sorry if I'm being unclear, I would want to use `clojure.core/last` as well. I guess I should've phrased the question as \"can I implement `last` for more types in clojure jvm?\"\nI remember reading that some it wasn't possible with some protocols in clojure jvm, but it is in clojurescript or something like that\nlast is a sequence function. if you implement ISeq that should just work out of the box\noh, huh. I wonder why the deque defines its own interface then\nbut you cannot extend-type ISeq, because it\u2019s not a protocol\nI'll try changing that then :slightly_smiling_face:\nis ISeq different from Sequable?\nyes\nISeq has first, next and rest. Seqable has a seq function that tells how to turn something into a seq\nAn ISeq is a sequence. Seqable is something that can return a sequence when asked (via `seq`)\n<http://insideclojure.org/2015/01/02/sequences/> may be helpful\nah okay\nhmm, I think I understand why they define their own `last`\n```\n  (last [this]\n    (array-last (if (and (zero? (alength suffix))\n                         (identical? empty-deque child)\n                         (identical? empty-deque substack))\n                  prefix\n                  suffix)))\n```\nso I guess I should just qualify that last. it's just kind of sad that it's conceptually the same `last` as `clojure.core/last`\neit seems that `clojure.core/last` works on the deque as well. maybe their own `last` is faster or something\nit seems to use a mutable array internally\nthanks for the help :slightly_smiling_face:\nand thanks for the link <@Jasmine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "230",
    "text": "`some` is close to that\n`#(first (drop-while nil? %))`\n\nBind it to a suitable name and there's your function.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "231",
    "text": "```\n(defn some-nil [coll]\n  (when-let [s (seq coll)]\n    (if (some? (first s))\n      (first s)\n      (recur (next s)))))\n=&gt; #'dev/some-nil\n(some-nil [nil false true]) \n=&gt; false\n```\n?\nderived from the source of `some`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "232",
    "text": "I\u2019m using `clojure.tools.namespace.repl/refresh` but it seems my `:after` symbol is not called. I\u2019m not sure why. Should it be in the user namespace or can it live anywhere?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "233",
    "text": "Can I assume that the `clojure.core/hash` of too clojure sets are always equal if the sets are equal by value? I have a use case where I'd like to store the hash in a database in order to find a set by its hash. Can too different values have the same hash with this implementation?\nyes\nthat is a hash collision\nThere are far more possible sets than there are 32-bit hash values, so there must be collisions.  And in practice if you start generating similar random sets, e.g. of integer values, you can find such collisions without a lot of trouble.\nMaybe more detail than you care to know, but there are non-Clojure Java sets that have inconsistent hash values, even though they are `=` to Clojure sets.  If you restrict your attention to Clojure sets of Clojure values, you should avoid those oddities.\ndepends on what's in the set too, no guarantee that hashCode is stable accross process executions in theory\nArticle containing even more details, if you are interested: <https://clojure.org/guides/equality>\nCertainly in Clojure, most hashes of Clojure values changed from pre-Clojure-1.6 to Clojure 1.6-and-later, but pretty stable except for that change.  But sure, the hash function could change again in a future Clojure version, or perhaps because of changes in Java hash functions on some values that Clojure calls out to (I don't recall implementation details well enough to know whether Clojure even uses any Java hash code any more, for Clojure values).\na set could contain some java instance of Foo with an unstable hashcode in theory\nunstable across process executions I mean\nSure, that falls outside of my qualification of \"Clojure values\" that I slipped in above :slightly_smiling_face:\nall in all relying on `hash` sounds like a bad idea imho\nbut that's just me\n```Whenever it is invoked on the same object more than once during an execution of a Java application, the hashCode method must consistently return the same integer, provided no information used in equals comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application. ```\nfrom the javadoc\nso an unstable hashcode is illegal\nWhatever happened with that hash function that was discovered that had a very small amount of collisions?\nah? is that something that changed? I recall reading the opposite\n<@Reiko> Do you mean the hash function that Clojure used before Clojure 1.6?  It was replaced.\nalso is that true for execution in runtime from vendor A to vendor B?\n<@Min> notice the difference between \"during an execution\" and \"need not remain consistent from one execution to another\"\nmaybe that's what you were talking about?\nI need to read this again :stuck_out_tongue:\nNo, I remember a hash function that was discovered by some person a few years back that promised very few collisions, but I haven't seen use of it\nno\noh yeah that's what I meant\ngotcha then you were correct\nsorry for the noise :)\nno worries\nThey are going to contain UUIDs (so `java.util.UUID` instances on the JVM), but since the UUIDs are identifying users (or other resources) they are going to repeat a lot since the database contains far less records than the set of 32-bit values.\nThanks you all for the quick answer, and thank you for the article. I shall read it.\nDo you know any function/library providing non-colliding hashes (or very low probability, mathematically speaking)? Or an alternative clean way to create a unique identity?\n<@Breana> We may be talking all around your question, without solving your problem here.  Depending on how long this database will last, relying on someone else's hash function implementation may be a bad idea, since it may change more quickly than the lifetime of your database.\nreplikativ has something like that I think\nUnless you have an implementation of the hash function that you have source code to that you believe to be stable for longer than your database.\nbut it has other tradeoffs\nbecause a hash is a summary they contain fewer bits of information then exist in the value being hashed, collisions will always be at least theoretically possible\n<https://github.com/replikativ/hasch>\nyou can construct a perfect hash, but you need to know the set of values a head of time\nThis is getting to be a lot of discussion on this topic. Can you guys please start a thread to keep track?\nSorry about that, thank you for the reminder\nI've been there wanting to use a set as a key in some database and trying to come up with some scalar value which maps to the set, and there is no satisfying way to do it\na hash is not great, maybe a bloom filter gets closer, but still has issues\nIf there is no perfect solution, an acceptable solution might be way enough.\nIf a bloom filter can at least reduce my search space by an order of magnitude I'd be happy with it.\nIf the set elements are UUIDs or other things with a total order that you can sort them on, would sorting the set elements and using a string representation of that sorted order work?\nIt would work I guess, but the string might get huge\u2026 If I do it this way I need to find out what will be the maximum set size, and I don't know that yet\nLet's think of it pragmatically:\nIf I hash the sets, I might get collisions.\nBut even if I get some collisions the probability is still small, so it might be acceptable. But if the hash changes because the implementation changed, I'll get into trouble.\nSo I'll have to find a way to hash a set that won't change over time/machine/process/version.\nA string might do it, but might get huge. A bloom filter might produce some false positives, but it might be acceptable anyway. I don't know how to persist a bloom filter yet though.\n\nYou all gave me a lot to think about, and I think I might take the time to refine my requirements and constraints before asking other questions :slightly_smiling_face:\n\nThank you very much!\nThe string I mentioned would never have collisions, but yes might get too large.\nEven if you had a hash function that didn't have collisions, and had a small result, were you planning on storing the full set in the database, in any form at all?  If so, what technique were you planning to use?  Perhaps storing its elements across different database entries?\nI'm using a SQL relational database, and the current use case is to store users and groups of users. So I have a `Group (id)` table, a `User (id)` table and `UserGroup (group_id, user_id)` join table. I want to find as fast as possible a group having an exact set of user. Not a subset nor a superset. SQL got set operations, but  don't provide a way to compute set equality in one operation. And with this table design I have to perform a `GROUP BY group_id HAVING count(*) = &lt;size of the user set&gt;`, thus iterating with a nested loop at most over all groups.\nSo I was thinking that hashing the set and storing the hash would gave me direct access\u2026\nIf you are willing to iterate over all groups that have the same hash, then a decent hash function can help significantly reduce the number of sets you would need to check in a slower way for precise membership equality, often down to 1 candidate, but even if occasionally down to several, would be much faster than checking all with say, the same number of elements.\n<@Breana> sort the set and reduce with the v5 uuid constructor fn - that will give you a stable, deterministic hash of your set, with as low a probability of collision as the nsa\u2019s best crypto engineers of the 1990s could devise\nThank you! Will look into it\ni'm currently happily using clj-uuid for a V5 implementation: <https://github.com/danlentz/clj-uuid#namespaced-v3v5-identifiers>\nIt looks a lot like what `replikative/hasch` (posted by mpenet) is doing with `(uuid5 (edn-hash &lt;value&gt;))` for this use case\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "234",
    "text": "crypto hashes like SHA / MD5 / etc. promise (or strongly hope) very few collisions, but tend to be a little more expensive to calculate than non-cryptographically-strong ones.  Do you recall whether the one you heard of was intended to be cryptographically strong?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "235",
    "text": "Bumping a previous question \u2014 how should I debug a `tools.namespace.repl.refresh` invocation not calling my `:after` function? I\u2019m calling it like this: ` (c.t.n.r/refresh :after 'nosco.dev/go)` \u2014 where `nosco.dev/go` is a no-args function as instructed. The refresh works (I see a bunch of refreshed namespaces printed out) but the function is not called (nor do I see any exception).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "236",
    "text": "Found it - Buzhash.\nhitting an interesting java interop issue at last that i'm having trouble solving :slightly_smiling_face:\noh, i hadn't seen `edn-hash` before - yes, that's similar, although perhaps more general (in that it's designed to do all the hard work of distinguishing your general edn structure before feeding it to a hash fn)\nif you were to declare a java function that expects a biconsumer string-string lambda you would declare it as\npublic void foo (BiConsumer&lt;String, String&gt; aLambda) { ....  aLambda.accept(\"a-string\", \"another-string\"); .... }  , something like this ... and whenever other java code tries to invoke it then javac is smart enough to check if that lambda is actually capable of consuming the string string argument pairs\nbut if i expose a function from clojure ... how do i achieve the same typehint so that java invokers would be aware of the bi-consumer expected ?\nso i need at leat to write pure java interfaces for the \"hinting layer\"\na bit sad :disappointed:\nyou could write something that reifies the interface that you need without it being too hateful\nconsider voting for <https://dev.clojure.org/jira/browse/CLJ-2365>\nyou are thinking of the reverse\nyes i figured the same,  reify is in the opposite direction of my issue :slightly_smiling_face:\nBecause of type erasure in the JVM there's no way to ensure\n\"don't pass it non-strings\"\nmy guess is it is more a question of providing intellisense\nit's not about runtime checks :slightly_smiling_face: , it's about making life easier for coworker who invokes my clojure function from java\nso that he wouldn't feed my code a biconsumer that expects an elephant and a teapot as argument types\nbut that is just dynamic typing right?\nclojure is a dynamic language, no getting around it\nwell it does look kind of weird that i can  say  (defn foo [^String a-string] .... )  but not  (defn foo [^java.util.List&lt;String&gt; many-strings] ...)  ...\nbut as said, i'm not married to the biconsumer interface, so i can declare my own, more restrictive, it will have to do\ntype erasure happens in the jvm\nnah, it happens in the java compiler\n^, true\njava the language has generics\nAlso, ^String doesn't actually mean the parameter is a string\nthe jvm doesn't\nclojure will still make the function signature Object, and do local casts to string where necessary\ntype hints are not type declarations\n^\n<https://clojurians.slack.com/archives/C03S1KBA2/p1548104447049200>\ni understand that part\ni'm not trying to alter that part either :slightly_smiling_face: ... all i need to do is to define type hints for people invoking the code from java ... so that their intellij could be helpful for them when invoking my code\nthere are huge issues with that as well\nthe classes etc created by clojure may not be visible until you load the clojure code\nwell the gen-class part etc. i already solved\nso i'm generating a nice jar file that has nicely callable functions ... just wanted the parameter types to be more precise\nyou could create the interface in a java file and then implement the interface in clojure\ninstead of just java.util.List :slightly_smiling_face:\nand stop aot compiling your clojure code\n(after you write a stub with whatever types in java)\nuse <https://clojure.github.io/clojure/javadoc/clojure/java/api/package-summary.html> to invoke clojure from your java\ngen-class with :methods and matching   -some-method is cleaner when you look from the java side\nthey won't even know it's clojure they are invoking\nsure, I mean, you write a facade in java and invoke clojure like that\ni'm not struggling with invoking itself :slightly_smiling_face:\nexpose your java facade then with whatever types you want\nwas just struggling with the generic part which while being a mimic (since the compiler throws it all away in the end) , is helpful at dev time\nat least helpful in the way their intellij will draw a bold red line around the elephant and teapot\nI am an old foe of clojure's aot compilation (I've seen it cause real head scratchers) so I am generally of the opinion that the design that leaves it out is best, in this case writing some facade in java (so it gets intellisense and types, maybe even javadocs), and having it call clojure via clojure.java.api seems best\nI agree with <@Rosaline> that if you want IntelliJ to provide type hints, you're going to have to write a facade in Java and then call into Clojure behind the scenes. The Java API that Clojure exposes is really nice -- we rely very heavily on it in production and have done for years to integrate Clojure into our legacy apps.\nwell this piece of code has just one entry point (calling one singe function) and what follows is a bunch of clojure all the way\nyes\ntype hinting is purely local to function boundaries\ntype hints are not type declarations, type hints are not propagated\nthere is nothing like a type inference algorithm going on behind the scenes\nit is helpful to consider clojure in the context of being dynamic and code reload and things being redfined\nit is not safe to conclude getd2 will always return a whatever because the current definition defines it as returning a whatever\nwas a small surprise to me too at some point that clojure typehints dont enforce anything really\ni was passing through a completely wrong type and the machine happily hummed along :angel:\ntype hints are just that, hints to the compiler when dealing with interop, if you don't do interop they do nothing\nIt's probably worth mentioning that Clojure's \"unit of compilation\" is a single top-level form -- so when `getd2` is compiled, it has no type hint attached to indicate what it might return, and when `-main` is compiled that definition of `getd2` with no true hint is what it sees being used.\nIt would be incorrect in a lot of cases for Clojure to automatically tag the return type of a function based on whatever it deduces the type of the last expression in its body to be (which would be the only way the type deduced for `l` inside `getd2` to be propagated _out_ of the function).\nDoes that help <@Lee>?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "237",
    "text": "you can't\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "238",
    "text": "Is type hinting loses effect at function boundaries?\nIn the code below I would expect that no reflection is needed, but lein check says it does:\nReflection warning, core.clj:26:43 - reference to field getDisplayLanguage can't be resolved.\nWhy? Please explain type hinting rules. (I've read <https://clojure.org/reference/java_interop#typehints> and googled this, but can't see why it is working as it does in this case.)\n(ns core\n  (:import [java.util Locale Locale$Builder]))\n\n(defn get-default\n  ^Locale\n  []\n  (let [l (Locale/getDefault)]\n    ;; local usage of the result of a static method:\n    ;; no type hint is needed to avoid reflection:\n    (println \"gd\" (.getDisplayLanguage l))\n    l))\n\n(defn getd2\n  []\n  (let [l (get-default)]\n    ;; local usage of the result of a type hinted return value of an fn:\n    ;; no new type hint is needed to avoid reflection:\n    (println \"gd2\" (.getDisplayLanguage l))\n    l))\n\n(defn -main\n  [&amp; _]\n  (let [l (getd2)]\n    ;; indirect usage of the result of a type hinted return value of an fn:\n    ;; type hint is ineffective, reflection is used\n    (println \"Hello, type hinting World!\" (.getDisplayLanguage l))))\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "239",
    "text": "(except long and primitive double type hints)\nThanks for the info. Then <https://clojure.org/reference/java_interop#typehints> is quite misleading for me, stating that \"Once a type hint has been placed on an identifier or expression, the compiler will try to resolve any calls to methods thereupon at compile time. In addition, the compiler will track the use of any return values and infer types for their use and so on, so very few hints are needed to get a fully compile-time resolved series of calls.\" Now I think this could be used to deduce the behavior you describe above: \"Type hints are metadata tags placed on symbols or expressions that are consumed by the compiler.\"\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "240",
    "text": "the docs on the page are maybe correct if you add a modifier like \"within a function\" somewhere\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "241",
    "text": "Hi! Quick question: how can I add a CSS class to an element based on a condition in Hiccup? I tried `[:div.foo {:class (if error \"has-error\")}]` but it sets `(if error \"has-error\")` as the class of the element :thinking_face:  <@Angila>\n<@Matha> How are you using it?\n```\nuser=&gt; (use 'hiccup2.core)\nnil\nuser=&gt; (def error true)\n#'user/error\nuser=&gt; (str (html [:div.foo {:class (if error \"has-error\")}]))\n\"&lt;div class=\\\"foo has-error\\\"&gt;&lt;/div&gt;\"\nuser=&gt; (def error false)\n#'user/error\nuser=&gt; (str (html [:div.foo {:class (if error \"has-error\")}]))\n\"&lt;div class=\\\"foo\\\"&gt;&lt;/div&gt;\"\n```\nIt sounds like you're accidentally quoting your code.\n<@Angila> I was not quoting it I think, but i was on `v1.0.5` of Hiccup; perhaps that explains it? Trying v2 now :slightly_smiling_face: Thanks for the prompt reply\nIt might have been an issue fixed since then.\nI just tried it on v2; doesn\u2019t seem to make a difference. Here is how I am using it: <https://gist.github.com/hmaurer/5d52b8a5edb625b00e175b9a7404f904#file-render-fn-clj-L50>\nand in the REPL:\n```\nuser=&gt; (use 'hiccup2.core)\nnil\nuser=&gt; (def error true)\n#'user/error\nuser=&gt; (str (html [:div.foo {:class (if error \"has-error\")}]))\n\"&lt;div class=\\\"foo if error has-error\\\"&gt;&lt;/div&gt;\"\n```\n```\nhiccup                       {:mvn/version \"2.0.0-alpha1\"}\n```\nAh, it's been fixed in master but not been released.\n<@Angila> ah; I will just point my dependency to master then. Thanks! :slightly_smiling_face:\nNot sure you can without a deps.edn in the repo?\nI'll release a 2.0.0-alpha2\nAh I don\u2019t know, first time using deps.edn. I just tried and you are right, I can\u2019t :face_with_rolling_eyes:\nthanks!\nGiven there are no transitive dependencies, you _can_ use it from GitHub with `deps.edn` -- you have to specify the manifest type as `:deps` and it will silently ignore the lack of a `deps.edn` file in the repo.\nAh, today I learned something :slightly_smiling_face:\n```clj -Sdeps '{:deps {hiccup {:git/url \"<https://github.com/weavejester/hiccup>\" :sha \"8021043ae0eb64d1a31d87c0fa6071f44bc1c7f3\" :deps/manifest :deps}}}'```\n<@Celestine> ah, TIL as well. Thanks!\n2.0.0-alpha2 has just been uploaded to Clojars anyway, so you can do it either way.\n<@Angila> Brilliant; just updated the deps; it fixed my issues. Thank you :slightly_smiling_face: (for live support at 1am)\nNo problemo\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "242",
    "text": "Is there anyway, using clojure.zip to replace a node with two new nodes?\n\n```(let [btree [45 [10] [57]]\n      root-loc (zip/zipper vector? rest\n                           (fn [[x _ _] children]\n                             (vec (cons x children)))\n                           btree)]\n  (-&gt; root-loc\n      zip/down ;[10]\n      (replace-with [11] [12]) ; instead of zip/replace\n      zip/root))\n;=&gt; [45 [11] [12] [57]]```\n\n\nUsing `zip/replace` I can only swap out in this example `[10]` with `[[11] [12]]`, which is not what I want because I don't want to add depth.\nI can't really see any other way around this besides going up and replacing the children in the parent node.\nI see I could replace and possibly insert left or right, will try that next.\nthe way a zipper works, you can think of replace as a mapping operation, you are a particular node, an you map (constantly replacement-value) over the value of that node, what you are talking about would be mapcat\nin theory maybe possible, but there are kind of edge cases, like if are visiting node N, and you replace it with nodes N1 and N2, which are node are now visiting? you can make a choice, but there is no single \"right\" answer there\nYeah maybe my particular case warrants a new replace with function, like you said no right answer\nI really want to split a node in two\nI don't really care which node i'm visiting because i zip the tree right after\nI think you have to do it from the parent\nCombining zip/replace with insert-right works... since i don't really care if it goes left or right in my case:\n```(defn replace-with\n  [loc node1 node2]\n    (let [[x {r :r :as path}] loc]\n      (with-meta [node1 (assoc path :r (cons node2 r) :changed? true)] (meta loc))))```\nThis seems to work\nI mean, if you don't want to dig in to the internals of zippers and figure out how to mapcat\nThese are the originals:\n```(defn insert-right\n  [loc item]\n    (let [[node {r :r :as path}] loc]\n      (if (nil? path)\n        (throw (new Exception \"Insert at top\"))\n        (with-meta [node (assoc path :r (cons item r) :changed? true)] (meta loc)))))\n\n(defn replace\n  [loc node]\n    (let [[_ path] loc]\n      (with-meta [node (assoc path :changed? true)] (meta loc))))```\n(which I guess you did)\nI was just hoping I maybe missed something but it helped talking to you lol\nThe only reason I didn't want to do it from the parent is because I did not want to go through at worst n many children to find and replace it with two new children\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "243",
    "text": "What is the easiest way to achieve the following: I want to split the sequence after the element for which a predicate is true.\nyou can use split-with\nsplit with will split before the element\nnot after\nLike suppose you have `[1 11 8 -3 9 33]` and you want `[1 11 8 -3]` and `[9 33]`, based on predicate `neg?`.\nMaybe combine split-with with (partition 2 1 ...)\nSomething like (map #(apply concat %1) (partition-all 2  (partition-by neg? [1 11 8 -3 9 33 -5 6 7])))\nyes that's what I ended up with\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "244",
    "text": "I'm facing a very weird problem with `require`. For some reason, when I'm saying `(require my-ns-var :refresh)` the changes are *not* applied to that namespace. I'm pretty confident my logic is solid but I'm just missing some intricate detail about `require` here. Just for reference: this is about reloading changed Garden CSS declarations within my REPL\nProblem manifests itself when I have structure main style-ns / page style-ns / component style-ns &lt;- change to last one\nI'm requiring the files in correct order, meaning that I first require namespaces which have no dependencies and from there I progress towards the main style-ns\nBut for some strange reason those changes are not applied\nIf however I go and reload those namespace manually within REPL in that same order the changes are applied\n:refresh is not a thing - you want :reload\nAh sorry about that. Using :reload\nSo as much as I would have hoped that would have been my problem but alas it isn't :disappointed:\n:)\nyou could also try :reload-all (which also reloads dependent namespaces)\nYeah, tried that. Only thing that changes is the CSS compilation time since requiring takes more time. No help\nI'm just using normal Clojure vars here, nothing special really\nI don\u2019t know anything about garden, but state has to live somewhere, typically in a var, so I\u2019d investigate where Garden state is getting cached\n`def`s referring to other `def`s\nGarden just takes a bunch of Clojure data structures in and spits out a string of CSS\nI've debugged this so far that the actual data structures do not update\nSo the bug happens way before Garden steps into play\nBut apparently I'm not missing something special require magic here that I should be aware of\nnot much other magic to know\nYeah. I actually also tried to use `remove-ns` before requiring but that proved to cause all kinds of nasty problems\nother places where state hides in the runtime are in multimethods (dispatch table) and protocols\nI'm wondering if I'm hitting garbage collection somehow\nMeaning, my old vars are left dangling and old references are still there for some reason\ndoubt it\nIt's really strange since if I go and reload all namespace in order manually it works\nBut not if I do the same via require\n(manually meaning via Cursive \"load namespace\")\nAhem... Ok. Got it working.\nNow using :reload-all\nAND\nI restarted my REPL...\nStill confused what caused all this\nI had tried restarting my REPL previously\nI really need to dig in deeper into this at some point but I've wasted too much time already\nThanks for ideas!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "245",
    "text": "Hi! I\u2019ve encountered an issue when a protocol is reloaded causing the implementing objects to no longer `satisfies?` the protocol.\n\nExample:\n```\n(defprotocol A (foo [_]))\n(def a (reify A (foo [_])))\n\n(prn (satisfies? A a))        ;; =&gt; true\n(defprotocol A (foo [_]))\n(prn (satisfies? A a))        ;; =&gt; false\n```\n\nIs there any way to specify that the protocol object should not be recreated when reloading namespaces? Sort of like `defonce` does\nlooks like something that <https://clojuredocs.org/clojure.core/split-with> could be useful for\nIn short, no\nbut you can wrap it in a defonce:\n```\n(defonce do-once (defprotocol ...))\n```\nmy guess would be you are aot compiling and somewhere you are importing the class created by a defrecord without requiring the namespace that defines it, so the import is loading the old aot compiled version\nI think you are onto something with regards to aot. I will post the minimum code that breaks `lein uberjar` in thread.\n```\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; In protocol namespace\n(ns protocol)\n\n(defprotocol A\n  (foo [_]))\n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; In implementation namespace\n(ns implementation\n  (:require [protocol :as proto]))\n\n(def a\n  (reify proto/A\n    (foo [_] \":)\")))\n\n(println \"I get printed twice!\")\n(assert (satisfies? proto/A a) \"I fail the second time\")                        \n\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; In our core namespace\n(ns core\n  (:require [implementation]))\n```\nBut this works fine in a fresh project though, so it must be something that's configured in my company's project\nwhat are you doing when it fails? running tests?\nRunning `lein uberjar` (compiling)\nif you see that printed twice, I would look for a require with :reload or :reload-all\nThere are no `:reload`s or `:reload-all`s in our project\nUsing `defonce` instead of `def` fixes it:\n```\n(defonce a\n  (reify proto/A\n    (foo [_] \":)\")))\n```\nit gets rid of the symptom, but there is still something wrong somewhere\nwhen was the last time you ran lein clean?\nUnsure, but this happens when building the app on AWS as well. I'll try to do a `lein clean` before `uberjar` locally just in case\n_update: same error_\ndo you have a user.clj or some plugin or something that loads your code?\nWe do have `user.clj` and we use `ring.middleware.reload/wrap-reload`, but these should only be enabled in dev\nI bet one of those is the issue\naot compilation *must* load the code, so if you load it first, then ask it to be compiled you will end up loading it twice (which breaks things)\nThat makes a lot of sense. Thanks :slightly_smiling_face: I will have to look more into this tomorrow as it is getting late.\nI have a good feeling about looking into the aot stuff, thanks again!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "246",
    "text": "Thanks for your answers :slightly_smiling_face: It looks like this wasn't the cause of the problem after all, the protocol is only loaded once. The object that implements the protocol is loaded twice \u2013 why that would break things is very mysterious :man-shrugging: _edit: &lt;--- I now realize this doesn't make that much sense in the context of my example, sorry :sweat_smile:_\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "247",
    "text": "hm. is there some kind of practical difference between `seq` and `lazyseq` that i'm missing?\nsorry, `lazy-seq`. to me it looks like they're basically equivalent\nYeah, real world Clojure can get a lot done without type hints -- if you're not worried about the performance of reflection, you almost _never_ need type hints. If you decide to worry about performance due to reflection, it's still most often surprising just how few type hints you really need -- and they tend to be very localized, which I really appreciate.\nDo any libraries exist where I can do collection transformations like (map, filter, reverse, rest, ect) but it keeps the type of collection\nI know about `mapv` and `filterv` but more would be awesome.\nthat sounds like one of the core tenants of specter\n<https://github.com/nathanmarz/specter>\nI was thinking more of a library with heaps of sequence functions that would instead return vectors for example.\nfor clojure's built in datatypes other than seq, you can use `(into (empty coll) (filter f) coll)` etc.\nor if you just want to pick a specific result type: `(into [] (map f) coll)` etc.\n<@Dann> I've also been using `vec` quite a bit.\nthe difference here is into doesn't need to build a lazy-seq, as it uses the transducing arity of the collection functions\nand it can use `#{}` or `clojure.lang.PersistentQueue/EMPTY` or `{}` instead of `[]`\nwhy do you need vectors?\nA have dynamic tabular data\nI don't know how many rows or columns I might have\nSo I'm accessing cells in this data by x and y index\nin broad strokes, lazy seqs can to some extent amortize the cost of traversals by being lazy so maybe you do a bunch of mapping opperations and only force them at the end, if you always concretely constructing vectors you lose that\nSo I should probably just convert to vec in the final step?\nOr can I avoid vectors entirely here?\nit depends on the operations you are doing\nhard to say\nI might look at another representation too, maybe `{[x y] data}`, depending on what operations you are doing\nif you can describe your transformations as a transducer you pass to into, that is even better than lazy seqs\n<@Matha> If none of the \"success\" expressions can produce `nil`, you can always wrap the whole in `(or ... (my-fall-back))`\n(and use `when`/`when-let`)\nAlso, I'd say that if you have a long enough chain of conditionals, you probably need to refactor it into smaller functions anyway (which then become a bit easier to chain together with `or` :slightly_smiling_face: )\n(or threading or whatever)\n<@Matha> hi. try these two different macros\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "248",
    "text": "they aren't similar much at all. check out the examples on <https://www.conj.io/store/v1/org.clojure/clojure/1.9.0/clj/clojure.core/lazy-seq>\nseq is for consuming seqs from things that are seq'able, lazy-seq is for constructing lazy seqs recursively\nThanks for your explanation, it helps!\n(Honestly, I thought that type inference is capable of determining the correct type in many cases, e.g. in the case of getd2's return type, and Clojure does it IF it is \"hinted\" to do so: I thought that once I type hinted something, Clojure respects the explicit intention and avoids reflection in all cases where it can, based on the hint I gave. I understood the <http://clojure.org|clojure.org> reference (linked previously) in this way too. After the answers I got here I tend to suspect that Rich H. doesn't want to encourage the usage of type hinting, so limits its capabilities.)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "249",
    "text": "I agree, I never needed type hints, I \"decided to worry about it\" :)) just because I am working on a free sw whose usage I don't want to hinder by possible performance bottle necks. I found also that very few type hints were enough to eliminate all reflections -- just I didn't understand why exactly those type hints are needed / why exactly there... And the reference doc didn't help me here.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "250",
    "text": "Hello! Quick q: is there a nice way in clojure to do a few `if-let` / `if` / `let` in a row (nested), but have them all branch out to the same fallback? For example when signing in a user you might want to fetch a user account (`if-let`), then check the password, etc, but if at any point the condition fails you want to branch out to some error message\nNone\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "251",
    "text": "Thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "252",
    "text": "Can someone help me decipher one of the new clojure error messages? It\u2019s this: ```{:type clojure.lang.Compiler$CompilerException\n   :message Syntax error compiling at (plus_one_api/server.clj:38:1).\n   :data #:clojure.error{:phase :compile-syntax-check, :line 38, :column 1, :source plus_one_api/server.clj}\n   :at [clojure.lang.Compiler load Compiler.java 7647]}\n  {:type java.lang.ClassNotFoundException\n   :message clojure.spec\n   :at [java.net.URLClassLoader findClass URLClassLoader.java 466]}]\n :trace```\nDoes this mean that `clojure.spec` is missing? I looked at line 38 in server.clj, and it is a comment. Not a spec related comment\nYou might have a look at a library I\u2019ve been working on which has pattern matcher designed to make this sort of thing easier to read without sacrificing (much) performance :point_right: <https://github.com/noprompt/meander>\n```\n(require '[meander.match.alpha :as r.match])\n\n(defn find-password [data]\n  (r.match/find data\n    ;; Only binds ?password if data contains a :user key which points\n    ;; to a map that has a :password key points to a string.\n    {:user {:password (pred string? ?password)}}\n    [:okay ?password]\n\n    ?_\n    [:nope]))\n\n(find-password {:user {:password \"password\"}})\n;; =&gt; \n[:okay \"password\"]\n\n(find-password {:user {:password :wrong}})\n;; =&gt; \n[:nope]\n\n(find-password {:user {}})\n;; =&gt; \n[:nope]\n\n(find-password {})\n;; =&gt; \n[:nope]\n```\nThis is a brand new Vase application\nSorry! I just Spectered the channel and didn\u2019t mean to. :sob:\nErr, jQueried it.\nPlease don\u2019t send me hate mail. :laughing:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "253",
    "text": "meander looks really awesome, i intend to find some time to try it soon\n<@Belle> Is there any mention of the Java class java.net.URLClassLoader and/or the method findClass in that file?  If so, note that findClass is a method, not a class.  If there is an import statement that contains \"java.net.URLClassLoader findClass\", perhaps it should be changed to \"<http://java.net|java.net> URLClassLoader\"\nThe exception is a ClassNotFoundException, and since findClass is a method name, not a class name, that led to my questions above.\nI do not see any mention of clojure.spec, or anything that I know to be related to clojure.spec, in the error messages you sent.  What makes you believe it has something to do with clojure.spec?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "254",
    "text": "hello, i am using kafka consumer in clojure and i keep seeing tons of these logs printed to screen:\n\n `DEBUG org.apache.kafka.clients.consumer.internals.ConsumerCoordinator - Group some-group committed offset 8 for partition test-0`\nthere are thousands of these, any one know how to turn them off?\nsettings i've tried:\n\n`log4j.properties` in `resources` folder\n```log4j.rootLogger=INFO\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d] %p %m (%c)%n\n\nlog4j.logger.org.apache.kafka.streams=WARN\nlog4j.additivity.org.apache.kafka.streams=false```\n\nalso\n```(set-logger! :level :warn\n             :additivity false\n             :pattern \"%p - %m%n\"\n             :filter (constantly true))```\ni was able to solve this by adding a logback.xml file to my project\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "255",
    "text": "Nothing I found. Did clojure.spec exist under a different name at some point? Is this a version issue?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "256",
    "text": "This might be stupid question but is there a way to process huge binary files/streams lazily? or partially ? or in chunks? and to save those parts/chunks to a file until stream is empty?\n\nI need to save big binary data to a file system without realizing whole stream in memory/heap.\n\nWhat i imagine is i have a reference to big input stream in java which i will use in clojure code as input stream which will take lets say\n50mb &gt; save to file\ntake another 50 &gt; save to file\ndo this until stream is empty\n\ni am doing this `(<http://clojure.java.io/copy|clojure.java.io/copy> input (java.io.FileOutputStream. (.getAbsolutePath tmp-file)))` but i am not sure if it's what i am looking for\nthe Java channel APIs are probably the most efficient way to do stuff like this - I\u2019d just google up the best way to do it in Java, and then do the same via interop\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "257",
    "text": "Does not short-circuit\n```\nuser=&gt; (some-nil [nil false (throw (Exception. \"no\"))])\nException no  user/eval149 (NO_SOURCE_FILE:7)\n```\nWhat problem are you trying to solve that you need this type of logical operator?\nSuppose you\u2019re reading a configuration option where false is a valid option. Then you could have:\n`(or* (read-from-env \u2026) (read-from-java-opts \u2026) (read-from-file \u2026) (throw. (Exception. \"no option provided\")))`\nIt\u2019s no problem to write this macro myself, but I already solved it another way\nAh I see\n<https://mobile.twitter.com/datomic_team/status/1088117920918577153>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "258",
    "text": "I think it copy does what you want, in 2mb chunks. It's pretty efficient. \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "259",
    "text": "By the way, was this feature simply not supported in v1? (1.0.5). (dynamic classes)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "260",
    "text": "Could the persistent data structures in Clojure be made as performant in idiomatic Clojure instead of Java?\nyeah, that\u2019s why I\u2019m wondering :slightly_smiling_face:\nwhy does pop throw for empty collections, but not for an empty queue?\n<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentQueue.java#L106>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "261",
    "text": "<@Angila> ^\nHmmm, don't see a more specific channel, so asking here. Has anyone used bidi <https://github.com/juxt/bidi> with http-kit? The claim is it is compatible with http-kit, but not sure how to use it via `http-kit/run-server`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "262",
    "text": "<@Darci> might be worth posting in <#C0CFGN25D|juxt>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "263",
    "text": "Does anyone know how to correctly escape arguments to `lein` under windows powershell? I've tried variously `lein update-in :dependencies conj \"[nrepl \\``\"0.5.3\\``\"]\" -- repl`` and `lein update-in :dependencies conj '[nrepl \"0.5.3\"]' -- repl`, but the first just prints the help banner and the latter blows up in the lisp reader claiming 0.5.3 isn't a valid number :slightly_smiling_face:\nalso I apparently can't escape backticks in slack markdown correctly, so that is compounding the issue...\nyeah, looked at that already, but it appears that cider is invoking it some other way, to complicate matters :S\nunfortunately I want to invoke lein from powershell, rather than from cmd.exe, which I (think) is approximately what is happening.  Either way, cider prints `:dependencies conj ^\"[nrepl \\^\"0.5.3\\^\"]^\"` which is definitely not right\nNo, looks like it was a bug that was only recently fixed. Specifically it's only an issue if you use the dot-notation *and* supply another class that's calculated dynamically.\nI believe Rich has intimated in the past that it could be done, but the payoff wasn't clear. FWIW, I believe CLJS's data structures are within an order of magnitude performance of CLJ's and they're implemented in CLJS. Not sure if the performance difference is between js's vm and JVM, or between CLJS and CLJ though.\ngood point\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "264",
    "text": "if you have emacs and cider, you could jack in in a project and then check the `*Messages*` buffer which will have the lein invocation that CIDER uses. it has some escaped arguments there.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "265",
    "text": "<@Angila> ah, I see, thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "266",
    "text": "It seems the batch file works differently and can be sanely escaped. I suspect also that is why emacs works, since it isn't powershell aware iiuc.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "267",
    "text": "Thanks - you were correct, answer given there\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "268",
    "text": "we should port clojurescript to graal/truffle and find out\nwell, since the code in clojurescript is \u201cpure\u201d clojure, it shouldn\u2019t be too hard to port it to .cljc, so you can run them in the JVM\n:thinking_face:\ncan you recommend a resource about how clojurescript bootstraps itself?\nI don\u2019t know that much about it. Personally I would start reading the source code.\nyeah, I'm doing that, still can't comprehend how little js there is in the repo, just a handful of boostrap files in <https://github.com/clojure/clojurescript/tree/master/src/main/cljs/cljs>\nhere is some emit code: <https://github.com/clojure/clojurescript/blob/master/src/main/clojure/cljs/compiler.cljc#L512>\ni see, that's all happening in <https://github.com/clojure/clojurescript/blob/master/src/main/cljs/cljs/core.cljs>\nthe `js*` calls i mean\nI was wrong about that probably\nbut the emit link is helpful.  I had searched for this without success a few times, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "269",
    "text": "Well, cljs's persistent data structures are built on js's arrays, which are pretty semantically close to java's imo. So it shouldn't be too hard to port them over\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "270",
    "text": "`(take 100 (sort-by :timestamp &gt; @nf-chat-messages))` what am i doing wrong to get a null pointer exception o.o\n<@Jina> sounds like `:timestamp` is missing from one of those messages\u2026\ntry `(every? :timestamp @nf-chat-messages)` and see whether it\u2019s truthy \u2014 I bet it\u2019s not.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "271",
    "text": "Hi all,\n\nBy my understanding of <https://clojure.org/reference/reader>, `.1` should not be a valid identifier, since it is not an available symbol (\"Symbols beginning or ending with '.' are reserved by Clojure\"). And yet in my REPL:\n\n```\nuser=&gt; .1\n\nCompilerException java.lang.RuntimeException: Unable to resolve symbol: .1 in this context, compiling:(null:0:0) \nuser=&gt; (def .1 0)\n#'user/.1\nuser=&gt; .1\n0\n```\nAm I misunderstanding the description of a symbol?\n\"reserved\" means you shouldn't use them, it doesn't mean clojure always cares if you do\nAh I see, I interpreted \"reserved\" as \"invalid as an identifier\", but that makes sense. Thanks!\nAnd yes, I wouldn't define `.1` as anything unless you're in a Clojure obfuscation competition :sweat_smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "272",
    "text": "in this case, I definitely would not\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "273",
    "text": "Seems like the ~language~ wording could just be improved to say exactly what <@Rosaline> is said and leave no interpretation  up to the reader.\n<@Diamond> It\u2019s common for languages to define a set of \u201creserved by &lt;the language&gt;\u201d symbols \u2014 without giving more meaning than that.\nJava does it, C/C++ both do it\u2026\nBut in those cases the symbols are reserved because they\u2019re keywords.\nThe real reason why you *shouldn\u2019t* define a symbol that leads with a dot in Clojure has everything to do with the how the reader reads list forms that have a symbol which leads with a dot.\n```\n(def .a (fn [] 1))\n\n.a\n;; =&gt; \n#function[scratch/-DOT-a]\n\n(.a)\n;; Malformed member expression, expecting (.member target ...)\n```\nNo, in many languages, certain characters in certain positions are \u201creserved\u201d \u2014 and may or may not work, and may change their meaning in the future.\nOkay, sure, I\u2019ll buy that. JavaScript is like that. But my point is regardless of who\u2019s saying it, it\u2019s still unclear.\nIt\u2019s got a very specific meaning in language definitions tho\u2019\u2026\nNo.\nIt\u2019s like in Standards, where unspecified/undefined/implementation-defined terms are used.\nThe fact we\u2019re having this discussion proves there\u2019s a misunderstanding and that the language is not clear because it can be misinterpreted.\n(and shall/should/may/must)\nRight. But! In those cases the terms are defined up front.\nAnd they\u2019re defined up front for that very reason.\nWell, Clojure doesn\u2019t have a \u201cstandard\u201d, even tho\u2019 it uses common standard words in its description.\nHa!\nThere\u2019s a big difference between well defined and, well, defined.\n:slightly_smiling_face:\n\u201cWell, actually\u201d :slightly_smiling_face:\n:smile:\nIt doesn\u2019t seem like defining terms up front would be a bad idea though. It\u2019s useful.\nTrue, Clojure could add a Glossary\u2026 if it doesn\u2019t already have one\u2026\nIt\u2019s a problem in software engineering in general.\nHaving to be clear is no fun. :slightly_smiling_face:\nHaving spent eight years on the ANSI C++ Standards Committee, I can assure you that \u201cbeing clear\u201d can seem overrated :slightly_smiling_face:\nBack to the case with the reader though; it would be helpful to explain _why_ it\u2019s reserved.\nAll it could say is \u201creserved for future use\u201d\u2026\nOr, at least, in that context, what \u201creserved\u201d means.\nThe example I provided above is a good illustration.\nThat\u2019s what \u201creserved\u201d means.\nIt may work now, it may not. Even if it works now, it may not work in the future.\nI\u2019m sure it has it\u2019s drawback but we shouldn\u2019t throw the baby out with the bath water.\nIt may partially work (as the `.1` examples above show) or not at all or it may launch missiles :slightly_smiling_face:\nSpecs and clear language are really useful.\nWould you be happier if it said \u201csymbols beginning or ending with `.` have undefined behavior\u201d?\nNo. Because that would be lying. It has precisely defined behavior.\nIt\u2019s precisely defined in the reader.\nI don\u2019t know that you could accurately write down the situations under which `.a` would behave in every possible way tho\u2019\u2026\n(and I don\u2019t know that such a description would be _useful_ even if it were accurate)\nWell, I suppose, if Rich decided that it\u2019d be worth checking if the symbol can be resolved before treating it as a method call\u2026 we could say something along the lines of \u201cthis is it\u2019s definition now\u201d.\nAnd the problem with writing it down is that then if the behavior changes accidentally in some situation in the future, the description may no longer be accurate \u2014 whereas \u201creserved\u201d imparts no specific meaning and _would not be rendered inaccurate_ by such changes.\nClojure has a long history of only specifying partial behaviors \u2014 and leaving implicitly undefined a lot of behavior. In order to allow the implementation to change/improve and only be bound by the explicitly defined partial behaviors.\n`clojure.set` is the classic example \u2014 the functions are defined for inputs that are sets. If you give them non-sets, you still get results, but they\u2019re not specified by the docstrings \u2014 and could change whenever the implementation gets improved.\nThere are extremely good reasons in language design \u2014 and language specification \u2014 for _not specifying the behavior_ of a certain set of constructs.\nI\u2019m not sure if that\u2019s a good argument. Maybe I\u2019m reading this wrong but are you suggesting deliberate usage of vague language?\nNo, I\u2019m saying _undefined_ or _unspecified_ behavior is a valuable \u2014 and extremely common \u2014 part of language specification.\nThose are _not_ \u201cvague\u201d terms.\nEh, I mean you could say that but in this case I don\u2019t think there\u2019s a lot of room for symbols that lead with a dot to do much else besides be resolved to vars.\nI do think it\u2019s better than \u201creserved\u201d, however, I\u2019ll give you that.\nRegarding intentional partial behavior, I think it\u2019s fine _up to_ not being open about it. That `clojure.set` does not tell someone up front that, hey, if you give me non-map stuff I can\u2019t promise you it\u2019s gonna work, is borderline dishonest.\nI think we\u2019re just going to disagree.\nI\u2019m not sure we\u2019re in disagreement. I\u2019m agreeing with you that \u201cundefined\u201d is superior to \u201creserved\u201d.\nFor me, with a lot of background in language design and specification, what the Clojure reader page says about `.a` / `a.` etc is perfectly clear and reasonable.\nThe same goes for `clojure.set`.\nIt defines the behavior for specific inputs.\nIt therefore does not define the behavior for other inputs.\nSean, I have a lot of experience with language design and specification as well.\nBut, Sean, there\u2019s no disclaimer on the namespace that says \u201cGIGO for non-maps\u201d.\nThere does not need to be.\nAnd that\u2019s the problem.\nMany people think there should be such a disclaimer\nMany people are wrong :slightly_smiling_face:\nI\u2019ve been working with Clojure personally and professional for nearly 6 years and I\u2019m one of those people.\nI\u2019ve seen people burned by that, by `merge`, and countless other so-call \u201cGIGO\u201d functions,\nit\u2019s punishment.\nThis is why I said we\u2019re just going to disagree.\nIf the docstring says \u201cGiven A, the function does B / produces C\u201d then you cannot expect any given behavior if you give it \u201cnon-A\u201d as input.\nWhat are you disagreeing with?\nNow, if you give it A and you don\u2019t get C, then that\u2019s a bug. But if you give it X and get C, that\u2019s should not be unexpected.\nIf you give it X and get Y, that should not be unexpected either.\nIt\u2019s still not clear to me why omitting the fact the functions _will_ accept non-set input and have undefined behavior.\nWe both agree that\u2019s useful language, no?\nIt\u2019s superfluous. If the behavior is (only) defined for set input _then it is implicitly not defined for non-set input_.\nGiven that Rich and several other Clojure/core folks seem to abide by that line of thinking \u2014 and it\u2019s common across many language definitions (both ANSI and otherwise) \u2014 I\u2019m not sure why folks think the docstring will (or indeed should) change\u2026?\nRich, in particular, is against over-specification \u2014 he\u2019s said as much many times in his talks.\nThis is fascinating. Is there a longer text anywhere on the design choice to have easily accessible undefined behaviors to such an extent in the language?\nWell you can\u2019t be Clojure/core if you disagree with Rich.\n(I\u2019m certainly not Clojure/core but given my background I tend to agree with him on a lot of stuff \u2014 not _everything_ but a lot :slightly_smiling_face: )\nAnd it\u2019s not \u201cover-specification\u201d it\u2019s just being clear about what you\u2019re leaving operations on unexpected inputs undefined.\nYou can still do the whole GIGO thing while sparing everyone that\u2019s ever used and will use Clojure the cost of having that WTF? conversation that inevitably crops up when \u201cweird stuff\u201d happens like `merge`ing two vectors.\nLike I say, we\u2019re just going to disagree on this. I think it\u2019s perfectly clear.\n<@Wai> I had hoped it might be referenced here <https://gist.github.com/reborg/dc8b0c96c397a56668905e2767fd697f> but it seems not (at least, not yet).\nPerhaps this should be added to <https://clojure.org/guides/faq> somewhere? But I bet people would still complain that the _docstrings_ didn\u2019t also include that same text\u2026 :neutral_face:\nIt\u2019s par for the course for folks like me who have a differing view than that of Clojure/core et all to be marginalized.\nWe\u2019re entitled!\nYou\u2019re not being marginalized. We\u2019re just disagreeing.\nI\u2019m fairly sure that if I submitted a patch to `clojure.set` which added to the docstring a disclaimer about undefined behavior for non-inputs it\u2019d be given a pass.\nCould be speculating though.\nCorrect. Because Rich has explained his stance on that several times.\nHe is under no obligation to accept every patch nor even explain why he won\u2019t.\nWell, yeah, it\u2019s his language.\nIn that particular case, he has explained _repeatedly_ why he won\u2019t.\nI\u2019ve asked for stuff in the past and he\u2019s shot me down too. I don\u2019t feel marginalized. I just accept he and I have different viewpoints on some things.\nIt doesn\u2019t seem like a reason though. Like, there\u2019s nothing, literally nothing wrong with explaining that `clojure.set` has undefined behavior in the docstring. Zero.\nI\u2019ve explained above why adding that sort of stuff is pointless (from the project\u2019s p.o.v.).\nYou just don\u2019t agree.\nAnd that\u2019s fine. We don\u2019t all have to agree. But sometimes we need to _accept_ that folks don\u2019t agree.\nI don\u2019t because I\u2019ve been a party to so much buggy Clojure code and long debugging sessions.\nIf it was a one of thing that happened once in a while, I\u2019d be more likely to agree with you.\nI\u2019ve had Clojure in production for almost eight years now. I\u2019ve hardly ever run across \u201cbuggy Clojure code\u201d in Clojure itself, nor much in most libraries to be honest. Bugs in _my_ code, sure. And very few _long_ debugging sessions. But, yeah, sometimes I chase my tail for longer than I\u2019d like \u2014 because I did something wrong.\nWe\u2019ve run prerelease builds of Clojure in production nearly all that time, from an alpha of 1.3 up to date.\nWell, Sean, that\u2019s a nice anecdote and I\u2019m happy for you but at virtually every company I\u2019ve worked at that\u2019s used Clojure I\u2019ve seen the issues that people bring up.\nThe stance to not put in a disclaimer because \u201cit\u2019s pointless\u201d is void of any kind of compassion. But, again, we\u2019re not entitled to compassion.\nI remember having similar discussions about the horrible error messages years ago and being effectively told that it was _my_ problem.\nWe\u2019re getting better error messages now so maybe, given a few more years, we might see some willingness to at least hear out these people (like me) who\u2019d like to see some more transparency in the docstrings.\nidk, it\u2019s pretty standard with \u2018undocumented\u2019 undefined behaviour. c++ comes to mind as notorious for this. you document your domains and co-domains, not everything that\u2019s unsupported. Adding a docstring just add noise. For examples and other info refer to some 3rd party resource. Like <http://clojuredocs.org|clojuredocs.org> for example\nSo this phrase \u201cit\u2019s standard\u201d seems like it\u2019s a synonym for \u201cthat\u2019s tradition\u201d.\nKinda like bad error messages. They\u2019ve always sucked and they\u2019re gonna stay that way.\nWell, in C++\u2019s case, it\u2019s literally \u201cStandard\u201d \u2014 as in ANSI/ISO :slightly_smiling_face:\nYeah, I\u2019m not saying there should be checks.\nI said the GIGO (garbage in garbage out) is fine.\nI\u2019m on board with domain/codomain as well.\nOK, here\u2019s a question then ```clojure.core/+\n([] [x] [x y] [x y &amp; more])\n  Returns the sum of nums. (+) returns 0. Does not auto-promote\n  longs, will throw on overflow. See also: +'\n``` The docstring does not define the behavior of `(+ 'a :b \"c\")` \u2014 do you think it should?\nThat thing throws if you give it anything other than numbers.\nSo, right there, you\u2019re analogy is missing the point.\nThe docstring does not say that.\nSet will take non-set inputs and _not_ throw.\nIt could do _anything_ if you give it non-numbers.\n:neutral_face:\nThat is _exactly_ my point.\nYou \u201cknow\u201d that giving `+` anything but numbers will throw an exception \u2014 but it doesn\u2019t say that.\nIt could quite happily give you any result \u2014 or spin off into infinity \u2014 and still satisfy its docstring.\nNo, no, no. That is *not* analogous.\nAgain then, we\u2019re going to disagree.\n`clojure.core/merge` and `clojure.set/union` would be good analogies.\nBoth will accept inputs that have undefined behavior for their outputs and not throw.\n`+` on the other can surely receive invalid inputs but will throw given them.\nBut their docstrings do not specify the behavior for non-maps / non-sets. That\u2019s exactly the same as `+` not specifying the behavior for non-nums.\nMy point is that because they do not throw, those functions _should_ explain they have undefined behavior for unexpected input types.\n`+` doesn\u2019t need to because it will throw.\nThe error will tell you that you did something wrong.\nwhy would you not assume everything has undefined behaviour for unexpected input?\nExactly.\n```(! 1374)-&gt; node\n&gt; 1 + \"s\"\n'1s'\n&gt; 1 + []\n'1'\n&gt; [] + {}\n'[object Object]'\n&gt; \n``` I don\u2019t even know where to begin to explain that\u2026\nWell, most people would assume the function would throw for bad input but that\u2019s not \u201cthe way\u201d for the reasons Sean mentioned above.\n\u201cmost people would assume the function would throw for bad input\u201d \u2014 disagree.\nAnecdotal at best.\n<@Celestine> now try `{} + []`\n<@Colette> Yeah, I know\u2026 JavaScript has a lot of weird behavior :slightly_smiling_face:\nyour examples make sense, that one does not\nIt also has a spec that tells you about it too.\n(for the curious `{} + []` produces `0`)\njsfuck ftw! :slightly_smiling_face:\n<https://www.ecma-international.org/ecma-262/9.0/index.html#sec-addition-operator-plus>\nYep. Tells you _exactly_ what it\u2019s gonna do.\nAnd you think that would be better than Clojure\u2019s docstring for `+`? :slightly_smiling_face:\nAh but, damn, if they had just decide not to do that they could have reserved the right to do whatever they wanted!\nTo be honest, reading that ECMA spec for `+`, I\u2019m not sure it says what should happen when either operand is neither a number or a string.\nIt\u2019s pretty clear about num + num and str + str tho\u2019\u2026\nwell `[]` is analogous to empty string\nso `1 + '' == '1'`\n(in particular, it doesn\u2019t give any indication that swapping the left and right args gives different behavior)\nand `{}` cant evaluate to a number, so it\u2019s cast to it\u2019s string representation which is \u2018[Object object]\u2019\nHmm. Undefined behavior is undefined by definition, ie the doc string definition. It is not immediately obvious why that information is kept as programmatically unactionable text. Had it been structured the reader/compiler/runtime could have used the same information (\u201c-flagtomakeundefinedcallsthrowexceptions\u201d). Is it a strength to keep the knowledge of what is undefined as docstrings (that are practically required reading).\n<@Colette> The spec says GetValue -&gt; ToPrimitive on both args and if either are strings at that point, then convert both to strings and concatenate them. Else if neither primitive type is string, convert them both to numbers and add them.\nReally fascinated by the topic, reading your discussion with interest. Thanks for the thoughtful (and patient) explanations :grinning:\n\u2026and ToNumber {} is well-defined (bizarrely) in 7.1.3\nyeah but that does not explain the difference between `{} + []` and `[] + {}`\nI\u2019ll rephrase my previous remark about \u201cmost people\u201d\u2019s expectation to throw as \u201cmany people\u201d. Editing that now would be\u2026 weird.\nit must mean that the left argument is evaluated first\nI\u2019d also accept a clojure spec for `clojure.set` functions and `clojure.core/merge`.\ngotta go to bed it\u2019s late here :disappointed: goodnight\n:wave:\nIt seems to be down to the difference between `ToNumber []` and `ToNumber {}` \u2014 but right now I am not convinced the spec actually defines the result and so we\u2019re back in unspecified behavior territory (which was my point).\nYeah, my partner\u2019s already gone to bed so I should probably join them\u2026\n(I\u2019m just about trying to get kids off to school :sweat_smile:)\nFun having this discussion with you <@Celestine>! :slightly_smiling_face:\nHeh, I\u2019m always up for discussions about language semantics and standards etc \u2014 it\u2019s what I\u2019ve been doing on and off since the early 80's :slightly_smiling_face:\nMaybe one day I\u2019ll be in your shoes saying what you\u2019re saying.\nHa!\nThen we\u2019d have nothing to \u201cargue\u201d about :slightly_smiling_face:\nI secretly hope not because that\u2019ll mean we\u2019re still telling computers what to do with text. :sob:\nmeh, rather have computers be told what to do with text than with speech\nCould be worse. Could be switches, setting 0's and 1's\u2026 I remember doing that in the early 80's! Argh!\nI am pretty sure I will never be comfortable talking to my computer and the thing actually talking back :\u2019)\nI\u2019m going to be sad when I teach my son about the terminal. \u201cSon, this thing\u2019s been around since before I was born.\u201d\n<@Tammera> I regifted an Echo Dot because it\u2019s just too creepy for me.\nYeah, yelling at my computer because my code is crap is one direction only\n<@Tammera> I must confess that I\u2019m only very slowly getting used to talking to my phone\u2026 I still resort to thumb typing, even when just telling it stuff would be faster/easier!\n:wave::skin-tone-2: :night_with_stars: :sleeping:\nGood night!\n:wave:\nwhile here in mainland Europe, its just starting to become light :\u2019)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "274",
    "text": "well there are plenty of good reasons why it\u2019s standard\nchecking inputs cost cycles for one\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "275",
    "text": "is there a way to permanently disable the namespace printing behavior? e.g. set `*print-namespace-maps*` to `false` for the whole process\nspecifically I'm trying to avoid this feature in kaocha test runs, and using `set!` just gives me `\"Can't set! *print-namespace-maps* from non-binding thread\"`\nto answer my own question, I ended up creating my own `testing` macro that generates a call to `clojure.test/testing` that wraps the body in a `binding`. `alter-var-root` didn't seem to work either\n<@Bree>  You could redefine `print-method` somewhere <https://stackoverflow.com/a/53714036/3680995>\n:+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "276",
    "text": "is anyone using cognitect\u2019s aws-api library?\nI\u2019m wondering how I\u2019m supposed to clean up / maintain my AWS client after I have created it\nex I found that just doing\n```\n(def s3 (aws/client {:api :s3}))\n```\napparently creates some sort of long-lived connection that dies after awhile. so my service was working just fine after a deploy, but would eventually stop working :confused:\nI could just create a new client every invocation, but I\u2019m now afraid of creating too many of these clients if they do in fact create a connection that hangs around\nthere doesn\u2019t seem to be any public way of stopping a client after use, either. There\u2019s a `stop` function in the `cognitect.aws.client` namespace, but that\u2019s documented as `\"Impl, don't call directly.\"`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "277",
    "text": "Some unofficial places where these things are expanded on a bit: <http://ClojureDocs.org|ClojureDocs.org> has examples of things that can go wrong if you give non-set args to clojure.set functions, warning about  them in English\nThis 3rd party library <https://github.com/jafingerhut/funjible> will throw exceptions if you pass non-set args to clojure.set functions, and has been designed as a fairly easy drop-in replacement for clojure.set functions.\n<@Clarine> is working on specs for many Clojure functions, including those in clojure.set, over which there are quite a few fine points on what types they should be spec'd to accept: <https://github.com/borkdude/speculative>  as for example on this issue: <https://github.com/borkdude/speculative/issues/161>\nI realize that these do not touch on your questions about official doc strings.  There are Clojure JIRA issues about clojure.set functions that are open, and some closed.\nThere\u2019s also an issue with a proposal to coerce to sets in set functions.\nThere are a few very vocal people working on things like this.  11 downloads over 7 years for funjible library, so how much do people really care?  On average, it seems not a lot.\nFor fun, here are some examples of 4clojure functions that rely on set functions doing the right thing with their input. I changed them to conform with the specs.\n<https://github.com/borkdude/coal-mine/commit/5c9a009dc326b0ab598a419777e71a04ab000ccd>\nThose were solutions written by people using 4clojure to solve its problems, or code that was used to implement the 4clojure site?  I am guessing the former.\nThe former, yes. And they work for their problem input and output\nBut we use this to verify the specs in speculative, so I\u2019m fixing it to not see the same errors every time\nThe small number of funjible downloads alone can\u2019t be used to infer how much people care. For example, I care about the issue yet this is the first time I\u2019ve heard about funjible.\n\nToday is also the first time I\u2019ve heard about speculative; I\u2019m interested. :slightly_smiling_face:\n\n<@Latonya> I noticed you\u2019ve submitted a patch to add some `fdef`s for `clojure.set`. It looks like there\u2019s some potential to get it merged. It would be great to see that happen.\nClojure set fdefs are already in speculative\n(Typing from mobile )\n<@Clarine> Yes, I noticed that. :slightly_smiling_face:\n(Not that you were typing from mobile.)\noh, you did not mean a patch for speculative but clojure.core?\n<@Clarine> Yeah. Rereading my reply I can see the ambiguity.\nI am sharing this info with you <@Diamond> since you seem to be one of the few who care :slightly_smiling_face:\nA cult within a cult\nIt\u2019s appreciated, for sure. :slightly_smiling_face:\nI could advertise the existence of funjible once per month, even if it doesn't change, but I think the Clojure Google group and/or announcements channel on Slack would quickly get tired of the repetition.\nThe existence of popular libraries with lots of common use cases are advertised by those other than their authors :slightly_smiling_face:\nit\u2019s surprising how infrequently I\u2019ve been bitten by the current behavior of clojure.set\ngiven the examples of what could go wrong\nOnce you\u2019re burned you don\u2019t forget.\nLike `merge`. A few weeks ago I helped debug a situation where `(merge-with merge ,,,)` caused a bug that took, let\u2019s just say, a non-zero amount of time to get to the bottom of.\nspeculative chooses to only allow maps as args of merge.\ndon\u2019t know if that issue had to do with that\nThat aligns with my intuitions and I think others\u2019 as well. I\u2019ve never heard anyone say they wanted to use `merge` as a substitute for `conj`.\nthat\u2019s what I see a lot in the 4clojure solutions I test speculative with. merge -&gt; conj\nit isn\u2019t based on intuition though. first we had associative? but if you look closely at the implementation, a `{}` is substituted for a non-truthy first argument\nI realize it\u2019s not based on intuition. What I meant was that people I\u2019ve worked with intuitively expect `merge` to work with maps alone and that, one way or another, for an exception to occur in other circumstances.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "278",
    "text": "<@Meagan> I couldn't reproduce that\nwhat do you mean by \"long-lived connection\"?\ndo you see an open socket?\nVectors are `associative?` :smile:\nI agree that many people would wish an exception to be thrown in situations where you call a function with arguments it is not designed to do something reasonable with, and I am sympathetic with such wishes.  That doesn't mean Clojure core implementation is going to change to align with those wishes.  The options we have, that I know about, anyway, are what I've mentioned above: alternate docs, spec, and things like funjible.  That and perhaps performance measurements of approaches like funjible takes, on serious code bases, that may (or may not) convince Clojure core folks that the costs of the extra checks are acceptable.\nI\u2019m honestly not sure. all I know is that my Datomic Ions can\u2019t connect to S3 after a few hours unless I redeploy\nit\u2019s hard for me to tell what is actually happening. I got some advice in <#C03RZMDSH|datomic>\nsounds like security credentials expiring\n:point_up: that makes more sense!\ndepending on how things are deployed and where you are getting credentials from aws, automatically rotates them after some time period (I think most libraries automatically roll over on to the new ones)\n<https://github.com/cognitect-labs/aws-api/blob/master/src/cognitect/aws/credentials.clj#L53> looks like aws-api has some kind of support for that too\nIs there a shorter/nicer way to check if a map has no non-nil keys than `(empty? (into {} (filter x)))`?\nE.g. <https://dev.clojure.org/jira/browse/CLJ-2433>\n`(every? (comp some? val) {:a :b :c nil})`\n`(empty? (filter some? (vals x))` for non-nil values\nty!\nhmm\n\u201chas no non-nil keys\u201d \u2014 so check that every value is nil? `(every? nil? (vals my-map))`\nif you want to check the keys, you need `keys` :wink:\nfor that you just need `(not= [nil] (keys m))`\nheh yeah\n<@Nadia> ah yes that\u2019s what I meant; `(every? nil? (vals my-map))` is neat !\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "279",
    "text": "added an integration to this channel: <https://clojurians.slack.com/services/BEUS0MAUS|outgoing-webhook>\ndisabled an integration in this channel: <https://clojurians.slack.com/services/BEUS0MAUS|outgoing-webhook>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "280",
    "text": "Anybody using the Cognitect AWS library with CloudSearch (the cloudsearchdomain service specifically)? You have to supply an endpoint somewhere, but I can\u2019t figure out how. In the JS library, it is part of the constructor - <https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/CloudSearchDomain.html#constructor-property>. So I would expect it to be sent in the `aws/client` call.\nWe have a plan for tackling custom endpoints <@Sharee> . I don't believe it's possible right now.\nThanks. I\u2019ll go back to the old way and keep my eye out for updates.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "281",
    "text": "There is no such thing as strengthening your  specs, right. Lets say that I have a map with `::some-ns/a` `::some-ns/b` and `::some-ns/c` keys that _all_ functions promise to be `int?`, but _some_ promise to be `pos-int?`\n(obvious simplified example)\nI basically want to say something like, this function adheres to the weak contract (`int?`), but as an added bonus, also to this stronger one (`pos-int?`) ^^\ndoesn't `int?` give you the added bonus of `pos-int?`?\nsorry? I don\u2019t quite understand, `-5` is `int?` but not `pos-int?`. So I would spec something like this right: `(s/def ::some-ns/a int?)` with `(s/def ::some-ns/my-map (s/keys [::some-ns/a]))`. Now I appear to have no way to write a spec for the stronger guarantee for the _same namespaced key_.\nyou shouldn't do that\nit sounds like you want to add context\nwhy tho, I am promising you strictly more, I am still adhering to the weaker contract\nsay \"oh, in this context this key is X, and this context the key is Y\"\nspec removes context, it is all global\nthe point of spec is to be able to say \"for all maps, with this key, the key means X\"\nso if you want it to mean Y, add a new key to your map and spec it to be Y\nif you want to say \"this key is X and Y\" s/and\nyeah, but Y implies X in this case. Every `pos-int?` is also an `int?`.\nthen just say \"this key is X\"\nsaid another way, you want to merge two specs and be allowed to choose the weaker or stronger one?\nthe issue isn't actually anything to do about \"stronger\" whatever\nthe issue is you are trying to define the same key to different meanings in different contexts\nyou can s/and in stronger criteria in some contexts\nin one context you want it to mean int? but in another context you want pos-int?\nbut it\u2019s admittedly pretty annoying to do so under s/keys\nits for function contracts\nI have some functions that have stronger guarantees than strictly required by the \u201cglobal\u201d map spec, so to say\nyou could make a loose contract and a strict contract and combine with s/merge (then it has to satisfy both)\nbut to some degree this is the kind of thing the select stuff will add in spec 2\nyou can't do that for the same key though\nthat Rich talked about in his keynote\nyeah I watched it, was a bit afraid of that\nor --- not :\u2019). Because you guys are obviously thinking about it ^^\nyou can always and on arbitrary predicates that are not s/keys based, that can do whatever\nthat's true\n(s/and (s/keys ...) #(pos-int? (get % :foo)))\nyeah, I ended up doing that, but I wondered whether there was a better way\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "282",
    "text": "Can you recommend articles to read about security in the context of integration to third party systems? The best related with Clojure solutions. I mean there is a SaaS, which needs to fetch data from many other systems (auth for this systems is mostly e-mail + password by API and there is no read only). The question is how to secure this things from hacking. I would like to read about good articles about solutions to secure third party systems authentication data.\n<https://github.com/funcool/buddy>   <https://www.owasp.org/index.php/Authentication_Cheat_Sheet>\nI think the main issue is about store this data in DB\nso database security best practices? and consider disk encryption (encrypted vols on aws, bare metal SED SSDs, ..)\nHmm is there any way to outsource this responsibility? Integration with google password storage or similar magic? :wink:\nauth0?\nonly if third party system has it, but we are talking about systems, which have e-mail + password to auth\nsounds kind of like <https://github.com/hashicorp/vault>\nhmm I was using vault for DevOps. Does it work without any issue for storing third party auth in Saas for users?\nno idea, I've never used it, it just sounds kind of like what you are describing, a store designed for storing secrets\nyes, it can be on of choice maybe\n<https://cloud.google.com/kms/> alternative from google\nthanks, Clojure community always make me more creative :slightly_smiling_face: People who think by `(` `)` :wink:\nis that their cloud HSM?\n<https://cloud.google.com/hsm/> I see google has something like that, but I am not familiar with that technology. It is also interesting.\nThanks. I am going to sleep. Good night :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "283",
    "text": "QUESTION: How do you compile only gen-classes ? Like I don't even want to compile the namespace which has the :gen-class in it, but I only want the Java .classes defined by gen-class to be compiled? Using pure Clojure, not with lein.\nyou can't\nI see, so gen-class are kinda infectious then\nYou quickly devolve into basically full AOT\nsince compile is transitive\nthere are things you can do\nhave your namespace with the gen-class require other code at runtime instead of when it is loaded\nHum\nLike by putting a call to `require` inside a function?\nyes\ninstead of using ns ?\nthen you will have to manually resolve any vars you want to use\nI mean, you still use ns, you just leave out calls to require\nRight\nYa, that's a bit annoying\nBut thanks for the answer\nexample of a java app that uses ~this~ a related approach (written so I could use the jsvc app launcher without using gen-class) <https://github.com/noisesmith/clj-jsvc-adapter/blob/master/src/java/org/noisesmith/Cljsvc.java>\nThat seems different, you're just avoiding gen-class altogether here, and creating your own Java wrapper no?\nright, but it's doing the same thing: require at runtime, then calling functions that should be made available by the required code\nyou can do the same thing from an ns that uses gen-class (I started out with that, but with that level of java interop writing a java file was cleaner)\nIt seems more complicated from Clojure, because then you need to have a flag which on compile does not cause things to be required, but does so otherwise\nWhere as in Java it is done from static initialization when the class is used\nThough I guess the gen-class init could do it\nAnd then it would be similar to what you're doing I guess\nthe thing is, clojure is live, so compiling the code has the same effects as loading it (because compiling subsequent code made depend on those effects)\nanother thing you can do is just generate the bytecode for the class you want without dealing with the clojure compiler at all\n<@Madeleine> the clojure version of that code looked like:\n```(ns foo.bar)\n\n(defn -main [&amp; args]\n (require 'baz.quux)\n ((resolve 'baz.quux/-main) args))```\nyou can add gen-class to that, and it won't load baz.quux while compiling, this is directly analogous to what the java code is doing (just much less idiomatic)\nStill could be problematic, if that namespace is also used from Clojure though\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "284",
    "text": "Which is why I was thinking something more like:\n\n```\n(ns foo.bar)\n\n(when-not *hypothetical-compiling-flag*\n  (require '[baz.quux]))\n```\nwow i've never seen `with-precision` before from core\nwhat\u2019s a good name or an option for a map transformation that\u2019s not recursive? `no-recurse?` We already had a version that did recursion by default.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "285",
    "text": "what about `linear`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "286",
    "text": "Hi guys, is there any way to format code in .clj files with pprint?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "287",
    "text": "i would stick with `recurse?` without the `no-` because it's not necessary\nother than that, it seems like an appropriate name\nwell, we have a convention that options should take nil or false as the default, so I have to invent a name for non-recursive. I\u2019ll probably go with that\nin that case, just stick with `no-recurse?`\nleaving out the option is the same as passing the option with false or nil\nyeah\n<@Raina> this seems to work:\n```\n(defn str-length [s] #?(:clj (.length ^String s) :cljs (.-length s)))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "288",
    "text": "Is there a string length function I can use both in clj and cljs? I can use count, but count is slow and generates ton of garbage\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "289",
    "text": "well obviously I can write my own :smile:\nI was hoping for an official solution and I'm shocked that clojure.string namespace doesn't have one\nhell even substring exists in clojure.core\n`count` works for both <@Raina>\n<@Otelia> As explained, count isn't appropriate because it's slow and generates garbage\n<@Raina>, you may be thinking of the implementation of count for sequences.\nWhat would be useful to me is an option to only warn about shadowing clojure.core symbols, as in the example.\nI've improved performance a lot in some of my libraries by replacing count with explicit .length calls\nLooking at the newest 1.10 code of count, directly invoking .length saves about 4 if sentences\nI\u2019d say that this only makes sense when you have a real bottle neck.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "290",
    "text": "Why do you think that `count` is slow? And what garbage?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "291",
    "text": "Hi everyone, I'd like to get compiler warnings when a variable masks another one\n\nSo, for example in this case:\n```\n(let [[name] [\"yay\"]]\n  name)\n```\n=&gt; warning: name already refers to clojure.core/name\n\nanyone know if there is a way to turn that on, or if there is an open issue for this? If there is I haven't found via googling. thanks\nnot that I know. joker (a linter) also doesn\u2019t warn about this, but I think it could be a useful feature for it\n<@Clarine> thanks, linters are probably the place to start investigating if it's not in the compiler\nthat\u2019s why linters have config :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "292",
    "text": "I actually quite like being able to shadow \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "293",
    "text": "This linter warns about (some cases of) shadowing: <https://github.com/jonase/eastwood>\nYou should check the full stack trace using `(clojure.repl/pst)`, but I can see a couple things wrong with that code. When you're using blocking `&lt;!!` you shouldn't wrap those in go blocks. Also by putting the \"store\" in a global def you're defeating the purpose of mount/defstate.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "294",
    "text": "Hi. I have an error with my simple module: <https://pastebin.com/bBy8htnT>  error: Exception in thread \"async-dispatch-88\" java.lang.NullPointerException  can anyone tell me why? I've spend on this some time and I really don't know why.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "295",
    "text": "Am I right in thinking libraries shouldn't include `org.clojure/clojure` as a dependency? Since it's just going to be provided by the application anyway?\na lot of libraries do it, it can be overriden by the consuming project\nunless you\u2019re making a cljs only lib or a Java-facing AOT-compiled lib, it doesn\u2019t matter I guess\nor maybe it does when your lib forces a newer version of clojure than the lib consumer wants to user? hmm. not sure how that is resolved\nThanks <@Clarine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "296",
    "text": "I've also wondered how this works when multiple dependencies declare dependencies on diff versions of Clojure\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "297",
    "text": "In the past, I've usually set the default uncaught exception handler at the top of a -main entrypoint for an application. I am ring uberjar'ing. Will setting the default uncaught exception handler at the top of, say, `server.clj` (the location of the ring handler) accomplish same?\n```\n(ns server)\n(Thread/setDefaultUncaughtExceptionHandler\n (reify Thread$UncaughtExceptionHandler\n   (uncaughtException [_ thread e]\n     (log/error e \"Uncaught exception on\" (.getName thread)))))\n(def handler ...)\n```\nit's a mutable slot on an object, you can set it in any place at any time\ntop level side effects are run when the ns is loaded (even when using aot)\nCan I define a mutation over an ident, instead of declaring all the way walking through the tree?\nby ident do you mean symbol or keyword? that's what `clojure.core/ident?` checks for, but if that's what you mean your question confuses me\ndo you mean a nested update as in `update-in` or `assoc-in` as opposed to a programmatic operation like `clojure.walk/post-walk` ?\nI mean, if I have a normalized table :people/people-list   and inside it    :person/by-id\nCan I use a mutation directly for [:person/by-id 1] or do I have to go into [:people/people-list :my-list :person/by-id 1]\n<@Melissia> your use of the word \u201cmutation\u201d is confusing. If you are asking how to use `update-in` / `assoc-in` with a map, then yes you\u2019ll have to put the full path\nyou could come up with your own function that uses clojure.walk to do what you mean, though. Again, assuming you\u2019re using a map\nOh, I messed up, I thought I was in the fulcro's slack. I'm sorry\nThanks <@Dann> and <@Meagan> anyway\nIn 1.10, is there a way to extend a map to be `Closeable` via metadata?\nYes. And I suppose a better question would've been: can you extend via metadata with an interface.\nmetadata is a clojure thing - you can check metadata via java by using the clojure IMeta api (or using the Clojure api to call clojure.core/meta) but this isn't something you should expect normal java code to be doing, ever\nand it's definitely not something that exists on the level of the Closable interface\nyou can use `defrecord` to make a hash-map that is also Closable\nI ended up doing that.\nI think there was a proposal to implement Closeable as a protocol\nThat would be convenient. It's nice to be able to `with-open` things.\n<https://dev.clojure.org/jira/browse/CLJ-308>\nthat's a change to with-open so it can use things that aren't directly java.io.Closable, it doesn't change or extend Closable itself\nwhat's the motivation for not using java.io.Closable - wanting to extend some class from outside the implementation?\nI have an API that returns a map and I wanted to use `with-open` in my tests to ensure that parts in that map are closed when the test finishes.\nbut then you'd be extending closable to map?\nI think that\u2019s why he wanted to do it via metadata\nyou can implement protocols just via metadata?\nRight. Wrapping in a record is fine. Just seemed cleaner if it was possible to do it via metadata.\nahh, a new 1.10 feature\nyep! it\u2019s super cool\nWhy we can't vote closed issues?\n<https://dev.clojure.org/jira/browse/CLJ-1623>\nso you could make a new IClosable and a new with-open\nor you could pass the relevant vals to the current with-open (it allows N closables)\nI suppose. This works for now - not critical. Was just trying to use a new 1.10 feature really :slightly_smiling_face:\nyeah, extending via metadata is opt-in on a per-protocol basis, interesting\nI think that was for performance reasons\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "298",
    "text": ":smile:\nis that `java.io.Closeable`? I think that\u2019s an interface, not a protocol\nSounds like no :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "299",
    "text": "Probably part of the way JIRA works, either by default, or perhaps by custom configuration of this instance, but I don't know which.\nGiven the conversation on that issue, I would not hold high hopes that it would be implemented in core even if it got a thousand votes.\nVotes get attention to an issue sooner, they don't necessarily change the decision made once it has been considered.\nMy suggestion would be making your own variant of the function that works as you wish, and use that.  Given the interest in it by some others, I wouldn't be surprised if Specter can do it, or medley, or one of handful of other utility libraries.\nAnyone can patch their own copies of Clojure all they wish, of course.  Not nearly as convenient as having it in a place where it can be used without a patch.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "300",
    "text": "I published a patch on Twitter then everyone can fix your codebase. :sweat_smile: \n<@Elaine> Just refer your update-in and exclude clojure's version. The current behaviour has been useful to me tracking down bugs that would otherwise subtlely succeed but mysteriously trash everything :) (consider, returning a dynamically generated path vs or nil for the second argument)\nYour semantics are equally valid of course, but clojure is extremely amenable to hacking, and guardrails are nice in general imo. Particularly in a dynamic language like a lisp.\n'Fixing' that asymmetry might break a lot of existing code. :grinning:\nThat's not to say clojure 2 might not fix this sort of thing, but pretty much everything in 1.x is backwards compatible for practical reasons.\nThe docstring change would be really helpful though. \n<https://www.conj.io/store/v1/org.clojure/clojure/1.9.0/clj/clojure.core/update-in> grimoire reports the correct signature though. Not a computer atm, but wonder if that is how it is defn'd\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "301",
    "text": "I think you can still comment though?\nThis is perhaps a different issue, but `get-in` does seem inconsistent and I wonder if the fact that it returns the entire map when [] is passed is intentional or it just happens to do that. There is no way to tell from the doc, since it just says \"ks is a sequence of keys\" and doesn't say whether it can be an empty sequence.\nOops, I meant `get-in` not `get`, fixed.\nMy guess is that the behavior with an empty sequence is accidental and the doc should probably say \"ks is a non-empty sequence of keys\".\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "302",
    "text": "<@Dann> thanks for your answer earlier.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "303",
    "text": "I'm building a Clojure wrapper for a Java library and I'm wondering how I should add a dependency on that library from my wrapper. The thing is the Java library depends on a Java Agent JAR of the same version to provide the implementation through instrumentation. The library's public api is likely to stay the same, so my wrapper should work with any version of the library, but a specific library version can work with only specific version of the java agent.\n\nWhat are the possible approaches here? Adding direct dependency to the Java library from my wrapper would work as long as the user goes with the same Java Agent version, but would likely break in the future when new agent versions are released. Of course, then users could exclude the library dependency and provide their own. Or I could release a new version of the wrapper for every library/agent version, but this might prove to be too much maintenance work.\n\nCurrently I'm thinking of going with adding the library dependency as 'provided', i.e. when including a dependency to my wrapper, users would also need to download the Java Agent (anyway required) and then add another dependency to the library. Any other ideas - preferably ones that don't require a ton of maintenance?\n<@Bridget> Sounds like New Relic?\nWe have a wrapper for that internally, and we assume the caller provides both the library and the agent and keeps them in sync. I think that's really the only sane approach here.\nIt's actually Elastic APM. Yeah, I guess it's the sanest approach to have the user provide both.\nBtw,  have you noticed this New Relic Clojure wrapper: <https://github.com/Yleisradio/new-reliquary>\nAfaik you can supply your own comparator. See <https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/sorted-map> and <https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/sorted-map-by>\n<https://clojuredocs.org/clojure.core/sorted-map-by>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "304",
    "text": "Can someone help me find the docs for sorted maps please?\n\nThe docs at <https://clojure.org/reference/data_structures> mention them, and say that they \u201care, well, sorted\u201d. \n\nI want to know how they are sorted - by key, value, insertion order, etc. \n\n\nI think the flatland ordered meal does what I need (I want to maintain insertion order). But my question is about the docs - I don\u2019t see any mention of how a map is sorted if no comparator is supplied. \nNor mention of what the comparator should return. Or what args are passed to the comparator. \nI think it's ascending order by key by default. The args are `a` and `b` - i.e. the objects to compare.\n<@Luci> comparator is a java concept. It returns -1, 0 or 1.\nTo keep insertion order, you should use a specific lib called \"orders\"\n<https://github.com/clj-commons/ordered>\nThanks for the help. To be clear though, I\u2019m wondering if there are docs on this.\nI can't find anything comprehensive. :disappointed: There's this: <https://clojure.org/guides/learn/hashed_colls#_sorted_maps> which gives tiny bit insight on the default comparator at least.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "305",
    "text": "Anyone have any examples of idiomatic Clojure libraries that wrap external APIs?\nCan anyone suggest a way to take screenshots of a webpage in clojure/java? I'm looking for the simplest solution possible, preferably with no extra dependencies.\n<@Xiao> I think the JavaFX WebView has a `takeSnapshot` or `snapshot` function you can use\nnot exactly what you're asking for, but is clojurescript a possibility? <https://github.com/niklasvh/html2canvas>\nI've tried that with poor results (compared to how things actually look in a real browser).\nThanks, I'll take a look at that :+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "306",
    "text": "The new cognitect AWS wrapper?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "307",
    "text": "Clojure's default comparator, if you do not supply one explicitly, is `clojure.core/compare`\nThere is the output of `(doc compare)` that describes it briefly.\nI haven't yet found any explicit lines in doc strings saying that, but in brief checking of source code it appears to be true.\nI have written something a few years back, but not published in a well-known place, necessarily: <https://github.com/jafingerhut/thalia/blob/master/doc/project-docs/en_US/clojure.core/1.6.0/clojure.core/compare.md>\nI am considering copying that to <http://ClojureDocs.org|ClojureDocs.org> page on the behavior of clojure.core/compare\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "308",
    "text": "<@Xiao> If you're open to using external paid service, I would recommend url2png. It works pretty well and has some nice features, such as it allowing you to include custom css file just for screenshotting purposes. For a DIY solution, I'd probably go with something like headless chrome to get as close to desktop/mobile rendering as possible.\nIf you're open to using an external service <http://urlbox.io|urlbox.io> is quite good. We've snapshoted pages with some crazy js/svg and all sorts of constraints (timers etc) with it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "309",
    "text": "I had not. Thank you. It doesn't look as sophisticated as to what we're already doing (we have tracing via annotations, a bunch of metrics stuff, support for the New Relic Agent and periodic probe/reporting, middleware, and transactions).\nMaybe at some point I'll extract ours as an open source project...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "310",
    "text": "is it possible to tell clojure.walk/postwalk not to descend into maps, only vectors?\nNot that I can think of.  You can copy and modify the source of clojure.walk/walk pretty easily, if you want.\nOr use `tree-seq`, that one gives more flexibility <https://clojuredocs.org/clojure.core/tree-seq>\nI think I\u2019ll just call my function recursively and hope that no one passes me a huge vector \u00af\\_(\u30c4)_/\u00af\noh, that\u2019s pretty much what clojure.walk does anyway\nI thought it had something fancy that was preventing the stack from growing\ni\u2019m walking a hiccup-like structure, e.g.:\n```\n[:server/http {:port 8000 :join? false}\n           [:router\n            [:db/conn [:config]]]\n           [:foo\n            [:db/conn [:config]]]]\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "311",
    "text": "clojure.walk/walk should work for arbitrarily large collections without blowing the stack.  It should only grow the stack when there is more nesting in the collection given.\nMaybe not all, but most code that deals with nested structures - reading, printing, processing - will typically cause a number of levels of function calls that is proportional to the level of nesting of the data.  20 levels deep of nesting isn't going to blow the Java call stack.  1000 probably won't either.  If you've got 20,000 levels of nesting in your data, you will probably start blowing at least the default Java stack depth limits.\nI am not aware of any reasons to have such deep nesting of data, except for artificially generated test cases that attempt to determine where the call stack depth limit is.\nI should have pointed you here first -- it does explicitly document that `compare` is the default comparator, and has some notes on its behavior: <https://clojure.org/guides/comparators>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "312",
    "text": "That'd be cool :slightly_smiling_face: Yeah, it's not very sophisticated, but works for basic needs.\n(System/exit 127)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "313",
    "text": "How do I return an error code from my `foo.bar/-main` function, when starting it using `clojure -m foo.bar`? Just returning the error code does not work. Program always terminates with error code `0`.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "314",
    "text": "I have a devtool that I want to allow people to easily install into their Clojure projects\natm, it relies on websockets to communicate with a web UI\nI\u2019m worried that installing the dependencies for and starting a webserver on behalf of a user is really invasive\n<@Meagan> no other way around it, I guess. Unless you expose the WebSocket API as a core.async channel and allow people to override the WebSocket implementation with their own server.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "315",
    "text": "Continuing with my hopefully brief obsession, I have just updated the sorted-map entry on <http://ClojureDocs.org|ClojureDocs.org> to make the answers to some of your questions hopefully quick to answer: <http://clojuredocs.org/clojure.core/sorted-map>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "316",
    "text": "I mean, surely it is isn't a huge stretch to go from websockets to just sockets?\nand that is just part of the jre\nFigwheel does it :) \nhmm, well a browser page can\u2019t talk _just sockets_\nmost people don\u2019t run figwheel in the same process as their server-side app\nI've always seen it done that way fwiw, at least in dev. \nreally? that seems strange. I guess I haven\u2019t used figwheel in awhile, so maybe I\u2019m missing some context\nHowever, I have wished that figwheel could be used without its server, so a _callback_ based API would be wonderful.\nAll our projects at work, and also Edge work that way. \nMost people won't mind you starting a Web server, and you can separate the API so it is easy to upgrade. \nwhat do you mean by callback-based?\nI think it would be nice, if the user already has a webserver running, to provide a way to serve the devtool through that instead of starting it\u2019s own server\nbut i\u2019m not sure how to do that generally\nhow would it know that that is the case?\nI like to run a web app with its own, you know, lein repl thing, and start lein figwheel in another terminal; so the l.f. terminal listens to port 3349 and the l.r. terminal listens to port 8088 or whatever the website is.  Amazingly it hangs together.  The js made by figwheel apparently has the 3349 baked in, and learns dynamically the origin of the page that embedded it (ie 8088)\nI guess you would want to mount your dev tool into the running webserver.  That would mean having a companion lib per \u201cpossible webserver\u201d plus one for apps that don\u2019t have any\nLike, `my-dev-tool-pedestal`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "317",
    "text": "Is this the appropriate forum to ask about VS Code?  Or maybe Calva, I don't know whose fault it is.  When the point is adjacent to a paren or bracket or brace, the point is invisible. The two brackets are *outlined* and the point is apparently blended in with one edge of one bracket.  Hard to guess which.\nIs cursor obviousness configurable?\n<@Samual> try <#CBE668G4R|calva-dev>\nYour java thread will run a callback which will  write to whatever transport I use (websocket, sse, core.async, long polling, whatever). Same  thing on the frontend for responding to messages  that come in \nAha, editor.cursorWidth. Changing it from 0 to 4 makes it easy enough to see.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "318",
    "text": "anyone know why\n```\n(binding [*provided* (merge provided args)]\n          (map (bound-fn [x] (walk! x)) children))\n```\nworks, but\n```\n(binding [*provided* (merge provided args)]\n          (map walk! x children))\n```\nloses the `*provided*` binding?\nHuh, don\u2019t you mean `(map #(walk! %) children)` in the second case?\noops, had a typo. I meant `(map walk! children)`\nRight, I had a case of \u2018early morning\u2019 and forgot about passing unary fns directly\nWith the chance of sounding stupid: could it be because your map returns a lazy sequence and therefore the binding is lost when it is realized \n:thinking_face: I wouldn\u2019t expect it to, but maybe\n`clojure.lang.PersistentVector$ChunkedSeq`\nhrmph. I changed it back to `(map walk! children)` and it works\nhaha, sometimes you have those problems\nI'm trying to use the `clj-ipfs-api` (<https://github.com/keorn/clj-ipfs-api>) but I cannot load any NS that refers to its functions without having an IPFS daemon running. Ideally, those functions would just fail if I tried to call them without the daemon running, but I get exceptions because the vars haven't even been defined.\n\nMy workaround is to check if the functions have been defined (using `resolve`) and replace them with a dummy function (that throws if called) if they're missing.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "319",
    "text": "Is there a way to define a function or variable that belongs to another NS?\n\n```\n(defn another-ns/foo [x] 3)\n(defn another-ns/bar 5)\n```\n\n```\n2. Unhandled clojure.lang.Compiler$CompilerException\n   Error compiling src/---.clj at (14:1)\n   #:clojure.error{:phase :macro-syntax-check,\n                   :line 14,\n                   :column 1,\n                   :source ---\n                   :symbol clojure.core/defn}\n\n1. Caused by clojure.lang.ExceptionInfo\n   Call to clojure.core/defn did not conform to spec.\n   #:clojure.spec.alpha{:problems\n                        [{:path [:fn-name],\n                          :pred clojure.core/simple-symbol?,\n                          :val another-ns/foo,\n                          :via\n                          [:clojure.core.specs.alpha/defn-args\n                           :clojure.core.specs.alpha/defn-args],\n                          :in [0]}],\n                        :spec\n                        #object[clojure.spec.alpha$regex_spec_impl$reify__2509 0x32a67584 \"clojure.spec.alpha$regex_spec_impl$reify__2509@32a67584\"],\n                        :value (another-ns/foo [x] 3),\n                        :args (another-ns/foo [x] 3)}\n```\nyou can ask in <#C0744GXCJ|cursive> or <#C1Q164V29|sql> channel.\nbut beware that if the proper file for the ns is eventually loaded, the ns won't be strictly new so iirc it won't implicitly refer-clojure.\nanybody got a quick and easy way of writing a file sent through a http/POST to file?\ni'm not quite sure what to use, if there's a convenient clojure library for it, or if I should just go straight to `FileOutputStream`\nRing seems to not be happy about that approach though; `java.lang.IllegalArgumentException: No implementation of method: :write-body-to-stream of protocol: #&amp;apos;ring.core.protocols/StreamableResponseBody found for class: java.io.FileOutputStream`\nthis *is* something that happens. Lazy sequences might be realized outside of the scope of the binding. <https://cemerick.com/2009/11/03/be-mindful-of-clojures-binding/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "320",
    "text": "Hi, IntellijIdea and Cursive users, how do you make Idea to recognise HugSQL functions?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "321",
    "text": "in-ns before the def ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "322",
    "text": "Hi, I have a hex string that looks like `01031000BB014727DB00000064009600C823C5` that I need to decode in to something human readable. Whats the best way of going about this? The first three bytes are meaningless but after that I need to read 2 bytes at a time?\nI thought Buffy may have helped out but can't work out how to pass the whole string in.\nto disk, rather\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "323",
    "text": "```\n(-&gt;&gt; (.getBytes \"01031000BB014727DB00000064009600C823C5\")\n     (drop 3) ;; The first three bytes are meaningless\n     (partition 2) ;; I need to read 2 bytes at a time\n     (map (partial byte-array 2)) ;; Turn (1 2) back to byte[]\n     (map slurp)) ;; turn byte pair into string again \n```\nUsing transducers (performatic)\n```\n(into []\n      (comp (drop 3)                                        ;; The first three bytes are meaningless\n            (partition-all 2)                               ;; I need to read 2 bytes at a time\n            (map (partial byte-array 2))                    ;; Turn (1 2) back to byte[]\n            (map slurp))                                    ;; turn byte pair into string again\n      (.getBytes \"01031000BB014727DB00000064009600C823C5\"))\n```\nshare the final form :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "324",
    "text": "Nice one! thank you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "325",
    "text": "Is there an abstraction where something like `take` &amp; `drop` would avoid computation? I'm guessing it would utilize custom versions of `take`/`drop`, although maybe txors can do this? I'm thinking about computationally heavy pagination.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "326",
    "text": "Hi, can someone confirm or deny, that gen-class generated code can't put java annotations on generated class methods?\nI am utterly unable to find exampl exactly for gen-class... and not the methods which are new, but just well... extending abstract class, and dropping annotation on the abstract method implemetnation... I know it's possible for deftype (I think)\nWould this help? <https://stackoverflow.com/a/16114606/7182237>\nNo this is how to attach to the methods you are bringing as new, but if you have methods which are, for example, alerady in super class (like abstract method) and then you try to write the function and attach the annotation, it does not work...\nOr should I also declare methods in the gen-class itself... I think you only do when you define new onews\nI have java abstract class, which I try to extend, and there is abstract method \"call\" in that class, which I try to implement and add the annotation, in bytecode I see the method, but not the annotation\nyea according to doc, the clojure will override all the public methods of super class, when extending, but it somehow clears and ignores all the annotations I put on the extendable abstract method\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "327",
    "text": "hey people, anyone know where I can find more details about the mechanics behind the error handler function optionally attached to agents? Specifically, is it dispatched in the same thread as the `send` which was responsible for the failing call, so that IO should be avoided in that case (or `send-off` used in cases where the error handler has to do IO)? And is the return value from the error used at all?\nHmm, Clojure Programming suggests it's not handled in the dispatch thread, so IO should be fine :slightly_smiling_face:\nIt\u2019s handled in the agent execution thread, not in the thread calling `send` / `send-off`. If doing I/O, I would use `send-off`. The return value is not used.\nthanks <@Jasmine>!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "328",
    "text": "hey, don't know whether I'm in the right place for this:\ni want to make some improvements to <http://4clojure.com|4clojure.com> but i think it lacks an active maintainer.\nimprovements i think of atm would be\n\u2022 clean up issues/PRs on github\n\u2022 oauth-login (afaik there would already be a PR that needs some love or rewrite, dunno yet)\n\u2022 maybe a small face lift using cljs/reframe? i mainly think of this as an exercise for myself xD but i'd like to accomplish some goals like improvements on \"top users\"/\"follow\" page/features (performance-wise)\n\u2022 mabye some browser-editor improvements\nto name some of the starters\nso my question is, who i need to contact to become maintainer and how i qualify to become the next warden of <http://4clojure.com|4clojure.com> :slightly_smiling_face:\n<@Andrew> I don\u2019t know the current maintainer, but I would also be interested in these improvments. I would also like to add better error messages through the use of speculative instrumentation (can be turned on and off). For browser editor improvements CodeMirror + parinfer could be used.\nif @danielwithmusic is right amalloy still has ownership. will look into possibilites to reach him and/or any1 on the contributors list tonight.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "329",
    "text": "isn't there a typo?\n```\n(doc clojure.set/rename-keys)\n-------------------------\nclojure.set/rename-keys\n([map kmap])\n  Returns the map with the keys in kmap renamed to the vals in kmap\n```\nif kmap is `{:a :b}` it renames keys of kmap (:a) to vals of kmap (:b)\nit's awkward, but correct\n\"if a key in m is also a key in kmap, it is replaced by the corresponding val in kmap\" is a potentially clearer way to say that(?)\nI would expect \"Returns the map with the keys in `map` renamed to the vals in `kmap`\"\nno, because keys that aren't in kmap are not touched\nI think the tricky issue is tying the keys from `map` and the keys from `kmap` together, and what happens when they match.\nI like your definition above <@Dann> more than the docstring, which tripped me up when I was first figuring out how to use it.\nexamples from <https://clojuredocs.org/clojure.set/rename-keys> prove that my understanding is correct, but I'm confused by description\n<@Adela> You\u2019re correct, that appears to be a typo\nOh shoot, no sorry\nThat\u2019s not a typo\nhaha, it took me a couple of reads to understand the docstring\nRunning that top example in a `clj` repl doesn't replicate that behavior.\n```\nuser=&gt; (set/rename-keys {:a 1} {:a :new-a :b :new-b})\n{:new-a 1}\n```\nbtw, where's `clojure.data/diff`?\nit comes with clojure\nyou are missing the :b key in the input map\n`(require '[clojure.data :as diff])`\n`doc` returns `nil` to me\ndid you require its namespace?\nSorry, the behavior I was pointing out was that keys in `kmap` that aren't in `map` result in no behavior; there was an example on clojuredocs that showed an old behavior where the returned map would contain `:new-b nil` as a k/v pair.\nThat being said, upon rereading this thread I'm not sure if anyone was confused about that.\nalso in the examples that was a bug in clojure 1.1 and fixed in 1.2.1 ti thought i read\n```\nExecution error (FileNotFoundException) at user/eval1484 (form-init8507139964286056300.clj:1).\nCould not locate diff__init.class, diff.clj or diff.cljc on classpath.\n```\nsorry, I'm noob\nthx Dan, it worked\nYep! I just like to verify those statements myself...\n(too much time working front-line support, perhaps...)\noh, just noticed I'm in the wrong channel\nsorry\nthat's a pretty serious exploit\nYes, yes it is. They disclosed the issue but apparently refuse to fix it.\n`/collapse`\nthat's cute\nslack is very aware of it, and has not fixed it\nThis is the same exploit described previously?\nprobably\nI wonder what the rationale is for not fixing it.\n:man-shrugging:\nStop discussing this here. Go to <#C0CB40N8K|community-development> for that discussion please.\nsorry\nDo not engage the trolls. Do not discuss it in regular channels. It just makes the noise worse.\n<#C03S1L9DN|clojurescript> has also been hit\nThanks. I'll join there and clean up.\nOops sorry :sweat:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "330",
    "text": "in postgres, column names can't have hyphens (unless you escape them). I'm using hugsql and I'd like to create some middleware to convert snake_case keys to kebab-case for every query, has anybody done this already?\nThere\u2019s an exploit in Slack that allows you to change permissions and post as random user ids from the client side. Occasionally a troll comes in and uses it to post as random people and start something.\n<@Diamond> the admins have disabled that, the troll was using a well known exploit in slack\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "331",
    "text": "does anyone have an example of a system (a la component/integrant/mount) whose resources _have_ to be stopped in order?\neven just some hypothetical cases would help\n<@Meagan> hypothetical: using zookeeper for service discovery / leader election, you need to withdraw from any roles your instance took on, and do any zk bookkeeping, before shutting down your zookeeper component that manages your connection to the service\n(of course if it's properly designed the failure case should handle that already, but you might be able to do something simpler if a node explicitly and gracefully leaves)\nnice! does that match what I\u2019m talking about though? I mean that if component `A` depends on `B`:\n```\nstart:\nA -&gt; B\n```\n`B` must be started before `A`. I\u2019m wondering how often it\u2019s important that `B` also be _stopped_ before `A`\nin this case, are you saying that you have two components (e.g. one for service discovery, one for the component itself)?\noh! - I thought you meant \"in order\" as in \"opposite from starting order\" which is how it's done...\nI guess? I actually haven\u2019t used component in a while and it never mattered in my cases.\nif I just stop things in random order, what goes wrong? :stuck_out_tongue:\n<@Meagan> in my example the hypothetical service isn't the only usage of zookeeper, so the zk component is shared by 2 or more components\nsometimes shutdown of B requires usage of A\nOK, so you\u2019d probably want to withdraw before you shut down the rest of your system so you don\u2019t get incoming requests during your shutdown\nah good point\nif there's any tidying up needed - of course we usually try to build things so worst case we don't leave state dangling\nanother hypothetical: there's a lock file on a filesystem where two programs run (eg. an editor), you'd want to shut down the part of your app that wants to write the file before shutting down the part that does file locking and directory watching\nand on startup you want to open the part that watches and locks files before the part that wants to write them\nthis is great!\noften we avoid this by not splitting concerns, but in a focused enough file management oriented app, I can imagine separate components\nclean stopping is often more important during development then in production\nso you can stop the app, and leave things in a good state were you can start it again without restarting the jvm\noh, and a much more common / obvious example than the others: imagine if your http server was still running and handling requests, but your db access handler was shutting down\nI think that\u2019s the example I\u2019ve been running with so far, and I don\u2019t really care that much\nI guess a spurious 500 error isn't hard to handle\nI am thinking about this mainly for a dev POV like <@Rosaline> said though\nso e.g. the file locking example was great, I hadn\u2019t thought about things like that\nnot everything is a web app :stuck_out_tongue:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "332",
    "text": "Hi everyone, I'm new to clojure and clojure.test so can anyone tell me how to write test cases for any project.\n<@Chiquita> you can start here <https://clojure.github.io/clojure/clojure.test-api.html>\nHey <@Patty>, Its like I have read that link and I've created a project in which I wrote a simple test and after running cider and using C-c C-t p, it is saying that \"Running test in all namespaces\" in minibuffer but it is not showing the output.\n(ns testcase.core\n  (:require [clojure.test            :refer :all]\n            [ring.adapter.jetty      :as jetty]\n            [ring.middleware.reload  :refer [wrap-reload]]\n            [compojure.core          :refer [defroutes GET]]\n            [compojure.route         :refer [not-found resources]]\n   ))\n\n(deftest addition\n  (is (= 3 (+ 1 1)))\n  (is (= 4 (+ 2 2))))\n(defn -main\n  \"A simple project to runtest case\"\n  [port-number]\n  (jetty/run-jetty (wrap-reload #'addition)\n        {:port (Integer. port-number)})\n<@Chiquita> that is happening because you have this in src namespace and not test namespace from the looks of things.\nOkay thanks.\nYou'll find the <#C053AK3F9|beginners> channel very helpful -- people there have opted in to helping folks who are new to Clojure <@Chiquita>\nThanks <@Celestine> for the suggestion.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "333",
    "text": "Shouldn't <https://github.com/edn-format/edn/wiki/Implementations> also mention Clojure's built-in <https://clojure.github.io/clojure/clojure.edn-api.html>? For anyone trying to use EDN format from Clojure, it'd be really nice to get a pointer which one should use. According to <https://groups.google.com/forum/#!topic/clojure/d61ImK2VCag> the built-in is just fine.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "334",
    "text": "Feel free to add it \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "335",
    "text": "I have a repl with refs to datomic entities defined.\nPeriodically I wish to refresh these to include recent novelty.\nA macro approach could look like\n``` (defmacro refresh-datomic-entity-as-macro\n  \"redefine ent-sym to latest version of entity\"\n  [ent-sym datomic-conn]\n  `(def ~ent-sym\n     (d/entity (d/db ~datomic-conn) ~(:db/id (deref (resolve ent-sym))))))\n```\nbut  realised that I could alternatively write the function\n```\n(defn refresh-datomic-entity-as-fn\n  [ent-var datomic-conn]\n  (.alterRoot ent-var (fn [e] (d/entity (d/db datomic-conn) (:db/id e))) '()))\n```\n\nnormally I would _always_ choose a function over a macro\nbut perhaps not if that required the interop call to `clojure.lang.Var/alterRoot`\n\nHow would you choose between them??\nare they equivalently awful?\nAs opposed to `alter-var-root`? <@Danna> \n:ahem: hadn't spotted that function\nthankyou\nhaha\nI've never written a macro that I've ended up keeping\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "336",
    "text": "I just want to profess the ridiculous feeling of joy and power I have when using Clojure. 200 lines to achieve what in my other proficient languages would be 2,000. I know it\u2019s not a real measuring stick, but every once and awhile I come up for fresh air and look at some of the stuff people are doing, and realize how much more approachable Clojure code bases are. Thank you Rich/Stu/Alex/et. al.!\nWhat are your other proficient languages?\nJS, Java, ReasonML/OCaml. in that order :slightly_smiling_face:\ntell your friends :)\nI\u2019m curious about your findings about Clojure vs OCaml\nwell, I \u201cmade\u201d everyone at work switch to it :stuck_out_tongue: doing my duty\nI could probably write a long post about it :smile: one of bigger reasons, honestly, was that we started rewriting our systems at work last year and needed something to standardize on. Clojure was just a better bet back then. Still is\nIMO Clojure(Script) is the best \u201cblue collar\u201d language out there\nI\u2019d be interested in the longer blog post. For now, thanks :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "337",
    "text": "it already happened a few times that we change something, everything works in the REPL and running tests, but then eventually you run the Uberjar generated and it blows up\nis normally related to silly things like `slurp` of files not in `resources`, and similar, but it would be nice to find out earlier on\none way for example could be to run the uberjar generated for a few seconds and do an HTTP call to see if it started up correctly, has anyone done something like that?\nI came from an OCaml-ish language (F#) to Clojure and wrote something about the transition here <https://blog.taylorwood.io/2017/09/15/year-behind.html>\nI also feel ridiculously empowered when writing Clojure. I did C#/Java/C++ for ~15 years before learning functional programming FWIW\ni told a friend about clojure and he told me it sounded like i was in a cult\nBlue collar probably doesn\u2019t translate across cultures/regions with any precision. I\u2019d be interested in the longer motivation? :slightly_smiling_face:\nit\u2019s always useful to test things in a release-like environment before deploying. We use docker at work to do that\nit\u2019s also pretty standard practice to have health checks once deployed\nWeird. I told my friend about a cult I joined and he told me it sounded like being a clojure developer.\n<@Meagan> Absolutely love the, \"blue collar\" programming language metaphor, while I understand the response about it not translating it made deep and intuitive sense to me immediately and will now be stolen. Bravo.\nI've probably taken about a dozen languages to production -- and I've learned another dozen while doing that (and I came out of university fluent in about another dozen before that) -- and Clojure feels, for me, the most fun and productive of any language I've ever used.\nI didn't know `.alterRoot` existed so that's TIL :slightly_smiling_face:\nwe also use docker\nso I can run something on the docker image\nwas just wondering how to run for example jetty for a few seconds until it's up to try to do a HTTP call\nI can\u2019t take credit for the analogy! I definitely stole it from somewhere :stuck_out_tongue:\nand we also have health checks, however when there are these issues marathon can't even deploy the changes, and it just loops forever\nare you asking how to do this as an automated test in CI?\nyes\njust wanted to know if I was the only one with this problem, and others solved it\n<https://twitter.com/borkdude/status/819248075948625920>\nwriting Clojure with Emacs is a double cult then :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "338",
    "text": "<@Wai> I interpret that as the daily work of an average programmer\n<@Hilary> thanks, I already read that one and enjoyed it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "339",
    "text": "<https://twitter.com/borkdude/status/933699150453051394>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "340",
    "text": "All the best cults write clojure.\nHi, has anyone used com.taoensso/carmine with Redisgraph? I can successfully `(car/PING)` my running Redisgraph Docker container, and I see four graph commands listed when I run `(wcar* (car/command))`. But, when I try e.g. `(wcar* (car/graph.QUERY \"social\" \"CREATE (:person {name: 'roi', age: 33, gender: 'male', status: 'married'})\"))`, it tells me `No such var: car/graph.QUERY`. Haven\u2019t used carmine or Redis much previously, but wanted to have a go.\n:wave: any known lib/utils that given a string:\n1. tell me if it's a valid uri\n2. tell me if that uri refers to an image of any kind :question:\nmaybe a combination of <https://github.com/cemerick/url> for 1 and <https://github.com/michaelklishin/pantomime> for 2 :thinking_face:\nYou can use the URI class constructor in the JDK to check for validity. It will throw an exception if it invalid (assuming you mean structurally valid, as opposed to the resource it points to actually existing).\nNumber 2 sounds hard though. <http://myserver.com/pictures/myface> is a valid URI. You'd have to do a HEAD at minimum to see what's there though.\nyep, makes sense. thanks for the suggestions\nnp :slightly_smiling_face: I also could be wrong, it has been known to happen.\n<https://github.com/michaelklishin/pantomime#detecting-mime-type> looks pretty good. planning to test it out on some edge cases\na warning about java.net.URI: simply creating one will talk to the network\nyep\nOh yes, I vaguely remember that now. The JDK is bags of fun.\nor maybe it's equality checks - but what I definitely remember is strange unexpected network interactions\ni remember it too :slightly_smiling_face:\ndo you even side effect?\n<@Dann> do you know where that\u2019s documented? I knew that was the case for `java.net.InetAddress`, but `URI` is surprising :S\n<@Ashlea> thanks for making me double check: URL has this behavior, URI is safe(!)\n&gt; Equality, hashing, and comparison are defined strictly in terms of the character content of the instance. In other words, a URI instance is little more than a structured string that supports the syntactic, scheme-independent operations of comparison, normalization, resolution, and relativization.\n<https://docs.oracle.com/javase/7/docs/api/java/net/URI.html>\n:relieved:\nI is only four letters away from L, and looks very similar in most fonts, which is my excuse for my faulty memory\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "341",
    "text": "<@Evonne> gives a whole new meaning when you see someone joined <#C03S1KBA2|clojure> .....\nHaven\u2019t even sent in the money yet, and Riches are already ensuing.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "342",
    "text": "to join, just send me a check for $1000. riches will ensue.\nshut up and take my money\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "343",
    "text": "Is there a caching system where if the result is not available, then the old one is used until it is? Eg for a variable time api\nCore.cache doesn't seem to have something like this. I feel like I could try something with a futures and deref, but state gets a little complicated, and utilizing someone else's state management seems reasonable.\nif the result is \u201cnot available\u201d, then how can there be an \u201cold one\u201d?\nsounds like maybe what you want is a map + a way to trigger a background refresh ?\nI\u2019m not sure I would call that a cache\nIs there a plan of releasing the new version of tools.deps.alpha with \u2019add-lib function? It\u2019s needed to add hotload-dependency functionality to clj-refactor., because otherwise I\u2019m unable to add the tools.deps.alpha using it\u2019s hash.\n<@Jasmine> you're right, I think an atom &amp; a thread is probably good here. My only slight problem is eviction.\ncore.cache has a protocol. one of the functions is `evict`. maybe you could look at the LRU there and modify it so that evict did not evict but refresh?\n<@Sixta> I have exactly this problem and solved it with an atom with a map of futures. I need a value for every user of the system. Each user has a future, either running or ready. I do a background refresh, so I don\u2019t throw away the future that\u2019s already done while the new one is running.\nThe problem is that futures don\u2019t have a way to say: on-ready, put yourself in this map and swap out the other future. So I\u2019m dereferencing it in the background, with a timeout. When done (or the timeout expires), I swap the old value.\nit needs some more work before it gets added, which is likely not going to happen soon\nI\u2019m looking into manifold to see if there\u2019s a better way for that last part.\nso, no there is no plan currently\n&gt; if the result is not available, then the old one is used until it is\ni seem to build or want this in every lang or system i work on :joy:\nyou could give the future the atom and then have it do the swap?\nI don\u2019t know the Guava lib well enough to know off-hand if this is covered, but it has a ton of cache variants and the code is very high quality\n<@Jasmine> then I would need a way for the future to refer to itself\nwhy?\nit\u2019s waiting for something - when it\u2019s done waiting, do the work\nbecause I store the futures, not the resulting values. if there\u2019s already a future running (and not cancelled), I wait for that one. I could store the resulting values separately in another atom of course, but I still need the state of those futures.\n<@Clarine> a future is effectively a Thread plus try/catch/finally that delivers to a promise\nof course a clojure future also does some special var binding boilerplate, but it's a relatively small chunk of code\n<@Dann> so instead of storing the futures, I would store the promises?\nyeah, which I think have the semantics you want - they are deliver-once, and you can tell if they've been delivered too\nmaybe you want a pair of promises - one for the thread itself (has this work started) and another for the result (has it completed / what did it return)\nI\u2019ll think about it some more, thanks for the idea.\na pair of promises is almost always a way to get race conditions\n<https://github.com/walmartlabs/lacinia/commit/62da37cd04353884a0a9d024402c3d2b80b3306d#diff-614737af318144d5501e3b4cf8abac02>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "344",
    "text": "you could make a new version that lets the code in that Thread access the promise directly\nMay I please take the code from add-lib branch and create a package out of it? At least for some time until the feature lands to tools.deps.alpha\nI'm a huge fan of delay and promise, you could also use atoms for what they do, but they have the extra guarantee that they never mutate once realized, a one time switch\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "345",
    "text": "It\u2019s open source\u2026 just retain the license and copyright\nthat is, yes :)\nNone\n(indeed)\nyeah, that should probably go in the doc string\nalso, be aware of keywords in values. `{errors/ui [:error/missing-payer]}` should that become `{ui [:missing-payer]}` or `{ui [:error/missing-payer]}`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "346",
    "text": "Is there a good way to convert a qualified map into an unqualified one?\nLike, if I want to get some sample data via gen/sample or gen/generate and work on qualified specs, but turn that output into plain unqualified maps?\nNone\nIf you know you have a flat map, with no nesting, `(reduce-kv (fn [m k v] (assoc m (keyword (name k)) v)) {} my-map)` will probably do. Never mind, just realized you explicitly asked about a nested hash map. But there's an argument for not nesting maps like that...\nbeware that you can introduce collisions if you have something like `{:database/id 4 :somethingelse/id 6}`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "347",
    "text": "how offended do people feel about the idea of composing server-side \u201ccomponents\u201d (a la component/integrant/mount states) using hiccup?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "348",
    "text": "Hi, I have a question about `defmulti` and `defmethod` in different namespaces. It seems that if you use `defmethod` in a separate namespace from `defmulti` then something in your app has to require this namespace, so `defmethod` actually runs. Is this true? And if yes, is there a best practice to avoid circular dependency in this case? Can't find the answer in docs or somewhere else...\nYeah I believe all ns\u2019es that define `defmethod`s for a `defmulti` must be `require`d for the branches of the multi to be available\nIt does work when you require \"branch-namespaces\" but you can't require them from the namespace where `defmulti` is, due to a circular dependency. Requiring them elsewhere creates an implicit dependency that will eventually break with some changes.\nKinda puzzled how to overcome this.\nRight, why do you want to use the `defmethod` that you are dynamically extending in the namespace that you are defining it in\ncould you maybe resolve that\nI have few text formats that I serialize/deserialize to the filesystem. They aren't all defined at this point and will evolve as an application evolves. So, my idea was to define multimethod for every operation and implement it for each format in the separate namespace.\nright, I am not challenging the use of a multimethod. What I think what could resolve your circular dependency is moving the _definition_ of the multimethod away from its _use_.\nYes, but then namespace where I _use_ the multimethod has to require both the definition and the implementation namespaces?\nor am I missing something?\ni don't think that's actually true. the namespace needs to require the `defmulti` ns but it does not need to require the ns where the `defmethod` is defined. That namespace has to have been required already, but not necessarily here.\n^right, that is true, thanks for that clarification\nso you could require all of the implementing namespaces in your start up and be assured that they are all ready to go\nthat will solve the problem, I'm just concerned that later someone can remove this \"require\" because they won't be explicitly used in startup namespace.\nThat what I meant by implicit dependency.\nAlso, I think my suggestion would work, I would have a ns `use` that depends on the namespace `define` + all namespaces `extend`, where each `extend` namespace depends on `define`. I don\u2019t think there is a circular dependency there, but I am lacking some paper to draw it out ^^\nIf there is no better way, I can live with this solution of course.\nYes, that will work. Thanks, <@Tammera> and <@Becki>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "349",
    "text": "hey i have a question about `letfn`\nas i search around, i knew that `letfn` is for use of function that is not defined yet. (something like mutual recursion)\nbut, if i try mutual recursion with `let`, it perfectly works!\nwhy does this work?\n```\n  (let [odd? (fn [n]\n               (if (zero? n)\n                 false\n                 (even? (- n 1))))\n        even? (fn [n]\n                (if (zero? n)\n                  true\n                  (odd? (- n 1))))]\n    (odd? 5))\n```\nso if `letfn` supports ahead-of-defintion use of function and `let` doesn't that code shouldn't work\nCause the first `even?` is `clojure.core/even?`.\nahh\ni got it\nCall the bindings f and g and it will :bomb:\nthanks\nbtw, then `letfn` doesn't use existing function if there is definition in it?\nOnly one way to find out. :smile:\nNight! :sleeping:\ngonna play with repl :slightly_smiling_face:\nyup it ignores existing function\n```\n(letfn\n          [(odd? [x] (even? x))\n           (even? [x] true)]\n        (odd? 5))\n;= true\n```\nit has weird naming but nvm\n`(cond-&gt; m (foo? x) (assoc ....) (bar? y) (assoc ..))` or `(cond-&gt; m (foo? x) (conj ....) (bar? y) (conj ..))`\nimho merging with (only) 2 args is quite often a smell, especially when you are sure the first arg is a map (non nil)\nHm, so it seems `clojure.trace/trace-ns` doesn't accept a namespace as a string. I currently have a list of namespaces in a list with strings. I would like to pass them to `trace-ns` inside a `doseq`, but always get \"No namespace: n found\" (`n` is the name of my variable, seems `trace-ns` doesn't read the value of the var but instead the symbol itself)\nGuessing I'm looking for the opposite version of `ns-name`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "350",
    "text": "Hi. I am looking for an elegant way to construct a map based on multiple conditions. This is what I have: ```(defn build-foo []\n  (let [m {}\n        m (if cond-1?\n            (merge m {:foo 1 :bar 2})\n            m)\n        m (if cond-2?\n            (merge m {:x 1 :y 2})\n            m)]\n        ;; continue with cond-3 ... cond-n\n    m))```\n(use three backticks to format code spanning multiple lines)\n`(merge m (when cond1? {:foo 1 :bar 2}) (when cond-2? {:x 1 :y 2}))`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "351",
    "text": "```\nuser=&gt; (find-ns (symbol \"user\"))\n#object[clojure.lang.Namespace 0x386f0da3 \"user\"]\nuser=&gt; *ns*\n#object[clojure.lang.Namespace 0x386f0da3 \"user\"]\n```\nMany thanks. Will try it out in a bit and report back\nSo it probably works when you map `symbol` over your list of strings\n\n`(map symbol namespaces)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "352",
    "text": "hi folks, I have a clojure project that has been packaged with `lein jar`, how do I run it? :smile: I've only ever used `lein uberjar`\nare you running it with lein or separately? if the former, lein run probably does the right thing. if the latter, you need to include the jar and all transitive dependency jars on the java classpath, then run the main class. `java -cp my.jar:foo.jar:bar.jar my.mainns`\nI am using lein. Does `lein run` use java classes in `:java-source-paths`? I was thinking the instruction to use `lein jar` (from the creator of the project) was to also include a separate java class.\nI think lein run includes the class output target dir in its path and Clojure will use the classes if it finds them (before the .clj)\noh, sorry you asked about java classes\nI would expect it to only find java classes in the target output, not in java source paths\nI've managed to get the project running with `lein repl`\n(but don\u2019t take my word for it, that\u2019s just my expectation)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "353",
    "text": "I have a vector of hash-maps that I wish to namespace qualify, and I'm curious about how to do this idiomatically (`(map #(reduce-kv ...))`?), and why the first example here does not work:\n\n```\n(reduce-kv #(assoc %1 #:ns{%2 %3}) {}  {:k \"v\"}) ;; =&gt; CompilerException java.lang.RuntimeException: No such namespace: ns etc..\n\n(reduce-kv #(assoc %1 :ns/%2 %3) {}  {:k \"v\"}) ;; =&gt; #:ns{:%2 \"v\"}\n\n(reduce-kv #(assoc %1 (keyword \"ns\" (name %2)) %3) {}  {:k \"v\"}) ;; =&gt; #:ns{:k \"v\"}\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "354",
    "text": "the #:ns{} syntax is a literal map syntax. that is, it\u2019s not a property of the map, it\u2019s just a syntactic alternative when writing literal maps.\nsimilarly, :ns/%2 is a keyword whose name is literally %2\nboth of these are things happening at read time, with no eval\nthe last one seems like a fine solution\nthere are some common utility functions (often called `map-keys` or `map-vals`) that apply a function to all of the keys or vals of a map and that might be an easier way to think about it. You can find those functions in many of the utility libs (medley, useful, etc)\nsomething like `(map-keys {:k \"v\"} #(keyword \"ns\" (name %)))`\nexcellent, thank you\nclassloaders generally don\u2019t have a notion of what *can* be loaded, just what has been loaded\nthe classloader interface intentionally abstracts the notion of \u201cwhere classes come from\u201d and they could come over the network where there is no way to enumerate them all\nor out of a database (I did one of those once)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "355",
    "text": "Is there any way to get a list of loadable classes on the classpath easily without relying on a library like `compliment`? The code in `compliment` is surprisingly complicated and this feels like something that the JVM should be able to do natively via the Classloader interfaces or something?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "356",
    "text": "E.g., <https://weavejester.github.io/medley/medley.core.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "357",
    "text": "Hi all. I have a problem in my application. Some sort of classloader memory leak. I see that amount of classes is constantly increasing and heap dump is dominated by entries like `clojure.core$eval100009` with no instances. How can I figureout what is generating this classes?\nyou are calling eval in a tight loop somewhere\nWell I guess I do :slightly_smiling_face:\nbut not explicitly apparenlty. My code have only one call to eval and it is not in any sort of tight loop...\nthat is why I ask \"how to figureout what is generating those\"\nyou are running that code over and over again more often then you think you are\nI doubt that this is in my code, but I'll double check...\nI would drop any library that uses eval outside some sort of start-up DI type scenario, runtime eval is a code smell\nThis is easier said then done :slightly_smiling_face: how to detect which library?\nyou can (for debugging / local purposes only) replace clojure.core/eval with a function that logs stats about usage (including stack trace) then calls the real eval\nlibraries are basically garbage, so just get rid of them all\nhaha\nnice advice, cant follow unfortunately :slightly_smiling_face:\njust start naming off the libraries you use until we yell bingo\nregarding _how_ to replace eval with logging version, `alter-var-root` is pretty straightforward to use\nWhat if this eval is binded inside some function? Will alter-var-root help?\nbut seriously, I would look at your own use of eval\nyes, functions compile to code that looks up vars - the gotcha is if eval was provided as an arg to a first class function - which is rare\nagreed with <@Rosaline> and logging eval usage would expose that this is the issue as well\nI doublechecked my usage of eval - it only happen once during initial app compilation\nand a caveat that Clojure core itself is direct linked compiled so calls within core won\u2019t see changes from alter-var-root\n```(ins)user=&gt; (alter-var-root #'eval (fn [v] (fn [&amp; args] (println \"calling eval on\" (pr-str args)) (apply v args))))\n#object[user$eval151$fn__152$fn__153 0x158a3b2e \"user$eval151$fn__152$fn__153@158a3b2e\"]\n(ins)user=&gt; (eval '(+ 1 1))\ncalling eval on ((+ 1 1))\n2\n```\n<@Jasmine> true but I think we can trust that clojure.core isn't using eval in a sloppy way\n<@Dann> let me try that\nI dunno, maybe he is using the socket repl as an rpc\nJava profilers can also help you with stuff like this (YourKit, JProfiler, etc)\nGot it!\nI found what is causing my issue. Thanks <@Dann>. Now have to think how to avoid that. Btw culprit is dynamic sql generator from yesql\nI would be surprised if whatever yesql is doing couldn't be replaced by a higher order function rather than using eval, I'm disappointed to hear it's doing things that way\nalso, hugsql is newer and supposedly addresses some design issues from yesql\n(but works similarly)\neven yesql's readme mentions hugsql and the fact that hugsql is actively maintained unlike yesql\nWell, problem is little bit deeper than yesql. I attached template engine (comb) to yesql that give me dynamic sql generation (yesql can't do that out of the box) and this lib is actually main culprit. I like this feature a lot, though I need to use it more carefully because of this problem... Hugsql is way too much rewrite for me, maybe I'll consider this later\nI spent way too much time getting lumo working on an older server without testing the clojure command to run scripts. It doesn't even take a second, and I can use all the java libs... Slow start-up time is barely noticeable if you aren't using lein and not too many deps.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "358",
    "text": "<@Jasmine> Ah that's interesting. I guess that's why `compliment` has all the code it has for finding jars and class directories and such and just lists them?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "359",
    "text": "is there an existing library for converting a swagger.json file or json schema file into spec definitions?  I know spec-tools supports spec to both formats, but I'm more interested in the opposite direction\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "360",
    "text": "Hello, does anyone know of a way to decode php laravel sessions in clojure?\nFYI I couldn't find any documentation (outside of the clojuresque api docs :)) on how to use prepl so I wrote some <https://blog.jakubholy.net/how-to-use-clojure-1.10-prepl/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "361",
    "text": "maybe walkable? <http://walkable.gitlab.io/>\nehm, I used metadata on a fn like this:\n```\n(defn ^String foo ([] \"\") ([a] (str a)))\n(set! *warn-on-reflection* true)\nuser=&gt; (.length (foo))\n0\n```\nApparently that works too, although I can\u2019t find it in the docs like this.\nyou\u2019re putting it on the var there, not the fn\nwhy don\u2019t I get a reflection warning then?\nbecause it\u2019s using the var meta\nit\u2019s not reflecting\nnon primitive return type hints work on the var too\nso this is cool, unless you use direct linking?\nyour use of \u201ctoo\u201d above seems like there is some prior conversation this is in reference to, but I haven\u2019t read that\njust mentioning that in case there is context I should be aware of\nAFAIK there isn\u2019t a prior conversation about this\nso \u201ctoo\u201d above implies there is something else that works, but not sure what that is\nI was referring to type hints on the argvec\nto summarize, should I change my type hint, or does this work correctly?\nnot your \u201ctoo\u201d, <@Clarine>\u2019s \u201ctoo\u201d\nah :)\nwe need name qualified words in english\nborkdude/too\noooh, sorry :slightly_smiling_face: I mean instead of putting the return type hint on each arity\nit works, I hate it\nit's fine as is, but it makes me sad\nyeah, it works, but I agree with bronsa that putting it on the ret type is better\nso I need to repeat the type hint for each arity?\nand why you sad?\nyes\nnot every arity has to have the same return type\nno problem, I\u2019ll do it, just want to know why\n(not that I would recommend having different return types)\nit's just a matter of consistency, tagging return types on the argvec is guaranteed to work with any legal type hint and Do The Right Thing\nthere is a string of cases where tagging return types on the var doesn't do what you want, silently\nI think it\u2019s also the tightest scoping to your intent\nyup\nok - thanks `{::keys [:bronsa/too :alexmiller/too]}`\nSyntax error macroexpanding clojure.core/let at (REPL:1:1).\nit\u2019s tha core specz yo: <https://dev.clojure.org/jira/browse/CLJ-2473>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "362",
    "text": "Hi folks! My current task is to profile a Clojure app (with Aleph and core.async) and after googling for some time it seems that is not an easy task like in Golang... I need some metrics like \"how many goroutines are running\", memory, and cpu. Does anyone know a way to get these metrics?\n<@Zenaida> I don't know about any tools to get stats for core.async specifically, but for memory and CPU profiling there's the usual JVM tools like <https://visualvm.github.io/>\n<@Zenaida> also aleph exposes metrics of its thread-pool\nThanks! I will search for that now\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "363",
    "text": "who said that's code, it's just data bruh\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "364",
    "text": "how can I `spit :append` below whatever text already exists in a file?\n<@Melania> <https://clojuredocs.org/clojure.core/spit#example-542692c7c026201cdc326975>\n<@Fae> thanks, interesting\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "365",
    "text": "Anybody aware of a walk-through describing how reagent components that deref an atom register themselves as watching that atom?\n<@Arnoldo> my memory is that r/atom deref itself does the registration, since the deref happens inside the component data literal\nbut I haven't touched reagent in ~year\n<@Arnoldo> the magic is all here <https://github.com/reagent-project/reagent/blob/master/src/reagent/ratom.cljs#L43>\nI think this is the line that literally answers your question: when you deref an ratom, your context is captured as a watcher <https://github.com/reagent-project/reagent/blob/master/src/reagent/ratom.cljs#L145>\nor, more precisely: no walkthrough that I know of, but the code isn't that hard to read\n<@Dann> thanks... yeah you're right I shouldn't be lazy and just read the source\nwell, hopefully at least knowing the precise place the behavior is defined is a good start\nI could imagine it eg. being part of the mounting code or the component loading code\ndefinitely saved me some trouble, appreciate it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "366",
    "text": "<https://github.com/seancorfield/depstar>\n<https://github.com/juxt/pack.alpha>\n<https://github.com/luchiniatwork/cambada>\n\nI found 3 uberjar maker for deps.edn with `clj`. Do we need 3 as community? I always like simplicity about Clojure tools and making choices. Which one is recommended?\nif you want simplicity, make no uberjar :stuck_out_tongue_winking_eye:\nWhat then? I want it for Docker image, so I don\u2019t want to share source code\njust mount the source code?\n&gt; I want it for Docker image, so I don\u2019t want to share source code\n:wink:\noh you DON\u2019T want to share the source code\nsorry :slightly_smiling_face:\nso you want to AOT it and publish without the .clj files?\nno problem :slightly_smiling_face:\nyes\nI believe most of that tooling just zips up the source code and calls it a jar\nIt was working perfect with lein, but I am moving with all new stuff to deps.edn\nhmm\nI\u2019m still using lein to deploy for some projects, next to clj, I guess you could use both\nthe clj tooling has been explicitly called \"not a build tool\" over and over again, and aot compiling seems like a clear cut build step (of course so does building jars)\nthe pack.alpha has some suggestions for adding aot compilation on top of it, but it seems pretty adhoc\nHmm I can use lein only to build jar from deps.edn, but I feel strange about that.\ncambada actually defaults to aot compiling everything because it larger looks it is for building graal-native stuff, which requires aot\nno worries about that. there's a lein plugin to gather deps from deps.edn so you can just use lein for build tooling and deps.edn for what you use it for now.\n<@Becki> sure I know that plugin\nit just seems like, if you have some weird corner case (building aot jars) and it is well served with lein, why make the change to clj?\nI like clj more than lein :slightly_smiling_face:\ni understand lein and deps.edn use subtly different dependency resolution so i'm not sure that your built artifact is guaranteed to reflect what you developed. Need to find out what that plugin does, if it resolves everything in the way tools.deps.alpha would do (and i suspect this is what it does)\nAnd clj solve other corner cases easy like git dependency or local folder dependency\nWhy, specifically, do you not want a JAR containing `.clj` source files? That's how we package everything for production deployment at work.\ndistributing paid binaries?\n(I'm not doing that so no idea really, just guessing)\nlike Datomic\n(we use my fork of `depstar` to build uberjars from source, and run them with `java -cp path/to/the.jar clojure.main -m entry.point ...` in production)\nbut you have to ask yourself, what are you trying to protect against\nfor example security reasons and not free software\nlike, jvm bytecode is super high level and easy to decompile anyway\nFolks can always ... yeah, what <@Rosaline> said...\nbronsa built a pretty good decompiler from class files to clj in addition to the classfile -&gt; java decompilers\nsure, but decompile Clojure is probably much more difficult to debug, than Clojure code\nThere's no security provided by AOT compiling Clojure code.\n(or compiling Java code)\n<https://www.youtube.com/watch?v=2SGFeegEt9E>\nI know, just sharing source of the code sounds risky for me and second reason: not all code is for free :wink:\n<@Isa> with who are you doing to share it?\nbut, I mean, plenty of not free code is distributed everyday, right? that is what a license agreement is for\nI don\u2019t want to go deep into security topic, that was not the point of my question :stuck_out_tongue:\nSoftware licensing is ... yeah, dammit, what <@Rosaline> said! (again)\nI dunno, I mean it is standard industry practice and whatever, but it is so silly\n<https://www.microsoft.com/en-us/sharedsource/>\nthen you could make everything public :wink: For example source code of bank systems.\nSo I can agree only partially with you\nthe idea that not giving out the source code is some kind of barrier is silly\nbanks absolutely should be able to publish their source code\nwhy not?\nnext thing, you\u2019ll want the source code for voting machines\nI'm sure somebody out there has a Classloader implementation that loads encrypted resources based on a key that needs to be present at runtime, I bet it's a pain to actually use though\nlinux is insecure because its source code is publicly available\nqed\nI am afraid if bank will publish they source code many people will lose they money :wink:\ndon\u2019t tell anyone, but banks use a lot of open source software\n<@Dann> which is a key distribution problem not a source code problem\n<@Isa> that is based on a deeply flawed understanding of the basis of computer security\nworse than that, they use fundamentally insecure things like FTP\nthey use legal means to fix the ensuing problems\nthis is a neat idea\nthat is why we have distributions like `alpine`\nif you look at crypto these days, no one wants to use a crypto system that relies on the implementation being secret, only on the keys being secret, they want everyone to know the implementation\nwhat does that even mean?\n<https://alpinelinux.org>\nI know what alpine linux is, I just don't see how it anyway addresses my point\nalpine linux is insecure because the source code is publicly available\nSo do you want to say me you publish source code of your all projects? Free and pay? I don\u2019t believe.\n<@Isa> there\u2019s a difference between a business model and security\n<@Rosaline> blockchain idea is to be public. It is different topic.\nlegally I am unable to publish the source code to the stuff I do for pay because the rights are not mine\n<@Isa> by crypto I mean \"cryptography\" not digital ponzi schemes\nI am sure there is dependency between code publicity and number of trying hack. But it is besides of our topic.\nthere are reasons not to provide source code, but if you put security on that list you have failed to secure anything\nI mean because code is public and everybody know what system cointain, we needs solutions like alpine\nI believe it reduce probability. Not making system secure. Just reduce attention and make things harder to hack.\n<https://en.wikipedia.org/wiki/Security_through_obscurity>\nBut things are different for very popular public projects where security start to go on higher level.\n\"Security experts have rejected this view as far back as 1851\"\nI think it's pretty proven-out that open vs closed source doesn't have much bearing on security\nusually people want to keep their source closed for business reasons\ni.e. I don't want a competitor to steal my codez\nAnyway business reasons are enough to do it\nbut it's kinda silly, because that's what licensing and legal teams are for :slightly_smiling_face:\nit's just putting a barrier in place. it's fairly easy to knock down\nSo whole world is silly doing that :wink:\nplenty of businesses are based around JS applications that everyone downloads the source for \u00af\\_(\u30c4)_/\u00af\nWhy did you make depstar instead of use <https://github.com/juxt/pack.alpha> or <https://github.com/luchiniatwork/cambada> ?\nanyway, not saying that everyone _should_ make their code publicly available. but that going to _great lengths_ to obfuscate it is probably not worth the time/money\nAOT is great for perf if you need it. as obfuscation from a business/security perspective, it's not that great and in the case of Clojure can be work to make sure all code deals with it well\nAOT is great for _startup time_ -- not performance.\nfair!\nThere is no difference in performance since Clojure source code is compiled when it is loaded anyway and the JVM will do its JIT thing over time as the application runs -- AOT just saves that initial compile time on load.\nyeah, considering that we\u2019re doing AOT for each deploy, it kind of defeats the purpose (you only benefit from it once) - except that we maybe have a little less downtime between deploys\nFor us, the biggest chunk of startup time is New Relic's instrumentation agent processing all of the classes as they load. The difference between AOT and non-AOT for us is noticeable but relatively small in comparison.\nBecause `depstar` does what I want and is nice and minimal. And <@Marlyn> made `depstar`. I just forked it, fixed some bugs, and added the \"thin JAR\" creation feature.\nnot always true, if you run app in kubernetes to do a job or create new containers when needed, then it is not once\nI was referring to an app we run in production. In general (for libs, etc) you can benefit from it more.\nHow does it work in the context of:\n<https://clojurians.slack.com/archives/C03S1KBA2/p1548963422931200>\nJuxt's `pack.alpha` came first (back in December 2017, it seems). Then `depstar` in early 2018. Then Cambada. Based on initial commits, not public releases.\nNot sure what you mean by that question... that's _exactly_ what `depstar` does.\nSorry if I am asking about something stupid. But does it only pack source files or compile them into different format? As I understand compile to different format. But hiredman wrote \u201cjust zips up the source code and calls it a jar\u201d and it make me confuse.\nA JAR file is just a ZIP file with the extension `.jar`\nNot sure what you mean by \"compile them into different format\".\nhmm so how AOT is added?\nDoes it still need .clj files after that?\nSo then what source code doing there?\nWhen you compile Clojure source `.clj` files, you get `.class` files. You don't need the `.clj` file present if you have all the `.class` files that it compiles into -- unless it does some action at runtime that would require the source (such as loading a specific source file). AOT is transitive (which is considered a bug by most people -- there is at least one open JIRA issue about it) which means it compiles the namespaces you specify _and any namespaces that are reached by loading those namespaces (recursively)_ -- which means that if your AOT'd code uses `require`/`resolve` at runtime on namespaces that were not part of the AOT pass, you still need their source files.\nIt depends on whether you configure them to AOT everything or just specific namespaces. And even at runtime, Clojure code can still pull in new dependencies (as source code) and load them (which compiles them into class images in memory).\nI think it's a long-standing mistake that Leiningen chose to have as the default in its basic app template, a compiled main namespace and a `:gen-class` directive.\nLeiningen does a lot of stuff by default that is not necessary.\nSo\u2026 do you suggest to always include source code? What about business?\nIs there any right solution? How do you protect source code?\nLicensing. As several people said.\nIt doesn\u2019t protect source code in any way. It makes potential penalty if you can prove it.\nok so I assume you make source code public for all your apps (unless it is on cluster only, so they can\u2019t read anyway)\nThanks for explanation\nJust to summary up what I wanted to say and avoid misunderstanding:\nNot publish code doesn\u2019t make code more secure.\nBut publish code increase a risk to be hacked. For example bot looking known bugs in public code, which will notice hacker you use dependency with security issue, have overflow bug etc.\nAll the code I have written for myself, that I own the rights to, has been open source -- for about thirty years. The code I write for companies, in general, is owned by those companies and it's up to them whether they release it publicly. Some code I wrote for Macromedia was open sourced (in the early 2000's). Some code I wrote for a client after I quit Adobe in 2007 was open sourced. Various companies I've worked for have open sourced some of their code. My current employer supports all of its developers contributing to existing open source projects -- and has allowed me to release a number of libraries as open source that were written internally, as well as having its own GitHub organization with some open source libraries.\nWe have some code at work that is proprietary in terms of containing internal business logic and/or algorithms -- but we wouldn't release that in compiled format. Nothing to do with source code.\n&gt; All the code I have written for myself, that I own the rights to, has been open source -- for about thirty years.\nI envy you have such opportunity to do it :slightly_smiling_face:\nA couple of our developers have given conference talks, going into some depth about how we use certain software and sharing code examples publicly.\nThe real reason most companies won't release their code as open source is that they don't want to have to maintain it as an open source project -- because that's a big commitment. We've had a lot of discussions about that internally.\nAnyone have a recommendation of a smalltalk written in clojure? I'm mainly interested in the \"liveness\" and \"object protocol\", not so much the parser.\n\nEDIT: removed incorrect statement regarding Clojure / Protocols\noh yes, it is\nFor a long time, we only had one official company library available as open source, and it was on BitBucket (an internal repo made public), and that was all about the potential drain on our time for maintaining it for the community if we put it up on GitHub for \"everyone\".\nit isn't\nWith the primary delivery platform now being the web, there's no deliverable for backend code to clients, so compiling (to whatever format) is far less important. And of course all your client-side code _is public as JavaScript_ and the entire world can read it.\nclojure doesn't have an mop, and protocols are not based on smalltalk\nAnything delivered as a desktop app built on Electron etc -- all your source code is public there too. Because JavaScript.\nhmm unless we use solutions like electron to make desktop app it is mostly true\nhmm\ngood point\nCompanies like Microsoft are now releasing huge swathes of code as open source. Closed source is pretty much dead as a concept as far as modern companies are concerned.\nso I would say it is issue / feature of Java / JavaScript world\n&gt; Closed source is pretty much dead as a concept as far as modern companies are concerned.\nThat is interesting topic. I see this trend more and more, but I have never seen rationale for that.\nDo you know good article about that?\nPHP, Python, Ruby... all delivered as source code, regardless of whether the code is open source or restricted by licensing.\nI removed in correct statement regarding Clojure / Protocols. Regarding original question -- is there any readable impl of Smalltalk in Clojure ?\nlicensing is ok, but is is hard to deal with people who don\u2019t respect it\nMaybe in US it is easier, I don\u2019t know\nre smalltalk, I think <http://cloxp.github.io/> is smalltalk inspired\nThat's always been true tho' even with proprietary closed source systems -- look at how widely pirated desktop software from Microsoft and Adobe is...\nYeah, it is interesting move from MS to let run they system without cracks.\nI think they did it\nAdobe has a specific software license enforcement team that work with law enforcement worldwide and they conduct raids on pirating organizations, as well as sue companies that use pirated versions of their products. I'm sure Microsoft, Oracle, et al all do as well.\nBut on the other hand they power is in number of users, also this who crack they system\nUnless you're a giant mega-corp, with billions in revenue from closed source desktop systems, piracy is really not worth worrying about tho'...\nI mean more people use they product, better for them, because more people will buy a licence.\nYour ideas in software are not likely to be novel :slightly_smiling_face:\nThere's much less true innovation in software than a lot of people seem to think.\nSo the software you produce -- there's almost no benefit to keeping it \"secret\" in the vast majority of cases.\nStill if somebody will do copy &amp; paste your system for which you spent a lot of money you will feel bad about that\nThis things can easy happen in Russia or China\nIf you really \"spent a lot of money\" and have a large amount  of business riding on it, sue for license infringement. That's what licenses (and courts) are for.\nAnd if it's closed source, they'll just crack the product anyway. It's no defense.\nI think Russia and China don\u2019t care about that too much\nReally, if you think closed source vs open source is some magic defense against piracy/cracking you're delusional :slightly_smiling_face:\nbut it is fair point\nno, I don\u2019t\nExactly, Russia and China et al will do whatever they want with your software regardless of whether you release the source or not!\nReversing situations: so why companies close they source code? Everything should be public.\nExample: a Clojure open source library out there was made by a Russian as a copy of one of my libraries and they removed the license and copyright notices and passed it off as their own code. They announced the library on the Clojure mailing list and I called them out for license infringement -- and they recanted because they were caught in public breaking the rules.\nClosed source is the old-fashioned model. Companies with old-fashioned thinking still follow that model. Companies still use COBOL, for example :slightly_smiling_face:\nThis is an interesting article on the thinking behind keeping things closed: <https://opensource.com/business/13/10/seven-reasons-closed-better-than-open-source>\nTo be honest I think I don\u2019t have strong opinion in that topic\nI think there is no answer for that\nBut for example turquoise model of managing business is new \u201cfashion\u201d, but I don\u2019t believe it fits everywhere\n&gt; You never have to fix components when something goes wrong.\nhaha I like this one\n&gt; But publish code increase a risk to be hacked. For example bot looking known bugs in public code, which will notice hacker you use dependency with security issue, have overflow bug etc.\nA good, relevant example here is Slack. The JavaScript code is not open source but it is public because of the way web apps work and it has a stupid exploit in it that allows hackers to bypass security checks in the client. Slack have known about it for years but refuse to fix it. If their source code was actually open source, you can bet they'd be deluged with pull requests to fix security issues like that.\nThat's why open source code is often *more secure* and *less hackable* than closed source code -- more eyeballs, more developers wanting to help fix vulnerabilities.\nThanks for conversation. I think it changed my point of view a little.\nYou're welcome. As you can imagine, I'm very much an open source advocate, having been doing this for about thirty years :slightly_smiling_face:\nI agree about all popular projects. Just not sure if it will work the same if you will publish the system, which only you maintenance. For example small SaaS or system which you use only in company X. I think true is not black and white. But I agree. It is fair point.\nI can imagine. I would like to do more open source, but not so easy. Trends from US go to Poland after a few years :wink:\nI've spent the last hours hunting down an obscure compilation problem with a cryptic error message. I still don't understand it, but it seems that if I mark a `(def q (into (sorted-set) [1 2 3]))` with a `^:const`, then *other* files that need `q` for their `(def)s` will not compile. And I now know that `sorted-set` and `^:const` are needed. A vector won't cause it.\nJust wanted to check if this rings a bell with anyone.\nconst means inline at point of use (that explains the scope of where you see the issue)\nI don\u2019t think sorted-sets can be const - they have an embedded comparator function that\u2019s not representable as data\nHmm. I didn't know there are things that can't be const.\n<https://dev.clojure.org/jira/browse/CLJ-944> is in the ballpark of this - it\u2019s a really tricky corner of the compiler\nThis is way beyond me. I searched the bugtracker before asking, but I wouldn't have recognized this issue as related. Anyway, it isn't a major problem, it's just that finding the cause is very difficult.\ncan you repost the root cause of that exception chain (the last one one)?\nSure. I just abbreviated it, because it seemed rude to clog people's screens:\n```\nCaused by: java.lang.ClassCastException: Cannot cast clojure.lang.PersistentVector to clojure.lang.ISeq\n        at java.lang.Class.cast(Class.java:3369)\n        at clojure.lang.Reflector.boxArg(Reflector.java:552)\n        at clojure.lang.Reflector.boxArgs(Reflector.java:585)\n        at clojure.lang.Reflector.invokeMatchingMethod(Reflector.java:132)\n        at clojure.lang.Reflector.invokeStaticMethod(Reflector.java:332)\n        at clojure.lang.Reflector.invokeStaticMethod(Reflector.java:325)\n        at clojure.lang.LispReader$EvalReader.invoke(LispReader.java:1322)\n        at clojure.lang.LispReader$DispatchReader.invoke(LispReader.java:853)\n        at clojure.lang.LispReader.read(LispReader.java:285)\n        at clojure.lang.LispReader.read(LispReader.java:216)\n        at clojure.lang.LispReader.read(LispReader.java:205)\n        at clojure.lang.RT.readString(RT.java:1874)\n        at clojure.lang.RT.readString(RT.java:1869)\n        at partsbox.preferences__init.__init1(Unknown Source)\n        at partsbox.preferences__init.&lt;clinit&gt;(Unknown Source)\n        ... 34 more\n```\nThe last 2 lines reference my file: it's the one that uses the `^:const` definition.\nto get this you have to think about what the compiler is doing. it\u2019s trying to inline a value rather than look it up via the var.\nit\u2019s going to include that value in the class compiled for the function using the inlined value\nI, and I am sure <@Jasmine> will disagree, would say never use ^:const\nas far as I can tell, people reach for it because it has a similar name to things they use in other languages when they want things to behave correctly\n<@Jasmine> Right. I understand why this happens in the including file.\nbut clojure already behaves correctly, and const almost certainly doesn't do what you intuitively expect\nit has to store the constant value in a field of the class, but there is a limit to what you can store in bytecode. For simple values, this is easy, but iirc the fallback case is to pr the value to a string, that can be re-read back to a value in the consuming case.\nHmm. But sorted sets do not have a pr representation.\nsorted sets and maps don\u2019t have a literal print syntax and no way to print/read the comparator function.\n```user=&gt; (binding [*print-dup* true] (pr s))\n#=(clojure.lang.PersistentTreeSet/create [1 2 3])```\nthis gets into increasingly murky areas where reader eval is used\nI\u2019m not sure I\u2019m getting 100% of the details correct on all this (it\u2019s been a few years since I looked at it)\nas <@Rosaline> says, there are fewer places where this is worth doing than you might expect (I wouldn\u2019t say none though)\nin particular using ^:const in tandem with ^long or ^double can be useful for inlining primitive long or double values\nif you don't say none, everyone wants to argue that they are special and should use, and they never should\nIn general, I really wish sorted sets and sorted maps with default comparators had a printable/readable representation. I run into this quite a bit, and I don't have a single custom comparator function.\nAs to this problem, what next? Should I work on a minimal reproducible test case, or is it unnecessary? It seems this is a known issue, and all that could possibly be improved is the error message, right?\nI don\u2019t think what you\u2019re doing is a useful thing to do (that is, I can\u2019t imagine how marking this ^:const well help you in any way)\nso I would recommend just removing that :)\nif you want to file a jira re the error message (or a clojure-site issue for better docs around ^:const), that seems reasonable\nthe docs around ^:const are, well, largely non-existent. there are a couple lines in the changelog when it was added\nI did, I don't much care about the `^:const`. I just checked, and I have 253 `^:const` declarations. I use them mostly as a comment, really.\nI guess I can simply remove them all and assume that every `def` is a constant.\nI'd suggest also maybe a re-evaluation of your relationship with sorted sets, if they are causing issues, maybe try and get a long without them (as a data point I am not sure if I recall ever using clojure's built in sorted sets outside of toy projects)\n<@Jasmine> By the way, I really enjoy your weekly journal blog posts. If this doesn't take too much of your time, it is worth doing and is much appreciated.\nI\u2019ll +1 reevaluating sorted sets\nI find using them means you are usually relying on order and linear searches rather than building indexes which will be a better solution\nHmm. They are actually quite useful in certain places. I use them for things like a list of quantities (build/order/whatever). A list like that has 1-20 numerical items. A sorted-set is perfect, as it lets me declaratively specify that it should always be sorted. I could stop using it, but then I have to worry about re-sorting in a number of places.\nBut \u2014 indeed if they cause more problems than they solve, I can just make sure I always sort manually.\nWhat\u2019s the complexity of operations in a sorted set, membership and insert and such? Is it worse than a regular set? (I got intrigued\u2026 :) )\nthey\u2019re red-black trees, so mostly O(n log n) I think\nor treat it more like a graph, {somevalue #{next} next #{nnext} etc}\nis this really easier than using a simple data structure like a sorted set?\nif you are sorting just for display (as a todo list or whatever) then you don't need sorted data, you need a sorted view over something\nit is more flexible in that it encodes the sort as data in the graph\nvs. as a function\nso it is better suited to things like serialization\nCool! I remember having quite a difficult time getting my head around RB trees when I got them in CS\nis it? seems like you run into the same issue as the sorted set. you can serialize its current order but how do you serialize the instructions for inserting new elements into the graph? that would be the comparator in the sorted set and would seem to be an analogous point for the graph insertion\nthat is the point, you don't serialize instructions at all\nis order a property of your data/information or is it a property of the particular data structure you are using to represent the data\n(I would also agree about `:const` earlier -- 90% of the time I've seen it in the wild, it is incorrect.)\n1. sorted sets are cool, most of my favorite things are built on them to some degree or other (<https://git.sr.ht/~hiredman/dset>) 2. if something is causing you trouble stop using it 3. always have a third thing\nI would humbly suggest that the word \"incorrect\" is too strong. `^:const`, at a first glance, seems like an indication that something is a constant and will never change. Marking things this way is entirely reasonable\nAs for sorted sets, of course I don't require them. I can make sure that every function that needs the data sorts it before using (and no, it's not just \"a view\", there are multiple views, there is also logic that assumes the data is sorted). It's a tradeoff between declarative and procedural.\n<@Laurinda> here\u2019s a link to the aforementioned changelog entry explaining `^:const` <https://github.com/clojure/clojure/blob/master/changes.md#215-const-defs>\nWell, as an aside, I do understand how const works. The inlining is not critical in the code that I currently write, but I am aware of it. What I wasn't aware of are pitfalls, e.g. that not every Clojure data structure can be treated this way.\nno data clojure structure does anything useful with const - it's an optimization for primitives\nsome data structures also error, none of them benefit\n<@Laurinda> I was trying to be helpful. I didn\u2019t see anyone send you a link, etc.\nYes, \"primitives\" is what I was missing, I guess.\nAs for \"useful\", isn't it true that if initialization is expensive, it would happen at compile time and the result would be inlined?\nThis is the kind of the discussion that needs to be distilled into reference material so these discussions can just be collapsed into a URL.\nI don't want to come off as too strident here - I think given what const means in other languages it is poorly named and under documented\nif your form is at the top level of the file, it's initialized during compilation, in clojure compilation happens when you load the file\nRight. And if I build an uberjar with AOT?\nthe file is loaded when making the uberjar, anything at the top level is done again on ~app startup~ runtime load of that class file, otherwise def with side effects in it would break when using AOT\nso you aren't saving as much time as you might think for defs at least\neg. `(def tracking (get-tracking-data (fire-missiles)))` - fires missiles when you make the uberjar, then does it again when you load the resulting class file in an app\nThanks for explaining. I didn't think these definitions were evaluated again.\nit's surprising, but it's the least surprising choice - think of all the _potential_ bugs when people use def on eg. a db connection pool, or an http server etc. (of course best practice for devs is never do anything stateful in def)\nNo, what surprises me is that the same is done when there is a `^:const` metadata flag. I would not expect re-evaluation then.\nconst doesn't really do anything with data structures, it enables a fast path for compiled code that uses the const var, if the const var is a primitive\nthe inline stuff is primarily intended for use inside Clojure itself and is not considered a public feature that we wish to encourage (it may be removed in the future)\n<https://clojure.org/reference/compilation> is probably the best place to doc ^:const\nThanks! I\u2019ve already forked the repo to patch my name/github name. :slightly_smiling_face:\nif you\u2019re adding your name, you need to complete the CA form (but if you\u2019re fixing a typo or something, that\u2019s fine)\nI completed the CA _years_ ago. :slightly_smiling_face:\ncool\nAlso, regarding `^:inline`, I\u2019m aware that it is not intended for public consumption; my suggestion regarding it is to make that fact public in documentation so that folks (you included) don\u2019t have to keep having the same discussions.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "367",
    "text": "Also, I'm pretty sure Cambada didn't exist when `depstar` was created?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "368",
    "text": "So all solutions like lein uberjar etc. include source files?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "369",
    "text": "disabled an integration in this channel: <https://clojurians.slack.com/services/BEW89FKAA|outgoing-webhook>\nThe error messages are\u2026 suboptimal.\n```\nException in thread \"main\" Syntax error compiling at (/tmp/form-init5251724450573718419.clj:1:73).\n [...]\nCaused by: java.lang.ClassCastException: Cannot cast clojure.lang.PersistentVector to clojure.lang.ISeq\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "370",
    "text": "but that's not how const works\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "371",
    "text": "The constant factors for Clojure's sorted sets/maps are typically a fair amount larger than sets/maps that are not sorted, e.g. n log_2 n is a constant factor 5 more than n log_32 n.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "372",
    "text": "Seems like it\u2019d be easy enough to copy and paste the lines from `changes.md` over. Where would those go? I\u2019ve seen this discussion come up enough that it\u2019d be easier to just point someone to the site for reference.\n\nThere are also several other meta questions that come up too (myself and others have asked about `^:inline`).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "373",
    "text": "when writing a clojure library, should we just have all the dependencies declared as `:provided`?\nI tend to make deps that are not strictly needed for the library to be usable provided.\nAn example would be in clj-http that cheshire is not strictly needed, unless you want to do json parsing\nSometimes people make these part of the test  / dev dependencies. I think provided is the intended use for this.\nnice thanks, I'm trying to add a library to a project now, and I get a million conflicts like\n`[io.confluent/kafka-schema-registry \"5.1.0\" :exclusions [org.slf4j/slf4j-log4j12]] -&gt; [io.confluent/rest-utils \"5.1.0\"] -&gt; [org.eclipse.jetty.websocket/javax-websocket-server-impl \"9.4.12.v20180830\"] -&gt; [org.eclipse.jetty.websocket/javax-websocket-client-impl \"9.4.12.v20180830\"] -&gt; [org.eclipse.jetty.websocket/websocket-client \"9.4.12.v20180830\"] -&gt; [org.eclipse.jetty/jetty-client \"9.4.12.v20180830\"] -&gt; [org.eclipse.jetty/jetty-http \"9.4.12.v20180830\"]`\nthe actual version numbers from the main project will however still take precedence right?\nwould be nice to just exclude everything for that library\nthe ones you define in your own project take precedence, I think\ne.g. if your main project says clojure 1.10, but a lib says clojure 1.9, you will get 1.10\nWhen deps A and B bring along distinct versions of C it's not too hard to exclude C from one or the other or to state a direct dependency on one particular version of C. The problem is, what happens later?! When updating A or B, will you notice the extraordinary measures, back them out, and reintroduce only if necessary? Or will your project stay forever pinned to C-version-1 long after A and B have moved on to C-version-6?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "374",
    "text": "A deps-resolver syntax that makes clear both the problem and the solution, and applies the solution only when circumstances match the stated problem, would allow tidier engineering\nyeah it's a fun problem in every ecosystem really\nbtw is there a library to generate a graph of the dependencies (with graphviz) that works?\nvizdeps seems to be the best one but it's not working anymore, and I could not really find one that works apart from that\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "375",
    "text": "Often wondered if (at least on the JVM), it would be possible to isolate all this stuff with some classloader magic. One CL for each dep and a CL graph that mirrored the dependency graph etc. There's a fun project for somebody who gets bored.\n<@Sonny> Maybe boot is already doing this with pods\nOh, I didn't know this. Will investigate. Thanks.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "376",
    "text": "Hi! How can you match all routes with a specific prefix in Bidi? e.g. match all routes that start with `/app`. So all routes of the form `/app/*/*...`\nnevermind, the answer was `true` (<https://github.com/juxt/bidi/blob/master/README.md#catch-all-routes>)\nI am trying to implement `clojure.lang.ILookup` in a record like this\n```\n(defrecord StaticMapService [m]\n  sim/Service\n  (start_service [this process] this)\n  (finalize_service [this process] this)\n\n  IFn\n  (invoke [_ ident]\n    (get m ident))\n\n  ILookup\n  (valAt [_ k] (get m k))\n  (valAt [_ k not-found] (get m k not-found)))\n```\nand I get a `Duplicate interface name \"clojure/lang/ILookup\" in class file compile__stub/services/entityid_service/StaticMapService` error\n\ncan't for the life of me see what I am doing wrong\n\nAny suggestions?\nmy guess: defrecord already impls that interface. so you have to use the lower-level `deftype` or such\n\nRecords already implement ILookup\nah of course\nIf you want custom lookup behavior you need to drop down to deftype\noh so I can just merge upon `start_service`\nthankyou\nYes, should be able to\nThanks very much\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "377",
    "text": "Is there a nice clojure lib to go back and forth between UUIDs and base62-encoded (or similar) UUIDs? (to put in URLs)\nThere\u2019s the built-in murmurhash (<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Murmur3.java>) - not sure if it would fit the requirements\nI would consider that an implementation detail of Clojure and not something to rely on calling into\nah - good to know!\ni have something not quite understood while reading `Clojure Programming` (it's really a great book)\nit explain one of the usage of `recur` is when performing mathematical operation.\n&gt; In addition, because it allows you to work with numerics without the overhead of boxed representations, ...\n\nwhat _overhead of boxed representations_ means?\n<http://insideclojure.org/2014/12/15/warn-on-boxed/>\nah, it was a java stuff\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "378",
    "text": "Hey guys!\nIn clojure jdbc, I am trying to understand `:return-keys` How can I get only `[{:a \u2026 :b ...} ...]` returned?:\n```\n(db-do-prepared-return-keys\n  db\n  (into statement updates)\n  {:multi? true\n   :return-keys {:columns [:a :b]}})\n```\n`:return-keys [:a :b]` didn\u2019t work for me either\nif I recall the behavior of return-keys is highly database dependent\njust checking, this is clojure.java.jdbc not clojure.jdbc right? - the name of the latter makes this unfortunately ambiguous\n(in fact I think the naming is downright hostile)\nI don't think :return-keys is actually an option you can set on db-do-prepared-return-keys\nit always returns keys\nyes clojure.java.jdbc\nsorry\nok\ndb-do-prepared-return-keys calls prepare-statement with return-keys set to the boolean true, regardless of any options passed in\nyou can change that by calling prepare-statement yourself and passing that in\nthe prepare-statement docstring has a blurb about the behavior being driver dependent\nok, thanks\nnp - I don't expect most people to know clojure.jdbc exists (I certainly don't recommend using it) - just checking in case there's been miscommunication ;D\nok, I can do `:row-fn #(select-keys % [:a :b])` though\ninteresting\n<@Hugh> It looks like you only want to select specific columns. In that case you should do that in your SQL statement (instead of `SELECT * FROM` do `SELECT a,b FROM ...`). The purpose of :return-keys is to get keys generated by inserts from the DB.\n<@Henry> my statement is an `UPDATE` one though\n<@Hugh> `:return-keys` can accept a vector of column names on some (but not all) databases. You should not use `db-do-prepared-return-keys` really -- it's very low-level (and, I think, assumes you already have a `PreparedStatement` -- where you would have set those options _prior_ to calling it!).\n`insert!` and `execute!` should accept `:return-keys` with a vector (if your DB allows it).\nAlso, there's always <#C1Q164V29|sql> for deeper `clojure.java.jdbc` questions (I'm more likely to see it there).\nok changing channel\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "379",
    "text": "<@Matha> I use a very nice library by <@Phebe> that produces compact 26-char UUIDs: <https://github.com/tonsky/compact-uuids>\nah brilliant, ty!\ni thought i remembered ghadi making or showing off someone else's uuid -&gt; words library? does that ring a bell with anyone\nill post a gist of that, <https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki> is the spec\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "380",
    "text": "If I wanted to hook into an existing protocol on a built-in type to provide some additional functionality, is there a better way than wrapping the protocol's method I want to extend?\nwell, there are no protocols or methods there\n(there are protocols and methods in the implementation of the object passed to swap!, and swap! itself is an object extending IFn but I don't think that's what you mean)\nbut if you mean generally, you want to do an AOP style wrapping of an existing function, yeah that's what it typically looks like\nthough idiomatically `wrap-foo` means \"hand this thing a function, it returns a new one\", which isn't your semantics here, but that's a naming issue\npoor choice of nomenclature on my part... I basically just mean if I have a type that implements a protocol, and I want to do something extra with one or all of the functions implementing the protocol on that type, is that the best way\nyeah i named it `wrap` but it's more a passthrough method, agree on the naming\nI don\u2019t think protocols have anything to do with your question?\n<@Arnoldo> once again that's not a method\nmethod and function aren't interchangeable in Clojure, they mean specific things and we use both\ni didn't literally mean method, sorry... \"passthrough methods\" is just  naming convention for functions (or methods in other languages) that do nothing but delegate to another function\nsure, most AOP style wrappers will take the original function and then use apply with a variable arg list like in your code\nmore commonly the function itself is passed as one of the args, which makes the wrapper more reusable (one reason functions are more flexible than methods)\n<@Arnoldo> this is also visible in the signature of `swap!` itself, and `alter-var-root` - the function signatures make it easy to pass in a function that exists already, and return an \"enhanced\" version\nI noticed that actually...\noh, and I don't know why `a` is in your function signature there - it's valid to call swap! with a single arg function, and your definition makes that impossible\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "381",
    "text": "Hi! Is there a clever way to convert this `{:sku [111111111 22222222], :storeId 88888888}` to this `{:sku 111111111 :storeId 88888888}, {:sku 22222222 :storeId 88888888}`?\ndo it the simple way with mapcat\nor map\nI am not sure about your expected result type. Perhaps you can use ((fn [m] (map #(assoc m :sku %1) (:sku m))) {:sku [111111111 22222222], :storeId 88888888}).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "382",
    "text": "((fn [m] (map #(hash-map :sku %1 :storeId %2)\n               (:sku m) (repeat (:storeId m))))\n  {:sku [111111111 22222222], :storeId 88888888})\n<@Jasmine> Stepped away for a minute... you're right I guess the question is less about protocols and more about conrete implementations.  Maybe an example would be better than me fumbling around with incorrect terminology:\n\nIf I have a single-function protocol implemented concretely by several different objects, and I want to inject some minor changes to one of the implementations (and don't have access to the code to modify it directly), is wrapping the way i've described generally the best way to go about that?  From an OO perspective, I would just subclass and then override the method of interest, do whatever extra stuff I needed to do, and then call the parent's overriden method from the child.\nagain, I don\u2019t think the fact that this is a protocol function makes any difference\nif there is a function, and you want stuff to happen before that call, wrap it in another function\nClojure intentionally abstracts invocation over functions, multimethods, protocol methods, macros (with asterisks), collections that are invokable, etc so that callers don\u2019t know or care\nin general in the core team we take it as a rule of thumb these days to wrap all protocol function invocations in an outer function that gives you a hook to handle special cases\nfor example, clojure.datafy/datafy is a wrapper function that calls clojure.core.protocols/datafy\nprotocols are best at the bottom, not at the top\nOK thanks for the clarification.\nA general version (couldn't think of a good name for the function, gave it my best shot)\n(defn explode-key [m explode-key anchor-key]\n  (reduce #(conj %1 {explode-key %2 anchor-key (get m anchor-key)})\n          []\n          (get m explode-key)))\n\n(explode-key {:sku [111111111 22222222], :storeId 88888888} :sku :storeId)\nif you want something that swaps atoms differently, you can wrap swap! to get a new function, if you want a new thing that swaps differently than an atom you can implement IAtom, and that implementation could even be done compositionally by allocating and using an atom internally\nbut good usable clojure code tends to wrap functions when possible, rather than extending protocols\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "383",
    "text": "```\n  (defn add-store-id-to-skus [{:keys [sku storeId]}]\n    (map #(hash-map :sku %, :storeId storeId) sku))\n```\n<@Jasmine>, why do you specifically call out macros with asterisks? I thought the asterisk was just a way to name a variant of a function, like X and X prime, without any conventional meaning. But what you said makes me think there is a convention.\nOh, maybe you meant with exceptions.\nYes, I just meant there were exceptions in the case of macros as you can\u2019t use them as higher order functions\nSo the abstraction leaks\nif I don't use `(wrap-defaults site-defaults)` it doesn't throw this error\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "384",
    "text": "None\nonly when want to lein uberjar, with figwheel it works\nBase on that stack trace <@Gemma> it sounds like you're putting something invalid in the cookie \"scope\"?\nI deleted all the wrappers, where am I putting something in a cookie other than there?\nand why only with `wrap-defaults`?\n`wrap-defaults` adds a bunch of logic, and checks, around various parts of the Ring request/response so you wouldn't get the exception without it because not much is checked.\nWithout seeing all your code it's hard to say what the problem is, but that error suggests that it thinks you are putting \"bad attributes\" into the `:cookies` key of the Ring request/response...\nNone\nI also use sente, can it be the problem?\nand why is this specific too compiling? with lein figwheel works well\nI can show all my code, but it is a pretty big project, I just wanted to put it up on the server\nI'd be surprised if Sente was incompatible with Ring defaults...\nI would add some `println` debugging to see what the Ring request/response looks like and see if you can figure out what's the various submaps...\nNone\nI don't even know how that \"_ga\" gets there, I dont have google analytics, I also remove google maps too\noh, it was in cache, same error, nothing in :cookies\nNone\nwell, it was a dependency problem\n:exclusions [ring/ring-core] solved it\n`[ring-transit-middleware \"0.1.3\" :exclusions [ring/ring-core]]`\nthank you anyway, I never tried printing in a wrapper before, the more you know... :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "385",
    "text": "I would like to use `tap&gt;` to debug. But since `tap&gt;` retrns `true`/`false` and not the provided parameter, this is not trivial. What would be an elegant statement, which calls `tap&gt;` whith my statement `(+ 1 2)` and then returns the value of my statement?\nLooking for something shorter then `(let [result (+ 1 2)] (tap&gt; result) result)`\n<@Jalisa> `(doto (+ 1 2) tap&gt;)`\nI usually define something like `(defn spy&gt; [x] (doto x tap&gt;))`\nHaving tap&gt; return the val is a pretty good idea - if you write up a CLJ jira for it, that would remind me to talk to Rich about it\nOr adding spy&gt; or something\nthx!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "386",
    "text": "None\ncode above, error below\nany workaround?\ngot it `(ns-unmap *ns* 'Compiler)`\nI\u2019m trying to write a macro that will allow me to def a var with certain metadata attached. Using the reader macro in the middle of the macro doesn\u2019t work!\nthat\u2019s true. I believe you can use `alter-meta!`\n<@Meagan> thanks!\ngot it working! my motivation for this is to def a function in a namespace and preserve the docstring and arglists of a function from another namespace:\n```\n(defmacro def-with-doc [nom var-sym]\n  (let [doc      (-&gt; var-sym resolve meta :doc)\n        arglists (-&gt; var-sym resolve meta :arglists)]\n    `(do\n       ~(if doc\n          `(def ~nom ~doc ~(-&gt; var-sym resolve deref))\n          `(def ~nom ~(-&gt; var-sym resolve deref)))\n       ~(when arglists\n          `(alter-meta! (var ~nom) assoc :arglists (quote ~arglists))))))\n\n(def-with-doc inspect ins/inspect)\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "387",
    "text": "this library has `import-vars` that does a similar thing, it keeps docstrings and works for fuctions and macros <https://github.com/ztellman/potemkin>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "388",
    "text": "Why not `assoc :doc` in the way you handle `:arglists`, then you don't need the `if` special case.\nYou can avoid the conditionals altogther, like this ```\n(defmacro def-with-doc [nom var-sym]\n  `(do\n    (def ~nom ~(-&gt; var-sym resolve deref))\n    (alter-meta! (var ~nom) merge '~(-&gt; var-sym resolve meta (select-keys [:doc :arglists])))))\n```\nIf you want that to work for macros too, add `:macro` to the keys in the `select-keys` call.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "389",
    "text": "You know what might be nice? An thread macro that can optionally escape forms, like `(-&gt; n dec #esc #(- 9 % 1) inc)`\nsuch that, instead of the value being threaded into the beginning or end of the anonymous function, the fn is allowed to convert itself into its evaluated form, and the thread sees it as a one arg fn.\nWhat would be an ideal notation for that thread escaping?\nWhy wouldn't you just use `as-&gt;` for that? `(-&gt; n dec (as-&gt; n (- 9 n 1)) inc)`\nCause then I could just use `-&gt;` for everything, and escape optionally\nSeems to me that `as-&gt;` _is_ the \"escape\" function...\n`(-&gt; n dec (as-&gt; % (- 9 % 1)) inc)` if you prefer `%` for the argument name.\n`(-&gt; n dec #esc   #(- 9 % 1)  inc)` it's not all that different -- and it's built-in, no language extensions needed\n`(-&gt; n dec #~(- 9 % 1) inc)` that might look prettier... and I wouldn't have to switch between two different thread macro contexts\nor `(-&gt; n dec #~#(- 9 % 1) inc)`\nMeh... you've saving so few keystrokes, and introducing non-standard syntax... I see no benefit.\nyou could even switch some assoc's cleaner `(-&gt; n (- 3) dec #~#(assoc state :n %) keys)`\n```\n(-&gt; n (- 3) dec (-&gt;&gt; (assoc state :n)) keys)\n(-&gt; n (- 3) dec (as-&gt; % (assoc state :n %)) keys)\n(-&gt; n (- 3) dec #~#(assoc state :n %) keys) ; more cryptic and only one character shorter?\n```\nYeah, I use multiple thread macros some times\nI hear you, I'm not completely sold on it either... I'd have to kick the tires on it some more.\nAnd I'm not saying add a reader macro for `#~` language wide. Just add another thread macro that detects it, like `-#&gt;` or something\nCode golf. Doesn't make code any clearer.\nDon't get me wrong, I find `(partial f a b)` to be annoyingly long, as well as `(comp f g)`, compared to Haskell's auto-currying and therefore `f a b` and `f . g` but it really isn't worth messing up the language syntax for a few characters of typing...\nIt's not about saving characters. It's about semantic context switching between various thread macro semantics\nWe're going to disagree on that.\nI find this much more readable than your proposal `(-&gt; n (- 3) dec (-&gt;&gt; (assoc state :n)) keys)`\nEspecially when written indented: ```\n(-&gt; n\n    (- 3)\n    dec\n    (-&gt;&gt; (assoc state :n))\n    keys)```\nThere's also a strong argument that such long threads are inherently hard to read already and should be broken into named segments with `let`...\nhmmm. perhaps the idea could be further generalized and simplified... Perhaps `-#&gt;` could just evaluate all anonymous functions defined within the thread first ... then it's just `(-#&gt; n #(- 9 % 3) dec #(assoc state :n %) keys)`\nPersonally, I think that's horribly ugly. It's not even consistent.\nYou're mixing an implicit `-&gt;` with regular anonymous functions :disappointed:\nIt makes sense though... It's a thread macro that auto-evaluates anonymous functions first.\nIt doesn't make sense to me. It's horrible.\nlol\nI know you're just saying that to goad me into writing a library for it... And I'm not gonna do it!\n`(as-&gt; n % (- 9 % 3) (dec %) (assoc state :n %) (keys %))` is also horrible but at least it's consistent (and, hey, already possible/legal in Clojure).\nwell, I guess that `-#&gt;` is pointless, since it's basically just doing function application, just unwinding it, for less parenthesis\nConsistency has had me recently move to wrapping all the forms in `( .. )` in a threaded macro BTW.\nSo I'm more likely to write: ```\n(-&gt; n\n    (- 3)\n    (dec)\n    (-&gt;&gt; (assoc state :n))\n    (keys))```\ninteresting\nFor visual clarity?\nThe more code I maintain, the more consistency and simplicity have come to matter.\nAnd we're at ```Clojure source 280 files 65913 total loc,\nClojure tests 320 files 22004 total loc,\n``` these days.\n(nearly 88k lines... that's quite shocking to me, really, given where we were just a few years ago!)\nYeah, that's pretty awesome\nbut I also hate nesting them. I think it's confusing\nI like wrapping all my threaded forms in parens too\nNo `lein`, no `boot`. Just `clj` and `deps.edn` these days too.\n(and, of course, Clojure 1.10 in production, and testing against 1.11 master :slightly_smiling_face: )\nI guess that last `-#&gt;` I described is really `comp&gt;`. It reverses the order of comp, so it reads like definition order, but allows you to thread in forms in the comp that are not functions.\nLike transducers? :slightly_smiling_face:\nooooh, `transduce-&gt;`\n:rolling_on_the_floor_laughing:\nlol\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "390",
    "text": "things get pretty nasty when i abuse threading macros\nso when i notice I'm Doing It Again i rewrite the whole thing with lets to see which is simpler\nWhen it comes to weird threading macros, this library is funny <https://github.com/rplevy/swiss-arrows>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "391",
    "text": "My issue with using `let`s instead of threading macros is it allows me to write more procedural/pythonic code, instead of finding a functional way to write it\nI\u2019ve been working on a lot of ETL pipelines recently, so extracting my complicated `let` conditionals into functions I can thread has been very helpful in maintaining the functional mindset\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "392",
    "text": "To store clojure data structures in a database (postgresql in my case), would you just store the EDN representation or encode it with transit?\nIf you dont care about querying use something like fressian or nippy\n<@Matha> using transit json-pretty gives you the option to query it in the future if you please.\n<@Sixta> oh I didn\u2019t know that option, thank you\nwhat is the json pretty option?\nWhen I try to require a namespace in the REPL but it fails because of a syntax error in said namespace\u2019s file, how can I reload it after correcting the error? running require again throws a \u201cnamespace not found\u201d error\n<@Matha> guessing you might want to try `(require 'foo :reload)`\n<@Sixta> I tried that, it didn\u2019t work :thinking_face:\n<@Matha> <https://clojuredocs.org/clojure.core/require> see `:reload` and `:reload-all`\nprecise\n&gt; it didn\u2019t work :thinking_face:\n:wink:\n<@Isa> I tried `:reload` but that didn\u2019t work. I\u2019ll try again\nah, mwell\nit threw the same error\nhang on, I\u2019ll reproduce it\nbut normally you use editor shortcuts to do that\nI have probably a silly question:\n```\n(let [foo (my-macro)]\n  ...)\n```\n\nI want `my-macro` to know that it has been bound to the symbol `foo` in this context.\nImpossible, yes?\nyes\n:sob: thought so\nOK, followup: is there _any way_ (hacky or otherwise) to get at the let bindings inside of a function?\nI have a lib where I\u2019d like to provide some report of how it\u2019s used inside of an opaque function\nusing some fancy tricks I can show what was passed in when the library functions were invoked, and the _order_ of invocation, but I\u2019m losing some semantics because there\u2019s no names attached to them\n[ANN] com.cognitect.aws/api-0.8.243  is released: <https://groups.google.com/forum/#!topic/clojure/wzEy8tSSKF0>\n<@Meagan> you can get the line number with `(-&gt; &amp;form meta :line)`\nit would still be hard to know exactly what name it was bound to, but that could be hilariously hacky\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "393",
    "text": "We have done this on a project before.\nI think it's supposed to be read as an n/m dash rather than a hyphen.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "394",
    "text": "you can get the namespace in there too, but yeah :confused:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "395",
    "text": "how can I find the approximate size (bytes of memory) of a piece of Clojure data?\nalternately, what is the approx size of maps and keywords?\n<@Bree> <https://github.com/clojure-goes-fast/clj-memory-meter>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "396",
    "text": "awesome, more than I could have hoped for :slightly_smiling_face:\n:+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "397",
    "text": "There is some \"core utils\" with a `index-by` function, that do `(index-by :id [{:id 1}]) =&gt; {1 {:id 1}}`?? It's almost like group-by, but do not conj on value.\nyes, there is, but often people write it themselves, using `(into {} (map (juxt f identity) coll))`\nThis PR for medley has been open for a while. I like the name `index-by` better. Propose it :wink: <https://github.com/weavejester/medley/pull/28>\n<@Elaine> not exactly but `clojure.set/index`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "398",
    "text": "<https://github.com/vodori/missing> (a lib I maintain) has index-by and indexcat-by and groupcat-by :P\n```user=&gt; (set/index [{:id 1} {:id 2} {:id 1 :x 2}] [:id])\n{{:id 1} #{{:id 1, :x 2} {:id 1}}, {:id 2} #{{:id 2}}}```\n<#C4DLZKR9T|graphql> should be the one i think\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "399",
    "text": "Hello guys!! Do we have a channel for `Lacinia`? I have found one, but it is archived..\nThank you!!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "400",
    "text": "I am using `clojure.edn/read` to read an .edn file which contains `#object[` tags like `#object[java.io.File 0x6ae4aa5 \"hello-world.pdf\"]`\nIdeally I would like to  interpret these as a record, something like  `(-&gt;EdnObject clazzname identityHashCode string-description)`\nat the moment I get an error\n```java.lang.RuntimeException: No reader function for tag object```\nIs the preexisting reader function that I can reuse to do this?\nDo I have to write my own?\nI was hoping to wire in the binding using\n```(binding [clojure.core/*data-readers* (assoc clojure.core/*data-readers*\n                                        'object #'dev/my-special-edn-binding)]```\ndoes that only work for namespaced tags?\noh I see I can just pass in `:readers` in the options to `clojure.edn/read`\nthus\n```(clojure.edn/read {:eof eof-sentinel :readers {'object #'dev/my-special-edn-binding}} r)```\n<http://insideclojure.org/2018/06/21/tagged-literal/>\ntop banana\nthank vlaad; that good to know\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "401",
    "text": "Why is spec imported as `spec.alpha`? Does this notation imply that the interface is liable to change?\nit has alpha in the name because it is alpha, yes\nIt just seems odd to explicitly notate it, since AFAIK breaking changes have happened in Clojure core even when not notated alpha\nvery rarely\ntrying to do better :)\n`(:require [clojure.spec.alpha :as s])` means that when it comes out of alpha you can just update that to `(:require [clojure.spec :as s])` and (hopefully) not having to change your code :slightly_smiling_face:\nspec 2 dev is under way and will likely include some breaking changes\nExcept for those breaking changes :slightly_smiling_face:\nalthough we are trying to minimize those\nWe're very heavy users of spec and I have almost everything running at work on spec2 -- and the code changes weren't too extensive. I'm still working with Alex on a couple of issues tho'... :slightly_smiling_face:\nmore changes to come, although I expect a lot will be additive\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "402",
    "text": "Sounds good - really I was just curious about the choice of notation, I'm not concerned too about having to make small changes to keep using spec :slightly_smiling_face:\nThere was a good thread about the `alpha` naming here <https://clojureverse.org/t/are-clojure-core-alpha-namespaces-chosen-to-avoid-upgrade-conflicts/3722/5> -- relating to Rich's talk about semantic versioning and accretive design...\nThanks for the link <@Celestine>\nStrong adoption of Clojure 1.10 in the State of the (Clojure) Union survey results! Already 54% on 1.10. That's awesome. And only 3% on 1.7 or earlier. Great news for library developers.\nthat's the result of caring about backwards compatibility :ok_hand:\nstable software :heart:\nI was actually disappointed it was so low :)\nagreed, should've been higher\nbut I'm more surprised at 3% on 1.7 or earlier\nin line with prior surveys - generally most people are on the last 2-3 releases\nconversely, people who updated were much more likely to participate in the survey :slightly_smiling_face:\nalways hard to predict the selection bias for respondents\nagreed. really looking forward to the results. i like hearing from fellow clojure users\nI'll throw in another data point: thanks a lot for the tireless great work you and your team put in <@Jasmine>!\nagreed. immutable datastructures, a repl, and an alex. all features i value in Clojure\ntell your friends :)\nI do that too :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "403",
    "text": "is this a pattern that people use?\n\n```\n#(do [:a :vector :or :other :literal])\n```\n\nor do most people opt for specific constructor functions (or `into` etc) ?\ni tend to go with `do` because it's only two characters\nI tend to go with `(fn [] [:a :vector])` or `(constantly [:whatever])`\nthe question pertains specifically to lambdas\ni.e., assume you are using a lambda then ...\nthere are reasons why i don't always use a lambda but if a lambda is available to me, then I do opt for it first.\nwith lambda you mean a function literal?\n`#(vector :a :vector)`\n^^ if you want a vector constructor, use the vector constructor\n<@Clarine> no, i mean the `#( ... )` shorthand syntax for a function literal\nany reason for this preference? performance or aesthetic?\nbikeshedding if you ask me\nI think it is clearest way to say what you are doing here. you are invoking a function to make a vector from some elements\n<@Clarine> yea, probably. was just staring at some code and wondered what other people thought.\njust FYI, things that start with `#` are referred to as \"literals\"\nwhereas #(do [\u2026]) is fewer characters but much weirder imo\nfyi... `{:a :b}` is a literal. `[:a :b]` is also a literal.\nas are: `9`, `:a`, `\"blah\"` etc etc\n<@Kirstin> #(\u2026) is a function literal\nOK, sorry; I'm just basing this off of the Clojure docs: <https://clojure.org/guides/higher_order_functions#_function_literals>\n<@Clarine> ah, got it.\nwhat would you call `(fn [] ...)` then?\njust \"anonymous function\" ?\nyes\n[although technically it can be named too :)]\n`(fn the-name [] ...)`\nyeah. or a \"form\" maybe?\nfunction value?\njust function maybe. don\u2019t know\nlol, yea, i tend to prefer fewer characters unless it's really confusing\nthe function\u2019s name is only known to itself, so it\u2019s still anonymous to the outside\nanother argument for `do` is that it is possible to return any literal that way, not just the ones which happen to have a nice constructor (like say `vector` or `hash-map`).\nI am seeing the weirdest thing:  (symbol x) returning nil, when we are passing it a valid string without a slash, and both `type` and `class` report java.lang.String.\nI don't see how this can happen, though.  Has anyone seen this?\nnot possible, so it is something else\nI agree that it is not possible, however, I am repeatedly demonstrating it.\nI doubt it\nheh.\nare you literally doing `(doto (symbol x) (-&gt; class prn))` ?\ndon\u2019t all of the literals have a constructor though?\nI'm going to see how far I can whittle down the example, but this is the current state: <https://gist.github.com/eraserhd/f4f8f52fb43a2e4a5b6fc740a1101c02>\nyou are shadowing clojure.core/symbol with the argument name\nIt's OK everyone.  Compiler's not broken\n<@Rosaline> thanks. :P\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "404",
    "text": "hahaha!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "405",
    "text": "So I'm trying to generate longs with `clojure.spec.gen.alpha/large-generator`. This works fine when using `generate`, but with `clojure.spec.gen.alpha/sample` it generates extremely low values (+-60 from 0). I need it to generate pretty much the full range of longs. Any idea why it has this behavior?\nit generates larger integers with a larger sample size\nWhat I think it is trying to do is try the \u201cedge\u201d cases first, so zero, minus one, plus one, etc. Before actually switching to completely random longs\nHmm, seems your right. The numbers get more random as I get more. Anyway I can force it to be random from the beginning?\nI am not sure, you can always define your own generator tho\nAlright, thanks!\nMay I ask, why don\u2019t you just increase the sample size?\nIs there really no value in testing small values for you\nYeah, I'm testing dates. So one low value is fine (Jan 1, 1970), but then I want to start seeing other values. Having to scroll past the first 10 values in the web app is just wasting space, but it may be the easiest solution. Or I guess I could drop the first 10 or so values\nWell - from a formal background - I understand why gen is doing this, bugs usually occur on boundaries. So testing for `0`, `-1`, `1` etc. is usually more valuable than testing complete random values. Further reading: boundary analysis\nCool. Thanks for the input. I appreciate the help\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "406",
    "text": "that\u2019s not actually why - gen is designed to \u201cgrow\u201d more \u201ccomplex\u201d values as it generates more samples, then has support for \u201cshrinking\u201d a complex test case into a simpler one\n<https://github.com/clojure/test.check/blob/master/doc/growth-and-shrinking.md>\nyou can use `large-integer*` to generate longs with uniform distribution (note: spec\u2019s `int-in` uses this so that\u2019s another path)\nwell, actually those might grow too\nmy memory was faulty\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "407",
    "text": "I am eager to move to it, but am being held back by CIDER not coping with the change in error format. Normally I adopt much faster. :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "408",
    "text": "Hah, interesting!\nI stand corrected ^^\nWhat strategies, if any, do people use to decouple sub systems within an application. For example decoupling a database access layer. I've been using protocols to group common functions and passing the instances down into subsystems using `stuartsierra/component`. I can also see people using `weavejester/integrant` and mapping single functions. I can also see directly coupling/referencing subsystems and segregating them in separate namespaces.\nI have a project where starting a REPL with Java 1.8.0_192 takes 11 seconds and with Java 1.8.0_201 takes 44 seconds. I'm wondering if this is a known issue or something idiosyncratic to my project.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "409",
    "text": "Looks like the Clojure portion ^ is easy to repro with a fresh React Native project; will check in <#C0E1SN0NM|cljsrn>\nProtocols are a must for (clean) testability IMO. Also nice being able to change libraries in a future (e.g. Bidi -&gt; ataraxy)\n\nAt work we use separate directories for protocols and impls. At first I agreed but I came to realise this creates an awkward indirection.\n\n90% of times there's just 1 relevant implementation for a protocol. So one's IDE's jump-to-def will take you to the protocol ns, not the impl ns. That's the awkward point, and a good reason to place protocols close to impls\n\nbad:\n\n```\nprotocols/\n foo.clj\n ...\nimpls/\n foo.clj\n  ...\n```\n\nbetter:\n\n```\ncomponents/\n  foo/\n    protocol.clj\n    impl.clj\n  bar/\n  baz/\n  ...\n```\n\nThis becomes evident as the app size scales\n\nI wouln't create proto and impl in the same ns, it forces you to choose different fn names to avoid clashes. Better to have it uniform\nAs for Component vs Int, Int has \"suspend\" capabilities which I believe can make the restart process more graceful and/or performant. Haven't tried it though.\n\n<https://github.com/weavejester/suspendable> might work as well for Component\n\nI like Component. With <https://github.com/stuartsierra/component/pull/62> now it's as lightweight and data-driven as Integrant (or even more so)\n<@Mariela> Thanks for your input. It's great to see how other people solve these problems. We are definitely on the same page with this. When using protocols, I've also grouped up the implementation with the protocol in the same directory. I use cursive so when I jump-to-def to the protocol, I can do another jump-to-def on the protocol name which takes me directly to the implementation. So using that it wouldn't matter if they're in the same directory or not. However, I do prefer them in the same directory.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "410",
    "text": "Answering to your question... at least 1 protocol (and 1 component) per sub-system. Each subsystem only talks to each other via protos\nHello\nLooking for jdbc that uses threadpool\n```\n$ clj\nClojure 1.10.0\nuser=&gt; (def m {:a 1 :b 2})\n#'user/m\nuser=&gt; (defn myfn [{:keys [a b]}] [a b])\n#'user/myfn\nuser=&gt; (myfn m)\n[1 2]\n```\nSorry, I meant: `(defn myfn [&amp; {:keys [a b]}] ...)`\nthen you probably need `mapply`\nit\u2019s a function that\u2019s not in clojure, but in several helper libs:\n```\n(defn mapply\n  \"Applies a function f to the argument list formed by concatenating\n  everything but the last element of args with the last element of\n  args.  This is useful for applying a function that accepts keyword\n  arguments to a map.\"\n  [f &amp; args]\n  (apply f (apply concat (butlast args) (last args))))\n```\nnoticed functions like `assoc` and `contains?` operate on vectors (by position), but `dissoc` throws an error. Seems like this should work as a complement to the aforementioned functions - no? Or is this an intentional omission for performance reasons?\nremoving something from the middle of a vector isn't a simple operation, so it isn't built in\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "411",
    "text": "Hi all, I'm new to Clojure I'm new to Java. :slightly_smiling_face: Can anyone point me to the right direction? I'm trying to serialize an <https://github.com/thi-ng/ndarray>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "412",
    "text": "How do I  `apply` a function `(defn myfn [&amp; {:keys [a b]}] ...)` to a map `m` (`{:a 1 :b 2}`)?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "413",
    "text": "what would `(dissoc [:a :b] 0)` mean?\nremove item at position 0?\nalso if you find yourself wanting to do that, you should probably use a different datatype (eg. finger tree)\nthe result would have an item at position 0\n`(contains? (dissoc [:a :b] 0) 0)` would be true\ngood points :slightly_smiling_face:\nalong with the non-constant performance of dissoc there\ni hadn't realized that until you asked it so i like your question :slightly_smiling_face:\nyeah I figured the performance would make it bad, just curious on the reasoning.- thx\nyou have keep-indexed tho `(keep-indexed (fn [k v] (when (not= k 0) v)) [:a :b :c :d])`\nsee also the inability to check something sequential for a specific value (what people often naively think contains? would do) - it's possible, but there's no simple built in because doing so often indicates you should be using a different datatype\nfor what it\u2019s worth I was building a custom version of `assoc` that wouldn\u2019t add nil values in order to reduce gc overhead (relative to pruning). it works as I expected, but in doing so I stumbled upon the issue. edit: note that I\u2019m not even using vectors, but I was attempting to achieve feature parity\u2026 so it was really just a question.\n<@Dann> wouldn't something like `some` count as a built in for that?\nso it\u2019s not a data type issue\ni think he means without doing a linear scan\n<@Kirsten> yes we have functions that do linear scans of collections, but nothing that specifically checks membership of a given value\ngot it\ni was using ffmpeg on a mac, and calling it with processBuilder, however I'm running into issues getting any output at all while using CMD  instead of bash\nI tried loading the file as a media object using ffmpeg, but ffmpeg doesn't support MOV files .\n<@Fairy> you should be able to pipe output between processes via InputStream and OutputStream, if all the executables are present\njava does have multimedia libraries, that's the next thing I would look for\neven if there was a clojure binding, using the lib via interop is likely a better choice\nright! <https://gist.github.com/jdkealy/65edec6c28a89f378c27803fb78be6d8> so this calls bash, would you know how to do this in windows ? I know you can call bash via CMD, eg. \"CMD\" \"C/\" \"bash\" but the stream just returns \"\"\nNone\nor... if slurp is returning \"\", is there a silent error somewhere?\ncould stuff be going to stderr that's not showing up? I remember from some old C#/.NET work there were some `Process` options for redirecting stderr to stdout, not sure if that'd be exposed via Java classes though\nthis is what I was thinking of <https://docs.microsoft.com/en-us/dotnet/api/system.diagnostics.processstartinfo.redirectstandarderror?view=netframework-4.7.2>\nPerhaps. Set, vector, list &amp; hash-map do. \nYes, that\u2019s right. It allows self-reference. That\u2019s about it. \nsorted-set, sorted-map, queue\nok, queue doesn\u2019t :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "414",
    "text": "Hi, does anyone have recommendations on how to get the length of a video in clojure... Sadly I must use windows.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "415",
    "text": "I would look for a specific library in Java/Clojure before piping stuff to bash/cmd\nProcess allows accessing stderr\n<https://docs.oracle.com/javase/8/docs/api/java/lang/Process.html#getErrorStream-->\nin ProcessBuilder you have the option to join the out/err into one stream also\nbut yeah, def inside any other form is very rarely what you want\nUsing `:extend-via-metadata` and meta to implement protocols made these errors go away for me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "416",
    "text": "ffmpeg writes a lot of things to stderr rather than stdout, afaik <@Fairy>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "417",
    "text": "Confirming isak's comment, I had to combine stderr with stdout, as follows, to get output from the shell command:\n/usr/bin/ffmpeg -i myfile.mpg 2&gt;&amp;1 | grep Duration | cut -d' ' -f4 | cut -d, -f1\nAlso, you should not need to shell out to a cmd.exe or bash shell to run ffmpeg, provided you pass the arguments properly to the process execute command. (much later); I added a comment to the gist as an improved version, to remove cut/split/grep/bash dependencies. (I'm still a Clojure novice, so my code is not well-formatted)\n<@Velia> fyi def inside a function alters a single global value, but it's easy to move those defs into the adjacent let\nI guess I liked def for testing in the repl, but should remember to reformat my code a little after my interactive testing/debugging\nOops, it looks like they fixed that issue and I somehow missed it. I thought I was tracking the issue on GitHub. It\u2019s been a busy few months! I am trying again to move to 1.10.\nI use Component + tools.namespace.repl and very occasionally I encounter these spurious errors:\n\n`java.lang.IllegalArgumentException: No implementation of method: xxx of protocol: #'yyy found for class: zzz`\n\nThe code is certainly right, it's simply a code loading issue\n\nCan one fix these without a JVM restart?\n<@Jasmine> looks like <http://insideclojure.org|insideclojure.org> is down\nyup it works now\nmust've been a blip\nIt\u2019s github pages, so not much I can do if it is\n<@Jasmine> Do you use a SSG? If so, which one?\nwhat\u2019s an SSG?\n(so I guess no) :)\nStatic Site Generator, like Jykell or Hugo\noh, it\u2019s jekyll, just path of least resistance\nif I wanted to spend time on it I\u2019d use a Clojure one like stasis (Strange Loop site is done with that) or Cryogen\nfor something like this, Cryogen is probably ideal\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "418",
    "text": "<@Roslyn> hmm... trouble might arise when most of the app reloads but the the via-meta protocol implementations do not, and therefore get out of synch.\nworks for me\ncool, thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "419",
    "text": "How to fill a vector like `[:a :b :c]` with seperators `:sep` to get this: `[:a :sep :b :sep :c]`?\n```\n(def v [:a :b :c])\n(vec (interpose :sep v))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "420",
    "text": "Hello all, how do I handle with `java.util.Collections`? Is there any way to convert it to Clojure collection?\nIf you have an arbitrarily nested java.util.Collections object, then you would need some kind of function that recursively 'walks' through it, converting each thing into a corresponding Clojure type.  If you have a java.util.Set, and you know its elements are things like integers, strings, etc., then you should be able to simply call `(set my-java-set)`, which will return a Clojure set.\nI would bet that someone has written the recursive version of that for many kinds of java.util.Collections, but I don't know what library it might exist in.\nIt\u00b4s kind of `Enumeration&lt;String&gt;`\nIf you know it contains String elements, then `(set my-java-collection)` should do the job just fine.\nunless you want a different kind of result, e.g. if you want a vector, then `(vec my-java-collection)`\nlook the solution -&gt; `(java.util.Collections/list my-java-collection)`\nit response as an array in Clojure\nthank you for the help\nYou may want to assign the return value of that to a variable or let-bound symbol, and print out the value of `(type val)` to see if it really is a Clojure vector, if you truly _need_ an immutable Clojure vector, and not a Java mutable type.  Java mutable types can be printed at a REPL in a way that looks the same as Clojure collections.\n```user=&gt; (java.util.ArrayList. [1 2 3])\n[1 2 3]\nuser=&gt; (type (java.util.ArrayList. [1 2 3]))\njava.util.ArrayList\n```\nI see you point\njava.util.Collections/list can convert the Enumeration type to a Java list, and from there you can call Clojure's `set` or `vec` on it to create an immutable value.\nI was also just reminded while searching through the Clojure source code for \"Enumeration\" of the function `enumeration-seq`, which takes a Java Enumeration, and returns a Clojure sequence.\nUsing that instead of java.util.Collections/list might be a little more efficient, since it might not allocate as much memory\nIt worked with `enumeration-seq` too. That helped me a lot. Many thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "421",
    "text": "Some code golf \u2014 is there something that can simplify this a little bit? ```\n  (let [results [{:_id 1} {:_id 2} {:_id 5}]\n        lookup {1 \"a\", 2 \"b\", 3 \"c\"}]\n    (map #(assoc % :val (get lookup (:_id %) \"default\")) results))\n;; =&gt; ({:_id 1, :val \"a\"} {:_id 2, :val \"b\"} {:_id 5, :val \"default\"})```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "422",
    "text": "If you didn\u2019t need a default you could have used\n```\ncljs.user=&gt; (clojure.walk/postwalk-replace lookup results)\n[{:_id \"a\"} {:_id \"b\"} {:_id 5}]\n```\nOh wait you could not :wink:\nYou also add `:val`\nTo me it looks perfectly idiomatic as is\nCan also use `for`:\n\n```\n(for [{:keys [_id] :as e} results\n      :let [val (get lookup _id \"default\")]]\n  (assoc e :val val))\n\n;; =&gt; ({:_id 1, :val \"a\"} {:_id 2, :val \"b\"} {:_id 5, :val \"default\"})\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "423",
    "text": "I have posted the same question in the cljs channel, but am also posting here as the behavior is the same in clj.\n\nI am exploring `extend-via-metadata` and I am getting this behavior:\n\n```\n(defprotocol Component\n  :extend-via-metadata true\n  (start [component]))\n\n(def component (with-meta {:name \"db\"} {`start (constantly \"started\")\n                                        `clojure.core.protocols/datafy (fn [x] (:name x))}))\n\n(start component)\n;; =&gt; started\n(datafy component)\n;; =&gt; db\n\n(satisfies? clojure.core.protocols/Datafiable component)\n;; =&gt; true\n(satisfies? Component component)\n;; =&gt; false\n```\n\nSo when extending with `datafy` protocol i get true when checking if the data `satisfies?` the protocol.\nHowever with a custom protocol with `:extend-via-metadata true` I am getting `false` in the `satisfies?` check.\n\nIs there something I am missing in the implementation?\nthanks\n<@Ok> `satisfies?` doesn't work via metadata -- what you're seeing with `(satisfies? clojure.core.protocols/Datafiable component)` is the _implementation_ of that protocol for `Object`, and `component` is an instance of `Object`.\nThanks <@Celestine>, makes sense now.\nIt took me a bit of digging in the REPL to figure out what was going on!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "424",
    "text": "is there a more idiomatic way to spread a map into map varargs? given `(defn foo [a b &amp; {:as x}])`\n`(-&gt;&gt; {:a 1} (apply concat) (apply foo 1 2))` is hideous\n`(defn bridge [a b x] (apply foo a b (interleave (keys x) (vals x)))` ?\nbasically make a more graceful api? or is it a lot of functions so covering them doesn't really work?\nyes, it's hideous, I think apply concat is nicer than interleave, and my solution is to never use `&amp; {}`\n(if I can help it)\nalso I think `(apply foo 1 2 (apply concat x))` is nicer than the arrow form, but that's subjective of course\nagree on the never use `&amp; {}`. I think interleave would be more meaningful to me when i see this in the wild 3 months after writing it. also agree don't thread but context of actual use dictates that \u00af\\_(\u30c4)_/\u00af\ni just run into apis out of my control frequently enough to be irritated by it.  wasnt sure if there was an `applym` or something cute to be done with the core libs\nno, there's nothing built in\n<@Becki> perhaps as a compromise `(def unwrap-map (partial apply concat))`\nput it on clojars! #shipit\n:D\nill import it right below leftpad :wink:\n<@Scarlett> quoting the bot on <#C03S1KBA2|clojure> irc: ```\nYou have to do something like\n(defn mapply [f &amp; args] (apply f (apply concat (butlast args) (last args))))\n, which just goes to show why unrolled keyword args are a bad idea```\ni just don't know what you gain either. I know common lisp used that style a lot but with map syntax so convenient it just seems worse in every regard\nthat's how the map gets flattened into a sequence. args = `(a b {:x 3})` `(concat (a b) {:x 3})` =&gt; `(a b :x 3)`\nyea i agree the syntax doesnt help enough, it just gets in the way of composition\nthat's why i think the interleave makes a lot of semantic sense\n`(apply f (concat (butlast args) (interleave (keys (last arg)) (vals (last arg)))`\nmakes it clear to me that the map gets turned into key value key value ...\nbut it is for sure more work\nto me it's intuitive that concat on a map would turn it into a list of keys followed by their values\nincase anyone else code golfing wants a macro: ```(defmacro applym [f &amp; args] `(apply ~f ~@(butlast args) (apply concat ~(last args))))```\nwhy not a function?\nsaving on allocations?\npresumably\nthis doesn't work if the map isn't a literal, and a big reason to want something like applym is to reuse a default map for the args\nthat would preserve a symbol\nit works?\n```\n(let [thing {:a 1 :b 2}]\n  (applym f 3 thing))\n{:b 2, :a 1}\n```\n```(macroexpand '(applym foo 1 2 k))\n=&gt; (clojure.core/apply foo 1 2 (clojure.core/apply clojure.core/concat k))```\n```\n(defn f [a &amp; {:as x}]\n        (prn x))\n```\nI use kwargs and &amp; {} all the time, yet never have this issue. can someone back up and tell me a real scenario where you\u2019re doing this?\nNone\npresumably programatically creating the args and then having to use a function that uses `&amp; {}`\nI guess I tend to use them on the outer layer where it\u2019s people, not programs\nyea specifically im progmatically calling into an api with kwargs\nand you prefer `(invoke :arg1 :a :arg2 :b)` instead of `(invoke {:arg1 :a :arg2 :b})` for humans?\nI do\nwe\u2019ve actually contemplated a small change that would make either automatically work in Clojure\nif you use &amp; {} in the args\nthat might be kinda nice\nthat would be cool\nit doesn\u2019t invalidate any existing code, just a tweak in destructuring\nwell, maybe it\u2019s in the compiler, I don\u2019t remember\npossibly 1.11 feature :) but don\u2019t quote me on it\n`(defn a [b &amp; [{:keys [c d]}]])` would be unaffected I guess\ncorrect, effect is allowing something new in the invocation\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "425",
    "text": "why `(butlast args) (last args)`? What does that get you?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "426",
    "text": "Anyone have any recommendations: I'd love something to \"organize\" my requires and imports. Remove unused, and alphabetize would be nice\nI use Cursive, but I don't think it does this\nI installed a plugin for line sorting and ended up putting a newline between `(:require` and the first actual require\nneedless to say, that makes that I now have about three different ways of requiring things\nInteresting. What's the plugin?\nI recall that there is also a leiningen plugin that can complain/fix requires\nbut its name left me\nslamhound? is that still around?\nI think eastwood will do the job at complaining at me, but doesn't fix\nyeah there is a fixing tool, but remembering names is really challenging\n<https://github.com/technomancy/slamhound>\nThat's a great name, haha\n<https://github.com/gfredericks/how-to-ns>\nsuch a googleable name that I ended up searching for my coworkers slack message :\u2019)\nHa, yes too generic\nthanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "427",
    "text": "There are some issues with slamhound and Clojure v 1.10 fwiw\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "428",
    "text": "Is there a way to define in the environment where deps.edn is located? Using nextflow and the workaround I'm using is to cp deps.edn to current directory, but it's messy/lazy.\nno, not currently\nthanks, worth checking\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "429",
    "text": "this might be a silly spec question, but is there a way to use a def'ed collection of keywords with, say, the `:opt` group in `s/keys`? i'm trying to define a map with a large list of optional keywords defined elsewhere:\n```\n(def some-test-keys [:test/a :test/b :test/c ... +100 more])\n(s/def :test/labels (s/keys :opt some-test-keys))\nCompilerException java.lang.IllegalArgumentException: Don't know how to create ISeq from: clojure.lang.Symbol\n```\n<@Johnathon> Not with spec as it stands, but programmatic specs are coming in the next version (aka spec2).\nWhat you _can_ do is define the spec with the literal set of keys and then use `s/form` to get back the form of the spec and take it apart to get the list of keys in it. In other words, let the spec by the \"System of Record\" and extra your \"collection of keywords\" from it.\n```user=&gt; (s/def ::my-spec (s/keys :opt [::key1 ::key2 ::key3]))\n:user/my-spec\nuser=&gt; (let [[_ _ ks] (s/form (s/get-spec ::my-spec))] (println ks))\n[:user/key1 :user/key2 :user/key3]\nnil\nuser=&gt; \n``` You can get fancier and check what you get back from `s/form` actually has `clojure.spec.alpha/keys` as the first element and `:opt` as the second element and/or handle `:req`/`:req-un`/etc as well.\nHaving code executing when a namespace is _loaded_ is generally a bad idea (since it will run if you compile the ns, for example when building an uberjar with Leiningen or Boot).\nIf this is for dev work, you're probably better off putting it inside a `(comment ..)` form and manually evaluating it when you need to <@Tamie>\n<@Celestine> thats a great point, thanks sean!  stinky code :wink:\nMany of my source files end with a `(comment ..)` form that contains all sorts of expressions to do dev setup and some testing, including `require`s that are only needed for dev work, setup for Components, etc.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "430",
    "text": "is there an equivalent to `defonce` like `doonce`  I just want to execute some code only one time, not each time I reload my src file.\nI'm currently doing `defonce ignore (blah....`\nah clever! i did something similar to turn forms back into spec maps. it didn't cross my mind that i could use the same technique -- thanks for the suggestion. <https://github.com/joshkh/specalog/blob/dev/src/specalog/jig.clj#L9>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "431",
    "text": "A bit out of context, but in clojurescript this is normal in order to activate your application.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "432",
    "text": "Hi all!\n\nIs it possible to define mutually recursive functions _with metadata_ in a local scope?\n\nI want to define `f` and `g`, and attach metadata (using `with-meta` or something similar) such that each can see the other's metadata within its body.\n(This has come up while implementing a `fn`-like macro that creates a function and attaches some metadata to it. I'd like these \"fake `fn`s\" to be useable anywhere a real Clojure function can be made, which led me down the road of trying to create a `letfn`-like macro that attached metadata to all the functions declared in the `letfn`. But I ran into the issue of not being able to create a `letfn` that binds metadata to the functions it creates.)\nI guess something like this should work:\n```\n(letfn \n  [(f-thunk [] \n     (with-meta (fn f [] (meta (g-thunk))) {:b 3})) \n   (g-thunk [] \n     (with-meta (fn [] (meta (f-thunk))) {:a 2}))] \n  (let [f (f-thunk) g (g-thunk)] \n    [(f) (g)]))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "433",
    "text": "Apologies if this is noise, but is there any plan to add metadata to EDN?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "434",
    "text": "Ech I always forget this\u2026.\n`(re-matches #\"(?i)&lt;message&gt;(.+)&lt;/message&gt;\" \"&lt;message&gt;foo&lt;/message&gt;baz&lt;message&gt;bar&lt;/message&gt;\")`\nHow to get `foo` and `bar` from here? I am trying half an hour :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "435",
    "text": "Hi there!\n\nIs there anybody, who knows about a problem with `slurp`? I try to fetch some websites, that I can reach via browser, but `slurp`throws an exception:\n\n```(slurp \"<https://www.some.url>\")\n\nFileNotFoundException <https://www.some.url>  sun.net.www.protocol.http.HttpURLConnection.getInputStream0 (HttpURLConnection.java:1836)```\n\nTested the same URL with `curl` and it works fine. Any ideas?\nAny more useful information in the stack?\n```lein version\nLeiningen 2.8.3 on Java 1.8.0_91 Java HotSpot(TM) 64-Bit Server VM```\norg.clojure/clojure \u201c1.9.0\u201d\nhmm, I get the same problem\n`curl -i ...` shows it's speaking HTTP/2, maybe something to do with that?\nTry it at the REPL and you'll see\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "436",
    "text": "<@Isa> re-seq . But the regex is not quite right - the .+ is too greedy and may consume the end tag\nsure, but the question is how right regex look :wink:\n.+?\nThe question makes it less greedy\nnope, it doesn\u2019t help\nDid you try it at the REPL?  I did\noh it works with re-seq\nI am after week 16h work everyday after breaking changes third party system update. My mind is almost turned off :slightly_smiling_face:\nThanks\n<@Isa> another approach:\n\n```\n(require '[hickory.core :as hickory]\n         '[hickory.select :as select])\n\n(def parsed-doc\n  (hickory/as-hickory (hickory/parse \"&lt;message&gt;foo&lt;/message&gt;baz&lt;message&gt;bar&lt;/message&gt;\")))\n\n(mapcat :content (select/select (select/tag :message) parsed-doc))\n;; =&gt; (\"foo\" \"bar\")\n```\nCan it find all &lt;errors&gt;&lt;error&gt;&lt;messsage&gt;\u2026..&lt;/message&gt;\u2026 in string? Because in reality it is very complex XML structure.\nand this message can be everywhere\nso not sure it will be more efficient\nOf course\nIt is bad practice to use regex for parsing XML :wink: See this famous answer: <https://stackoverflow.com/a/1732454/2609980>\nthanks\nSure it is, but in many cases it just work as simple 1 line solution\nBut I agree\nSometimes it can be easier\nAlright let me know how it goes\n<https://github.com/davidsantiago/hickory#selectors>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "437",
    "text": ":man-shrugging: \nThat's why I'm asking \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "438",
    "text": "`definline` is still labeled as experimental in the docs, but it seems hardly ever used. what is its official status ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "439",
    "text": "Would like to deemphasize - primarily used in Clojures implementation\nso better not rely on it ?\nNo\nUnfortunately I don\u2019t have time to try it now. But I wrote it in my notes to try later :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "440",
    "text": "I have a collection `c` which can be a list, a vector or a set. How do I remove an item from it while keeping the type of `c`?\nthose are different kinds of things so there is no common operation to do that\nusually if I encounter a question like this, I step back and look at how I got to wanting to remove things from a non-indexed collection\n<@Jasmine> So you mean, I should avoid having to remove individual items from lists or vectors? Just from sets?\nyes, generally I try to never remove anything from the middle of a list or vector\nsets are fine - they are designed for that\n<@Jasmine> Thank you. I'm going to think about that...\nthanks !\n<@Jalisa> if you are okay with O(n):\n```\n(let [xs [1 2 3] ;; or '(1 2 3) or #{1 2 3}\n      el 1]\n  (into (empty xs) (remove #(= % el)) xs))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "441",
    "text": "How does Calva find test namespaces?\n\nI have `[\"src/a/b.cljc\", a.b]` and `[\"test/a/b_test.cljc\", a.b-test]`, and `:source-paths [\"src\", \"test\"]`, but Calva says \"No tests found. :scream:\"\n<#CBE668G4R|calva-dev> try here\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "442",
    "text": "beware that `into` on a seq reverses order\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "443",
    "text": "Is there a more idiomatic way of doing an `or` check with multiple `=` checks involving the same variable?\n\n```\n(or (= panel-name :general-info) (= panel-name :permanent-address) (= panel-name :school-info))\n```\n`(#{:general-info :permanent-address :school-info} panel-name)`\ncontains? at the front if nil or false are one of your cases\nthe set works because a set acts as a function returning an item if found in the set\nAh yes, I have used something like this before.\nyeah. however it looks. but rather than `or` just do set membership check\nwhich is semantically what you are doing\nalso, depending on where the or is:\n```(case panel-name\n  (:general-info :permanent-address :school-info) (some-action))``` - but this only works if your matches are compile time literals\n(the case would potentially replace if/cond here)\n`(#{:general-info :permanent-address :school-info} panel-name)`\n^^ enumerate things in a set and use set membership\nliterally, is panel-name in this set of values\nif you want to improve readability you can make that more explicit:\n`(contains? #{:general-info :permanent-address :school-info} panel-name)`\noh sorry, I didn\u2019t see <@Becki> s reply above, sorry to duplicate\ni'm always pleased when my recommendation aligns with yours :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "444",
    "text": "Could you be more specific and given an example of url reproducing the problem?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "445",
    "text": "hi everyone. are there any isomorphic web frameworks for clojure, except `fulcro`?\nwhat's an isomorphic web framework?\nbasically a combo of server - side rendering and a single page application\nwhere you can use the same exact component on client and server\nah cool, okay\nrum\nmost cljs react wrappers can probably be retrofitted to work isomorphic style, with some elbow grease. But rum was able to do it out of the box when it first shipped (or pretty early)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "446",
    "text": "May I ask, I was wondering why this works, is a set somehow also a function?\nI know it does work, but come to think about it I don\u2019t know why :\u2019)\nYes, just like map\n(I meant under the hood)\nand I meant, similar to map, it implements IFn\nRight I see now, then we are on the same page. Thanks!\nnp...when I first came across this I was both puzzled and delighted\nYeah I know it works for months now, but I never stopped an thought about why\nspecifically this i think: <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/APersistentSet.java#L49>\nWhat a curious interface iFn, it has invokes for 0..20 arity plus 20 arity and varargs\nThat stuff is all performance related as far as I understand it\nusually the interesting ones are at the bottom where it explicitly handles multi-arity\nthere's some different between a form run in the repl, compiled in the repl and run normally too. invoke, run, etc\nYeah I know that varargs are slow\nbut it's so hazy for me that i'm almost certainly wrong but just a grain of truth there\nif you ask in <#C03S1KBA2|clojure> i'm sure someone could point you towards that\n(if you're interested)\nAlways interested in more knowledge,  but not always at the expense of time of others ;)\nIf that makes any sense\nclass clj_dict(dict):\n\tdef __call__(self,item,default):\n\t\treturn self.get(item,default)\n\nf = clj_dict(a=1,b=2)\nprint(f('c','not_here!'))\nmy python will never be the same :stuck_out_tongue:\nSame goes for equality, math ops, lookup, etc\nI\u2019ve seen python code that repurposes `**` for something clever\nyeah it has pretty convenient metaprogramming with it's \"magic\" methods\nnothing beats macros though\nLanguage design is such a fascinating subject\ndefinitely... also quite the rabbit hole\ni prefer being a spectator and letting the adults play\nhahaha, right\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "447",
    "text": "tooting my own horn here, but <https://github.com/cjohansen/dumdom> can render the same components server and client side on both the JVM (native, no JavaScript runtime) and Node\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "448",
    "text": "I hope I'm not beating a dead horse, but I wanted to ask some conceptual questions about clojure startup time.  Some things I understand:\n- The JVM startup time is a relatively small component\n- Clojure itself has to evaluate all of its internal code when you start it up, which is the bulk of the time\n- I've read that some lisp implementations are able to save an \"image\" of a system\n- Subsequent invocations can start quicker by simply loading the image\n- I think GraalVM supports a similar notion, but that might be only for compiled code (you lose `eval`?)\n- Clojurescript / Lumo, etc have a faster startup time (on platforms for which Node is available)\nMy question was: are there any technical limitations which would make it impossible for clojure to eventually support this notion of saving to / starting from an \"image\"?\ni.e. is there anything about the JVM which would make that impossible?\nStartup times on machines I own, if anyone is curious :slightly_smiling_face:\n```\nstartup times:\n* macbook pro 2015: clojure(1.9):         ~1.2 seconds\n* macbook pro 2012: clojure(1.9):         ~1.2 seconds\n* HP i3@2.3GHz:     clojure(1.8,openjdk): ~6.1 seconds\n* raspi 3:          clojure(1.8,oracle):  ~16 seconds\n* OLPC:             clojure(1.6,openjdk): ~20 seconds\n* raspi zero w:     clojure(1.6,oracle):  ~81 seconds\n* raspi zero w:     clojure(1.6,openjdk): ~97 seconds\n* pogoplug:         clojure(1.6,openjdk): ~98 seconds\n* NSLU2:            clojure(1.9,openjdk): ~284 seconds\n```\nwhat are you starting in each of those cases? lein? the clojure command line tool? `java -jar ...` ?\noh, sorry: `time echo '(System/exit 0)' | clojure`\nnot sure how scientific that is\nso the clojure command line tool\nyeah\njust make sure it's not the first run from that directory (cached deps list / downloads)\n(I should also state that I'm a clojure noob -- please point out any glaring mistakes I'm making)\n<@Dann> yeah, thanks, I did see a speedup on subsequent runs!\nthere are a few things that can be sped up, where speeding them up removes desired dev-time features of the language (eg. redefinitions of vars) - some of them are provided by default for clojure.core but can be turned on for other namespaces\noh interesting\nfor the \"image\" idea, I'm curious how that is implemented on other lisps.  literally dumping a copy of the stack / heap to disk?  seems like that would be large\ndirect linking?\n<@Alyson> precisely, it's a space/speed tradeoff (java makes enough of those already that the size of allocations becomes a factor...)\n<@Becki> this? <https://clojure.org/reference/compilation#directlinking>\nyeah, that's the one\n<@Alyson> the jvm arg is `-Dclojure.compiler.direct-linking=true`\n_As of Clojure 1.8, the Clojure core library itself is compiled with direct linking._  oh interesting, so I should definitely be comparing 1.8 to other versions\nI guess it doesn't apply to your test, as it defines no clojure code outside clojure.core\nmight explain why the raspi zero w was way slower than I expected vs. the rasp 3 -- I was running 1.6 on one and 1.8 on the other\n<@Dann> oh, if I don't use clojure.core then it doesn't get evaled on startup?\nwhat I mean is that the flag I menion above doesn't do anything if you aren't compiling anything - I guess your one interop call gets compiled but that should be minor\noh gotcha\nif you had a significant app to compile and run, I would expect that flag to make a difference\nOne the conceptual things I seemed to gather was that porting clojure to a different platform doesn't address the startup issue, because it is mostly due to the need to evaluate a bunch of clojure code on startup.  I grabbed a copy of clojure_py and observed similar results.\n(so i.e. porting to C wouldn't help anything, and might even be slower the the JVM)\nThe thing which struck me was the difference between clojure startup times and some common-lisp implementation startup times.  e.g. on my lowly NSLU2, gcl starts in 0.26 seconds.  So it must not be evaluating much on startup.\nAnyway, just wanted to ask if there was any knowledge / current efforts around the idea of starting clojure from an \"image\" in a way similar to e.g. common-lisp (I think emacs does this as well?)  (related: <https://stackoverflow.com/a/7686350/7543271>)\nWhile there is ongoing work to help reduce Clojure's startup time on the JVM, the idea of an \"image\" is a non-starter, in my opinion, since you're talking about the JVM itself really -- you'd need to be able to save and load JVM images for Clojure to be able to leverage that.\nah, gotcha\nClojure just has a lot of `.class` files to load and initialize.\nIt would require a fairly fundamental change to the (Clojure) compiler to produce something that loaded and initialized faster for `clojure.core` (and the handful of other namespaces that actually get pulled in for `-main` to run) -- and that's just not a concern for server-based software which is really Clojure's target.\nthanks for the perspective <@Celestine>\nI would recommend watching this great talk from Gary Fredericks: <https://www.youtube.com/watch?v=-Qm09YiUHTs> - IMO there is no low hanging fruit (without introducing breaking changes)\n<@Ronda> thanks I'll check it out!\nOn a reasonably fast laptop/desktop, `clojure` _is_ fast enough for scripting for most purposes tho', unless you're looking for sub-second response times...\nGary's talk is excellent!\nyeah, I gather that most people are using a SLIME-style workflow anyway, so they infrequently see the startup time lag\nAye, I start a REPL up and leave it running for days. In fact, I often have two or three REPLs running in different contexts, and switch my editor between them as needed.\nAnd \"Welcome to Clojure!\" <@Alyson> :slightly_smiling_face:\n(just scrolled back and saw your comment that you're new-ish to the language)\nthanks!\nOne difference between 1.8 and 1.9 is the addition of `clojure.spec` and `core.specs` so I suspect that's part of the slowdown from 1.8 to 1.9\nah interesting\nyeah even though I'm new, I've been watching rich's talks for years and they have influenced my thinking in other languages.  my goal for 2019 is to get serious with clojure\nLocally, it looks like startup times were pretty consistent from 1.2 up to 1.7 (about 1.15 - 1.2s on my desktop), then dropped to just under 1s with 1.8, and went back up to about 1.1-1.2 with 1.9.\nah, so that reflects the change to direct linking in core and then the introduction of spec\nAnd 1.10 and 1.11 (master) seem about the same as 1.9 (again, consistent).\nYou might find the analysis here interesting <https://dev.clojure.org/display/design/Improving+Clojure+Start+Time>\noh thanks!\nYou can shave some startup time off for `clojure` with `-J'-Xverify:none'`\n(per that wiki page -- but see the caveats around that)\nThis is consistently 0.9s for me ```time echo '(System/exit 0)' | clojure -A:1.10 -J'-Xverify:none' -J-client -J-XX:+TieredCompilation -J-XX:TieredStopAtLevel=1\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "449",
    "text": "I guess a lot depends on which languages you're coming from... I've been on the JVM primarily for about twenty years so... :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "450",
    "text": "I don\u2019t think that works anymore in modern jvms\nOr has no effect\nCorrect. 1.8 had some cost from incidental loading from the socket server stuff\nAppCDS does this on the jvm and it does help a lot, but kind of requires you to know everything you\u2019re going to load\nA late-2012 27\" iMac with 16GB RAM and a 3.4GHz Core i7 with SSD drives.\n`-J-Xverify:none` still seems to make a difference on OpenJDK 11 vs OpenJDK 8.  The `-client` and tiered stuff, not so much.\nI thought they didn\u2019t allow you to turn off the verifier anymore, but been a while since I looked at it\nIn any case, don\u2019t turn off the verifier :)\n&gt; (per that wiki page -- but see the caveats around that)\n:slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "451",
    "text": "what machine are you on?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "452",
    "text": "seeing this error running an old version of a library (liberator 0.12.2) on java 11 using the clojure cli:\n```CompilerException java.lang.ClassNotFoundException: javax.xml.ws.ProtocolException, compiling:(liberator/conneg.clj:1:1)```\nis there a workaround for this? I believe it's a general issue running old libraries on java 11, and the answer is to add the dependency using `--add-modules` but I'm not sure how to do that. also, it's a regression test so I can't upgrade the liberator library\nI think in Java 11 the better solution is to add the javax jaxb dependencies (available on Maven). \nSee here: <https://stackoverflow.com/a/52502208>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "453",
    "text": "how do people typically deal with missing values NA or NaN type values when doing data science type stuff in clojure? Is using nil or ##NaN obviously better?\nand checking for this everywhere?\nIs there a best practice for namespaced keys in nested maps? e.g. I have this structure with namespaced keys but see it is rather verbose: \n\n```\n{:document/entities \n  {:entity/extracted ... \n   :entity/tagged ... }}\n```\n<@Jessia> you can do this to save a little repetition: ``` {:document/entities \n                #:entity{:extracted []\n                         :tagged [] }} ```\nThanks - sorry I should have said I\u2019m aware of that syntax but even then it doubles up on entity/entities in this example.\nI'm not 100% what you mean, do you mean you want the `:entity` keyword qualifier somehow inferred from it being below `:document/entities` in the tree?\nI think a lot of the qualified keyword stuff is a place where verbosity has been hard to avoid in my experience\nYes, or if there\u2019s some better way to design my data so it\u2019s not necessary\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "454",
    "text": "I\u2019m working a testing framework but I\u2019m struggling to filter/compare namespaced maps\n```#::step{:name 'some-name}```\nwith an arbitrary map that may be namespaced\nNot quite what I\u2019m looking for. I want to ask.. is this map from this particular namespace\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "455",
    "text": "clojure.data/diff ?\nI think records could be useful for this. but, _gasp_, that means making use of types\nwill all keys in the map have the same namespace?\njust to point out, maps cannot be namespaced. there's a shorthand for when all of the keys share the same namespace but this is a property of those keys and not the map\nhowever, could you walk over things and collapse maps whose entries are keywords which all share the same namespace into a single entry?\n`(-&gt; #:step{:name 'some-name} first key namespace)` if you can count on the map's key entries to all have the same NS\nnot sure what your goal is but you could walk and strip namespaces, or assert that all entries have the same namespace or something. But i'm not clear what your goal is and how namespace keys really affect that\nWhat does it mean for a map to be from a namespace?\nEach key in a map may be namespace-qualified.\nThe utility of namespaced keys is precisely that one map can contain a variety of them\nI think the answer is to just walk the keys and see if it conforms\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "456",
    "text": "Okie, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "457",
    "text": "<@Jessia> thanks, that worked for me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "458",
    "text": "is there anything like a static analysis tool to add type hints to a clojure file?\nor at leas try\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "459",
    "text": "Hi! The following code:\n```(ns my-ns\n        (:refer-clojure :exclude [def]))\n\n   (alias 'c 'clojure.core)\n\n   (c/def test 1)```\nGives an error: `RuntimeException No such var: c/def`. What am I doing wrong here?\nYou\u2019re right of course, i mistyped it in Slack, but it\u2019s correct in my code\n<@Jessia> If you want to reduce the verbosity in your code, I'd look at using tagged literals. I put together an example of doing that  <https://gist.github.com/shaunparker/c89ac63cba98d05d9586a837654b1c1e>. If you have clojure installed locally you can run `clojure -Sdeps '{:deps {keyword-tagged-literal-ex {:git/url \"<https://gist.github.com/shaunparker/c89ac63cba98d05d9586a837654b1c1e>\" :sha \"bb8513e88698c0cf12108b6df19a96679661c3cc\"}}}' -m example`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "460",
    "text": "`:refer-clojure` is outside `ns`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "461",
    "text": "hi everyone. I have a list of lists - ```((1 2 3) (1 0 6) (3 9 8))```\nand I\u2019d like to `interleave` these and put them in lists again, so basically my end result to be\n```((1 1 3) (2 0 9) (3 6 8))```\nI\u2019m a bit stuck, because I ended up with something like\n```(apply list (apply interleave my-list))``` and it obviously doesn\u2019t work\n<@Deangelo> `(-&gt;&gt; (apply interleave my-list) (partition 3))`\nah right! thanks <@Argentina>\nyou're welcome\nAn alternative that should work for more then 3 lists of lists (I am not saying shaun's does not -- I just suspect perhaps maybe it is limited to that because of the (partition 3)):\n```user=&gt; (apply map list '((1 2 3) (1 0 6) (3 9 8)))\n((1 1 3) (2 0 9) (3 6 8))\n```\n:+1: nice one. they both work actually :slightly_smiling_face: I love the fact that there are many different ways you can approach things\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "462",
    "text": "Whoa, interesting stuff. Thanks Shaun, I shall have to give it a try \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "463",
    "text": "Why does using a nested j.u.H cause a reflection warning? How can I do this properly?\n\n```\n(defn foo\n  []\n  (java.util.HashMap.\n    {\"baz\" (java.util.HashMap.\n             {\"foo\" \"bar\"})}))\n```\n\n```\nReflection warning, NO_SOURCE_PATH:3:3 - call to java.util.HashMap ctor can't be resolved.\n```\nthere are two single arg constructors. need to indicate _which_ one?\nnot sure how to indicate `HashMap(Map&lt;? extends K,? extends V&gt; m)`.\nI don\u2019t think that\u2019s it\nspecifically the inner one does not  reflect, only the outer one\nTBH, I can\u2019t explain that without digging into the compiler more\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "464",
    "text": "I mean, I can reduce-kv, but other than that :slightly_smiling_face:\n<@Deangelo> another one :wink:\n\n```\n(require '[core.matrix :as matrix])\n(matrix/transpose '((1 2 3) (1 0 6) (3 9 8)))\n;; =&gt; ((1 1 3) (2 0 9) (3 6 8))\n```\nHas anyone seen the following error when running 'brew install clojure'?  brew install clojure\nError: No available formula with the name \"clojure\"\nClojure isn't really a program but a library managed as part of a\nproject and Leiningen is the user interface to that library.\n\nTo install Clojure you should install Leiningen:\n  brew install leiningen\nyou must be on a very old brew <@Gracie>\nI can brew install clojure just fine\n<@Marlyn> yes... turns out that reinstalling brew did the trick. brew update was also broken, which is how I ended up stuck on an older version.  Didn't realize it would affect the package index.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "465",
    "text": "Is it possible to define a custom implementation of `toString` for `defrecord`s? I have already defined a `clojure.core/print-method` for the record-type in question, which helps in REPL, but is not useful when I try to generate formatted string with `format` functions. Looks like `format` function directly calls `toString`.\nI'm using `clojure.tools.deps.alpha` to `resolve-deps` but I get:\n```Expanding javax.servlet/javax.servlet-api #:mvn{:version 3.1.0}\nExecution error (ArtifactNotFoundException) at org.eclipse.aether.connector.basic.ArtifactTransportListener/transferFailed (ArtifactTransportListener.java:48).\nCould not find artifact net.java:jvnet-parent:pom:3 in glassfish-repository (<http://download.java.net/maven/glassfish>)```\n```\n(defrecord A []\n  Object\n  (toString [this] \"AAAAA!!!\"))\n=&gt; user.A\n(A.)\n=&gt; #user.A{}\n(format \"scary? %s\" (A.))\n=&gt; \"scary? AAAAA!!!\"\n```\nThanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "466",
    "text": "the solution was to ensure to have ``` :mvn/repos {\"central\" {:url \"<https://repo1.maven.org/maven2/>\"}\n                \"clojars\" {:url \"<https://repo.clojars.org/>\"}}``` in the deps map\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "467",
    "text": "<@Boyd> try `(#{:general-info :permanent-address :school-info} panel-name)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "468",
    "text": "If you take a look at the publics for clojure.core you will see that def is not included.\n\n```\n(sort (keys\n       (ns-publics 'clojure.core)))\n```\n\nThat's because def is actually a special form. <https://clojure.org/reference/special_forms#def>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "469",
    "text": "From last week. Any luck?\nIt keeps biting me, especially after long sessions\nI have had this problem too. Eventually I gave up on using tools.namespace refresh. I\u2019m using the REPL more in the style of Stuart Halloway\nswapping Stus... :grin:\n\nwhat does the technique consist of?\nIn short, just redefine forms yourself, one at a time\nYou can watch this talk: <https://youtu.be/Qx0-pViyIDU?t=1751>\nHe talks about the difference in the second half of the talk if I remember correctly\nFor example I have a file with (:require [korma.core :refer :all]))...   and within uses (update db-table (set-fields :myfield mydata) (where (:id id)))....\nsounds tough... I'm used to refresh large projects ~100 times per session.\n\nno way I could do that manually (and without errors)?\nto be:\nclj-refactor for emacs\nit has the `stop-referring` command\n(:require [korma.core :as kdb]))....   (kdb/update tb-table (kdb/set-fields :myfield mydata) (where {:id id})))... etc.\nooh nice didn't see that!\nI use a lot of `(comment ...)` sections to try out stuff. those also get erased when I change something and then use tools.nrepl refresh. Also I use inline def sometimes to capture stuff. All this state is erased. Something which hampers my debugging. It\u2019s a different trade off.\nthanks #vemv\n<@Mariela>\n:+1:if you don't use emacs you can use the underlying clojure code anyway\ni have emacs yes. I will give it a wizz now. I don't normally use clj-refactor but have it installed\nit's super sweet. especially with the Hydra menu, otherwise I'd forget all those commands\nThe compiler will tell you about undefined symbols if you just update your import statement\nyou can also use the joker linter, which will tell you even without compiling\nit\u2019s a killer feature when using this as an editor plugin\njust removing and relying on the compiler might be a bit deceptive as there are some function names in the korma namespace that shadow clojure.core ones - for example update and so I am concerned that I may not get compiler errors in that case\nah good point\ngunna try emacs / clj-refactor / stop-referring command\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "470",
    "text": "Hi all does anybody know if a tool that would help to refactor function calls in a clj file that were created with a :refer :all to use a prefix?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "471",
    "text": "tools.deps question: when I depend on git dependency, is there a way to also specify an alias defined in that library to be used?\nno\nwill there be such a way?\nno\naliases are resolved first to determine what deps to traverse\nbut aren't they like a classifiers in poms?\nno\nkind of\n&gt; aliases are resolved first to determine what deps to traverse\nI meant to use alias defined in dependent library when specifying dependency, not using it in place where normal aliases are used\noh\nhaven\u2019t thought about it\nlike that:\n```\n{:deps {git-dep/artifact {:git/url \"...\" :sha \"...\" :aliases [\"blah\"]}}}\n```\nthis looks like classifier, and behaves kind of like classifier\n(I mean expected to behave, not behaves)\nI don\u2019t think it\u2019s like classifiers\nclassifiers select an alternate artifact\nthis is about selecting an alternate sub-classpath\nright, this is more of a configure what bits to also include\nwell, feel free to file a TDEPS jira enhancement and I\u2019ll think about it. not anything I\u2019m going to do soon though.\nThanks, I will! I have a use case for it, but it's not very urgent and workarounds are possible while it's not there\n<@Jasmine> created <https://dev.clojure.org/jira/browse/TDEPS-116>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "472",
    "text": "hi, i\u2019m trying to process a hierarchy and i think i have things working the way i like, but i can\u2019t seem to figure out how to avoid an atom i want to get rid of\u2026 any tips appreciated.\n\n<https://gist.github.com/joefromct/0b017d43f381e3f861fc93d08e716213>\n\nI think it\u2019s trickier than just a recur with an accumulator because there is a couple of doseq\u2019s in the middle there.\nthx\nHere\u2019s a version that uses `reduce-kv` and `reduce` instead of `doseq`:\n```\n\n(defn recur-test [{:keys [acc val md5-list json-key]\n                   :or {acc []\n                        md5-list []\n                        json-key []}\n                   :as args}]\n  (let [pretend-md5 (str (hash val))]\n    (cond\n      (map? val)\n      (reduce-kv (fn [args' k v]\n                   (recur-test (-&gt; (assoc args' :val v)\n                                   (update :json-key conj k)\n                                   (update :md5-list conj pretend-md5))))\n                 (update args :acc conj {:md5-list (conj md5-list pretend-md5)\n                                         :json-key json-key\n                                         :val val})\n                 val)\n\n      (vector? val)\n      (reduce (fn [args' v]\n                (recur-test (assoc args' :val v)))\n              args\n              val)\n\n      :else\n      args)))\n\n(:acc (recur-test {:val airplanes}))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "473",
    "text": "Although note, I extracted `:acc` from the final result, since the whole `args` is returned from every call.\nthanks a bunch that is awesome.\nInterestingly, TDEPS-116 could also open the way for a solution to managed dependencies. The lib/deps.edn is a file that describes managed deps via aliases. app/deps.edn consumes this lib and describes which managed deps (= alias in lib/deps.edn) it wants to include as deps.\nyou\u2019re welcome!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "474",
    "text": "I just did a `(source promise)` and discovered there's an undocumented behavior; a promise can act as a function equivalent to deliver on the promise.  This is actually quite useful to me.  Is this an intentional part of promise and, if so, should it be documented?\n\n```\n(def p (promise))\n=&gt; #'user/p\n(p 37)\n=&gt; #object[clojure.core$promise$reify__8486 0x5742bdca {:status :ready, :val 37}]\n@p\n=&gt; 37\n```\nI'll submit a patch to update the docstring if so.\n<@Clemente> for undocumented behavior you *definitely* shouldn't count on, I've seen `deliver` used to replace `(fn [f x] (f x))` which relies on that behavior\nthe implementation seems to quite intentionally support that\n(by implementing IFn)\nSo missing documentation: a bug, or leaving option open to remove this behavior?\nI\u2019d call it a doc bug\nOk, patch coming up!\ncan\u2019t imagine we would remove it\nbleh\nI would make the patch small by just extending \u201c\u2026 with deliver _or by invoking the promise_\u201d\nlooking at it again, clearly `deliver` is the intended entry point so I think I\u2019d call it an enhancement\nInteresting; looking at the source for deliver, it is just `(promise val)`.  My thinking is that this usage in not intentional, it was just easier for Rich to re-use IFn than to define a new IDeliver interface. However, I think it is quite worth documenting and even using when appropriate.\nI have this \u2018problem\u2019 too, I initially thought it was because of refer\u2019s, but sadly not so trivial\n<https://dev.clojure.org/jira/browse/CLJ-2480>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "475",
    "text": "hello all, Is there any exponentiation function of a double exponent? `(function 4.554 &lt;exponent_double&gt;)`\nfor both clj and cljs you can use `Math/pow` via interop\nthansk\n```user=&gt; (Math/pow 4.554 Math/E)\n61.61660979210404```\nworked, many thnaks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "476",
    "text": "You know, once you get over the parenthesis there is a lot of power to appreciate. I was about to write `(defn min-&gt;ms [min] (* (* min 60) 1000)` then `(defn min-&gt;ms [min] (-&gt; min (* 60) (* 1000)))` then realized it\u2019s just `(defn min-&gt;ms [min] (* min 60 1000))`.\nhonestly i would absolutely hate to work in a language without parens. text editing is so convenient with them. i think a paren beginner is equivalent to a vim master\nonce you have something like paredit as muscle memory it seems like you really have lifted off\nI am so lost in all editors that don\u2019t sanely add parens lately\ncursive spoiled me\ni want to brush up on my paren editing skills\u2026 does anyone have a link to a good tutorial/docs?  I\u2019m using doom emacs atm and smart-parens is mildly annoying at times\u2026 i think i had a better paredit setup years ago.\ni use lispy and there is a file in the package that is like vimtutor\n<https://github.com/abo-abo/lispy/blob/master/lispytutor/lispytutor.el>\nthere might be something better out there though. Not sure if lispy is the best solution for clojure so would be interested in people's thoughts on that\nPersonally I\u2019ve been using parinfer which I really love. The code practically writes itself!\nnice i\u2019ll read up on those two.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "477",
    "text": "In an attempt to understand datafy/nav a bit further (especially nav), I put together a very simple repo with an example here <https://github.com/markbastian/datafy-playground/>. The only example of significance is here: <https://github.com/markbastian/datafy-playground/blob/master/src/datafy_playground/datafy_file.clj>. I was wondering if some of the experts could weigh in on some questions I've had regarding these functions. Here are my questions:\n\n 1. Is it appropriate or normal to auto-datafy as you nav? In my example, if I nav from a datafied file to its parent, is there any reason to not just datafy it on the fly?\n 2. If a datafied item has a nested datafiable entity (in this case a datafied directory has a list of files) is it considered best practice to use collection functions to get at the item and then datafy it (e.g. ```(datafy (get-in datafied-directory [:files 2]))```) or is it acceptable to nav right to it (e.g. ```(nav datafied-directory :files 2)```).\n 3. Finally, is it considered acceptable to nav to the contents of a thing if the key isn't present in the datafied coll? For example, if a file is a .csv file, is it normal to do ```(nav datafied-file :contents :csv)``` where the contents are implied?\n\nThe example I have above can be pasted right into a REPL if anyone wants to try it out. Hopefully it will be useful in both illustrating the above items as well as being something you all can use to experiment on.\n<@Tandy> I don't know if this helps answer those questions, but the way I think about it is that you have some Thing (which is an arbitrary object -- Clojure or Java, whatever) and you explicitly call `datafy` on it to get a pure Clojure data representation of that Thing. Then you can navigate that as a pure Clojure data structure using regular Clojure functions and when you want to go back to the _corresponding arbitrary Thing or sub-Thing_ you call `nav`, mimicking the pure Clojure data structure navigation. Now you're back in Thing-land, and you would explicitly call `datafy` again to get to a pure Clojure data representation of that new Thing/sub-Thing.\n<@Celestine> - So, in the cases of a File or a DB thing (a row in a resultset, for example), datafy takes you from File or Row to Clojure data (likely a map). This part makes sense to me. WRT nav, are you saying nav on a map would take me back to a File, Row, or other Thing-type corresponding to where you are navigating?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "478",
    "text": "Hello guys, how would you make a function run one at a time, even if it is called multiple times? I have a compojure route which makes a reservation, but first it checks if there is free-space. So this is a concurrency problem, how would you solve it?\nif you use an agent, they enforce a queue on all sends\nIn the case of REBL, it takes a Thing and calls `datafy` to get the data it displays in the view pane and when you \"drill down\", it calls `nav` to navigate into the Thing, and then calls `datafy` to get new data to display in the view pane.\n<@Gemma> alternatively, `compare-and-set!` or `swap!` with a function that conditionally aborts\n(those functions work on an atom rather than an agent though, so if the source of truth isn't in memory an agent might still make more sense)\nif you can model it in an atom as a compare-and-set!, you can do the same in a sql database, and other kinds of databases often have some kind of cas\nyeah, letting a db be source of truth for the transaction is smarter\nI am a huge fan of a cas, so for a reservation system, cas not-reserved with reserved, and then it doesn't matter how often the function is run\n<@Dann> the problem is the source is mongodb. Read and writes can't be atomic together, I just want to put functions in queque like in core.async, but I want to wait still one ends before the other starts\nagents have this behavior, but it's going to be fragile\neg. what if two servers are running your app?\n<@Gemma> You may need to consider here, what is going to happen if you ever load balance over more than one server :slightly_smiling_face:.\nwith no distributed reliable source of truth, bad things will happen\nOr once you are in data-land do you capture the scope of the original thing (e.g. the FileSystem or DB) and just work in data?\nyou will need to stand up something like zookeeper or etcd to get cas on top of a non-transactional store\nyeah, a dedicated reliable source of truth is an option\nCorrect. `Thing` -&gt; `datafy` -&gt; data -&gt; `nav` -&gt; `Thing2` -&gt; `datafy` -&gt; data2\n(or implement a consensus algorithm yourself, which has hazards)\n<@Sonny> I am way too amateur too consider this yet. This is my third full-stack application till now, and this one have real clients, so this is my first concurrency problem :smile:\nor a db that provides this while also storing your data - such things exist\nThe Thing you start with either needs to have metadata for the `Datafiable` protocol or directly implement it.\nusing a queue doesn't really enforce what you want\nWhen you call `datafy`, the pure data structure produced has metadata for the `Navigable` protocol (or directly implements it).\nwell I just want to block other operations while I read, calculate then update the new value\nso a queque with blocking :smile:\nWhen you `nav`, you get back a new Thing (with metadata for `Datafiable` or an implementation of it).\na queue with blocking doesn't\n<@Gemma> Well, here's an interesting option. If you choose to represent each \"ticket\" in your mongo database as an individual document, you should be able to use the mongo function, \"findOneAndUpdate()\", to find a \"free ticket\" and reserve it.\nThen you can load balance later if you need to :slightly_smiling_face:\nthe best thing to do is likely just not use mongo\nHave you seen my examples in <https://github.com/clojure/java.jdbc/blob/master/src/main/clojure/clojure/java/jdbc/datafy.clj>\n<@Sonny> well this is a bit more complex, I store free-times in minute intervals `[[600 1000][1200 1440]]`... so I can't update with mongo logic, I need my clojure power to make new ranges of minutes etc.\nmy all reservation logic is about ranges, remove ranges from ranges, then keep the new ranges\n<@Gemma> Honestly, you might need to rethink that if you want a robust solution to this problem. It's not uncommon to have to do this, particularly with something like mongo. You often have to design your data storage around operational requirements.\nYou could also look at java.util.concurrent if nothing obvious to be found in clojure. Lots of \"locky\" type stuff in there, but locking your entire system while one person makes a booking strikes me as a... non-ideal solution.\nLot of good questions here, but I don\u2019t have time or ability to answer atm and I might forget. If you put this on Clojure mailing list I will be more likely to give it the treatment it deserves\nIncidentally, many large systems solve this problem by just \"overselling\" and solving the problem later :slightly_smiling_face:.\nI want to lock only the function. only adding reservation and modifying it, is a problem, which happens like 40 times a day, the problem is it happened at the same time once, so reservation overlapped each other.\nMoved to separate thread...\nwell, I thought it wont be a problem for a time myself\nbut in first week it happened 2 times :smile:\nit is like 2 guys picking same date, same hour, at same guy, in the same 5 ms-es\nwell, anyway, I need an easy fix, because I can't make a new architecture in one night. For example storing a state in atom, setting it to true if running, false after the update, and the function should recur still it is false, so it can run and set it true and etc...\n<@Tandy> `nav` should not automatically `datafy` things.\nDid you see this thread? I was trying to answer in a thread to avoid cluttering the main channel.\n<@Tandy> I answered in a thread to avoid cluttering the main channel.\nThanks, <@Jasmine> &amp; <@Celestine> - And I want to make sure I don't give you guys the impression that I expect you to get to it right away. If there's a \"best place\" to put examples for discussion please let me know and I'm happy to put them there. I want to provide as complete examples as possible to minimize everyone else's work load.\n<@Gemma> Maybe look at `(locking)`, you can just def some kind of object in the namespace and lock on it. I am not sure I would advise this as an actual long term solution, but it will probably do what you need for now.\nIn your example, you would do `(-&gt; (io/file \".\") datafy :files)` to get your sequence of files, then you can either do `(get X 0)` to get an individual file representation or `(nav X 0 (get X 0))` to navigate to the corresponding file thing.\nI'm happy to continue answering in the thread (where I already posted several replies)\nbtw my first suggestion, using an agent, is effectively a queue plus locking plus execution on a separate thread\nPasted from main thread:\nUsing the \"recipe\" at <http://corfield.org/blog/2018/12/03/datafy-nav/>:\nYou can sum this up as:\n\nStarting with a \u201cthing\u201d\u2026\n```(io/file \".\")```\n\u2026you convert it to data (with datafy)\u2026\n```\n(-&gt; (io/file \".\")\n     datafy) ;Let's say this produces a map with an entry :files which is a list of java.io.File\n```\n\u2026and walk it with simple Clojure data access\u2026\n```\n(-&gt; (io/file \".\")\n     datafy\n     (get-in [:files 0])) ;This is one way\n```\n\u2026and, at each stage, you can navigate to the corresponding \u201cnew thing\u201d by calling nav\u2026\n```\n;Option 1\n(-&gt; (io/file \".\")\n     datafy\n     (get-in [:files 0])\n    (nav ? ?) ;Not sure how this works\n\n;Option 2\n(-&gt; (io/file \".\")\n     datafy\n    (nav :files 0) ;This could return a File or I could datafy this in my implementation\n```\n\u2026which may return just that value or may do something more complex\u2026\n\u2026and from that \u201cnew thing\u201d you convert it to data (with datafy) and continue the process.\n\nDo either of these make sense? I apologize if I am sounding dense and am taking too much of you guys' time. I've watched Stuart's video, read your blog post, and the source (all multiple times) and everything seems to click except for the correct way to invoke nav.\nI already answered that above.\nYeah, or use an agent :slightly_smiling_face:\nlooking in both, your help is much appreaciated :slightly_smiling_face:\nOk, I'll take another look at nav in your navize-row function. Thanks.\nSpecifically this answer:\n&gt; In your example, you would do `(-&gt; (io/file \".\") datafy :files)` to get your sequence of files, then you can either do `(get X 0)` to get an individual file representation or `(nav X 0 (get X 0))` to navigate to the corresponding file thing.\nlocking might be better, making things async via threads might just increase complexity here\nYeah, in retrospect, not even sure how you do this with an agent, more asynchronity there, not less. Though in fairness I don't use them much, so might be missing something.\nyou `send` the reservation setting function to the data defining reservations\nthe setting functions are guaranteed to not run concurrently\nReally? Then why do they run in a thread pool?\nI guess I really don't understand these things.\nthey run async from the caller, but no two agent functions on the same agent overlap\nas far as the agent itself is concerned, zero concurrency\nOh, I see.\nso agents are perfect for a case where you need a single source of truth, no retries, no overlapping changes\n\nas long as it's OK for all of this to be async from the perspective of the code doing the modification\nSo, tricky to know if reservation has gone through I guess.\nwell my customer will mention it for sure :smile:\nHaha\nWell, that does seem to be the airline model. Over sell and kick the can down the road to the poor customer service person at the airport.\nThere's always that approach :wink:\nyeah, a given agent will wait for the result of its last execution before starting its next.\nDefinitely took me a while to re-grok that fact. References to, \"thread pools\" in the `(send)` docs are actually misleading because it does suggest that sends are done concurrently, but what is really meant here is that there is a single thread pool that is shared across *all* agents for `(send)`. I think I did know this once... but honestly, how often do you use this stuff? :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "479",
    "text": "Honestly, I mostly only remember those specifics because I reimplemented agents over web workers a while back. Turned out, atoms and immutable data solved 90% of our concurrency issues.\n$2^e$\nI think you are looking for #perl :wink:\nThose last 10% though are usually solved by seasoned java devs, so I think they're more inclined to reach for native thread tools, instead of using agents (or even STM)\nYeah, I have to say that includes me John. I can get most of this stuff done with core.async now, but I spent long enough in Java land to find reaching for java.util.concurrent a bit too easy. Nearly suggested a Semaphore for problem above.\nYeah, I think we should try to stay between the lines more often than we do there. Atoms and agents and stm all work in concert with one another wrt the snapshotting of data across a transformation. Seeing folks muddy the semantics makes me sad. But sure, sometimes you'll have to reach for a more specific tool.\nI think I may have figured it out. Please let me know if this makes sense:\n1. Use datafy when you have an object (non-pure data) representation of something and want to convert it to pure data. In some instances, datafy will produce a \"coordinate\" that links to something else (e.g. a foreign key or hyperlink).\n2. Use regular Clojure navigation (e.g. get, get-in, keywords) to navigate pure data.\n3. Use nav when you need to navigate to a referenced thing. This thing should be a pointer, link, etc. It is not used to transform data.\nIf I am getting this, places where nav would be appropriate would be foreign keys in a db, web navigation (key is :href and val is the url), or perhaps a symlink in a file system. The basic idea is there is a 1:1 link between the data and the thing you are navigating to.\n+1 for agents in this use case. My project uses an agent in one particular spot. We routinely schedule a task but want only one to run at a time. Works like a charm.\nyep, I can confirm that it works well in my case as well, also much easier to implement than I thought, thank you guys.\nInterested to know how you solved the problem of communicating back to the caller. Agents do seem a little, \"fire and forget\". The agent data will get updated with the return 'at some point in the future', and you do have `(await)` so I suppose if you do something like keep a vector of successful reservations you can `(await)` to see if it's there, but aside from your constantly growing vector there, `(await)` docs contains some concerning statements like, \"Will never return if...\" :slightly_smiling_face:\nI think the only thing that seems fuzzy for me is how you might handle a directory. Suppose I datafy my current directory. I could do a couple of things (This is all dependent upon my implementation of datafy):\n```\n;Option 1: Pure data\n{:file \".\"\n:files [\"file0\" \"file1\"]}\n\n;Option 2: mixed - Pour .listFiles into a vector for :files\n{:file \".\"\n:files [#object[java.io.File 0x5cc6922c \"./project.clj\"] ...]}\n```\n\nWith Option 2 you would do something along the lines of (-&gt; (io/file \".\") datafy (get-in [:files 0]) datafy) to navigate to the first file as data.\n\nWith Option 1 you would use nav. Something along the lines of (-&gt; (io/file \".\") datafy :files (nav :files 0) datafy).\n\nIs this correct? If so, is there a preferred or canonical way of doing the implementation?\nPass in a closure over a promise that gets delivered when the function executes on the agent? :slightly_smiling_face:\nI was thinking that too, but was afraid that was just the first step to a bad rube goldberg machine - but perhaps it is that simple\nNeither is correct.\nHah, I have in my head a core.sync solution that looks a bit like that with channels.\n:disappointed: Sorry! Am I close?\nThing -&gt; `datafy` -&gt; data -&gt; `nav` -&gt; Thing2 -&gt; `datafy` -&gt; data2.\n(or just use an atom and compare and set)\nand it's `(nav &lt;collection&gt; k v)` where `v` is nearly always `(get &lt;collection&gt; k)`\nI mean what if the agent blows up so the promise delivery never happens, now your thread is deadlocked,\n\nso then you put the deref of the promise in a future so you can use deref of that with a timeout\n\nand then...\n`nav` mirrors the pure data \"navigation\" you do in Clojure\noh, whoops, Is this correct:\n(-&gt; (io/file \".\") datafy (nav :files 0) datafy).\nI just noticed I had a double :files\nConcurrency is hard\nDirectory -&gt; `datafy` -&gt; data structure that representations the (contents of the) directory, with metadata added for `Navigable` protocol (most likely on the collection of data that represents the files) -&gt; `(get (:files dir-data) 0)` produces the first file representation, so `(nav (:files dir-data) 0 (get (:files dir-data) 0))` would be the correct `nav` call here -&gt; a File (or Directory) object -&gt; `datafy` -&gt; data structure that represents that.\n`(-&gt; (io/file \".\") datafy (nav :files 0) datafy)` -- no, `nav` takes collection, key, value. You can't do multiple levels of navigation with it, just one.\nthis is why people use Node.js :wink:\nHaha! Touch\u00e8! \npffft\nthe problem with people who write javascript is the tend to think that using a single threaded server and single threaded client will save them from thinking about concurrency\nGrokking how `nav` works is definitely the hardest part of this.\nof course that is already two threads in your system operating concurrently\nthen you get more clients and more servers, and databases\n<@Rosaline> Datomic team also think this ;)\npfft\nwhat makes you think they think that?\nIt's intended to mirror `(get collection key)` or `(get vector index)`, and you pass it the actual value (returned by `get`) as well as the collection/vector and the key/index.\nI\u2019m partially joking, but lots said about transactional benefits of single writer. \nbut the system is entirely designed thinking about concurrency\nand clojure's reference model\ndatomic is a database as a value in an atom\nFrom my blog post \"Given an associative data representation, it does `(get coll k)` first to get `v`, and then it calls `(nav coll k v)` to allow the underlying navigation to return an updated value.\"\nIndeed, but writes are single threaded in part so you don\u2019t have to worry about isolation \nAre they still actually?\nNot sure with cloud\nFor sure. So, looking at ```(nav (:files dir-data) 0 (get (:files dir-data) 0))``` I could also do:\n```\n(let[{:keys[files]} (datafy (io/file \".\"))]\n    (nav files 0 (get files 0)))\n```\nThe key being that dereferencing the bare data in position 0 (coll) with the key produces the value?\nWhich I think you just said.\nanyway, my point is, programming in javascript will damage your brain when it comes to concurrency, and concurrency is a fact\nYup.\nI am definitely not a JS evangelist. \nBut that's not `(-&gt; ... (nav :files 0) ...)` just to be clear.\nAt least probably not, not sure what this weeks syntax is. \nRight, which is why I had to use a let to get the intermediate value.\nNow I'm trying to understand why I need to provide the value.\nBecause `nav` may just return that value, if the act of navigating is just the same as for pure Clojure data.\n\u201cJavaScript will damage your brain\u201d &lt;- next tattoo \nSpecifically `(let [data {:foo \"bar\"}] (nav data :foo \"bar\"))` -- `nav` on a hash map is basically a no-op that just returns the value (so it's an assumption that the key you pass would refer to the value you pass).\nThat's assuming no metadata on that hash map.\nwhy not just return ```(get data :foo)``` in the default case?\nwhen it comes to concurrency\nI agree. it was tongue-in-cheek :stuck_out_tongue:\nIn the `java.jdbc.datafy` case, it ensures that the updated `query` function returns something that is `Datafiable` and that `datafy` will add metadata for `Navigable` to each row, so that when you `nav` on a row, if the key matches a foreign key in the schema, instead of just returning the column's value, it fetches the related results from the DB (and starts the cycle over again).\nthe truth is that while your language might be single threaded, your system is _not_\nBecause it's already been passed the value (from `(get data :foo)`)\nat least JS in the browser lets you not have to think about problems locally without concurrency issues. but too many people try and venture farther and run into issues early on\nI was one of them!\nAh, plain old get doesn't allow you to add metadata.\nit gets even harder with threads, because of shared memory\n(unless you have Clojure's fancy atoms/refs :wink: )\nAnd in the general case, some things will navigate and others will not.\n...or core.async\nIn the case of a key-val being a foreign key vs. a scalar.\nYes. `datafy`/`nav` are a very generic way to implement laziness.\nThe docstring for `nav` tries to make the reason for the value clear <https://github.com/clojure/clojure/blob/master/src/clj/clojure/datafy.clj#L31> but it isn't entirely obvious.\nIn particular, for sequences, you might _only_ have the value, and not any matching key/index.\nThe default implementation of `Navigable` for all `Object`s is just to return the value passed in, ignoring the collection and key/index: <https://github.com/clojure/clojure/blob/master/src/clj/clojure/core/protocols.clj#L194>\nOk, I think I am getting it. I suppose for a file list you might want to provide the value (file name) vs. the index since most people think in terms of a seq of names vs. a vector of filenames. Thanks!\nThen you could use a filename filter in the nav protocol or something similar and not list all the files in the :files key in the datafied dir.\nYeah, the sequence/collection of files (filenames) would have metadata for `clojure.core.protocol/nav` to provide how to turn the data (filename) into the actual file \"thing\" so the fact its a vector is less important here.\nOr the metadata could close over the path to the file and so just the \"filename.ext\" part would be enough -- no filtering needed.\nah, nice idea\nThanks so much for all of the help on this. It's making a lot more sense.\nSo `(nav (:files dir-data) nil \"filename.ext\")` would rely on the `nav` implementation in the metadata of `(:files dir-data)` being able to add the path to the directory in which the file lives.\nyes, and that makes a lot more sense when you read it\nIt's tough stuff. I spent hours playing with this at Conj, trying to get `java.jdbc` working with REBL after watching Stu's talk.\nYeah, I am sure being there helped a lot. Thanks again for passing on the knowledge.\nHappy to help any time!\nGo to <#C04V84U7G|slack-help> or <#C0CB40N8K|community-development> and alert an admin in either of those channels. Do *not* engage the trolls/spammers here please.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "480",
    "text": "That was my approach after looking at my options.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "481",
    "text": "is there any way to add hint for returned value from function which is defined using `fn`?\n```\nuser=&gt; (set! *unchecked-math* :warn-on-boxed)\n:warn-on-boxed\nuser=&gt; (defn abc ^double [] 1.0)\n#'user/abc\nuser=&gt; (inc (abc))\n2.0\nuser=&gt; (def abc* (fn ^double [] 1.0))\n#'user/abc*\nuser=&gt; (inc (abc*))\nBoxed math warning, C:\\cygwin64\\tmp\\form-init496459974570346569.clj:1:1 - call: public static java.lang.Number clojure.lang.Numbers.unchecked_inc(java.lang.Object).\n2.0\n```\nDid you know? You can put pre-post map in meta :scream:\n```\n(fn ^{:pre [(pos? i)]} [i]\n  (inc i))\n```\n```\n(macroexpand '(fn ^{:pre [(pos? i)]} [i]\n  (inc i)))\n(fn* ([i] (clojure.core/assert (pos? i)) (inc i)))\n```\ncool, didn\u2019t know\nok... found a solution\n```\n(def ^{:arglists '(^double [])}\n  abc* (fn ^double [] 1.0))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "482",
    "text": "let's go deeper\nwhat about such case?\n```\nuser=&gt; (defn make-me-aaa [] (fn ^double [] 1.0))\n#'user/make-me-aaa\nuser=&gt; (let [aaa (make-me-aaa)] (inc (aaa)))\nBoxed math warning, C:\\cygwin64\\tmp\\form-init496459974570346569.clj:1:26 - call: public static java.lang.Number clojure.lang.Numbers.unchecked_inc(java.lang.Object).\n2.0\n```\nyou can't avoid boxed math while crossing anonymous function boundaries\nclojure only knows how to use the unboxed path when using primitively tagged functions stored in Vars\nso to your initial question.. no\nok...\ninvokedynamic could help with this if it ever lands in clojure \\cc <@Marlyn>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "483",
    "text": "What's the status of the functions in the Clojure incubator? I'm mainly interested in `dissoc-in`. It looks like there's been no activity in incubator or on the issue (<https://dev.clojure.org/jira/browse/CLJ-1063>) in a while. I think it would be nice to have in core so I can stop putting a copy into each of my projects :slightly_smiling_face:\ncreate a package and then just pull that down! hah\nincubator is dead\nI think my comments at the end of 1063 summarizes my qualms about it\nGotcha\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "484",
    "text": "I don\u2019t think there is a candidate impl that I would consider worth recommending right now\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "485",
    "text": "Does anyone else crash/hang Docker (on Mac) when running `lein uberjar`? Last night it just hanged. Now it terminated with `ERRO[0457] error waiting for container: EOF`.\n\nI even bumped it to use 6 CPUs, 8 GiB RAM &amp; 3.0 GiB swap.\n(It creates the `...-SNAPSHOT.jar` then hangs/crashes.)\n<@Catina> is your uberjar running across a mounted volume?\nsometimes it's painfully slow if $HOME/.m2 or the app itself is mounted\nbut if other containers are having issues, it's good to hit the Reset button in Docker for Mac preferences\n<@Marlyn> Hmm, thanks \u2014 I believe it must be! (So the uberjar remains after the Docker dies. I didn't write this codebase, so I'll verify.)\n\n(I've reset a few times, so unfortunately that doesn't work. :/)\nyeah, Docker for Mac filesystems mounts are quite slow.  If you `watch -n 1 du your-uberjar.jar` you may see that it progresses, but at a crawl\nHmm, in that case I wonder if it makes sense to run Docker inside VMWare/Debian (atop MacOS). :stuck_out_tongue:\n<@Ronald> medley has dissoc-in: <https://github.com/weavejester/medley/blob/master/src/medley/core.cljc#L20>\nI usually write update-in + dissoc because I\u2019m too lazy to use an extra dependency\nGreetings fellow clojurians!\nDoes anyone have experience with creating a jpeg file from a base64 encoded string extracted from html? (Inline image in html) I managed to get those image strings from a html page with hickory, but after that I tried to decode them with (String. (.decode (Base64/getMimeDecoder) to-decode)) and <http://clojure.java.io/copy|clojure.java.io/copy> them out to a folder with no success. When I try to open an image my viewer says: (Not a JPEG file: starts with 0x75 0xab)\nI am pretty new to this, so got the idea to ask it here. I hope someone could help me.\nThank you in advance!\n<@Jeromy> Could you post the base64 encoded string in a gist?\n<@Clarine> Sure, <https://gist.github.com/aaronpowered/6e2f2de74e2de9be7da52889c5452f4d>\n(Have to leave now, will be able to reply after 3 hours.)\nYes I agree about the extra dependency. Doesn't update-in + dissoc leave empty intermediates though? For my use case I would want the other behavior (as in the incubator/medley versions)\nthen use those versions :slightly_smiling_face:\nI noticed there was a trailing slash in the base64 string. I recommend testing it in an online viewer first:  e.g. <https://codebeautify.org/base64-to-image-converter>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "486",
    "text": "Hi, I'm doing some interop with Java and I dont understand why `(.write javax.imageio.ImageIO bi \"jpg\" f)` works but not ` (.write javax.imageio.ImageIO bi \"jpg\" f)` ?\nBefore I did `(.fillRect g2d 20 50 10 30)` and it worked fine\nIs it because ImageIO is a class and not an instance?\nMy question is about the interop syntax\n```\n(.write javax.imageio.ImageIO bi \"jpg\" f)\n(.write javax.imageio.ImageIO bi \"jpg\" f)\n```\nthe two forms you put are identical\n(unless i missed something?)\n<@Laurene> did you figure out what was going on?\n<@Becki> hey sorry I was out, I meant `(. javax.imageio.ImageIO write bi \"jpg\" f)` is the correct way and `(.write javax.imageio.ImageIO bi \"jpg\" f)` didnt work\nfor a static method, `(javax.imageio.ImageIO/write bi \"jpg\" f)` is the recommended syntax\n<@Laurene> you can see from the javadoc which methods are static, <https://docs.oracle.com/javase/8/docs/api/javax/imageio/ImageIO.html> and the clojure docs for interop describe static method calls <https://clojure.org/reference/java_interop#_the_dot_special_form>\nThanks for the informations\nbut why would `(.fillRect g2d 20 50 10 30)` works and not `(.write javax.imageio.ImageIO bi \"jpg\" f)` ? Is that because write is static?\nright, fillRect is a method on g2d, write is a method on javax.imageio.ImageIO, the rules for static vs. instance methods are different\nin java they have the same syntax, but on the bytecode level they are implemented differently, and clojure distinguishes them\nRight, thanks for the clarification, It's an area to improve for me!\ninterop is a pretty small set of rules, and once you learn them you can use a lot of stuff for free, so it's rewarding :D\nYeah that's why I was getting my hands dirty with it, leveraging Java libs is a great bonus to the already nice language\nThank you again for your help ! :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "487",
    "text": "Hielo all. I'm doing some experiments with streams (but not touching IO yet), but getting the following error randomly in my lein repl, anyone have a clue why?\n```\nIOException Resource temporarily unavailable\n        java.io.FileInputStream.readBytes (FileInputStream.java:-2)\n        java.io.FileInputStream.read (FileInputStream.java:255)\n        java.io.BufferedInputStream.fill (BufferedInputStream.java:246)\n        java.io.BufferedInputStream.read (BufferedInputStream.java:265)\n        jline.internal.NonBlockingInputStream.run (NonBlockingInputStream.java:294)\n        java.lang.Thread.run (Thread.java:748)\n```\ndoes *e have the full stack trace?\ndid you open a file? if so how did you open it / access it?\nnope, no open files. Not sure I can see what `*e` has as the process crashes when it happens\nunless `aleph/manifold` automatically open files, I would hope it doesn't\nyou could set the top level uncaught exception handler to be more informative `(Thread/setDefaultUncaughtExceptionHandler (reify Thread$UncaughtExceptionHandler (uncaughtException [this thread error] (prn \"uncaught error\\n\" thread error))))` (fixed error, added example) ```(ins)user=&gt; (Thread/setDefaultUncaughtExceptionHandler (reify Thread$UncaughtExceptionHandler (uncaughtException [this thread error] (prn \"uncaught error\\n\" thread error)))\n)\nnil\n(ins)user=&gt; (.start (Thread. #(/ 1 0)))\nnil\nuser=&gt; \"uncaught error\\n\" #object[java.lang.Thread 0x2d631a09 \"Thread[Thread-0,5,main]\"] #error {\n :cause \"Divide by zero\"\n :via\n [{:type java.lang.ArithmeticException\n   :message \"Divide by zero\"\n   :at [clojure.lang.Numbers divide \"Numbers.java\" 163]}]\n :trace\n [[clojure.lang.Numbers divide \"Numbers.java\" 163]\n  [clojure.lang.Numbers divide \"Numbers.java\" 3833]\n  [user$eval215$fn__216 invoke \"NO_SOURCE_FILE\" 40]\n  [clojure.lang.AFn run \"AFn.java\" 22]\n  [java.lang.Thread run \"Thread.java\" 748]]}\n\n```\nhm, might be related with autocomplete or something like that, as the error seems to happen when I write `(def my-stream (s/stream)` (notice the missing ending `)`)\noh, thanks for the snippet, I'll give that a try\nhaha, just fixed a missing paren then thought you were referring to it - noticed when I pasted into my repl -I'm proud that something freeform into slack was that close to correct honestly! :D\nhm, unfortunately that doesn't make the error any clearer <https://gist.github.com/victorb/304ed4cd9834ecb02ce1b37f641e7957>\nso this happens before you even finish writing the form? what repl implementation?\nyup, using lein\nwait, just a regular lein repl in a terminal?\nit crashes as soon as I finish the `(s/stream)` form\nseems related with some autocomplete\nyou can use `lein upgrade $VERSION` to pick an arbitrary older version of lein - if it's a lein bug I bet going back a version or two would eliminate the error\nnrepl stuff was radically changed recently\n(and of course having the latest lein is just a question of using `lein upgrade` again)\ngood idea, I'm on 2.8.1 so I'll try upgrading before downgrading. Thanks for the suggestion\nCider in the mix?\nno cider, just lein repl + one deadly form `(s/stream)`\nalso OS mgiht be relevant here too (since IO bugs in IPC code that only affect one OS are relatively common...)\nupgraded to latest (2.9.0) and now it works\n:tada:\nI'm on Ubuntu 18.04.1 LTS for posterity\nthanks <@Dann> for helping me out :slightly_smiling_face:\nBTW What is this nonsense, Slack? \"Your file was uploaded \u2014 it\u2019s safe and sound in Slack. Unfortunately your workspace doesn\u2019t have any storage space left. To get more space, you can upgrade to a paid account or delete some of your older files.\"\nCan you guys see my recently uploaded picture?\nyes - I can see it - that difference almost looks like text encoding issues, which makes me wonder if you wrote the file using a String / text oriented function rather than a bytes / raw data function\nYes can see it\n<@Jeromy> OK I scrolled up - your mistake is using the `String` constructor\npass the byte array to io/copy, this isn't textual data\nThank you again <@Dann>\nI have to stop just copy pasting utility functions\n<@Jeromy> one of my loose heuristics for bugs is doing any sort of String conversion during IO - text to text just works via the binary methods, string conversion in the middle breaks things\nFinally it works! You guys are always doing a great job here :slightly_smiling_face: I am very grateful\nnice\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "488",
    "text": "<@Clarine> trailing slash was only a mistake of copy paste. I had another mistake, had to drop the head of the string, (data:image/jpeg;base64) so i can use Base64/getDecoder instead of Base64/getMimeDecoder, but image file is still not available to open. I leave this image here as the difference between my decoded file and the one decoded by Best Online Base64\n<@Dann> <@Laurene> Thank you! Yes good point\naaah\nI just wrote a function which extracts images from the output of a wysiwyg, make sha1 hash and store every image once and change the inline base64 string to the path to that image. It works brilliant :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "489",
    "text": "Could someone explain to me what is the common use of `var` in Clojure?\nYou\u2019ll often see it used via the reader macro `#'`. Usually to alter the metadata associated with a Var, or sometimes in test namespaces to refer to private vars\n<@Ashlea> Thanks, I didn\u2019t realise that metadata came with a var, not the associated object.\n<@Pearline> another usage of var is to pass the container holding a function to a function that creates a long running closure (eg. starts a web server using the function you pass in) - if you pass a function, the higher order function won't see redefs, if you pass the var it always sees the current value\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "490",
    "text": "cross-posted from <#C077KDE3A|luminus>: does anyone know specifically where to put wrap-cors in a luminus app (which has swagger, if that matters)?\nmy various attempts in handler and middleware aren't working.\nI need cors enabled locally for development on an app created with the equivalent of 'lein new luminus testapp +swagger'.\nthe thing that makes this work is that calling a var attempts to call the value you put in the var\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "491",
    "text": "of the 3 `Design / usage benefits of transducers:`  in <https://clojure.org/guides/faq#transducers_vs_seqs> - don't the last two apply to `reduce` or `loop/recur` too?\nunlike transducers, reduce and loop/recur are syntaxes rather than units of composition\nso they are eager and explicit about resource usage, but aren't in the same category of abstraction\n<@Dann> yeah, that is why I said 'the last two' - excluding transformation composition\nboth transducers and sequences can be passed to functions to get a new transducer or sequence\nright - what I'm saying is they aren't even in the same category - strings and io streams are also eager and explicit about resource usage, but would be out of place in the comparison\n<@Marin> Actually, it\u2019s a cool usage. Thank you\n<@Dann> Ok, I see what you mean, yes, they are not the same, was specifically curious what do they have over `reduce` specifically and only for eagerness and resource control\ntransduce vs. reduce has two major improvements: formalizing a final \"collate results\" step after everything has run (very common pattern in my code to need that), and separating transducing (a transform applied across the input) from the folding operation itself\n(aside from the previously mentioned fact that a transducer is a compositional abstraction in a way reduce isn't)\nok, your second point is about the 'transformation composition' in the FAQ, how often do you really use this? didn't understand your first one yet\nOr your two improvements seem highly related\nthe most common usage is defining the transducer as it's own testable unit of code\nsometimes I use comp to join them also\n(about unit of code) can comp and partial be used to create the same effect (without transducers)? ignoring the performance benefits of removing all intermediate sequence and cached value creation.\nsure - but this gets heavy handed when you consider eg. transducing from a channel to another channel - the transducing version never needs to build a collection, the non-transducing version builds one collection of N elements per unit of composition\nthere's a lein-yagni plugin if that's what you mean - it scans your codebase and tells you about functions without callers\nthanks!\nby editing the code or calling ns-unmap, depending on what you mean\nlast time I check yagni does not detect vars but ns only.\nalso, here's a contrived example of using the completion function ```user=&gt; (transduce (map inc) (completing\n              (fn [acc i] (update acc i (fnil * 1) i))\n              vals)\n              {}\n              [1 2 3 2 1])\n(4 9 4)\n``` - in real usage I often have \"secondary accumulators\" in a hash map that are needed while reducing, but not needed in the result\n<@Dann> from memory\n<@Elanor> I use it at work, it definitely checks for unused vars (and also is uptight about protocol methods and multimethods in ways that can be hard to make happy...)\nns-unmap is what removes a var from a namespace\n<@Dann> Will give it a try. Thanks.\nOk, let me try to read that first hehe\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "492",
    "text": "Anyone aware of any tools to identify/remove unused vars (not ns but mostly def and defn forms)? I can cook up a shell script to do so but would be nice if others have a tool to recommend.\nhow do you remove an unused var manually?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "493",
    "text": "are you allowed to write code like that at work?\nI tend to avoid transduce because we aren't doing things where streams of data are the perf bottleneck\nbut I do use transducers because they help modularize operations on IO streams to be testable on seqs, without needing to turn io into a seq\neg. we have a minimal kafka topology definition that takes a transducer, we can test that transducer outside kafka with seq in / seq out\nyes, that is super helpful, experienced that with datomic, ex: developing and testing functions with no database\n<@Lewis> don\u2019t think so. Have been waiting for someone to take a stab at this. The thing missing is that swagger defines parameters &amp; responses in swagger json schema, while most Clojure web libs use Schema or clojure.spec as the idiomatic way to describe those. Generator would need to convert the params. Just the paths, libs like `org.zalando/swagger1st` and `metosin/reitit` both use the swagger path format, so the transformation should be quite trivial.\n(co-authoring reitit, so happy to help if you would like to do the converter for it)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "494",
    "text": "Hey, can we generate an Clojure Server from swagger definition? \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "495",
    "text": "A question related to the REPL:\nI\u2019d like to write a small Clojure program that opens an JSON file and allows me to investigate the content of the JSON as a Clojure object in the REPL.\nI was thinking of creating a `core.clj` file with a `-main` function that receives the path to the JSON file as an argument and define a `core.data` var that contains the Clojure representation of the JSON file.\nMy problem is that I cannot when I pass `-m core` to the REPL, it runs the program and exits.\nI\u2019d like the REPL to stay open.\nIs that feasible?\nYou could call clojure.main/repl in your main\nYeah. I thought about that but somehow I was expecting to find a simpler solution <@Sixta>\n<@Alaine> you could use `-e` instead of `-m`\n^^\n<@Sixta> can we have access to command line arguments with `-e`?\nyou do\n```$ clj -e \"(println *command-line-args*)\" -m foo 1 2 3\n(1 2 3)```\n<@Jasmine> awesome\nThis is exactly what I was looking for\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "496",
    "text": "And with `-r`, I can open a REPL\n```\n\u279c  ~ clj -e \"(ns my.aa) (def a 1)\" -r\n#'my.aa/a\nmy.aa=&gt; a\n1\nmy.aa=&gt;\n```\n\nNow, I am wondering why `-m` is not compatible with `-r`?\n-m starts a program, -r starts a repl\nthey are different modes\nor you can pass a path to  run a clj script or - for stdin\n-e is an initial option that happens before those (and can be used more than once)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "497",
    "text": "Let's say I have a macro that defines a bunch of local variables for easy of use. Is it possible to conditionally bind them only if they're used in the body?\nIs there a built-in clojure function that has the following effect?\n```\n(f [] 0) ; =&gt; []\n(f [1] 0) ; =&gt; [1 0]\n(f [1 2] 0) ; =&gt; [1 0 2 0]\n(f [1 2 3] 0) ; =&gt; [1 0 2 0 3 0]\n```\nAlmost `interpose` but with the separator also added to the end when the sequence is not empty\nThere isn\u2019t\n&gt; added to the end\nDoes it have to be the last item in the seq, or should it be `conj`ed?\nWould `(interleave [1 2 3] (repeat 0))` work?\n<@Fatima> oh wow; that works\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "498",
    "text": "I\u2019m trying to figure out how to write a macro that will return a quoted vector of the arguments passed to it\n\nExample\n``` (quote-me [:user/id])\n;;-&gt; \u2019[:user/id]\n\nany ideas?\n```\n=&gt; (doc quote)\n-------------------------\nquote\n  (quote form)\nSpecial Form\n  Yields the unevaluated form.\n\n  Please see <http://clojure.org/special_forms#quote>\n  Yields the unevaluated form.\n```\n^ I think `quote` is what you\u2019re looking for\n<@Glayds> `'[:foo]` and `[:foo]` are already equal - there's a difference for symbols, the macro you want for that is `quote`, which is what `'` expands to\nalso that's not a quoted vector of the arguments, that's taking a vector and returning it\nThis doesn\u2019t seem to work for the function I\u2019m trying to pass the return value into\nas in, I need to pass it in as quoted\nquoting is a compilation time operation that prevents evaluation of literal forms in your source code\nit doesn't have a meaning at runtime, unless you are using runtime eval\nI might be misunderstanding what you are trying to do here\nSounds like you're asking for an extra level of quote, like `(defmacro foo [x] ``(quote (quote ~x)))`\n`(foo [:user/id]) ==&gt; '[:user/id]`.  Like your example.\nOh... looks like I don't know how to put code in slack.\nturns out didn\u2019t need to use a macro\n(deftrack a [b conn id]\n  (b @(posh/pull conn `[~b] id))\n  )\nthis did what I wanted\nthanks\nwhat do you expect ```\n`[~b]``` to do that `[b]` wouldn't?\nget accepted by datascript\nah\nhow would datascript see a difference?\nyeah, think you\u2019re actually right\nI think it is more because datascript allows things in the pull and query that would otherwise get evaluted\nsure, quote those things if you need their unevaluated meaning\nfor the toy example just putting it in directly works fine\nand quasiquote can help build a partially quoted data structure with selective evaluation, without needing a macro\nits for building up the more complicated queries and pulls that I need the ` and ~\nright, and you don't actually want a macro for that - you just want a convenient syntax for selective quoting\nyeah, hadn\u2019t realized I could use ` and ~ outside of macros\nthanks\n<@Glayds> FWIT, I once wrote a tutorial about syntax quote <http://blog.klipse.tech/clojure/2016/05/05/macro-tutorial-3.html>\nif anybody wants to have fun with instaparse, regular expressions, and property-based testing, doing a totally-achievable and well-defined thing, you could work on making this code as robust as the clj-jvm version: <https://github.com/gfredericks/test.chuck/pull/54>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "499",
    "text": "I asked this yesterday afternoon but I don't think I did a good job of describing the question/issue, so I'mma try again but with actual examples this time.\nI have a macro that accepts an atom (and some other parameters), and binds a lot of helper variables for use in the macro:\n```\n(defmacro req [&amp; expr]\n  `(fn ~['state 'side 'eid 'card 'targets]\n     (let ~['runner '(:runner @state)\n            'corp '(:corp @state)\n            'run '(:run @state)\n            'run-server '(when (:run @state)\n                           (get-in @state (concat [:corp :servers] (:server (:run @state)))))\n            'servers '(zones-&gt;sorted-names (get-zones state))\n            etc... ]\n        ~@expr)))\n```\nThis macro is used _a lot_ in the codebase, which means that all of these variables are being bound in every invocation. Most times, only a handful of the let-bound variables are actually used or needed in `expr`. Is there some way to write the macro such that it will only bind a given variable if that variable is used in `expr`?\nits anaphoric and you want to only create the binding if you can find a usage in the body?\nI'm unfamiliar with \"anaphoric\" in this setting. What do you mean?\nthe macro creates a symbol for the body to use seemingly without a binding creating it\nthe old common lisp ones would introduce a symbol `it` by convention\nIsn't `let` a binding?\nyes but its created at macroexpansion time and therefore not visible in the code you actually write\nAh yes, that's correct\n`(req (run-server))` is an example. you create the symbol run-server that `expr` can use without itself creating that binding.\nYou are correct, yes\ni bet <@Harris> has an easy way to do this with t.a.jvm. I'm thinking a naive version of walk your expr for the first form might work in practice but would miss things in let bindings, doseq bindings, etc. You don't care if someone shadows since you would create an extra unused binding in a few rare cases. I'm guessing you could run the analyzer over the form, find which things are used and intersect that with the few you have here\nInteresting idea, thanks!\nits also possible you'll do a lot of work, hit rough edge cases, and after some tedious coding, realize you don't get any measurable performance difference.\nThat's what I suspected, which is why I haven't worked very hard at finding a solution, lol\nso if i'm reading the AST stuff correctly, you could perhaps figure out how to collect all vars (<http://clojure.github.io/tools.analyzer.jvm/spec/quickref.html#var>) from the AST of expr and then find which ones are your bindings\nand tools.analyzer has an ast namespace with a `nodes` function to give a lazy sequence of nodes in the AST\nthere's also a really cool looking ast-&gt;eav function so you could do this in datalog.\nthat's amazing that you can query the AST of clojure code. like that's really cool\n```\n  (let [ast (ana.jvm/analyze\n             '(let [x 3]\n                (+ x another-sym something-else)))]\n    (into #{}\n          (comp (filter (comp #{:var} :op))\n                (map :form))\n          (ast/nodes ast)))\n```\n```\n  (def another-sym 4)\n  (def something-else 5)\n  (let [ast (ana.jvm/analyze\n             '(let [x 3]\n                (+ x another-sym something-else)))]\n    (into #{}\n          (comp (filter (comp #{:var} :op))\n                (map :form))\n          (ast/nodes ast)))\n\n  ;;-&gt; #{another-sym something-else}\n```\nThat's wild. Thank you!\nif you want to go down this route, you'd need to collect local bindings that can't be resolved, there's a hook for that\nI'm a bit busy right now but I can show you how to do that later\nI do agree with <@Becki> though that it sounds like it could be just premature optimization\n&gt; The analyze function can take an environment arg (when not provided it uses the default empty-env) which allows for more advanced usages, like injecting locals from an outer scope:\n\nthis style?\nalso thanks for this huge amount of work <@Harris>\nhonestly, I haven't used/worked on `t.a.jvm` in anger in years so I can't remember off the top of my head how to do it, just that it's possible :)\nThis is probably an unnecessary optimization (seeing as nearly every binding is either grabbing data from the map atom or performing minor calculations on the atom), but it's currently used 2344 times in the codebase, so it seemed worth at least peeking into\nmhhhph, that requires knowing in advance the locals you want to inject\nwhat I was thinking of was to disable the part of the validation pass that throws an error on unresolved symbol names\nthen collecting all those nodes\nto figure out which locals are used in the body\nthis is in a macro so i was thinking using &amp;env\nbut what you want to look for are locals that are used in `expr` that _don't exist yet_\nthey won't be in `&amp;env`\nthe context is inverted\nYou could do something like\n```\n(defn seq-has? [form namespace-qualified-quoted-sym]\n  (when (seq? form)\n    (not\n      (empty?\n        (filter #(= % namespace-qualified-quoted-sym) form)))))\n\n(defn expr-has? [expr namespace-qualified-quoted-sym]\n  (when (coll? expr)\n    (not\n      (empty?\n        (-&gt;&gt; expr\n             (tree-seq coll? seq)\n             (filter #(seq-has? % namespace-qualified-quoted-sym)))))))\n```\nAdapted from some other code I have, so not tested...\n(oops, didn't full adapt it... fixed)\n<https://github.com/clojure/tools.analyzer.jvm/blob/master/src/main/clojure/clojure/tools/analyzer/passes/jvm/validate.clj#L255-L262>\nthis is what I think is needed\nYou just call `expr-has?` in your macro. You may need to check for both the namespace qualified and non-namespace qualified version of the symbol. But that's extra macro stuff.\n```\n(require '[clojure.tools.analyzer.jvm :as j])\n(require '[clojure.tools.analyzer.ast :as ast])\n\n(defn find-undefined-locals [expr]\n (-&gt;&gt; (j/analyze expr\n                 (j/empty-env)\n                 {:passes-opts (merge j/default-passes-opts\n                                      {:validate/unresolvable-symbol-handler\n                                       (fn [_ s {:keys [op] :as ast}]\n                                         (if (= op :maybe-class)\n                                           ast\n                                           (throw (Exception. \"\"))))})})\n      ast/nodes\n      (filter (fn [{:keys [op]}] (= op :maybe-class)))\n      (map :class)))\n\n(find-undefined-locals '(let [a identity] (a b))) ;=&gt; (b)\n``` <@Becki> <@Shayla>\nin your example if you use `(find-undefined-locals expr)` you should be able to find the set of locals that you need\nit's quite the hammer though :)\nif I had a timemachine I would rename that node type to `:undefined-symbol` but alas\nyou're invoking it from a macro\nso compile time\nthis is assuming that you do something like `(defmacro whatever [body] (let [neded-locals (find-undefined-locals body)] (emit-only needed-locals body)))`\nwhich afaict is the only way to do what you want anyway\nthat's what you write to create only the binding forms that are in the set `needed-locals`\nit's the binding forms of your let form in the original macro, moved to a function to make it easier to test and the macro easier to reason about\neugh don't do this in macros\ntraversing code like this is a recipe for broken edge cases\nit doesn't handle lexical scoping at all\nif you run this over `(do a)` and `(let [a 1] a)` it would tell you that both expressions are using the undefined symbol `a`\nfor example\nAh okay, thanks, that's cool\nor even worse, if you ran it over `'a`\nI'll mess around and hopefully make it work!\nwhich is using _the symbol_ `a`, not the local `a`\nAh, I see\nit would just enter `(quote a)` ignoring that `quote` suppresses evaluation\nand so on, dozens of edge cases like this\nthere's _some_ constrained cases where this is fine\nlike what `spec` does\nbut it's the exception rather than the rule :)\nThat makes sense. Won't play nice if somebody intends to (or accidentally) shadow the sym\nWell, I suppose you could fancy it up to not catch on quoted or binding forms of the symbol. But yeah, add in all that complexity and you might as well reach for the analyzer\nI was implementing in cljs though\nexactly\nwell in cljs you have access to `cljs.analyzer` :)\nThe same should be doable with that, yeah?\nyep\nDoesn't have as many bells and whistles as your c.t.a.jvm I thought\nit doesn't indeed but the AST format now matches `t.a` so you should be able to use the passes and the rest of the framework over the AST it produces\nI haven't tried it but I think <@Laurette> does that\nWait, you can use c.t.a.jvm on cljs forms?\nno\nyou can use `cljs.analyzer`, get back an AST and feed that AST to `tools.analyzer` passes/traverse it using the t.a utilities\ngotcha\nWell that's awesome\ndon't know how easy or feasable that is, but some work went into cljs last year to allow this\nAin't nothin a little elbow grease can't fix\nBig appreciation to you and bronsa's work on it\nthat would be the same person :simple_smile:\njust added a slightly more performant version of `find-undefined-locals` to <https://github.com/Bronsa/tools.analyzer.jvm.deps/commit/8c7c3936e6f73e85f9e7cc122a2142c43d459c12>\nhaha\nif you're gonna bump some stuff, the project.clj version is out of date with the pom. little confusing\nthis is `t.a.jvm.deps`\nbut I can fix that in `t.a.jvm`\ni think that might just be t.analyzer\nok\ni had to read t.a.jvm to see what version was actually out\nouch\nthe stuff in the readme should be correct\nit's just `project.clj` that sometimes gets out of sync because I forget, I think\nI'll double check both and update though, thanks\nI've never needed to have a caching in my Clojure program before, so I need some guidance.\nI have a collection of entities (maps), that are calculated via some expensive functions using data-fetching from the database. Basically, I want to have it in cache as a big map with `entity-id` as keys and corresponding hash-map as values. I looked up idiomatic ways to handle caching in Clojure, it's suggested to use `clojure.core.cache` and atoms. It seems to me that none of eviction policies are suitable for my case, so I resorted to use `BasicCache`. Additional to my \"main\" cache, implemented as an atom which contains plain entries, I want to have a nested lookup map with same entities grouped in keys for fast access. I want to store this derived lookup map in some atom for future uses, rather than calculating it every time (it's ~ over a million values).\nI have two questions:\n1) Should I use `clojure.core.cache`'s `BasicCache`? It seems to me that it's just a wrapper over regular map, what benefits do I get using it?\n2) Is it ok or idiomatic to use `add-watch` as a way to keep in sync two atoms? So that my derived-lookup-map in second atom is always relevant and in sync whenever plain data in first atom changes?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "500",
    "text": "That's cool as hell, thank you\nWith something like this, is it happening at compile time or run-time? heh cuz I suspect the overall performance cost of doing this at runtime will overshadow the performance gain from skipping the unused variables\nWhere is `emit-only` coming from?\nReally? Like how?\nlol ambrose I mean! :joy:\nbronsa, ambrose, tomato, tomato\nproject.clj is 0.6.9 snapshot or something? and released is 0.7.0\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "501",
    "text": "<@Gia> Not sure about BasicCache, but for 2, on the client a lot of people would just use re-frame subscriptions for that, which lets you achieve the same with more precision and less imperative code. Not sure if anyone uses that on the server, though\nHaving messed around with this for a bit, I have a small question: how do you go about `let` binding the `needed-locals`?  I can construct a vector of the necessary forms, but I'm having trouble using that vector in a `let` as the bindings. Or is there some much easier solution to this?\nif you know the necessary forms its simple `(let [~@ forms] body)`\nmacro land you can just plop the pairs in there\nAh, okay, thank you, that was the part I was missing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "502",
    "text": "Keeping atoms in sync is a domain error - it's not what atoms are for.  You can synchronize changes to refs to ensure that they stay coherent, but it's not something you can do generally / safely with atoms.\nthe advantage of BasicCache is that it uses the cache protocols, so you can swap in other caches with other behaviors without changing surrounding code\neg. you thought you needed a TTL cache, but now product says no more time outs, BasicCache is a simple change without rewriting surrounding code\nor, you know you want a cache, but specific behaviors are going to be elaborated as needed, so you start with a BasicCache so you don't need to rewrite code to get the new caching behaviors in the final result\nif a second atom is always tied to the state of a first atom, and isn't changed itself, you can replace it with a function on the first atom, or added fields in a map in one atom\nI'd expect you'd want an annotation on a class, not a function per-se?\nwell, you need a class with a run method that's annotated, you can use gen-class and get a method without an interface, but the idiomatic thing in clojure is to use defprotocol (which defines an interface) then defrecord, deftype, or reify to get something implementing it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "503",
    "text": "Is it possible to add a Java annotation to a Clojure function?\nI've seen this: <https://clojure.org/reference/datatypes#_java_annotation_support> which sounds like the answer is no.\nit looks pretty magical tho\nWell, a method would be more correct I suppose.\nI'm trying to do this:\n```\n@Trace (dispatcher=true)\npublic void run() {\n  // background task\n}\n```\nwithout needing to do some crazy definterface &amp; deftype stuff.\nunless the method name doesn't actually matter, in that case functions have an `invoke` method, but there's no way to annotate it\nyou could reify or otherwise implement clojure.lang.IFn, and that way get something that calls like a normal function and also has annotations\nHmm that's interesting.\nThe idea is to be able to add that annotation to any Clojure function.\nIs IFn the only one I'd need to implement?\nyeah, one moment, I have an example somewhere\nCan you dynamically set annotations on a deftype?\nSomething like:\n```\n(deftype TracedFn [traced-params]\n  IFn\n  ((with-meta 'invoke traced-params) [_]))\n```\nI don't think the deftype params are in scope. Even this doesn't work:\n```\n(deftype TracedFn [traced-params]\n  IFn\n  (^{com.newrelic.api.agent.Trace traced-params}\n  invoke [_]))\n```\nI guess I can macro-ify that.\nwhen you say it doesn't work, you mean because you can't have a different set of annotations for each instance?\nSorry, I should've been more specific. I get this:\n```\nSyntax error compiling at (impl.clj:19:1).\nUnable to resolve symbol: traced-params in this context```\neven with java. I don't think you can have different annotations on methods each instance of a class\noh, yeah, it prevents capture in deftype\nI'd just use reify unless you really need multiple instances (why? I don't make multiple instances of functions...)\notherwise, yes, a macro that fills it in, since lexical capture is unavailable in deftype / defrecord\nRight, makes sense. Thinking the IFn path is the easiest. No need for an extra interface here.\nbe sure to define every applicable arity for invoke, plus applyTo\n:thumbsup: (bad emoji autocomplete haha)\nIt _seems_ to work without defining every arity. Is that just a REPL artifact?\nif you don't define applyTo, apply breaks\nI'd rather take the time to define applyTo, rather than risk a really counterintuitive error if I ever refactor and use apply\nyou only need to define the arities you implement, of course\nSo I could just define the `invoke` method(s) I need and applyTo?\nRight\nyeah\nif you need numeric perf, the method overloads for primitives are there too...\n(where fn gives you  that \"for free\" if you satisfy the static constraints the compiler knows how to use)\nI was wondering what all those were. Looks like generated code at first glance.\npretty much, yeah, the multiple overloads is how you get good fast paths (at the expense of human radability)\nIs the typical way applyTo implemented with a case statement of the count of the args?\nBTW, another reason you need `appyTo`: <https://dev.clojure.org/jira/browse/CLJ-1715>\nLooks like that's how AFn does it: <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/AFn.java#L147>\nnice to see the kind of bug I was avoiding by just superstitiosly using applyTo even though I didn't think I needed it :D\nFWIW, ended with :\n```\n(defn- invoke-methods\n  [bodies meta-map]\n  (for [[args-list &amp; body] bodies]\n    `(~(with-meta 'invoke meta-map) [~'_ ~@args-list] ~@body)))\n\n(defn- make-traced2\n  [deftype-name traced-meta fn-name bodies]\n  `(deftype ~deftype-name []\n     IFn\n     ~@(invoke-methods bodies (default-traced-meta traced-meta fn-name))\n     (~'applyTo [this# args#]\n       (AFn/applyToHelper this# args#))))\n\n```\ncool\nwith a bit of wrangling you could turn that into `fn-traced` or `traced-fn` or whatever\nThat's the end goal :slightly_smiling_face:\nI wish Clojure had some helper functions for parsing defn args... going to attempt to do that with spec\nso you can't just delegate by passing in the argslist as is? or is it that deftype methods don't support destructuring etc?\nIt's just the complexity of the defn spec\nGotta take in all this stuff\n```\n'([name doc-string? attr-map? [params*] prepost-map? body]\n                [name doc-string? attr-map? ([params*] prepost-map? body) + attr-map?])\n```\nand spit out a defn matching what I was given.\nahh, if you want 100% compatibility I can see that...\nI'd be tempted to just support what I consider \"normal\" in  defn\nYeah that wouldn't be the end of the work, I suppose.\nI'm kinda surprised no one has a library for writing defn-esque things.\nyeah - they made one for map-like things...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "504",
    "text": "I am finding this: <https://github.com/clojurebook/ClojureProgramming/blob/master/ch09-annotations/src/main/clojure/com/clojurebook/annotations/junit.clj>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "505",
    "text": "What do people think is the oldest clojure version a library should support?\nFor a brand new library, Clojure 1.9.0 would seem reasonable.\nThe latest Clojure survey results show that 97% of respondents were using Clojure 1.8.0 and later: <https://www.surveymonkey.com/results/SM-S9JVNXNQV/>\nWell that was a multi select question so careful with the number\n3% said they were using something older than 1.8, but they could also have been using something newer\njust as a datapoint, CIDER now requires a minimum of 1.8 to work. There are still a few cljx based projects out there that are in wide use. cemerick's url package and its dependency pathetic for example\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "506",
    "text": "Yeah, I was looking for something like signals/subscriptions, but on the server-side. Was thinking watches would provide same functionality.\n<@Dann>, so if I switch to refs instead of atoms, it would be ok to use watches? I'm little bit reluctant to just use a function, as even getting derived lookup-index from data that stored in first atom requires to process over million rows, that's why I was thinking about caching it.\nit seems <@Tamisha> is continuing that work here:\n<https://github.com/wilkerlucio/test.chuck.sfr-cljs>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "507",
    "text": "Trying some examples from SICP I've found that Ratio is pretty slow - is that expected?\nE.g. using continued fraction to compute inverse of golden ratio:\n```\n(defn cont-frac-iter [n d k]\n  (letfn [(frac-iter [i acc]\n            (if (&lt; i 1)\n              acc\n              ;; WARNING: if you don't use double coercion then the procedure will be slow for large k\n              (recur (dec i) (double (/ (n i) (+ (d i) acc))))))]\n    (frac-iter k 0)))\n\n;; this is pretty fast\n(time (double (cont-frac-iter (constantly 1)\n                              (constantly 1)\n                              100000)))\n;; \"Elapsed time: 14.10361 msecs\"\n;; =&gt; 0.6180339887498948\n\n;; BUT!\n;; Original version without doulbe coercion and k=5000 took more than 3 seconds!!!\n;; \"Elapsed time: 3642.036658 msecs\"\n;; =&gt; 0.6180339887498948\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "508",
    "text": "Folks, this strikes me as a question where I am sure that the answer is going to embarrass me, but I am drawing a mental blank. Is there a simple way to toggle a single item within a set. I.e. if it's there remove it, if not add it? Used to do this with set xor in my JS days.\nBesides `(if (contains? s i) (disj s i) (conj s i))`?\nYes, exactly the code I was trying to simplify.\nHad a feeling there might be a (xor s #{i}) type thing.\nNo big deal but felt like it might be there.\nput that in a fn called `toggle-member`?\nYeah, can definitely do that. I just had this, \"I am sure there is an API function for this\" feeling. If not it's good, means I am not going crazy :slightly_smiling_face:.\nnot sure what you want to do, but `set/intersection` might help\n`(set/difference s (set/intersection s #{i}))`?\nI think the first example is probably the most readable barring the existence of a `(toggle s i)` function or similar. I occasionally get this weird thing that happens in my brain where I think, \"Ok, I am sure that there is either a built in function for this, or an obvious pattern that I am missing\". No worries, thanks for your help.\nhmmm\u2026 doesn\u2019t do the \u201cif it\u2019s no there, add it part\u201d\nYou might want to use a map: `(update {:foo true} :foo not)`\nHah! That's a neat trick. I think this is the kind of thing I meant by some pattern that I might be missing. Will explore whether converting to a map makes sense. This is all \"first world problems\", the contains check is not that complex anyway really.\n<@Leana> To my knowledge, no. Docstring goes on the defmulti.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "509",
    "text": "Is it possible to write docstring in `defmethod` when using multimethod?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "510",
    "text": "I have this weird problem, where I get a `ClassCastException` when calling `(class x)` but no error when calling `(.getClass x)`. Here's the code:\n```\n(let [^Property src        (get-prop inst)\n       [target-id target-prop] val\n       target-inst (tree-search/find-nearest-by-id inst (str target-id))\n       target-class (.getClass target-inst)\n       get-target-prop (get-property-fn target-class target-prop)\n       ^ObservableValue target     (get-target-prop target-inst)]\n\n       (println \"Now binding\" src \"with\" target)\n\n       (.bind src target))\n```\n\nThis works, but when I replace `(.getClass target-inst)` with `(class target-inst)` I get: `java.lang.Class cannot be cast to clojure.lang.IFn`. What's going on here?\n<@Roberto> Have you shadowed, \"class\" somewhere else in the context? (def class ...) etc\nyes, I have. damn this has cost me something, why didn't I see it?\n:rage:\nthanks\nI should take a break :slightly_smiling_face:\nNot a problem. I only saw it because I have done similar things myself :slightly_smiling_face:\nGuess I am doing something wrong if I need to have docstring in the method xD\n<@Leana> No worries. I actually quite often drop in a regular comment at the top of my multimethods in place of an actual docstring. Seems that I often find it useful to give a little explanation about what this specific case does. There is probably nothing to attach an actual docstring to though by the time all this stuff gets munged down to .class or .js.\n<@Leana> No you\u2019re not doing it wrong. It\u2019s a flaw IMO.\nI needed this the other day. I\u2019ll play around w/ it more real quick.\nSo I have a test helper function that checks to see if a given string is in hashmap `state`, which I use like `(is (last-log-contains? state \"Barrier\"))`. This works fine when it's correct, but when it's not correct, the output is: `expected: (is (last-log-contains? state \"Barrier\")) \\n actual: (not (last-log-contains? [FULL STATE CONTENTS HERE] \"Barrier\"))`. Because of how this app works, the `state` hashmap can occasionally be _extremely massive_, which is tough to handle in test output.\n```\n(defn last-log-contains?\n  [state content]\n  (some? (re-find (re-pattern content)\n                  (-&gt; @state :log last :text))))\n```\nIs there any better way to write the function to avoid this? Is there any better way to write the `is` assertions to avoid this?\nperhaps you could check `(select-keys state [\"Barrier\"])` for the key rather than the full map. When you are wrong you will be presented only with the value of the thing you are checking\nThat's not a bad idea! Let me try that\nAnd thank you <@Becki> and <@Harris>! Your help yesterday was fundamental to me getting my PR up\ngreat!\nthat's awesome. was there any performance gain? measured or just \"felt\"?\nor just feel better that you are doing things more correctly. that's always a win too :slightly_smiling_face:\nhaha Mostly the last one. Compile times seem to take a bit longer, and the tests were already pretty quick, but this is a major win for DRY\nWe had 3 macros that did similar but slightly different things, and this allows me to extract the main `let` bindings that were shared between the 3 into a single spot\n<@Leana> yeah ok\nso a couple things\nyou _could_ use the meta reader macro anywhere you want\ne.g. `(defmethod ^{:doc \"foo\"} foo* :bar [args])`\nthe problem with that^ is\nYou basically can\u2019t get back to that docstring at runtime. It\u2019s attached to the symbol `foo*`.\nYou could also do something more drastic, like re-implement `defmethod`:\n```\n(defmacro defmethod*\n  [multifn dispatch-val mymeta &amp; fn-tail]\n  `(. ~(with-meta multifn {:tag 'clojure.lang.MultiFn})\n      addMethod\n      ~dispatch-val\n      ~(with-meta `(fn ~@fn-tail)\n                  mymeta)))\n```\nThen you could get back to your docstring via: `(meta (get-method foo* :baz))`\nHowever, it\u2019s odd, because the docstring is attached to the _function_. Whereas the docstring of the multimethod is attached to the _var_.\nthere's a jira about this btw\ni.e. you get the multimethod docstring like so: `(meta #'foo)`\nah good to know\nSo the unfortunate truth is, as <@Sonny> deduced, there\u2019s no consistent place to hang a method\u2019s metadata.\nwell, I thought there was, not seeing it now. I know I've had some conversation about it in the last 6 months\nIt doesn't seem like there is much point in supporting it because defmethods have no real identity. All of the tools that give power and usefulness to docstrings rely on being able to talk about a named thing, but defmethods are not named things.\n\nPerhaps if things like the `(doc)` function were changed to optionally support a dispatch value in the case of multimethods or something, but otherwise... why bother? :slightly_smiling_face:\nbut yes, that's the tricky bit\nI would say, in my case it would only be supporting docstrings in the usual \"docstring location\", even if they were ignored entirely at runtime, but all that is really for is consistency of documentation in the code itself.\nIt's not really a problem to drop in a standard comment, they just look different in cursive and I don't get the pretty green :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "511",
    "text": "<@Sonny> Thanks a lot for your answer :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "512",
    "text": "Thanks a lot for all your answer!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "513",
    "text": "```(def valid-guid?\n  (s/with-gen\n    #(int? %)\n    (constantly 1)))\n=&gt; #'test-ns/valid-guid?\n(s/form valid-guid?)\n=&gt; :clojure.spec.alpha/unknown```\nis this expected behavior?\n```\n$ clj -A:test\nClojure 1.10.0\nuser=&gt; (require '[clojure.spec.gen.alpha :as gen])\nnil\nuser=&gt; (require '[clojure.spec.alpha :as s])\nnil\nuser=&gt; (s/def ::guid (s/with-gen int? #(gen/return 1)))\n:user/guid\nuser=&gt; (s/form ::guid)\nclojure.core/int?\nuser=&gt; (gen/generate (s/gen ::guid))\n1\nuser=&gt;\n```\n```\n(def valid-guid?\n  (s/with-gen\n    int?\n    (constantly 1)))\n=&gt; #'test-nss/valid-guid?\n(s/form valid-guid?)\n=&gt; clojure.core/int?```\nright, anonymous functions in with-gen breaks s/form\nIn spec-alpha2 that won\u2019t work at all anymore, so you better get used to it :wink:\nIs there an existing pretty printing socket server repl I can utilize? Or do I need to write my own using `clojure.pprint/pprint`, is `clojure.pprint/pprint` even suited to pretty printing in a repl?\ndoesn't CIDER offer that but default to fipp?\nmeaning it should be fine?\nyeah and fipp as a specialized fn that's repl friendly if I recall\nI'm happy to use fipp for dev, but I'm not so sure about production with fipp. I don't want to conflict with someone else's version of fipp.\nCider offers a clojure.pprint integration too though\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "514",
    "text": "Is it possible to check whether a given symbol corresponds to a protocol method?\n\ne.g. `(protocol-method? 'my-method) =&gt; true`, `(protocol-method? 'inc) =&gt; false`\nresolve it, and inspect the var, if it resolves\nform won\u2019t work at all with with-gen specs?\nright, metadata of such vars has a `:protocol` key. thanks!\nor you won\u2019t be able to pass anonymous functions to with-gen?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "515",
    "text": "<@Sixta> Fipp is very stable. It should be safe to just forcibly use the latest version.\nI promise stability.\nyou cannot do `(s/form int?)` in spec 2. you must write `(s/form (s/spec int?))`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "516",
    "text": "would `(s/form (s/spec #(int? %)))` work?\nThis is what I get:\n```\nuser=&gt; (s/form (s/spec #(int? %)))\n(fn [%] (clojure.core/int? %))\n```\nminor, but why are you writing #(int? %) instead of int?\njust a simple example\nk\nClojure Ratio values are exact, and I believe that every single arithmetic operation you do on one also does a greatest common divisor calculation to reduce the numerator and denominator integer values to lowest terms, changing the type to an integer if the result happens to be one.\nBecause the results are exact, if the numerator and denominator get large, then all calculations will be doing exact arithmetic on large integers.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "517",
    "text": "sounds like what you want is a cache, and then an atom used to derive the cached values, and clear of (parts of) the cache if the atom changes\nyou might want to check out core.cache, and for that usage a cache used by a function over an atom would make sense, where alterations to the atom might clear some or all of the function's cache\nusing two atoms together isn't generally doable in a correct way, but a cache of a function over an atom is doable\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "518",
    "text": "<@Hans> your word is sufficient, fipp it is! \nif you ever have a problem w/ that, feel free to complain to me directly and i\u2019ll get a fixed build out\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "519",
    "text": "Is there ever a legitimate use of a map from keywords to functions instead of using a multimethod?\nI suppose if the function to be called can change at runtime based on context. Meaning you have one keyword, but the fn associated with that can change.\nIf your multifn is just dispatching off of keywords, seems like mostly the same thing to me. You're just able to define your dispatch map across multiple namespaces and downstream projects.\nIf all dispatch logic fits in one ns, a simple map would be just as good imo\n<@Fredda> yeah\u2026 basically, when dispatching on some function of an argument, a multimethod seems natural (or when there is a need for extensibility). But in my project I found myself passing a keyword as the first argument to my multimethod (a dispatch key) which is then totally ignored by the body of the function. It seems odd / a map would be cleaner\nYeah... IMO it would be cleaner, in some cases. The multifn approach is just so extensible - let's you build out that dispatch mechanism across namespaces.\nand let's downstream authors extend your dispatch map\nfair; makes sense. Ty :slightly_smiling_face:\nnp. Feel free to check out dispacio if you're looking for any more inspiration around dispatch strategies <https://github.com/johnmn3/dispacio>\nThe finest-grain control might be to plug in interceptors, for manually constructing dispatch strategies\nAh; I\u2019ll definitely check this out! I had a similar question some time ago about using pattern matching v.s. multimethods; I think the answer is the same; it depends on how much you care about extensibility\naye\nWhy do a lot of clojure functions on sequences return lists? e.g. `(rest [1 2 3])` returns `(2 3)`, forcing me to write `(into [] (rest [1 2 3]))` to get a vector back. Am I doing something wrong?\nWell, more specifically they return sequences\nFWIU, the list is the underlying data type of the `seq` abstraction, which all functions that operate over sequences recognize.\n<https://clojure.org/guides/faq#seqs_vs_colls>\nIf you are using rest for your computations things will be more efficient with linked lists (probably, by guestimate)\nMaybe\nI dunno\nEither way there is always subvec\n<@Matha> <@Fredda> protocols are implemented as a map of names to functions\nbut special in having call-site optimizations\nWell, there ya' go :slightly_smiling_face:\nthere's plenty of places where a map of \"name\" to function is a better simpler choice than a multimethod or protocol\nAh. Am I doing something wrong by assuming in my code that I have a vector? Because, say, if at some point in my code I assume that I have a vector and use `conj` to append an element to the end, I now have to add `into []` or similar to all sequence operations I do on that vector, to ensure it remains a vector\nThanks <@Jasmine> for the extra explanation on multi-methods\nYou have to know, yeah. Otherwise `conj`ing may do the different thing.\nwhy do you need to ensure it remains a vector?\nWell otherwise `conj` might behave differently on it\nin practice, I'd say this is not a problem I ever have\nhmm, maybe I am thinking of it as a problem but it wouldn\u2019t be in practice. I\u2019ll try to ignore it and see\nIf you want to not worry about it you can always whip up your own fn\nI would not do that\nI'm a bad programmer so I would\nBut I would feel bad afterwords\n<@Antwan> yeah, but I found myself bumping into it over and over and I thought that if the standard library behaves in that way then I might be doing something wrong\nas you will then just build your own bespoke collection handling that is different than what is done everywhere else\nsince I doubt all clojure devs re-write those functions, otherwise they would be in the std lib\nif you're having this issue, back up and explain how you got there\ngenerally once I have sequences, I am never \"conj\"ing to them, I am manipulating them at the sequence level with sequence functions\nit is usually a problem if you are trying write what is an imperative algorithm using arrays in clojure\nwhich, if you are doing that, don't use vectors, clojure has arrays\nI think you're maybe off down a side path from where hmaurer started\nI rarely use conj directly\n<https://github.com/clojure/tools.deps.alpha> is probably something visible I work on regularly. it has tons of data structures and data structure manipulation. I use conj twice in the whole code base.\nor I should say, in two functions\nRarely does a clojure programmer not know obviously what the type being passed to conj is, I suppose. I rarely find myself getting bit by this either.\nfor example, if you where directly translating some javascript code, js allows you to call push or whatever (I guess an arraylist would be a better analogue to that in clojure) to push a value on to the front of an array\nand basically all the clojure collection code is not built to support that style of usage\nWell, I started like this. I have a map which I pass down some function, a \u201cstep\u201d. This map contains a special key, e.g `:remaining-steps [:a :b :c]` with the steps left to execute. What I do is I take that map, and run it through all those steps until that array is empty (so first `:a`, look up the corresponding function, run it on the map, and keep going). Those functions can also push elements to the beginning of  the vector under that key, adding more steps.\nso if you were trying to use it like that, you would end up doing something silly like (into [] ...) everywhere\nso it's a queue\nI guess? I wasn\u2019t thinking of it that way. It\u2019s more like a bag of information that I run through a sequence of stages\nlike a bunch of middlewares\nsequence of steps *\nbasically like a middleware chain except that instead of directly calling the next one I add a keyword under a special key and some functions \u201cabove\u201d is in charge of calling them in order until there are no more to call\nit's unclear from what you said whether you want a stack or a queue. if you want a stack, the fastest option is to use a list (and cons/peek/pop). You can also use a vector as a stack with insertion point at the end, but that's slower than a list.\nstack\n`(update amap :remaining-steps into :extra-step)` or `conj`. But you already know it's a vector, so you know which direction conj works in in that case.\nOh you want to push it to the front?\nyep\njust don't start with a vector and your stack will be great\naye\nalright, fair enough\nty\nor #queue\nBut some seq ops will lose your queue type\nnote that that syntax is cljs-only\nah\nclj has a queue, but not the literal for it, you just use clojure.lang.PersistentQueue/EMPTY to get an empty one\nFolllow up question: is there a cleaner way to prepend a list of elements IN ORDER to a list than doing: `(into some-list (reverse elements-to-prepend))` ?\ne.g. pretend `'(4 5)` to `'(1 2 3) ` to get `'(4 5 1 2 3)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "520",
    "text": "concat (with caveats)\nsaid caveats being?\nbut what you are talking about is concat, the caveat with concat is becuase it builds lazy seqs if you are using it without care you  will blow the stack when you go to realize it\nyou may want to reformulate how you keep your queue\ninstead of a list of items, keep a tree\ntbh performance matters 0 in my case\nI would just use concat\none way to think of something like your remaining steps is as a program, and what you have is the simplest kind of program, a linear list of instructions\nso you could support more complicated trees of instructions, so something like clojure's do\nsorry, what do you mean by this? (as a program)\nit is a sequence of instructions for some abstract machine\nyou have `[do-x do-y do-z] and some program (the abstract machine) takes do-x off the control stack and does it, possibly pushing other things on to the control stack\nyep that\u2019s pretty much what I have\nexcept that my do-x do-y do-z are keywords\nso you might have something like `[[:do-2-things do-x do-y] do-z]` and have your abstract machine support do-2-things by pushing the 2 things back on to the control stack\nhmm, I see\nI don\u2019t need that flexibility (for now) though, I think\nBasically at first I was just piping something through functions with `-&gt;`, but I needed to add some machinery between every step, so I wrote this simple abstract machine because\nwhen reloading a namespace with a defprotocol, Is there a way to avoid the dreaded `IllegalArgumentException No implementation of method: :foo of protocol: #'com.example.foo/IFoo found for class: com.example.foo.FooRecord clojure.core/-cache-protocol-fn (core_deftype.clj:527)` by unloading the protocol somehow at the repl?\nthe readme for toolsnnamespace says \u201cTo avoid this problem, always create new instances of records after a refresh.\u201d which doesn\u2019t make sense to me, defprotocol is the thing that is throwing on reload\nif you support some kind of `do` operation in your machine, and add continuations, you can process trees of instructions without having to do annoying concats of instruction sequences\n<@Rosaline> what do you mean by continuations in this context?\nthe continuation of your abstract machine\nas in? picking up evaluation again at some state?\nyeah\nyeah I do support that\nif you have that, then instead of having to implement do by pushing things back on to the control stack, you push a new continuation that continues with the old control stack after the new control stack executes\n:thinking_face:\nThat said, I have very similar issues often, so there is definitely more going on\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "521",
    "text": "what they probably mean is that you need to refresh your instances of your `FooRecord`, because if they keep surviving post refresh they refer to the old protocol\none way this can happen is if you `def` them in a namespace, which you `:refer :all`.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "522",
    "text": "Hi, is there a convention for writing docstring for a wrapper function wrapping a Java library?\nLike should I use the Javadoc in the docstring, link to it? Any ideas?\n<@Laurene> No conventions. There's no formatting associated with Clojure docstrings. They're usually just short statements of what a function does, occasionally with examples of usage. There are some documentation tools that will render Markdown in a Clojure docstring...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "523",
    "text": "Looking for a function `f` that makes the example `=` true...\n\n```\n&gt; 'component/start\ncomponent/start\n&gt; `component/start\ncom.stuartsierra.component/start\n&gt; (let [s 'component/start] (= (f s) `component/start)) ;; &lt;--- looking for an f\n```\n`(resolve 'component/start)` is nil\n\n(in any case I want a symbol, not its resolved value)\ngot it `(symbol (ns-resolve *ns* 'component/stop))`\nthanks for the hint!\nYou need the alias in scope to resolve the symbol: ```user=&gt; (require '[com.stuartsierra.component :as component])\nuser=&gt; (-&gt;&gt; (resolve 'component/start) meta ((juxt (comp str :ns) :name)) (map name) (apply symbol))\ncom.stuartsierra.component/start\nuser=&gt;   ```\nDepends on the context you're trying to resolve symbols in I guess...\nInteresting shortcut... FWIW, `(resolve 'component/start)` produces a Var for me: `#'com.stuartsierra.component/start` -- not sure why you didn't get that <@Mariela>\n&gt; `(resolve 'component/start)` is nil\n\nI probably said (and eval'ed) that wrongly. getting the var indeed\nso yeah `(symbol (resolve 'component/stop))` is the shortest way\nOh, I should have tried that first... that's a recent addition that you can go from a namespace object to a symbol I think...\nYeah, new in 1.10\n```seanc@DESKTOP-QU2UJ1N:~/clojure$ clj -Sdeps '{:deps {:com.stuartsierra/component {:mvn/version \"RELEASE\"}}}' -A1.9\nClojure 1.9.0\nuser=&gt; (require '[com.stuartsierra.component :as component])\nnil\nuser=&gt; (resolve 'component/start)\n#'com.stuartsierra.component/start\nuser=&gt; (symbol *1)\nClassCastException clojure.lang.Var cannot be cast to java.base/java.lang.String  clojure.core/symbol (core.clj:579)\nuser=&gt;\nseanc@DESKTOP-QU2UJ1N:~/clojure$ clj -Sdeps '{:deps {:com.stuartsierra/component {:mvn/version \"RELEASE\"}}}' -A1.10\nClojure 1.10.0\nuser=&gt; (require '[com.stuartsierra.component :as component])\nnil\nuser=&gt; (resolve 'component/start)\n#'com.stuartsierra.component/start\nuser=&gt; (symbol *1)\ncom.stuartsierra.component/start\nuser=&gt;           ```\nnicely 'scienced'! and good to know :slightly_smiling_face:\nI asked about this problem in this channel a couple times very recently. no luck...\n\nmy conclusion (as suggested by someone else) is to resort to metadata-based protocol extension. I find the feature nifty anyway.\n\nYou can `vary-meta` either defrecords ('thin'  defrecords: implementing no protocols), or plain maps\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "524",
    "text": "`resolve`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "525",
    "text": "Great, thanks for enlightenment\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "526",
    "text": "Thanks again Sean!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "527",
    "text": "Is there a library like chime, but for java-time instead of clj-time/joda-time?\n<https://github.com/jarohen/chime>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "528",
    "text": "I want to add a custom `Datafiable` implementation to a function created with `defn`\nI tried doing `(alter-meta! #'my-fn-name assoc 'clojure.core.protocols/Datafiable my-datafy-impl)`\ndoesn\u2019t seem to work\nThe metadata needs to be keyed on the function name, not the protocol type.\n`(alter-meta! #'my-fn-name assoc 'clojure.core.protocols/datafy my-datafy-impl)`\nahhh\nyep just realized\nI got that wrong too when I first tried it at Conj :slightly_smiling_face:\nOK, so that answers one question. the next is: is there a way to attach it to the function itself without rewriting `defn`? :grimacing:\nI'm not sure what you're trying to do here... why do you want a _function_ to be datafiable?\nbecause now, `(datafy #'my-fn-name)` works but `(datafy my-fn-name)` obviously does not, since the meta is on the var not the fn\nreasons :stuck_out_tongue:\nYou could `alter-var-root` to put in a new definition with metadata (wrapped on the function value, rather the Var) maybe?\nahh hmm\nI lose some other nice properties if I do that it looks like\nlike the REPL prints it as \u201cclojure.lang.AFunction\u201d instead of the var name\nOh, because you no longer have access to the Var metadata itself?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "529",
    "text": "is there an idiomatic way in clojure to check if a list has *one and only one* item? Other than `(= (count my-list) 1)`\nNo\nCould also use `(= 1 (bounded-count 2 my-list))` to avoid fully realizing large lazy sequences :slightly_smiling_face:\n<@Henry> ouh; good call; thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "530",
    "text": "what\u2019s the state of the art for setting up tests in a deps.edn project?\nspecifically I want something I can run from within Emacs. I\u2019ve never bothered to set it up before :x\nHum, just use Cider then <https://cider.readthedocs.io/en/latest/running_tests/>\nKaocha seems state of the art. For simple test running, there is test-runner from cognitec-lab\n<https://github.com/cognitect-labs/test-runner>\n<https://github.com/lambdaisland/kaocha>\nBoth have a CLI, so you.can run them from emacs in theory, but you dont have ab emacs mode or anything integrating them first class inside emacs\nawesome! thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "531",
    "text": "I'm stuck trying to write this macro:\n```\n(ns myns.util\n  (:require [herb.core :refer-macros [&lt;class]]))\n\n(defmacro defstyled [fn-name bindings el stylem]\n  `(defn ~fn-name [~'attrs &amp; ~'body]\n     (let [body# (if (map? ~'attrs) ~'body (conj ~'body ~'attrs))\n           attrs# (if (map? ~'attrs) ~'attrs nil)]\n       (letfn [(~fn-name ~bindings ~stylem)]\n         (into [~el (merge {:class (herb.core/&lt;class ~fn-name attrs#)}\n                           attrs#)]\n           body#)))))\n```\nI want to make it so the call to `&lt;class` only includes `attrs#` if it's non-nil.\nSo in the above example, if `attrs#` is nil it should be `(herb.core/&lt;class ~fn-name)` instead.\nI've tried many ways to do this; with a simple if or concat, but I can't get it to work.\nSounds like a place where you want to unquote splice a collection instead \n`~@(when attrs# [attrs#])` ?\nThe trick being that unquote splicing an empty collection yields nothing, not nil\nthat's cool to know! sadly I get a compiler exception syntax error, and my linter tells me it's unable to resolve the symbol attrs# inside that form. could it be because attrs# is defined when the returned function is run, not the macro?\nI feel I'm a bit closer with `(apply herb.core/&lt;class ~fn-name (if (map? attrs#) [attrs#] []))` but I get `Can't take value of macro herb.core/&lt;class` so I guess I'm messing up the quoting somehow?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "532",
    "text": "Today I get an idea to focus 80% of my time on open source / documentations / tutorials , because I like make solutions for other developers. But I don\u2019t see how I could survive doing this considering money vs contracts. I didn\u2019t think how to monetise open source before too much. Does it make sense? Probably not :slightly_smiling_face: Anybody here (as a person, not corporation) make money doing mostly open source? :slightly_smiling_face:\nNice discussion for the <#C03RZGPG3|off-topic> channel\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "533",
    "text": "Why doesn't `(doseq [f [inc dec +]] (doc f))` print doc?\nthe symbols are being resolved to functions and doc takes symbols. quote to avoid evaluation\nThanks <@Jasmine>\nactually since doc is a macro, you might need to do more than that to get doc evaluated with the actual symbol\nYeah. That didn't work :slightly_smiling_face:\n```\nuser=&gt; (doseq [f `(inc)] (println f)(doc f))\nclojure.core/inc\n```\nHee hee. Sometimes, these things are trickier than you assume\n`clojure.repl/print-doc` isn't public\noh right, attrs# is defined inside the code you're generating so isn't available to unquote\nI mean you could just put an `if` around the call to &lt;class in the generated code\n```(defmacro defstyled [fn-name bindings el stylem]\n  `(defn ~fn-name [~'attrs &amp; ~'body]\n     (let [body# (if (map? ~'attrs) ~'body (conj ~'body ~'attrs))]\n       (letfn [(~fn-name ~bindings ~stylem)]\n         (into [~el (merge {:class (if (map? ~'attrs) (herb.core/&lt;class ~fn-name ~'attrs) (herb.core/&lt;class ~fn-name))}\n                           attrs#)]\n           body#)))))```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "534",
    "text": "whats the best library to consume chunked/streamed http responses? something that takes a callback or returns a channel and can automatically parse json chunks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "535",
    "text": "I'd like to serialize some data structure in EDN. `(spit)`-ing it loses `M` suffix on `BigDecimal` objects. Is there a way to avoid that (or maybe I'm using a wrong tool?)\nNone\nalso works for me if i use `(BigDecimal. 17)`\nthe screenshot is a split of the outputted edn file\nHmm, I'm doing something wrong then.\n```% clojure -e '(spit \"foo.edn\" 3M)'\n% cat foo.edn\n3\n% clojure -e '(spit \"bar.edn\" {:number 3M})'\n% cat bar.edn\n{:number 3M}\n%\n```\nWeird.\ncheck `str` on 3 vs {:number 3M} is your issue\nYes, that's different.\nwhich is what spit is calling\nWhich is `.toString` on the argument.\nso the difference is that RT.java prints bigdecs with the M added. so if you str a map you end up here but if you just str the big dec you get the bigdec's version of what a string is\n```\n\t\telse if(x instanceof BigDecimal &amp;&amp; readably) {\n\t\t\tw.write(x.toString());\n\t\t\tw.write('M');\n\t\t}\n```\nRight. Now I need to trace why it happens inside a large Clojure structure as well.\nDon't have a small reproducer yet.\nany chance you have a stringbuilder anywhere and you're building up the string yourself?\nNope, I'm getting the data from API endpoint, `clj-http.client` passes it through `cheshire`, I wrap it into top-level map and spit.\nPatreon is working quite nicely. Some software devs are making a proper salary out of it. Personally I donate to a handful of Patreon projects.\n\nI would mix that with a \"N versions back\" model. It's briefly mentioned here <https://ayende.com/blog/186147-A/making-money-from-open-source-software-how-we-do-it> (the author doesn't like it, I do)\n\ni.e. open-source n-versions-back releases on a continuous basis, while the latest-and-greatest release is closed-source and paid\ncan json express BigDecimal? and are you sure that its coming out of cheshire correctly? Also, is perhaps cheshire doing that? are you keywordizing the keys? maybe cheshire reduces over vals and strs them manually which would exemplify this behavior\nJSON numbers are size-less.\n```\n(reduce (fn [acc [k v]] (assoc acc (keyword k) (str v)))\n        {}\n        {\"number\" 3M})\n{:number \"3\"}\n```\nif cheshire does something like this\nCheshire has a specific option, and I use it: `(binding [cheshire.parse/*use-bigdecimals?* true] ...)`\nHmm, I wonder if `clj-http` has a pool inside that might interfere with that... Let me check.\nits kinda worrying that the string representation of BigDecimals changes on context due to RT\nHah, `*use-bigdecimals?*` works only if the number has a decimal dot.\nmakes sense\nSo that's the crux of the problem, one of numbers was an integer and hasn't got converted.\nSo I need to accept both bigints and integers down the line. Not a big deal.\nI would expect that `str` calls into `RT.print` (that falls back to .toString for types it does not know) instead of `.toString`. Perforrmance? \u00af\\_(\u30c4)_/\u00af\nyeah it seems like it. but i don't know the details of pr-str vs str and print-dup and all that machinery. but i'm surprised that (str 3M) and (str {:x 3M}) are so different. It _feels_ wrong but maybe this usage is above a simple `str` call\nhard to know if foot gun or bug\nI'll file a bug and we'll see.\n`(str nil)` and `(str {:a nil})` are inconsistent as well.\ncharacters too.\nClasses too.\nbigints too.\npatterns too.\nMost of special cases in `RT.print` produce output different from their built-in `.toString` function.\n<@Becki> <https://dev.clojure.org/jira/browse/CLJ-2485> \u2014 I don't expect it to be fixed though.\nwe'll see. I expect thoughtful discussion. I don't know what the conclusion of that will be.\nthank you for feedback\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "536",
    "text": "Do you know anybody from Clojure community who success with it?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "537",
    "text": "Not really. Cognitect and bbatsov are only collecting a couple hundred dollars / month.\n\nBut my thinking is, if you go boldly for it why would it not succeed?\n\ni.e. when you give people an incentive to use Patreon (or other), they will do it\ncan I prevent commas from being printed in repl evaluations?\nI don't think many are doing n-versions-back. I'd give a think to that. Not apt for libraries, but yes for things like IDEs DBs etc\nIs there a way to refer to an unevaluated form inside a macro without doing the following ?\n```\n(defmacro debug [form]\n  `(do (println (list ~@form)) ~form))\n```\n```\n(defmacro debug [form]\n  `(do\n     (println ~(list 'quote form))\n     ~form))\n```\n?\n<@Mariela> Thanks. I guess you can\u2019t do it without somehow making a list of it again.\nthat's not a list, in the same way that `'x` is not a list\n\n(clojure implements `'x` as a list though... which is why my macro looks like that)\n<@Mariela> got that.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "538",
    "text": "thanks, that did the trick!\nby the way, I really enjoyed your book clojure applied [=\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "539",
    "text": "Hmm even if I will do super great tools as open source it is for free, so who will pay for that? :wink:\nyou see my concern\nI am afraid it is way to do things only for fun, but not as everyday job, because of money.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "540",
    "text": "Shouldn\u2019t you use `(pr-str {:number 3M})` if you want to write edn?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "541",
    "text": "I love how approachable the core.async src is. I mean, 90% is way over my head, but it\u2019s like 1000x less scary than I imagined it for what it\u2019s accomplishing.\nwatch tim baldridge's videos on the macros. they are well worth the time\nI thought you would be able to use `print-method` for this to change the printing of the various types, but trying to inspect the actual object leads to a StackOverflowError for some reason:\n\n```\n(defmethod print-method clojure.lang.PersistentArrayMap [o ^java.io.Writer w] (.write w \"changed\"))\n#multifn[print-method 0x41358378]\nuser&gt; {}\nchanged\n;; Trying to change the print method by using the actual object leads to StackOverflowError:\nuser&gt; (defmethod print-method clojure.lang.PersistentArrayMap [o ^java.io.Writer w] (.write w (str o)))\n#multifn[print-method 0x41358378]\nException updating the ns-cache #error {\n :cause nil\n :via\n [{:type java.lang.StackOverflowError\n   :message nil\n   :at [clojure.lang.Var deref Var.java 197]}]\n :trace\n (...)\n```\n<https://github.com/clojure/clojure/blob/06097b1369c502090be6489be27cc280633cb1bd/src/clj/clojure/core_print.clj#L229>\nThere\u2019s the comma\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "542",
    "text": "Epic find :v:\nIs there a good writeup about `#=` reader conditional? I tried using it and it has very confusing semantics:\n```\n'{:a #=(vec (list [1 2 3]))}\n=&gt; {:a [list [1 2 3]]}\n{:a #=(vec (list [1 2 3]))}\n=&gt; {:a [#object[clojure.lang.PersistentList$Primordial 0x488c6b35 \"clojure.lang.PersistentList$Primordial@488c6b35\"] [1 2 3]]}\n```\nIt's like it evaluates first function but quotes the argument list of the said function\nIt\u2019s happening at read time so no evaluation has occurred on the args\nIt\u2019s intentionally not doc\u2019ed because it\u2019s not a public feature\n`(assoc m :foo (or (m :foo) (compute-foo)))`\nI had `or` in my first response, then changed it to a map-get operation, then back to `or` because of this. `or` is lazy.\n`or` is lazy? Thanks!\n```\nuser=&gt; (doc or)\n-------------------------\nclojure.core/or\n([] [x] [x &amp; next])\nMacro\n  Evaluates exprs one at a time, from left to right. If a form\n  returns a logical true value, or returns that value and doesn't\n  evaluate any of the other expressions, otherwise it returns the\n  value of the last expression. (or) returns nil.\n```\nthanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "543",
    "text": "This message was deleted.\nBut this would invoke (compute-foo) even if :foo is already set. :disappointed:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "544",
    "text": "None\n<http://blog.fogus.me/2010/01/22/de-chunkifying-sequences-in-clojure/>\n<https://markhneedham.com/blog/2014/04/06/clojure-not-so-lazy-sequences-a-k-a-chunking-behaviour/>\nI have a vec of symbols and quoted function calls to be used in a let-binding macro that I've quoted, and I want to turn it into a map so I can use the symbol as the key and get the quoted function back. I currently have the vec quoted, and in a thread macro I call `(partition 2) (map (juxt first identity)) (into {})` which neatly handles what I'm looking to do. My question is, why do I need to call `(map (juxt first identity))`?\nIf I leave it out, I get the `clojure.lang.Symbol cannot be cast to java.base/java.util.Map$Entry` error, but if I put it in, I've just created a list of `['symbol '(symbol (function call))]`, right?\nWhat am I missing in this situation?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "545",
    "text": "`(into {})` expects a sequence of 2-vectors, `[key val]`, that will become key-val pairs in your map. So, `(map (juxt first identity))` puts them in that form.\nI used `float-array` to pass a Java array of float to a Java method. That method returns me back an array of float. Is there a sister function of `float-array` that does the inverse, so that I can use the array of float with Clojure? Or am I misunderstanding something?\nLike how to print the array?\ni believe `vec` can take arrays and knows how to make PersistentVectors from them\nYes that work, thanks a lot!\nI added an entry into clojuredocs to make it more visible <https://clojuredocs.org/clojure.core/float-array>\n`(into [] f)` works as well (with f a Java array of floats)\nAh, okay. Thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "546",
    "text": "I need a way to use  `partition-all` with a step of 1 but as a transducer... is there some way to get this by composing the transducer producing functions available in clojure.core or am I best off just sort of \"copying\" the  transducer portion of the `partition-all` source code to meet my needs\nwhats a good http client that allows a callback per chunk for streaming requests?\n<@Rosia> You can use the `partition` from the xforms library.\n```\n(require '[net.cgrand.xforms :as xfs])\n\n(= [[0 1 2] [1 2 3] [2 3 4]]\n   (into [] (xfs/partition 3 1) (range 5)))\n```\n<@Doreatha> thanks! I just found this a minute before your response\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "547",
    "text": "is there a trick to turn a clojure form into a list recursively at macro-time?\nex:\n```\n(defn foo [])\n(defn bar [])\n(defn baz [])\n\n(my-macro (foo (bar (baz))))\n;; =&gt; (#function[user/foo] (#function[user/bar] (#function [user/baz])))\n```\n<@Meagan> how about this: `(defmacro my-macro [xs] (flatten xs))` and then \"(macroexpand `(my-macro (foo (bar (baz))))\" ?\nah sorry, I probably didn\u2019t explain well. I don\u2019t want to flatten, I want to retain the nested-ness\nI just don\u2019t want it to be evaluated\noh sorry, i misread. But in that case the macro can just return it without calling flatten, and the rest is the same\nI went with this for now:\n```\n(defn listify [f]\n  (if (seq? f)\n    `(list ~@(map listify f))\n    f))\n\n(defmacro my-macro [&amp; body]\n  `(list ~@(map listify body)))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "548",
    "text": "hey all, so nil is considering less than everything else when comparing two things. is there a value that's considered more than everything else?\nacross all types? seems like a tough order\nyea\n42\nthe greatest number\nthere's the obvious\n```\n(defn my-compare [x y]\n  (cond (= x y) 0\n        (= x :value/max) 1\n        (= y :value/max) -1\n        :else            (compare x y)))\n```\nI wanted to do something like this:\n```\n\n(deftype MAX []\n  java.lang.Comparable\n  (compareTo [this _]\n    1))\n(def absolute-biggest-thing-ever (MAX.))\n```\nwhich works for `(compare MAX 3)` but not the other way around. you get class cast exceptions\n'x =&gt; (quote x)\n(quote x) =&gt; x\n<@Becki> you have to use a custom comparator instead of relying on the default one that uses Comparable\nif you attach metadata to the form (quote x), then evaluate the form and get x, the metadata isn't on x, it is still on the form from before evaluation\nlike the `my-compare` example i gave or something else?\n<@Debora> In Clojure's clojure.core/compare implementation, is there some value that is greater than everything else?  No.  There is a greatest Long (Long/MAX_VALUE), and a greatest Double value (+Inf), but there is no single value that is comparable to all other values, and greater than all of them.  nil is special that way.\nWhy?  Probably because Rich new that nil-punning was going to be common in Clojure, and didn't want exceptions raised when sorting collections using clojure.core/compare that contained nil mixed with other types.  That is just my guess, though.\nYou are free to write your own custom comparator function that does whatever you like.  If for some reason there is some value you wanted to be comparable to, and greater than, all other values, it isn't clear to me what would be a reasonable choice for such a value. You could choose `nil` for that, but then it would be greater than all other values, not less than all other values.\nI use it every week to collect numbers of votes on each JIRA ticket.\nThe URLs I use are in this code somewhere: <https://github.com/jafingerhut/clj-prescreen/blob/master/src/clj_prescreen/presc.clj>  Search for occurrences of http and you should see them.\nI do not necessarily exercise parts of the API that you want to use...\nsure. i will poke around and see if i can figure it out\nI notice that my code never uses 'rest' in any of its URLs.  Also note that Clojure JIRA may be an older version than the most recent, by several years.\n<@Rosaline> built a neat looking way to query jira with core.logic but mentioned that the clojure jira doesn't send a lot of stuff back in the api\nyeah i don't recognize the `sr` in the urls, or the `jira.issueviews` fragment\ni'm assuming it is quite old and unloved\nWell, loved by a few, and stable.  Updating it can be a pain, I am sure.\napparently `Atlassian JIRA (v4.4#649-r158309)`\ncirca 2011\nI am sure it gets more fun to update to the latest version, the more intermediate versions there are :slightly_smiling_face:\ngood reason to use a service and let someone else worry about upgrades :smile:\nUntil and unless they break APIs you use without telling you\nlooks like we're on `v7.6.6` at work, which is what i've developed against previously. so i bet none of my code will work against clojure's\nha parts of it work :slightly_smiling_face:\nThe latter is implemented in Clojure\nThe former in Java.  The Clojure library that tools.reader.edn lives in, also works in ClojureScript\n```java --version\nopenjdk 11.0.2 2019-01-15\nOpenJDK Runtime Environment 18.9 (build 11.0.2+9)\nOpenJDK 64-Bit Server VM 18.9 (build 11.0.2+9, mixed mode)``` but same issue with java 8\nthe latest cider has moved to a new nrepl - that exception indicates the old nrepl. I don't know quite enough to point you at where things are amiss\nI think things that would help someone answer this better would be which leiningen version and cider version you have\nusually lein 2.9.0 is enough. check your deps for the presence of tools.deps.nrepl which is poisonous to have now\nLooks to me like an old cider version? the error is that t.d.n can't be found. You might have cider in your ~/.lein/profile.clj\nYes, you are right, I completely forget this file `~/.lein/profiles.clj` which was pointing to an old version of cider, I put the version displayed on clojars and it worked. Thank you.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "549",
    "text": "im probably missing something obvious but why\n\n```\n(meta ^:x 'x)\n``` returns nil\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "550",
    "text": "has anyone hit clojure jira's api? i tried a few paths under <http://dev.clojure.org|dev.clojure.org> but getting 404. not sure if it's enabled.\nsample path i tried `GET`ing <https://dev.clojure.org/jira/rest/api/3/user/assignable/multiProjectSearch> (with auth) getting 404\nawesome, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "551",
    "text": "When you\u2019re using the api, please be kind. It\u2019s not on a mammoth server or anything\nI\u2019ve unsuccessfully spent weeks trying to upgrade this jira instance to their cloud version. It\u2019s a nightmare.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "552",
    "text": "Jira is brilliantly engineered in that it's extremely hard to get out of once you're in. On the other hand, the same indeed applies to Jira itself.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "553",
    "text": "Where is the difference between clojure.edn and clojure.tools.reader.edn?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "554",
    "text": "Hi, I reinstalled Java and lein, but lein seems to be broken: ```lein\nclojure.lang.Compiler$CompilerException: Syntax error compiling at (cider/nrepl.clj:1:1).\n#:clojure.error{:phase :compile-syntax-check, :line 1, :column 1, :source \"cider/nrepl.clj\"}\n...\nCaused by: java.io.FileNotFoundException: Could not locate clojure/tools/nrepl/server__init.class, clojure/tools/nrepl/server.clj or clojure/tools/nrepl/server.cljc on classpath.\n at clojure.lang.RT.load (RT.java:466)```\nlein installed with brew and I tried from the cli command tool\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "555",
    "text": "Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "556",
    "text": "thanks <@Latonya> <@Becki>, I was asking for a \"max value\" value only out of convenience\ni just ended up writing my own comparator for the specific use case\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "557",
    "text": "So, anyone knows what's up with pRepl and what is it?\nGiven there is already nRepl and unRepl. I'm not sure what it can bring to the table\nThough I would like it if it was more like unrepl\nOr it seems maybe it can be used in conjunction with unRepl?\nit cannot be used with unrepl\nit does framing on output -- unrepl expects a raw stream\nanyways, it's used in REBL and various other things\n<https://github.com/clojure/clojure/blob/master/changes.md#25-prepl-alpha>\nIt'll be nice to see more tooling using prepl so less dependencies need to be involved.\nHum, I'm not sure I'm onboard with pRepl then. Unrepl seems just all around better\nWhich already allows for zero dependencies\nActually, I\u2019d say prepl is not framing, but data over a stream\nIs the data also streamed though? Otherwise it would be less efficient no?\nWhat else could it be?\nWell, I mean. Say you return a long printed string. Can you start decoding the characters before the full string is returned?\nIf it is packed in a data notation, I feel you'd need to wait for the whole thing \nWhere as with unrepl bytestream, you can do whatever you want. You could return streaming video for that matter\nWell, the usual caveats apply--JS doesn\u2019t support Java interop or Java-style threads. If your Clojure code isn\u2019t running into any Java/JS incompatibilities, it probably compiles as CLJS already.\nWould replacing a node in a tree with clojure.zip be an example of path copying?\nI may not have understood what you\u2019re asking for tho.\n```With the path copying method a copy of all nodes is made on the path to any node which is about to be modified. These changes must then be cascaded back through the data structure: all nodes that pointed to the old node must be modified to point to the new node instead. These modifications cause more cascading changes, and so on, until the root node is reached.```\nI think it pretty much describes zipping up a tree. Just realized that stuff I\u2019ve been reading about Scala is described as path copying rather than anything related to functional zipper.\nI guess pRepl is more a replacement for nRepl then. Which would be bundled with Clojure. It seems like the advantage over unRepl might just be easier for tooling to build on, because of the defined data-format.\nNo, you understand correctly. =D But, just because I have the org.clojure/clojurescript dependency it will compile to cljs? (if I have no incompatibilities)\nIt\u2019s packed in an edn string, so in general you would wait to read the whole data structure response (unless your client was very clever)\nBut the key here is that in general your interactions with a repl are short, not a streaming video\nI would tend to expect so, that was one of the goals of CLJS. You might also want to use .cljc files if you\u2019re interested in code that compiles to both.\nI see all of them as different approaches\nPrepl and unrepl are built over streams and certainly Rich has expressed at great length the heritage and benefits of streams for composability and portability\nI guess I'm not seeing the value proposition of pRepl over nRepl except for it being bundled in the Clojure jar.\nSure, there's some implementation details differences. \nEvery Unix thing already knows how to work with character streams\nStream repls compose, so you can nest one inside another\nMaybe I don't know enough about nRepl then. What does it return if not a stream?\nIt\u2019s a framed protocol\nWhat does that mean?\nI think this is untrue\nUnrepl can start a nested session within a single frame of prepl\nThat\u2019s what I\u2019ve always used, I haven\u2019t really looked for a better one.\nI think, anyway \nJust to clarify: I have an application written in Clojure and I would like to compile it to cljs/js and run it in a Node VM.\nProbably better for you to go read their well written docs than for me to explain\nThis is possible, right?\nIt\u2019s bencoded messages over a socket\nSounds plausible, but you\u2019ll have to port the code that works with dependencies, so anything to do with, say, databases or web servers\nThat can be a bigger rabbit-hole than you might think because you may have Clojure libraries that depend on something Java-specific internally, meaning you\u2019ll have to find a CLJS replacement for the whole library.\nthat is not strictly accurate\nnrepl in practice is mostly bencoded messages over a socket, but you can define different transports\nDepending on the application, it may prove to be simpler/faster to use the Clojure implementation as a reference, and write the CLJS from scratch. But that\u2019s a worst-case scenario.\nI must admit I am some what baffled at the turn prepl has taken, because it has been my experience that tunneling framed messages is easier to do both over on framed message protocols (like websockets) and over streams (like a socket), and when nrepl as a project started I seem to recall rich suggesting looking at STOMP(a message bus protocol) for inspiration\nRight, make sense! Thanks! Do you have any doc/post about compiling clj to cljs? I just would like to run some \" lein comile clj to cljs\" and see some exceptions popping up (because of some Java/JS incompatibilities).\n(tunneling is near and dear to me because at work I do a lot with an nrepl tunneled over <http://socket.io|socket.io>)\nbut then, like reading the doc string on prepl, most of the doc string is example framed messages that out-fn is called with\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "558",
    "text": "Hi folks! Is there a way of compiling clojure files to clojuresctipt/js ?\nHere\u2019s the link if you haven\u2019t seen the docs for this: <https://clojure.org/guides/reader_conditionals>\nThanks! I am using lein-cljsbuild. Is there better one?\nso the idea that that you can differentiate between prepl and nrepl saying one is framed messages and the other is streams, rings rather hallow\nWhat is the best possible way to generate list using clojure on a map like\n\n ```(def somemap {:name 'John Doe' :gender 'male'})```\n\nand generate\n ```(some-ns/property :name 'John Doe')(some-ns/property :gender 'male')```\nI would just start by copying the files into a `cljs` directory instead of `clj`, and changing the file extensions from `clj` to `cljs`. (Actually, I\u2019d inspect them as I copied them just to see what I was getting into.)\nif you want a list of those lists `(map (fn [entry] (cons 'some-ns/property entry)) somemap)`\nbut often lists aren't the right data type\ngenerate is kind of an ambiguous word there\nand the def isn't even valid clojure\n<@Dann> <@Rosaline> , I m trying to generate this form from a map ```(traverse g (add-V :person)\n              (property :name \"John Doe\")\n              (property :gender \"male\")))```\ngenerate is again ambiguous\nbut, assuming traverse is a function, and property is a function, and what you want to do is call the traverse function with those arguments (instead of creating a that as a datastructure)\n`(apply traverse g (add-V :person) (for [[k v] somemap] (property k v)))`\nyes traverse and property are functions\nassuming you fix the broken quotes on somemap\nI\nalthough, my (wild)guess is you are using clojurescript, not clojure, and for in clojurescript might not work on maps like that\n<@Rosaline> I m dabbling with ogre library for JanusGraph and trying to create a graph traversal in clojure\ni don't see how that could work\n\"generate this form\" makes me think you might be trying to do a macro - is traverse a function where you can precalculate args, or a macro that needs another macro around it?\nI saw single quoted strings and swung for the fence\nphilosophical design question: what makes some data metadata?\nI'm not sure I see the difference between bencode, and EDN. Both sound framed to me. And neither seem to be streamable protocols. They both require the full payload to be received before decoding can proceed. That said, EDN in Clojure-land seems more natural. So I still feel pRepl is more like a new take on nRepl, with Clojure jar bundling. Which is fine, better then nRepl. But unRepl still seems like the wholy grail to me. That said, I recognize it might be harder to implement a tool with unRepl, since you're left implementing the protocol you want on your own. So, maybe pRepl is the right compromise in this case.\nI haven't seen anything in unrepl that couldn't be done in nrepl\nin fact technomancy had a proposal for using hypermedia kind of things to build emacs/vim/whatever uis for tooling on top of nrepl instead of having to build them again for every editor\nso, here is how ogre lets us create a vertex in Janusgraph with traverse function. so I am wondering if there is a macro approach  - <https://github.com/clojurewerkz/ogre/blob/master/test/clojure/clojurewerkz/ogre/suite/add_vertex_test.clj#L22>\nWell, for me the differentiator for unRepl, is really just the idea that you inject your repl code through a standard socket repl or clojure.main repl.\nSo if nRepl injected itself like that, to bootstrap, instead of requiring hard dependencies. Then it would be totally fine\n<@Rosaline> I've seen hints of this in nREPL, but not sure where this was going.  Do you know of a blog post or something?\nI don't recall, it was a billion years ago\ndon't use a macro if you dont' need one - if traverse is a function, use a function like hiredman demonstrated\nI think he even proposed a talk at the conj about (I don't recall if it was accepted)\nmacros can do a few things a function can't, but are less flexible / usable in other code, so if either a macro or a function would work, use a function\n<https://github.com/technomancy/nrepl-discover>\nEquality and hashing ignore metadata, so it\u2019s best used for annotations that you would not consider part of an object\u2019s value\nsure, thank you. I will check his approach\nIt's like ultimate REPL reification\nnrepl if I recall shipped with a teletype transport which was a socket repl\nprepl being streaming means that you can connect remotely and still nest new repls, which you can't with nrepl afaik. I think cgrand was even looking at deploying unrepl that way over prepl?\nI started working on injectable nRepl.\ndepends what you mean by nest repls, but nrepl middleware can pretty much do whatever it wants\nI mean like run `clojure.main/repl`\nI have a repo somewhere that runs swim (clustering) over nrepl, and then lets you proxy in to different members of the cluster\nYes! Awesome, I was just thinking that in theory, unrepl could inject nRepl or even pRepl (:p), though that one is just part of Clojure so no reason to do so. That's great.\nBy the way, is there currently a way to start the socket repl from within a REPL? Or you need to have the JVM arg on app startup ?\nit has a programatic api\nso you can start it yourself if you like\n<http://clojure.github.io/clojure/clojure.core-api.html#clojure.core.server/start-server>\nAh awesome, I was looking for that, but couldn't find it.\nSo, does each socket repl get a dedicated thread?\neach socket server has a thread, and each incoming client gets its own thread\nyou could just go read the code for this too, it's pretty straightforward\nAh yes, I see from the source. Cool\nSo, what does the \"p\" stand for, just curious?\nin pRepl\n:stuck_out_tongue:\nprogram\nas in not, designed for humans but for programs (like rebl) to talk\nI see, that makes sense.\n<https://groups.google.com/forum/#!msg/clojure-dev/Dl3Stw5iRVA/IHoVWiJz5UIJ> is some stuff from rich when the socket repl was added that you might find useful to read if you're interested in his opinions on it\nit's a long thread\nI see that haha.\nthis pre-dates prepl but I think you can project most of what's said there to prepl as well\nHum, havn't read it all. But I wonder if pRepl is a realization that no one used the Socket Repl. And thus, a thin RPC, or lets call it more, a easier time building REPL based programs was needed to gain more adoption. Thus pRepl\nit's important to separate the socket server from the socket repl\nthe socket server is the more important bit imo\nthe socket repl is the clojure.main repl, with a few minor tweaks, over the socket server\nto some degree, it is mostly a minimal example to be in the box - we never expected it by itself to be used much\nwe expected more people would build interesting custom remote repls (unrepl is a great example)\nstepping away... need to get some work done :)\nthe whole thing is so frustrating to read, the stream vs. messaging framing because streams are an ordered sequence of messages, the rpc vs. repl framing because after saying a repl is not an \"Eval RPC Server/Window\", rich turns around and releases prepl, which I mean, a programatic repl, how is that not an rpc server?\nIt supports streamed messages which are independent. If you have a thread pumping out, you\u2019ll keep getting messages independent from the repl\nlike tap messages get pushed\nI'm taking this bit: `With the improved read-ability of REPL output, I think an edn-based REPL makes a fine RPC server for program-to-program communication, especially since the set of 'verbs' supported is bounded only by what you can evaluate, and the types of things you might discover is open.` This sounds a lot like pRepl. And I feel it is. I can see how the Socket server is the true primitive. And then unRepl, happened to be the only take on it. So maybe, it is true that people seemed to have been baffled by how bare bones socket server was, and just having to decide of a serialization format to exchange was too hard for tooling to adopt it. So maybe pRepl is trying to solve that. Adding a basic edn serialization on top.\nWhich is that a response to? I can see how that could be used to argued against it being rpc, but then again plenty of rpc frameworks have someway to stream information. As for streams vs. messages you can't describe what the stream is doing without calling it messages, so I dunno.\nI feel like my parents got divorced so I get more toys (so many repls) but then they keep making digs at the toys the other parent got me\nand like, it is pretty clear they are all legos\nIt's really important to separate Socket Server vs. Socket REPL\n\nSocket REPL is `clojure.core.server/main` running as the \"connection accept\" function for a Socket Server\nYou can conceivably run a JSON-RPC endpoint, or some HTTP server as your \"connection accept\" function\nprepl is another thing you can run on a Socket *Server* -- specifically `clojure.core.server/io-prepl` would be the accept function for that\nI am not sure what point you are trying to make?\njust re-articulating a previous point\ndiverse transports? nrepl has them (as I said nrepl ships with bencoded data over sockets and a plain socket repl, and there are throd party transports for things like message queues and http)\nRight, I see that. I guess the thing is. Once you have a socket server, and an accept function that can take a char-stream and eval it, and return a char-stream of the result. You have all the power as a client. So now, you can send to be evaled the entire code of pRepl if you wanted. And eval a swap of the socket server accept-fn to be the one you just sent.\nThat to me is fantastic. And from my understanding, its the idea behind unRepl\nNow, pRepl, or nRepl, or wtv else. Those are just protocols or middleware, etc. over your foundation. Maybe as a tool writer, I prefer to exchange EDN back and forth. Or maybe I prefer bencode.\nunRepl lets me choose which\nThat said, its also an added responsibility to the tool writer. So maybe, I don't care. And its best that Rick just says, it'll be EDN from now on.\ntransport encoding is the least interesting part of this.  How the REPL handles `*in*` is really important\nHum, go on\nI haven't looked recently so I don't know if this is out of date information w.r.t. nREPL,  but that old thread above brought up some difficulties with issuing `(read *in*)`  in nREPL\n```(defn user-prompt [s]\n  (println s)\n  (read *in*))```\nyeah, it is tricky, but doable\nso that is _fundamental_ to a REPL\n```\n\"Returns a LineNumberingPushbackReader suitable for binding to *in*.\n   When something attempts to read from it, it will (if empty) send a\n   {:status :need-input} message on the provided transport so the client/user\n   can provide content to be read.\"\n```\nbut it also illustrates the problems transporting streams over messages\nand shouldn't be tricky\nnesting repls, etc.\ntransport encoding is as  simple as swapping the R and P in REPL.\nand most intresting protocols these days (http, websockets, etc) are message based\nso defining a repl entirely on streams limits its reach outside of a single machine\nI remember Stu saying something like that on the apropos cast i think? His daughter was making a program and requested the users height or something. And he said it should read from in, not send a message.\nBut i don't see the full importance of that\nas I have said in the past, I have a nrepl repl tunneled over <http://socket.io|socket.io>\nand I just typed (read) in to it\nemacs prompted me for input\nI typed ':a'\nthe result was :a\nlike, even tcp socket \"streams\" are not streams\nthey are sequence of messages\nso framing streams as some fundamental answer that will give us super powers is kind of silly\nthere are molecules too but we're talking about the user-facing abstraction\n<https://clojurians.slack.com/archives/C03S1KBA2/p1550605401820900>\nwhat was that in reference to? ^\nRich sais: &gt; There must be some source (stream) of things read. That source is the same source that should be used should the code being evaluated call 'read'.\nthe read input\nAnd that seems hard to argue against. But maybe nRepl supports this now.\nwhen I said \"tricky but doable\" and then did it, I was imply it is tricky but has been done\nnot \"it is tricky, and you kind of have to hack around to make it work\"\nI think streaming matters. But I'm not sure pRepl qualifies as streaming.\nWhen I think streaming, I think, partial.\nLike if I wanted to return a big image from the REPL, and have it rendered in my tool.\nwhat you mean is you want results split over multiple messages\n\"streaming\"\nYes, where the messages don't add considerable overhead to the stream. And where you can begin to deserialize very early.\nyou can write an nrepl middleware that recognizes java Image objects and starts and a webserver and serves them over http and just sends a link to the client repl\nThat's a lot of roudabout\nIf my REPL just returns bytestreams. It could just return the image bytes with a byte header and done\nI think you think more about it that is not enough\nbut you can also certainly write an nrepl middleware that detects java Image objects and sends them back as a bunch of bytes\nardem added this to cider-nrepl i believe\n(but for example, if you are transporting over something that json encodes things will be tricky)\nyeah\nYes, but now I'm having to add middleware dependencies ahead of time. So to use a tool, the user is forced to add code to their program. That's why I love unRepl\nWith unRepl, the tool is in full control. And can choose to be as sophisticated, or as little.\nWith no pre-req from the user, appart for starting a socket repl.\nall critiques of nrepl I have seen so far instead of making me think \"well nrepl could be better\" leave me thinking \"oh, I guess so and so hasn't used nrepl much\"\nMy critique seems very real. I don't want to have to add nRepl to my code.\nOr any additional middleware\nyou can add it the way you use any other library\nYes, but that is a burden.\nWhich I don't want.\nif you want to inject it right in to an existing repl, I don't know if I buy there being a lot of demand for that, but if there is, while nrepl can't do that now, I don't see why reason why it couldn't do that\nIf it were to do that, it basically becomes unRepl.\nat one point, and this may predate nrepl in the slime/swank days that is how a lot of the functionality was done, it would inject code in to the clojure process\nversion that is a nightmare, and making sure extensions work together, etc\nwhat did it use to inject code into the process?\nthe swank-clojure repl\nso of course there was a backlash, and now I guess we are scheduled for a backlash to the backlash\nYa, so this is where unRepl comes into play as well. Once you say, let's inject things into a socket repl. You have so much freedom, that you can also mess up, and different tools could inject incompatible things. Which is where, you want a framework around it. That's where unRepl goes beyond just the idea of injecting REPL functionality into a socket repl, into an actual library to use.\nThat said, nRepl isn't free of that issue also. Different middlewares need to play well with each other.\nthey do, but atleast if you have to included them in a versioned manner in your project.clj or deps.edn or whatever you can try to pin them to something that works together\nbut if we just have a free for all of all your tooling just evaling whatever\nWell, I can't speak of more details, since it is beyond my knowledge. But in my experience, I've had less issues overall with unRepl then nRepl.\nbecause unrepl is new and the field is empty\nI don't use any middleware with nrepl and have also never had the problem\nYes, possibly. I'm just not sure that it would create a worse field.\nFor tooling, nRepl seems non ideal to me.\nthe idea that unrepl is better because people haven't written terrible tools around it yet, well, just wait\nand in a year or two you can move on to the next repl\nwhat tooling have you written for unrepl and nrepl?\nOh, you want refactoring, add this to your project.clj file. Oh, you don't want the refactor lib deployed to prod, okay, figure out a way to use profiles, or aliases to only depend on it in dev. Oh but now, you actually do want to connect to a prod remote repl, and miss your auto-complete? Well too bad, maybe just include that middleware when going to prod?\nBy the way, I'm not bashing on nRepl.\nIt is great, and does a lot. The functionality is what matters to me.\nI am not interesting in being the defender of nrepl\nWhich one gives me a better user experience.\nI take issue with people making bad comparisons to bolster their preferred solution\nI get it, you like whatever, everyone likes things\nWell, I'm not feeling like I'm making bad comparisons. I'm only stating a difference, which I think is not mistaken. nRepl requires hard dependencies to it and its middlewares. UnRepl does not.\nAnd others seem to say that nRepl handles input and output in a way that makes certain code not behave normally. I can't speak to that fact. Maybe nRepl is handling all that correctly now, so it isn't an issue anymore.\nFinally, I feel neither nRepl nor pRepl can allow for streaming data. So there use case suffers when you need to return gigantic results. Obviously, no tools needs this as of yet. But I like that UnRepl doesn't limit that, because the tool could choose its own mechanism.\nOr might be more fair for me to say, limited streaming capabilities\nI'm not totally sure about that last one though. I might be wrong about both nRepl and pRepl in that regards, I admit.\nI also understand that, none of these might seem like good enough differentiator to warrant splitting the REPL ecosystem in three. And ya, maybe that'll end up worst, now having some tools use nRepl, others pRepl, and some more unRepl.\nAnyways, I just wanted to understand where pRepl differentiated itself from nRepl, or unRepl. So thanks everyone for helping me understand that better.\nnot a known issue, file a jira\nnrepl can \u201cstream\u201d evaluation results over one or more messages since 0.6, and it was always possible with middleware (cider\u2019s pretty printing middleware has done that for a long time). So you can interrupt an evaluation while printing a large (or infinite) result\nHey thanks for that piece of info <@Vernia> I know you've been hard at work on the cider orchard and nRepl. I love all the improvements being done. And actually agree with <@Ingrid> choice to stick with nRepl and double down. Lots of good stuff uses it, and it makes sense to just keep improving and making better what we already have.\nI think it\u2019s a good thing if there are other REPL implementations tbh, tooling ecosystems can be diverse without being fragmented. If nrepl makes tradeoffs that dont make sense in some circumstances (i.e. how it handles `*in*` / `*out*`) then we _should_ have other options\nWould you really rather inject some tooling code into prod than include it as a normal dependency though?\nI agree that sideloading/upgrading is a cool feature but having to add a dep or two surely isn\u2019t a blocker. lein and boot bundle nrepl anyway :slightly_smiling_face:\nI think once the nREPL clients can side-load the `nrepl` dependency over a Socket REPL or pREPL, no one will really care about the differences.\nIt'll just become more and more common to start from a simple Socket REPL or pREPL, initiated by Clojure itself based on JVM options, and any and all tooling will start from that point and build up.\nFor me, that's the main benefit: you can start an arbitrary JVM process (that contains Clojure), using JVM options to start a basic REPL, and then connect to that process from any editor, command-line tool, whatever, using whatever set of tooling features you like best.\nWRT nrepl to a cljs target, interrupt doesn't actually work.\nThat depends on which cljs repl you\u2019re using \u2013 e.g. Nashorn handles interruption how you\u2019d expect since it\u2019s in the same runtime. Any kind of browser or foreign runtime and it gets complicated\naye\n<https://dev.clojure.org/jira/browse/CLJ-2486>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "559",
    "text": "my generator generates invalid `inst` 's\nIs it a know issue?\n`clj -Srepro -Sdeps '{:deps {org.clojure/test.check {:mvn/version \"0.10.0-alpha3\"}}}' -e \"(do (require '[clojure.test.check.generators :as gen] '[clojure.spec.alpha :as s]) (gen/generate (gen/vector (s/gen inst?)) 120 6))\"`\n`[#inst \"1970-01-01T01:24:38.462-00:00\" #inst \"1969-12-06T11:54:24.666-00:00\" #inst \"820499-07-18T05:28:23.398-00:00\" #inst \"1969-08-08T01:04:53.430-00:00\" #inst \"1970-01-01T00:00:00.000-00:00\" #inst \"1970-01-01T00:00:00.001-00:00\"]`\nThe `3` one: `#inst \"820499-07-18T05:28:23.398-00:00\"` the reader can read it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "560",
    "text": "I spent lunch thinking about streams vs. messages, and it seems like what differentiates nrepl and socket repl/prepl in that regard is, nrepl has different message types for \"user input\" and \"forms to evaluate input\" where as for socket repl/prepl there is effectively one \"input\" message type for both\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "561",
    "text": "are there any libraries that modify clojure.test output for exceptions to also show the `ex-data`?\nclojure 1.10 does now I think\nyeah, that was CLJ-1209\ndoes it print _everything_?\nis it pretty printed?\n`*print-length*`?\nwhat do I look like, a go-try-it-machine?\nDear Clojurists, any recommendations for DynamoDB API's?\nSo far, Faraday <https://github.com/ptaoussanis/faraday> looks the most promising, even though last commit was on 2017 :thinking_face:\nyou could use the new cognitect-labs aws-api\n<https://github.com/cognitect-labs/aws-api>\nthanks <@Jasmine>\nI will give it a shot\n<https://github.com/cognitect-labs/aws-api/blob/master/examples/dynamodb_examples.clj>\nI've used faraday a little, ended up ripping it of a project in favor of the java sdk (and ultimately getting rid of dynamo altogether and the deployment target changed). faraday was a little too magic for my taste, if you try and do anything actually database like with dynamo vs. just using it as a key value store, a lot of the decisions faraday makes with regards to serialization will bite you\naws-api doesn't use java sdk, just makes web calls, so it's much lighter weight\nyeah, that example looks great\nworking with the java sdk is also frustrating because you can tell it is all json under the hood but you have to build all these java objects, which the aws-api stuff avoids\nwhat, you don't like needless data -&gt; object -&gt; data transformations?\nI first parsed that as \"needless data\" -&gt; \"object\" -&gt; \"data transformations\" and that was much weirder\n<@Eugena> Luckily you don't have to try to chain `property` calls together as they mutate the underlying traversal object. Something like\n```(defn add-properties\n  [traversal m]\n  (doseq [[k v] m]\n    (o/property traversal k v))\n  traversal)``` will work. That saves you from a fairly nasty macro that I didn't enjoy trying to write\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "562",
    "text": "that's like the spring module for monads right?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "563",
    "text": "For once I was happy with mutable state :man-shrugging:\nIs there a way to expose an nrepl port (remote) to cider for a clj/deps instantiated repl?\nssh port forwarding?\nthere is a lot to unpack there\n<@Kirstin> are you asking how to use CIDER to connect to a remote REPL, or how to setup your project to include nREPL\nwhat is a clj/deps instantiated repl?\nthe clojure.main repl? the socket repl? a nrepl server in your code?\n<@Meagan> the former. I know how to do it generally just not for a repl started via `clj` (with a backing deps.edn)\n`M-x cider-connect` or something to that effect\n<@Rosaline> it\u2019s literally what you get if you just run the \u2018clj` executable \nI know how to do it on the cider/emacs side. But doesn\u2019t the repl server have to somehow include nrepl?\noh, okay, so you meant the latter\nthe old nrepl project has a great readme that explains how to embed an nrepl server\nthe new project has moved it all in to some fancy docs site that doesn't work without javascript\n<https://github.com/clojure/tools.nrepl#embedding-nrepl-starting-a-server>\nSo no one has made this automatic as it is for Leiningen?\n<https://nrepl.org/nrepl/0.6.0/usage/server.html>\n```\n    (nrepl-server/start-server :bind \"0.0.0.0\" :port nrepl-port\n                               :handler cider-nrepl-handler)\n```\ni did this about two hours ago at my new job :slightly_smiling_face:\nGood timing lol\n`clj -Sdeps '{:deps {nrepl/nrepl {:mvn/version \"0.5.3\"}}}' -m nrepl.cmdline`\n<https://nrepl.org/nrepl/usage/server.html#_using_clojure_cli_tools>\nSorry, my fault! \nI would actually yes.\nAlthough I expected antora not to be js dependent, I might report this upstream \nNormally my flow is, have issue, ssh to prod host, start a second instance of my app with socket.repl flag. Connect to REPL and debug.\nWell, actually, I start a second instance into clojure.main to be more precise. And then I use unRepl to enhance the clojure.main repl to support all kinds of cool features.\nThat bypasses my server from instantiating, and thus avoids binding to an existing port, as well as make sure it is not serving traffic\nI don't think the dependencies are a huge ordeal. But, its a pain point. Especially to newcomers. There's a reason cider-jack-in choose to inject them into lein.\n<@Madeleine> that's what i was looking for. thx!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "564",
    "text": "<@Becki> thx! :+1::skin-tone-2:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "565",
    "text": "That (and a whole lot more) is in my `.clojure/deps.edn` file <@Kirstin> <https://github.com/seancorfield/dot-clojure/blob/master/deps.edn#L47> as some inspiration of what you can do with CLI / `deps.edn`\ncool, thx\nwhat does your `clj` invocation to utilize the `main-opts` look like?\nis it just: `clj -R:nREPL` ?\nHmm, I\u2019ll have to learn about that. My clj usage is rather shallow at this point \n:+1::skin-tone-2:Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "566",
    "text": "I pretty much just use `-A` for everything -- so for aliases where I might want just the dependencies sometimes and also the main opts other times, I tend to break them into two aliases. Hence `-A:test:runner` for example, and the ability to combine the REBL aliases with others to add dependencies, start a Socket REPL Server, and so on.\nHappy to answer any questions -- we switched over from Boot to CLI / `deps.edn` completely last year, after being on Boot for three years (we were on Leiningen for four years before that). Feel free to DM me about it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "567",
    "text": "On a lein of  2.9.0 on Java 1.8 and a cider/nrepl of 0.21, I am unable to ctrl-D to interrupt infinite loops. Anyone else see this? It was perfectly fine until 0.20\ncan you open an issue with a simple repro? I understood it was supposed to be better in this release\nalso <#C0617A8PQ|cider> might be a good place to discuss\nanyone know of a way to programmatically upgrade lein that skips the confirm? i'm doing `yes | lein upgrade 2.9.0` but i once made a 3GB file this way so i'd prefer a flag if it was available\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "568",
    "text": "How do I provide the missing arg?  `(instance?  ?  (int-array [1 2 3 4 5]))`\n`(Class/forName \"[I\")`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "569",
    "text": "Is there a way to call a static method from native binary compiled via graalvm native-image command?\nCan anybody provide a little assistance please? I have this function\n```(defn color\n  [r g b]\n  (java.awt.Color. r g b))```\nthat wraps the java.awt.Color constructor.\n\nWhen I use the function like this `(color 255 255 255)`, this `(java.awt.Color. 255 255 255)` and this `(java.awt.Color. 1.0 1.0 1.0)` it works, but not `(color 1.0 1.0 1.0)`\n\nIt throws an exception `IllegalArgument ... No matching ctor found for class java.awt.Color`\nBut when calling directly the constructor it works, any idea how to deal with it?\nturn on reflection warnings and you'll see that your call inside the body of that function is reflective.\nyou'll need to hint either the args to the function or the args to the constructor (both are not necessary)\n<https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/java/awt/Color.html>\nthere are two constructors and clojure can't tell your intent statically\ninteresting. how would you make the `color` function polymorphic (like the Java constructor is)?\nI thought I could use the dynamism of clojure to have both constructor wrapped in the same function.\nAnd I thought I can't have multiple definition of the same arity? Like how to differentiate one constructor from the other? (appart from creating two functions)\n```(defn color\n ([r g b]\n  (java.awt.Color. r g b))\n ([rf gf bf]\n   (java.awt.Color. rf gf bf)))\n```\nI cant do that can I?\nnor\n```(defn color\n  ([^long r ^long g ^long b]\n   (java.awt.Color. r g b))\n  ([^double rf ^double gf ^double bf]\n   (java.awt.Color. rf gf bf)))\n```\n<@Laurene> no, but you can do (if (double? rf) (java.awt.Color ^double rf ^double gf ^double bf) (java.awt.Color. ^int rf ...)))\nYou are asking Clojure to make a decision at runtime, in any case, but it doesn't know how.\n<@Lemuel> oh I see, doing runtime type checking to select the right constructor\nThanks, didn't thougt about that\n<@Darcel> as long as it's not reflective, or you've configured reflection for that class, it should work.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "570",
    "text": "Hey i'm back with question about wrapping the `java.awt.Color constructor`\n```(defn color\n  [r g b]\n   (cond\n     (instance? java.awt.color.ColorSpace r)\n       (let [cspace r\n             components g\n             alpha b]\n         (java.awt.Color. ^java.awt.color.ColorSpace cspace (float-array components) alpha))\n     (float? r)\n       (java.awt.Color. ^double r ^double g ^double b)\n     :default\n       (java.awt.Color. ^long r ^long g ^long b))```\nIn the case with the ColorSpace parameter, I can't make it work as I believe I need to add typehint but I don't know how\nI try to use it like this\n```\n(defn get-components\n  ([^java.awt.Color color]\n    (vec (.getComponents color nil)))\n  ([^java.awt.Color color comp-array]\n    (vec (.getComponents color (float-array comp-array))))\n  ([^java.awt.Color color cspace comp-array]\n    (vec (.getComponents color cspace (float-array comp-array)))))\n(def cspace (java.awt.color.ColorSpace/getInstance  java.awt.color.ColorSpace/CS_sRGB))\n(construct-color cspace (get-components white) 1.0)\n```\nand `white` is defined as `(def white  java.awt.Color/white)`\nWhen I try to construt the Color, I het the error:\n```(construct-color cspace (get-components white) 1.0)\nExecution error (IllegalArgumentException) at joy-of-clojure-exo.clj-awt.color/construct-color (color.clj:61).\nNo matching ctor found for class java.awt.Color```\nIt's kind of the same error I got earlier (<https://clojurians.slack.com/archives/C03S1KBA2/p1550678389005500>), and the fix was to add more typehint\nHere I add `^java.awt.color.ColorSpace cspace` and I thought it was enough, but apparently not, any idea?\n`(java.awt.Color. (float r) (float g) (float b))` should work. By default, Clojure uses `Double` and `Long` only (boxed) and you need `float` primitives here.\nthe error mentions construct-color, which you haven't shared the source of\nmy guess is you switched to calling that function color, and then didn't update the calling code to call color instead of construct-color\nhow sorry I renamed color to construct-color in between..\nBut the error still stand, but adding the suggestion of seancorfield helps!\nwrapping `alpha` in `(float alpha)` resolve the problem\n`java.awt.Color` has seven constructors and three of them take three arguments so you need to provide assistance so the correct constructor is selected.\nIn particular `(java.awt.Color. 1 1 1)` and `(java.awt.Color. 1.0 1.0 1.0)` produce completely different colors (the first is very dark gray, the second is white).\nyes eraserhd provided assistance with that <https://clojurians.slack.com/archives/C03S1KBA2/p1550678839014300>\nYour Clojure code will need to distinguish between which version you actually need based on something other than just three arguments.\nHe told me that I could do a `cond` with typecheking as predicate to differentiate the constructor, and add typehint to help the compiler\nthe result is as follow\n```(defn construct-color\n  \"Creates either:\n  - (int) an opaque sRGB color with the specified combined RGB value consisting of the red component in bits 16-23,\n    the green component in bits 8-15, and the blue component in bits 0-7\n  - (int, boolean) an sRGB color with the specified combined RGBA value consisting of the alpha component in bits 24-31,\n    the red component in bits 16-23, the green component in bits 8-15, and the blue component in bits 0-7\n  - (float, float, float) an opaque sRGB color with the specified red, green, and blue values in the range (0.0 - 1.0)\n  - (int, int, int) an opaque sRGB color with the specified red, green, and blue values in the range (0 - 255)\n  - (float, float, float, float) an sRGB color with the specified red, green, blue, and alpha values in the range (0.0 - 1.0)\n  - (int, int, int, int) an sRGB color with the specified red, green, blue, and alpha values in the range (0 - 255)\n  - (ColorSpace, float[], float) a color in the specified ColorSpace with the color components specified in the float array and the specified alpha\n  (depending on the number of arguments and their types).\"\n  ([rgb]\n   (java.awt.Color. rgb))\n  ([rgba has-alpha]\n   (java.awt.Color. rgba has-alpha))\n  ([r g b]\n   (cond\n     (instance? java.awt.color.ColorSpace r)\n       (let [cspace r\n             components g\n             alpha b]\n         (java.awt.Color. ^java.awt.color.ColorSpace cspace (float-array components) (float alpha)))\n     (float? r)\n       (java.awt.Color. ^double r ^double g ^double b)\n     :default\n       (java.awt.Color. ^long r ^long g ^long b)))\n  ([r g b a]\n   (if (double? r)\n     (java.awt.Color. ^double r ^double g ^double b ^double a)\n     (java.awt.Color. ^long r ^long g ^long b ^long a))))```\nBut i need to remove `^double` and replace them with `(float x)`\nThanks <@Celestine>\nyour function arity that takes `[r g b]` isn't typical\nit should be a different function IMHO that takes the colorspace arguments\nbeing extremely forgiving with arguments leads to confusion\nI agree. I would use different function names to avoid the ambiguity that Java creates.\nThe problem you have with the above is if you accidentally call `construct-color` with a mix of `Long` and `Double` arguments now -- you're internally dispatching on only the type of the first argument. So `(construct-color 1 1.0 1)` and `(construct-color 1.0 1 1)` are going to create very different colors...\n<@Celestine> and <@Marlyn> so create function with differents name to call the same constructor but with different type?\n`(defn construct-float-color [r g b] (java.awt.Color. (float r) (float g) (float b))` and `(defn construct-int-color [r g b] (java.awt.Color. (int r) (int g) (int b))` etc?\nAlso I have never used `spec` but would it help in that case?\nI would give them better names more aligned with the problem domain but, yes.\nI'm not sure about the use of `clojure.spec` here since I don't know much about your problem domain (it's clearly more than just writing a very thin wrapper around a Java API?).\n(I would start with looking at how you need to create RGB(A) colors in whatever code you're writing and only create wrapper functions for those -- and even then it might not be worth the effort: it's idiomatic Clojure to just use Java interop directly for a lot of things)\nRight now it's only wrapping java.awt, then I use it to create images, just a toy project to learn Java interop\n<@Laurene> I'd probably just `:import (java.awt Color)` and invoke `(Color. ...)` directly as needed rather than trying to wrap it in Clojure functions. There are other things in AWT that would likely benefit from wrapper functions, and probably higher-level abstractions you could build.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "571",
    "text": "How do I use the clojure slim jar in a project? what should my coordinate look like?\nwhy do you want to use it <@Clarine>?\nI want to use a non-directly linked version of clojure to test out some spec stuff.\nah\nneed the `:classifier \"slim\"` in lein\n`org.clojure/clojure$slim` in deps\ndifferent classloader?\njust telling you one way that could happen...\nthe global-hierarchy is a var - you could attach a watcher to it\nare you seeing something weird inside a go block?\ndid you have your watcher dump its stack when it goes clear?\nI think the watchers are fired in same thread doing the alter\nIt's hard to be specific for this case, as I'm not familiar with AWT, but in general writing a wrapper that has close to a 1:1 mapping from Clojure functions to Java methods doesn't add much value -- it's just syntactic sugar.\nA good example of a higher-level wrapper is Seesaw (a wrapper for Swing). <https://gist.github.com/daveray/1441520>\nIt tries to map Swing operations to a simple set of primitives with data describing things.\nThanks I'll take a look at that, thanks very much!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "572",
    "text": "thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "573",
    "text": "Could you elaborate a bit? I'm still fairly new to both Java (and especially java.awt) and Clojure, and I'd love to learn about Java interop, and writing wrapper while also doing something that could benefits others\nHas anyone ever run into a case of the global-hierarchy being reset/cleared?\nRequiring a namespace which transitively loads a lot of things is causing it, but I can't see any code in my whole jar which calls `underive` or `global-hierarchy`\nit's the same repl, so unless my clojure is changing inside the repl, I don't think so\nI did. All I see is it going clear, not something inserting itself.\nI think I have managed to manually whittle it down, with a little luck, the problem was high in the list.\nit appears to be something between manifold &amp; core.async\nand maybe something else, not sure. blugh.\nOh really? I didn't know that, I'll print the stack.\n\nI don't think it's inside a go block, just that requiring manifold.stream in my repl causes the global hierarchy to reset\nAlthough I'm afk now, so it will be some time before I can try the stack thing, but that sounds perfect.\nare you sure you aren't loading clojure.core twice somehow?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "574",
    "text": "is `with-open`  clojure's TWR version?\nmore or less, with-open predates try with resources by some number of years\nso with-open predates autocloseable\nshouldn't be\nit's loaded on RT initialization and should never be loaded again after that\n(unless you're in an isolated classloader chain)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "575",
    "text": "I think that you're right hiredman, doing a require of clojure.core is causing the global hierarchy to reset. I think one of the manifold namespaces aliases clojure.core, so that's why the finger is pointing there.\n\nWhy would clojure.core be loaded twice?!\nI'm using onejar class loader. So I think I will need to figure out the details.\nthat seems like an important detail you omitted :)\nYou're right, I was a bit hyper focused on \"require is causing my program to break\" and was a bit lost.\nI'm aware of <https://dev.clojure.org/jira/browse/CLJ-971> and I'm setting the factory\nBut I'm not aware of any other things I need to do for clojure to work with onejar.\nyou could collect info about the classloader chain at points where things look good and bad and compare\nthe classloader thing is a hypothesis, so try to prove/disprove\nI have a clojure.main repl in my jar, so this should be easy. How could I collect info about the chain?\nThe context class loader is the same before and after requiring clojure, for example.\nIf I turn on verbose logging, I can see it searching for clojure__core when I do require\nBut I'm a bit confused why it wouldn't be the same as what clojure.main is using, maybe I need to do a custom build of clojure with some logging in.\nInto clojure.main/main I added a print of the context class loader, then I compared it to what I have at the repl, exactly the same:\n\n```\n#object[com.simontuffs.onejar.JarClassLoader 0x7a79be86 \"com.simontuffs.onejar.JarClassLoader@7a79be86\"]\nClojure 1.11.0-master-SNAPSHOT\nuser=&gt; (.getContextClassLoader (Thread/currentThread))\n#object[com.simontuffs.onejar.JarClassLoader 0x7a79be86 \"com.simontuffs.onejar.JarClassLoader@7a79be86\"]\nuser=&gt; \n```\n```\n#object[com.simontuffs.onejar.JarClassLoader 0x7a79be86 \"com.simontuffs.onejar.JarClassLoader@7a79be86\"]\nClojure 1.11.0-master-SNAPSHOT\nuser=&gt; (clojure.lang.RT/baseLoader)\n#object[clojure.lang.DynamicClassLoader 0xeccaf1b \"clojure.lang.DynamicClassLoader@eccaf1b\"]\n```\n\nclojure.lang.Compiler/LOADER is bound then, but I don't really know what that means?\n(I confirmed the binding)\nOh, but that isn't too useful anyway:\n\n```\nuser=&gt; (.getParent @clojure.lang.Compiler/LOADER)\n#object[com.simontuffs.onejar.JarClassLoader 0x7a79be86 \"com.simontuffs.onejar.JarClassLoader@7a79be86\"]\n```\nI'm a bit defeated really, I'm going to need some direction on the clojure internals to puzzle out what's going on here I guess.\nI modified doInit so I could check the class loader before `load(\"clojure/core\")` is called, and `com.simontuffs.onejar.JarClassLoader@7a79be86` is the classloader there, and `#object[com.simontuffs.onejar.JarClassLoader 0x7a79be86 \"com.simontuffs.onejar.JarClassLoader@7a79be86\"]` is the one loaded when clojure.main/repl is running.\n\nI also modified `load` so that I could see which ClassLoader it was using when loading \"clojure/core\", and I got `com.simontuffs.onejar.JarClassLoader@7a79be86`\nSo class loader doesn't seem likely to me. I can't see where the caching is.\n*loaded-libs* doesn't contain clojure.core at the point of me having a REPL...\n\n```\nuser=&gt; @*1\n#{clojure.core.protocols clojure.core.server clojure.core.specs.alpha clojure.edn clojure.instant clojure.java.browse <http://clojure.java.io|clojure.java.io> clojure.java.javadoc clojure.java.shell clojure.main clojure.pprint clojure.repl clojure.spec.alpha clojure.spec.gen.alpha clojure.string clojure.uuid clojure.walk}\n```\nLooks like clojure.core is never in loaded-libs:\n\n```\n\u276f clj                    \nClojure 1.10.0\nuser=&gt; @@#'clojure.core/*loaded-libs*\n#{clojure.core.protocols clojure.core.server clojure.edn clojure.instant clojure.java.browse <http://clojure.java.io|clojure.java.io> clojure.java.javadoc clojure.java.shell clojure.main clojure.pprint clojure.repl clojure.spec.alpha clojure.spec.gen.alpha clojure.string clojure.uuid clojure.walk}\n```\nSo, I think I'm onto something here. OneJar always returns \"0\" for the last modified. I have a suspicion this might be because I'm not setting the last modified of the jar itself, and maybe that's what onejar uses.\n\nAnyway, when I use `clj`, this passes as true:\n\n```\n\tif((classURL != null &amp;&amp;\n\t    (cljURL == null\n\t     || lastModified(classURL, classfile) &gt; lastModified(cljURL, scriptfile)))\n\t   || classURL == null) {\n```\n\nHowever, in my jar lastModified is 0, hence `0 &gt; 0` is false. So we end up going to `\tif(!loaded &amp;&amp; cljURL != null) {`  which I'm guessing doesn't look at the same caching path as the first `if` to determine whether the namespace is already loaded or not\nsomeone was just using lein as a library under deps.edn to call lein stuff so that might be a path\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "576",
    "text": "The closest I could get to seems to be this: <https://github.com/dakrone/cheshire/issues/62> (mixing stream and laziness is confusing)\u2026\nAs for the underlying stream itself, look like manifold is a widely supported substrate (you can convert it to other representations, such as core.async, later)\u2026 then use the client side of aleph/http-kit to read. (http-kit is old though)\n(btw\u2026 anyone know if there\u2019s activity in this space? my general feeling is that things almost/mostly \u201cwork\u201d, but are not as polished as the more mainstream use case)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "577",
    "text": "Isn\u2019t this the same issue as the ticket you linked to earlier?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "578",
    "text": "Small rant:\n\nI've had the hardest time working with `deps.edn` over the last few days. Nothing to do with the workflow or the principle - it's the tooling that did for me. Was trying to build an uberjar for a Cloud Foundry deploy - this pretty much means that it needs to have AOT compilation and run with `java -jar uberjar.jar`. I tried using `depstar`, `cambada` and `Pack` as listed on the tools page of the deps wiki.\n\nDepstar doesn't support AOT or a manifest file out of the box and I'm nowhere near skilled enough to work out how to add them in. Both `pack` and `cambada` did not stop building the uberjar - literally, both of them filled the disk up and exited them. Thought it might be the code, but then I try `lein uberjar` and it just worked. Really disappointed - kinda think it'd be worth packaging up the leiningen uberjar code as a separate library?\n\n&lt;/moan&gt; Other than that I'm having a lovely day. :smile:\nThat's what I was thinking - who, where, how?! :smile:\nhaving tools be reusable things rather than bound into plugins for a single build tool is generally a great idea imo\n<https://github.com/oakes/full-stack-clj-example>\nI agree as well - it's _instinctively_ where I want to get to as I've always been put off by Leiningen.\nNice: <https://github.com/oakes/full-stack-clj-example/blob/master/prod.clj>\nthat's from <@Josue> if you have questions for him\nI like it - makes sense!\nyep i started using this technique in most of my projects. if you want to use other lein commands you can make a multimethod like this <https://github.com/oakes/Nightlight/blob/master/prod.clj>\nHave you considered extracting the pattern out into a library after the fashion of `depstar` or `Pack` - or do you consider it too trivial?\nfor me i\u2019d rather use it directly and avoid the layer of indirection. i\u2019m ok with a little code duplication. might be an interesting library idea if others want to try it though\ncould you show me an example?\n(as I liked `depstar` - in that it actually finished building...)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "579",
    "text": "it's also really easy to AOT with `depstar`, but it's not \"baked in\"\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "580",
    "text": "Is there a way to create a function literal of a Java function? The following does not work:\n```\nuser=&gt; (def func Integer/parseInt)\n\nSyntax error compiling at (form-init730605430373361324.clj:1:1).\nUnable to find static field: parseInt in class java.lang.Integer\n```\nSo I've been playing with making Clojure wrapper functions and using those for higher-order needs. Ex:\n```\n(def parse-int #(Integer/parseInt %))\n```\nI don\u2019t think there is one because it\u2019s a static method\nFor instance methods you can use `memfn`\n```(map (memfn charAt i) [\"fred\" \"ethel\" \"lucy\"] [1 2 3])\n;; =&gt; (\\r \\h \\y)```\n<https://clojure.org/reference/java_interop#_alternative_macro_syntax>\nAh cool, I hadn't seen `memfn`. Thanks!\nMe neither before I tried to answer your question :wink:\nI had even made it to that Java Interop page before but must have missed it\nnote that memfn introduces reflection so an anonymous literal wrapper is often better\npresumably if you are setting this up, you're going to invoke  it more than once\nI just didn't know that reflection was costly enough to make a difference. But on looking it up, it does appear to be very very slow\nif you're calling it once, you probably don't care, but if you're calling it a lot, you will\nGot it, thanks\nmemfn can take a hint on the symbol and avoid reflection, no?\nNo one uses memfn in the wild\nmemfn is something I used a lot to implement a datafy thing.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "581",
    "text": "Interesting. Just because of overhead of the reflection?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "582",
    "text": "Any test runners that can spit out JSON?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "583",
    "text": "<@Celestine> or anyone: `tools.cli` will parse e.g. `-for` as `-f -o -r`.  Is there a way to turn this functionality off?  I personally like this GNU behavior, with double-dash for verbose options, but there's also Java convention that uses single-dash for multi-character options.  I'm using a Java lib that does that.  I use `tools.cli` for the options that my code provides, but I don't want to reinvent the wheel for the options that the library provides.  However, this means that if I use `tools.cli` to find errors using `parse-opts`, my code has to distinguish between real errors in option specification on the command line, as opposed to \"errors\" due to `cli/parse-opts` thinking that the user has provided `-f -o -r`.  I am trying to add code to filter out the Java lib options, but without turning off the single-dash/multi-character expansion, it's very difficult.  (I'm also trying not to simply reinvent tools.cli's parsing.)  Thanks-\nOr maybe I should look more closely at the tools.cli innards and maybe I can build something from the functions there....\n<@Wesley> I'm not sure that you could support both styles of options -- it would be ambiguous -- and this is a change that was made explicitly in `tools.cli` to support GNU-style options (prior to me taking the library over).\nmany linux utils take multiple \u201cflags\u201d together\nSo I think my position here is that `tools.cli` supports the GNU behavior by design and will not support the Java convention.\nfor example `tar  -xvf`\nreally, Java is the oddball here\nYes, that's the \"standard\" GNU/*nix behavior.\nI agree. And `tools.cli` was changed deliberately in the past to the GNU/*nix behavior :slightly_smiling_face:\nRight, one couldn't support both in the same application.  But you could have a flag that turns the single-dash/multichar behavior on and off.  But I (doh!) just realized that I can address my problem pretty simply by just requiring that the Java lib options be put after `--` to stop option processing by `tools.cli`.  The lib ignores `--`.\nAh, OK. So this was just a case where you need to pass _additional command-line options_ directly to an embedded library? I missed that.\nThe rationale for turning it off would specifically be compatibility with Java conventions.  But maybe it's not worth the trouble.\nis there a story here btw, Unixes were widespread when Java came about right\nOh, sorry.  I didn't explain clearly enough then.  Yes, the library also sees the command line, and ignores options it doesn't know, but processes the ones it does know.\nMaybe it will only be a real problem if the `--` trick isn't enough for a situation.\nI wouldn't expect command-line parsing libraries to be very composable if they're both parsing the same command-line data :slightly_smiling_face:\nYah, I know.  It actually works just fine in this case, as long as you ignore misspelled options and that sort of thing.  And I have been misspelling them lately, and then thinking I have a bug. :slightly_smiling_face:\nThis seems to delve into the Java vs GNU argument parsing differences <https://softwareengineering.stackexchange.com/questions/70357/command-line-options-style-posix-or-what>\nYour google fu is better than mine!\nThanks.  That's helpful to read.  I may think about it further and come back with some ideas for tools.cli down the road if I think there's something worth doing that's potentially worth the trouble.  Obviously an isolated use case isn't worth trouble.\nor better filter bubble :stuck_out_tongue:\nI think this application is unusual in other ways too.\nYeah.  Well it helps to know that Java is following Posix.  I didn't realize that.\nOh no that's wrong.\nyeah, X11 style :stuck_out_tongue:\nMy _Bing_ fu :slightly_smiling_face:\nI haven't used Google for years.\n\u2018google fu\u2019 as in \u2018velcro\u2019 :wink:.\nthat looks like something accidentally working, at first glance\nI am trying to check whether some val that implements a protocol via metadata `(satisfies? ...)` that protocol. That sadly doesnt work. then I found <https://dev.clojure.org/jira/browse/CLJ-2426>, and I tried inlining that proposed `satisfies?` function in my code, but also no success.\nNone\nthe most straightforward solution is to check for the symbol inside the meta, as it does around line 9\nsorry, which symbol, there are only function names in the meta?\nno they're literal symbols inserted -- see line 21\n```\n`bla-bla == test/bla-bla\n```\nthe function is checking for the existing of the correct symbol within the metadata, on Line 10\nI don't think using `satisfies?` is a good idea _in general_\nit runs counterproductive with polymorphism\nthe whole point of protocols is not to care about doing type-tests\n_in general_\nRight, but `(symbol (:var proto))` is `test/BlaFactory`, thats not `test/bla-bla` right?\nI didn't read the details, but check for the name of the protocol function, not the protocol var\nI dont use it as a type test, I use it in s/fdef\u2019s to do some rudimentary argument checking in development. Maybe not the best usecase, but it has found some bugs for me ^^\nhmm I\u2019ll try that. Thanks as always!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "584",
    "text": "Quick question about gen-class. The :name value in the doc says it has to be a `package-qualified name of the class to be generated`. Which I assume means it is not a Clojure namespace name, but a Java one. Which means, since that it should not contain hyphens, but underscores instead, since Java doesn't allow for hyphens. Now, here's the thing, it seems that if you put hyphens, it will work, and generate a file with hyphens in the folder and classname, and somehow, that will work from Java as well. What's happening here?\nFor example, the following:\n```\n(:gen-class :name screening.whirlpool.update-investigation-poller.Main)\n```\n\nWill generate the directories: `screening/whirlpool/update-investigation-poller/Main`\n\nAnd the Main class generated has as its package name: `screening.whirlpool.update-investigation-poller`\n\nBut it does: `Util.loadWithClass(\"screening/whirlpool/poller/update_investigation_poller\", Main.class);` in its static initializer.\n\nYet, somehow, I can use that class fine form Java.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "585",
    "text": "Hi all - I have a `spec` question. I'm writing a spec describing some JSON that is getting posted to one of our endpoints (which we do not have control over, it is a callback from another system). The callback can be in one of two shapes, depending on if the operation was successful or not. So I have my spec looking essentially like `(s/def ::callback-post (s/or :success ::success-spec :failure ::failure-spec))`. All that is fine and dandy - what I am stuck on, is that the callback has a `success` flag, which will be either `true` or `false`, and I'm not sure of the best way to represent that within the `::success-spec` and `::failure-spec` specs\nI have a higher level `(s/def ::success (s/org :true true? :false false?))` spec, but without using some manual namespacing I'm not sure how best to specify within the `::success-spec` that `::success` ought to be only `true`\nFirst of all, `(s/def ::success boolean?)` ^^\nyup, that's a :picard-facepalm:\nMulti-spec?\n<https://clojure.org/guides/spec#_multi_spec>\n... where the success field indicates the \"type\", and hence which spec to use\nyeah, that looks like it could be the answer, thanks :slightly_smiling_face: I hadn't come across `multi-spec` before\nYou're the second person I've suggested it to this week. I'm a big fan of it!\nI used it to do payload validation before, mighty useful\nI posted this in <#C1B1BB2Q3|clojure-spec>, it might be useful as an example\n```\n(s/def ::email string?)\n(s/def ::username number?)\n(s/def ::request-type #{:change-email :show-username})\n\n(s/def ::change-email-request (s/keys :req [::email] :opt [::username]))\n(s/def ::show-username-request (s/keys :req [::username] :opt [::email]))\n\n\n(defmulti request-type ::request-type)\n(defmethod request-type :change-email [_] ::change-email-request)\n(defmethod request-type :show-username [_] ::show-username-request)\n\n(s/def ::body-params (s/multi-spec request-type ::request-type))\n\n(s/valid? ::body-params {::request-type :change-email ::email \"boop\"})\n=&gt; true\n(s/valid? ::body-params {::request-type :change-email ::username 1234})\n=&gt; false\n(s/valid? ::body-params {::request-type :show-username ::email \"boop\"})\n=&gt; false\n(s/valid? ::body-params {::request-type :show-username ::username 1234})\n=&gt; true\n```\nthanks, I was just doing a little headscratching over the docs\nI'm looking for a way to mock out a `defrecord` that implements several protocols. empty implementations that just return nil are fine for most functions; a few others need to be replaced with code I will supply. <https://github.com/alexanderjamesking/spy> has `protocol/spy` but that only seems to work for one protocol. (though its code looks like it could handle more? maybe I should patch it)\nis there an alternative library, or am I misapprehending something?\n<@Jonas> what's the use value for a stubbed method with no real logic vs. not implementing the method at all?\nno particular reason, then. in this case, I need three functions that are split across two protocols; nothing else is called anyway.\nThanks, that did the trick :slightly_smiling_face: Hopefully spec2 makes this kind of thing a little more straightforward\n:thumbsup: you're welcome!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "586",
    "text": "Interesting. Thanks\nbecause clojure is happy to let you define only the methods you care about and throw an error at runtime if others are called\nYup, that was one adjustment, though the major problem (choosing a spec based on the value of that boolean) was solved using `multi-spec` on suggestion from butterguns\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "587",
    "text": "`boolean?`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "588",
    "text": "If I have an arbitary number of functions I want to run just for effects, is there a handy function for that?\n\nSo rather than\n\n```\n(do\n  (f1)\n  (f2)\n  (f3))\n```\n\njust\n\n`(dofn f1 f2 f3)`\n<@Keenan> look at `run!` and `juxt`.\nWill do <@Wesley> -- thank you\nWith `run!` you'd have to do something like this: `(run! (fn [f] (f)) [(fn [] (println \"yo\")) (fn [] (println \"ya\"))])`.  `juxt` is probably better for what you want.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "589",
    "text": "So... anyone seen this before?\n```\nException in thread \"main\" java.lang.ClassCastException: cm_metrics.main$_main$fn__8935 cannot be cast to java.base/java.lang.Thread\n\tat cm_metrics.main$_main.invokeStatic(main.clj:30)\n\tat cm_metrics.main$_main.doInvoke(main.clj:21)\n\tat clojure.lang.RestFn.invoke(RestFn.java:397)\n\tat clojure.lang.AFn.applyToHelper(AFn.java:152)\n\tat clojure.lang.RestFn.applyTo(RestFn.java:132)\n\tat cm_metrics.main.main(Unknown Source)\n```\nit's from an uberjar\nhappens when the `-main` function calls `(Runtime/getRuntime)` (I think)\n<@Machelle> i dont know what your code looks like but i\u2019m guessing you\u2019re trying to add a shutdown hook? if so, the addShutdownHook method wants a Thread object not a function: `(Thread. (fn [] ...))`\nYou're obviously a mind reader :smile:\nThanks!\nhaha np\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "590",
    "text": "I'm trying to get a clojure cli tool I wrote a while back to compile and run under java 6. So far I've downgraded leiningen and the clojure version and I'm now in the process of trying to find a permutation of the dependencies which would actually compile under java 6 (currently playing with tools.cli) . Just figured I would ping this channel to see if this is even worth it...i.e. is this doomed to fail from start or is there a chance this might actually work in the end?\nwhy?\n<@Jasmine> I'm trying to get the tool to run in a controlled server environment which only has java 6\nHas anyone used a recent core.memoize with a cache backend out of process (like leveldb or redis where you need to serialize the objects)? Since I last used it, it seems to make heavier use of custom delay objects and I wondered if anyone else has encountered issues\n<@Isidro> that's what I was asking. I don't think it's hopeless (but might not be fun)\n<@Jasmine> ok thanks! ...yeah, not fun which is why I figured I would ask first before banging my head against the wall\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "591",
    "text": "On a phone, so not tested, but (apply reduce (fn [_ f] (f)) f1 f2 f3)\nShould probably work. \nnamely, 0x00 0x01 0xFF\ncasting to and from bigintegers results in truncating the 1, and i\u2019m not quite sure how to get around that\ni guess the super hacky route would be to mod the number of hex characters against 8 and supplement zeroes..\nyou might look at java.util.BitSet\nnot sure if it's exactly what you want as an api but prob good code to build on\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "592",
    "text": "hey everyone, this might be more of a java question but i\u2019m looking to store a hex number, for example 1ff as a byte-array\nany ideas?\ncool, i\u2019ll have a look - thanks\n0x00 0x01 0xFF isn't a \"hex number\" it is 3 bytes, so when you try to store it as 1 byte it is truncated to 0xff\n3 bytes is kind of an odd size to work with, usually it will be some power of two, 2 or 4 would fit, and match the sizes of some primitives on the jvm (short and int)\nare you sure this isn't just a signedness thing tripping you up?\nif you want  a byte array with the contents describing some Long / Int / whatever you can use ByteBuffer <https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#putInt(int)>\nbigintegers will add an extra byte to track the sign sometimes, where if you are mostly concerned with bytes but sometimes with numbers you often want to assume unsigned and not have the extra byte\n```(cmd)user=&gt; (def bb (ByteBuffer/allocate 16))\n#'user/bb\n(ins)user=&gt; (seq (.array bb))\n(0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0)\n(ins)user=&gt; (.putLong bb 42)\n#object[java.nio.HeapByteBuffer 0x640f11a1 \"java.nio.HeapByteBuffer[pos=8 lim=16 cap=16]\"]\n(cmd)user=&gt; (seq (.array bb))\n(0 0 0 0 0 0 0 42 0 0 0 0 0 0 0 0)\n(ins)user=&gt; (.putLong bb Long/MAX_VALUE)\n#object[java.nio.HeapByteBuffer 0x640f11a1 \"java.nio.HeapByteBuffer[pos=16 lim=16 cap=16]\"]\n(cmd)user=&gt; (seq (.array bb))\n(0 0 0 0 0 0 0 42 127 -1 -1 -1 -1 -1 -1 -1)\n```\nthis is the most straightforward way I've found for converting between the internal representation of primitive types and the actual values (for every putFoo method there's a getFoo method)\n<@Onita> were you trying to use the toByteArray method? <https://docs.oracle.com/javase/7/docs/api/java/math/BigInteger.html#toByteArray()>\ni was using clojure\u2019s byte-array\nso what was your actual task? turn a byte array into a number?\nno, i was trying to store a series of bits that may or may not fit neatly into bytes in a byte array\nso, right, it wasn\u2019t really a \u2018hex number\u2019, i was using hex to specify a series of bits\nOK - you can write bits (or any other type of course...) one by one with ByteBuffer, then read out whatever types you like\nputShort on a bytebuffer is almost certainly what you want\nyeah, i hadn\u2019t thought about that\ni\u2019ll dig into it and see what i can do. thanks guys, appreciate the help\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "593",
    "text": "Why isn't `group-by` \"transducable\"? Is it because it needs to scan the entire coll?\ngroup-by is itself a reduce, not a transformation of a step function\nyou can do something similar as a transformation of a step function if you have input sorted by your grouping key and a transducer version of partition-by\nit can't produce any intermediate results, so not really any point\nOK, so my group-by is in the middle of a long chain of transformations\nmy only option, it seems, is to have 2 transducers\nI could imagine a hypothetical case where a groups-by function might be useful, and that could be a transducer (reductions : reduce :: groups-by : group-by)\nreductions gives a lazy seq of all accumulator values for a given reducing function and input, so groups-by could give all the intermediate groups as you consume inputs - but there's few places that would be useful, if any\nhave you considered what it means to  have a group-by in the middle of a long chain  of  transformations?\n<https://github.com/aphyr/tesser> has a group-by operation with slightly different semantics that is very interesting\nit basically splits the step function to separate reduction steps for each group\nNone\n<@Jasmine> My feeling is that it's not a single sequence of transformations. Rather, two, unrelated map-reduce piplines\n<@Rosaline> Thanks. My understanding of how transducers work is still very basic, so I'll have to read more about this\nthat seems healthy :)\ntesser has a slightly different model of folds then transducers does, but is very useful for inspiration, and speaking of map/reduce tesser can run the folds as hadoop jobs\n```\n(defn groupy-by-transducer [key-fun]\n  (fn [f]\n    (fn\n      ([] (f))\n      ([x] (into {} (map (fn [[k v]] [k (f v)])) x))\n      ([accum value]\n       (let [k (key-fun value)]\n         (assoc accum k (f (get accum k (f)) value)))))))\n\n(transduce\n (comp\n  (groupy-by-transducer :type)\n  (map :mass))\n +\n {}\n [{:name :electron, :type :lepton, :mass 0.51}\n  {:name :muon,     :type :lepton, :mass 105.65}\n  {:name :up,       :type :quark,  :mass 1.5}\n  {:name :down,     :type :quark,  :mass 3.5}])\n\n;;=&gt; {:lepton 106.16000000000001, :quark 5.0}\n```\nthat kind of works, but I think it might run afoul of the internal mutations that some transducers do\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "594",
    "text": "I'm trying to add metadata to a function, but it's annoying because it erases the function name in the print-out:\n```\nbinja.util&gt; (fn hey ([x] x))\n#function[binja.util/eval9096/hey--9097]\nbinja.util&gt; (with-meta (fn hey ([x] x)) {:x \"x\"})\n#function[clojure.lang.AFunction/1]\n```\ndoes anyone know how I can add meta data without erasing the name?\nyou can't\nI recommend not putting metadata on functions because they have reference equality but value metadata\ncan't it be done \"under the hood\" somehow?\nyou can implement IFn / IMeta and have any toString you like via reify, deftype, whatever\nor fork clojure, but implementing IFn and IMeta is a lot less work\nit cannot\nwhat is printed there is the jvm type of the object\nadding metadata to a function results in wrapping it with an instance of another function with that metadata\nwhich is part of why `(= x (with-meta x {}))` which holds true for other types with-meta works on fails for functions\nhmm well that's disappointing. maybe i can figure out how to store the metadata inside the function and fetch it somehow when I need it\nit won't be very \"meta\" then\n```cmd)user=&gt; (def f (reify clojure.lang.IFn (invoke [this] :a) (applyTo [this _] :b) Object (toString [this] \"f\")))\n#'user/f\n(ins)user=&gt; (def g (with-meta f {:foo :bar}))\n#'user/g\n(ins)user=&gt; (meta g)\n{:foo :bar}\n(ins)user=&gt; (meta f)\n{:line 53, :column 8}\n(ins)user=&gt; (f)\n:a\n(ins)user=&gt; (g)\n:a\n(ins)user=&gt; [f, g]\n[#object[user$reify__233 0x36676c1a \"f\"] #object[user$reify__233 0x5b408dc3 \"f\"]]\n```\n(reify is already IMeta so no need to implement)\nthanks <@Dann>! But I mostly need it for stack trace errors so it needs to show up as a function, not just a reify\nthe original function will show up in the stacktrace\nbecause the wrapper just calls it\nbut, again, metadata on functions is kind of silly, metadata is more or less extra data you want to attach to an object without changing the equality of that object\nbut I doubt you are comparing equality on a functions\nso use a map\n```\nb.util &gt; (def f (reify clojure.lang.IFn (invoke [this] :a) (applyTo [this _] :b) Object (toString [this] \"f\")))\n#'b.util/f\nb.util&gt; (f 3)\nExecution error (AbstractMethodError) at b.util/eval9131 (form-init14739800243932352027.clj:2461).\nReceiver class b.util$reify__9129 does not define or inherit an implementation of the resolved method abstract invoke(Ljava/lang/Object;)Ljava/lang/Object; of interface clojure.lang.IFn.\n```\n{:my other-data :f some-function}\nyou need to define the arity you call\nyou only defined the 0 arg ~applyto~ *invoke*\njust don't put metadata on functions\nwell i'm storing the type information of the args and return value for a function, which I can check with a spec, so I just need some way to get that out of a function. i could hide it in the function so if you call it with the magic incantation it returns the type\nbut the only arity I consistently have available is zero args, so I could have that return the type information, but that will result in sloppy errors\nOooh I see what you were saying @hireman. My function names do show up in the stack trace, just not when i print out the function. that'll work!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "595",
    "text": "Is there a predicate to check for a multimethod? Something like `fn?` (which returns false for multimethods)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "596",
    "text": "Hi can you guys recommend a good open source *application* code to read? especially in the context of slightly more intermediate/advanced, clojure techniques i.e. transducers, use of spec, use of namespace-qualified keywords etc., cheers!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "597",
    "text": "well, there\u2019s `methods`, but I\u2019m not sure what happens when you call it on a non-multimethod \nI need a dynamically sized collection of agents, but the size of that collection will be managed by another agent (changes to the size of the collection will be significantly less frequent than changes to the underlying agents).  Is nesting agents in this case appropriate, or am I missing a better way to structure this?  eg. (def things (agent {:thing1 (agent 1) :thing2 (agent 1)})) , then (send (:thing1 @things) inc), and (send things assoc :thing3 (agent 1))\nthe only thing i can do so far is to:    :default-fn #(if (nil? (:id %))\n                   (throw (IllegalArgumentException. \"--id is mandatory\"))\n                   %)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "598",
    "text": "hi, it seems to me it's not possible to specify a *mandatory* option for toosl.cli\nTrying to spin up a old (eh, ~two months) project of mine, and when running `lein ring server-headless`, I get the following endlessly long stack trace: <https://gist.github.com/victorb/81eb2afacce8ca8d1731f399bbeb34d0>\nAs far as I can tell, the error is not related to my code, as it's not part of the stack trace. But I'm unable to find any entrypoint or obvious place to start looking for issues. Could someone provide some pointers?\nI think options are always optional unless you do something like that. Use arguments for mandatory arguments. Sorry that sounds a bit tautological. \nLooks like it\u2019s probably related to an old version of clojure.core/unify that does something incompatible with clojure 1.10 / spec. It looks like Alex probably fixed that here: <https://github.com/clojure/core.unify/commit/a5f60d74e1df61291535be43dab7bd2f2eaceb32> and that you could resolve it by explicitly declaring a version of `[org.clojure/core.unify \"0.5.7\"]`\nHuh, that's super helpful! Thanks a lot for taking a look and even coming up with a solution :thumbsup:\nHm, doesn't seem to resolve the issue though. Specifiying it in my `project.clj` still has the same error. Also worth mentioning, I'm on clojure 1.10.0, and `0.5.7` of core.unify seems to have been released 2016.07.25 so I expected it to be used already\nThere\u2019s not a predicate in core afaik because Clojure chooses to treat them transparently the same as functions everywhere and discourages doing otherwise. However, you could always do something like `(instance? MultiFn thing)`\nAre you using cider? If so, update to latest version.\nnope, no cider. `lein ancient` also tells me `all artifacts are up-to-date` so everything is updated\nHow about updating lein itself?\ndo you have a ~/.lein/profiles.clj that might be interfering ?\nor that ^ :stuck_out_tongue:\nI remember bumping into that same stack trace but updating all deps resolved it.\nalready on latest lein. Thanks for the `profiles.clj`, will check that out\nhm, no luck, commented out everything in profiles.clj, ran `lein clean` and still same error\ngonna try downgrading lein instead, have solved issues in the past\ni still think you have an old version of unify on the classpath. just a question of how it\u2019s getting there\nMmm lein plugins in `project.clj`? Especially `lein-ring`\n<https://github.com/weavejester/lein-ring/commit/b787f66a70993b52487fcafcc906e3875b4726ac>\n<@Vita> seems so. `lein deps :tree` does not list unify anywhere, but guess it's possible it's embedded somewhere somehow\n<@Fatima> yeah, had three plugins there but commented them away\nyeah! Thanks <@Fatima>! Upgrading lein-ring solved the issue!\nMy assumption that `lein ancient` upgrades everything was wrong, as it doesn't update plugins (by default at least)\nthe Clojure community continues to surprise me with it's helpfulness! You're all awesome folks! :beach_with_umbrella:\nthanks a lot for helping me tracking it down\nNo problemo!\nnp!\nIs there a designated channel <@Jasmine> posts his weekly update blog post link on? I can never find it reliably. \nI have been posting on reddit and now on Zulip and erratically here :)\nhave you experimented with multimethods?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "599",
    "text": "Ps. Those posts are great. \nIf they were treated the same, then I'd expect `fn?` to return true for them, that would work for me as well :slightly_smiling_face: I just want to distinguish non-function values (including collections) from functions. Thanks for the ideas, the instance check seems like a good way.\ni've seen them reliably show up on reddit\nAnd in the reddit thread today it was mentioned he is posting about them on a zulip stream: <https://clojurians.zulipchat.com/#narrow/stream/187050-inside-clojure-journals>  I haven't quite wrapped my head around this zulip thing yet myself\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "600",
    "text": "I have started subscribing to RSS feeds again, mostly to keep up with interesting Clojure news. <https://feedly.com> seems to be a good choice for me.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "601",
    "text": "Is there a format to give examples in docstrings/elsewhere for (pure) clojure functions that can then be exploited by other tools? (e.g. to check the examples, etc)\nAlso, another question: in my current project I find myself wanted to use maps with namespaced keywords over records because they have a lot of very nice properties (play well with specs, serialise well, are extendable, etc), but I really, really miss having something like protocols. Is there anyway to get the best of both worlds?\n<@Jasmine> it depends what you mean by experimented. I am aware of them and have used multimethods in a few places, but I wouldn\u2019t say I have a good intuition on how they can be used to address a variety of problems\nfor example, I have a datastructure in my application that is essentially a tree. If I implemented it using a record I would make it extend a \u201cITree\u201d protocol (or similar) and define some standard tree functions on it, but because I am using maps it seems like I am forced to define all those tree functions specifically for that datastructure\nWith clojure 1.10 you have `:extend-via-metadata` on protocols so plain maps can implement protocols using meta\nholy moly really?\n^^ although there are some caveats\n<https://clojure.org/reference/protocols#_extend_via_metadata>\nwhat are the caveats <@Jasmine>?\n`satisfies?` doesn't work with it (although generally you should steer away from that anyways)\nand they are slower than record protocol impls although how much that matters to you will depend\nout of curiosity do you (<@Jasmine> and others) shy away from using records for application code? I know they\u2019re used for clojure core / libairies (e.g. seq, etc), but their incompatibility with specs seem.. discouraged\nslower doesn\u2019t matter at all to me\nand Clojure seems to be very much the spirit of using attribute granularity (as illustrated by spec using namespaced keywords, etc), which records are not\nsorry not protocols; records*\nand if you use protocols, do you use them with maps?\nI'd say records are good in their niche, but that niche is relatively small\ndefinitely use protocols, but don't extend to generic map type\nto generic map type?\nI don't typically use protocols with maps\nhmm, and so do you not define generic functions on map? e.g. using generic tree functions on a map that represents some kind of tree\n(e.g. map, fold, etc)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "602",
    "text": "In clojure applied, examples use records instead of maps :stuck_out_tongue_winking_eye:\nbut I'm still in the first chapter\nI don't typically have those kinds of data structures\nbut usually stuff like `tree-seq` or `clojure.walk/postwalk` are useful with trees\nyeah, I wrote it :)\na second edition would probably be different\nyep, hence my curiousness, your comment here vs the book\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "603",
    "text": "This issue with the REPL not breaking on Ctrl-C/Ctrl-D while evaluating an infinite lazy sequence is sort of getting in my way.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "604",
    "text": "which repl?\n(my guess is it isn't evaluating but printing)\n<@Becki> off my `lein repl` which is the default. So repl-y I guess?\n<@Rosaline> - possible.\n`lein repl` and i evaluated `(range)` and it just sat there and spun. it obeyed a control c and gave me the prompt back. `(prn (range))` and it was time to kill :slightly_smiling_face:\ncheck `(set! *print-length* 100)` and then try `(prn (range 1e5))`\n<@Becki> thanks. That certainly helps\nIs there a good use case for `with-redefs`\nin actual code that is, not tests.\n```\n(defmulti foo class)\n(defmethod foo ::collection [c] :a-collection)\n(defmethod foo String [s] :a-string)\n```\nthat\u2019s an example given on the Clojure site\nIt says that if I execute a `(foo [])` then I ought to get `:a-collection`\nEarlier on it derived a bunch of things from :a-collection\nAh, ignore. I did something wrong\n<@Becki> The repl thing works when its just a print, but here\u2019s where it breaks `(drop-while (partial &lt;= 0) (range))`\nAnd I distinctly remember that working earlier\nNot sure if you were aware, but you can \"call\" a map value in Clojure, like a function, passing a first argument that is some value, and it will look up that value in the map, and return the corresponding value, e.g. ```user=&gt; (def my-map {:a 1 :b -2 \"c\" 42})\n#'user/my-map\nuser=&gt; (my-map \"c\")\n42\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "605",
    "text": "Hi, everyone\nI was wondering If I could write a macro to turn a map into a function defintion that resolves the keys in that map into its corresponding value using case form ... but couldnt quite get it right. (This is as far as I got ....)\nHow is it possible (or am I getting something terribly wrong ?)\nThanks, but yeah I knew.\nBut the question of how to turn into a case statement using macros was just teasing me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "606",
    "text": "Hi everyone,\nI\u2019m working on gRPC server running in Clojure.\nThis is an example of simple method creating server:\n```\n(defn build-server [config info-service]\n  (let [port (:port config)\n        server (-&gt; (ServerBuilder/forPort port)\n                   (.addService ^BindableService info-service)\n                   (.build)\n                   (.start))]\n    (println \"gRPC server started listening on port\" port)\n    server))\n```\nIn the snippet below I\u2019m trying to pass to the server a vector of handlers and add them to the server sequently.\n```\n(defn build-server [config handlers]\n  (let [port (:port config)\n        server (-&gt; (ServerBuilder/forPort port)\n                   (as-&gt; builder\n                         (do (doseq [h handlers]\n                               (.addService builder ^BindableService h))\n                             builder))\n                   (.build)\n                   (.start))]\n    (println \"gRPC server started listening on port\" port)\n    server))\n```\nThe thing is that the piece\n```\n(as-&gt; builder\n      (do (doseq [h handlers]\n            (.addService builder ^BindableService h))\n          builder))\n```\ndoesn\u2019t look elegant. I have briefly a few months of experience with Clojure and I feel there might be some handy macro or practice I\u2019m missing.\ncheck out `doto`\nall this looks fine to me btw, but doto can help when doing a lot of java factory stuff\nThanks <@Jasmine>, I know `doto` but in this piece is not going to help very much as I can\u2019t use it with doseq. If there were a doseq returning a result of last execution :thinking_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "607",
    "text": "Howdy,  I am trying to send a pdf ( as ByteArrayOutputStream )  back to front end in the body of the http response. In our middle wear stack &gt;&gt; Transit &lt;&lt;  is barfing on that ( NullPointer )     so I am wondering if there is something I am missing.  Do i have to make custom handler for transit or something?\nmy response looks like this  {:status 200 :body pdf-output-stream :headers {\"Content-Type\" content-type}}\nwhere pdf-output-stream is the byte array output stream\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "608",
    "text": "What would be an idiomatic way to return the keys of a map for which the values match some predicate?\ne.g. `(map first (filter #(predicate? %2) my-map))`; is there a more idiomatic way?\nreturn the keys or key/value pairs?\n(for [[k v] my-map :when (p? v)] k) ??\n<@Becki> keys only\n`(filter predicate? (keys my-map))`?\nah that\u2019s nice; thanks!\nthe predicate is on the values\n\"for which the values\". gotcha\n:grin:\nFunctions have identity equality semantics. Generally you shouldn\u2019t be comparing them for equality in the first place.\nok :pensive:, thanks!!\nfunctions have reference equality, but implement the value metadata interface, and implement it by wrapping\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "609",
    "text": "Hi!\nrandom question :stuck_out_tongue: why metadata impact on equality for functions?\n```\n(let [f (fn [])\n        m {}]\n                  (println \"fn withMeta == fn\"  (= (with-meta f {1 1}) f))\n                  (println \"m  withMeta ==  m\" (= (with-meta m {1 1}) m))) \n\nfn withMeta == fn  false\nm  withMeta ==  m true\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "610",
    "text": "Function equivalence is reducible to the halting problem which cannot be solved:\n<https://stackoverflow.com/a/1132167/6264>\nWhere \"cannot be solved\" is the general case, for an arbitrary pair of functions.  There are special cases that are decidable, but Clojure's `=` makes no attempt to help you find those.  But I agree that point is getting fairly far from the original question :slightly_smiling_face:\nAnswering my previous question (<https://clojurians.slack.com/archives/C03S1KBA2/p1551018489292000>) I found a more elegant approach of expressing the same:\n```\n(defn build-server [config handlers]\n  (let [port (:port config)\n        server (-&gt; (ServerBuilder/forPort port)\n                   (as-&gt; builder (reduce #(.addService %1 %2) builder handlers))\n                   (.build)\n                   (.start))]\n    (println \"gRPC server started listening on port\" port)\n    server))\n```\n<@Angele> At first I was going to suggest getting rid of the `as-&gt;` threader, but after looking at it, I think the following is most straightforward:\n\n```\n(let [b (ServerBuilder/forPort port)]\n  (doseq [h handlers]\n    (.addService b h))\n  (.start (.build b)))\n```\nIn general, I prefer using side-effecty constructs for side-effecty operations.\nFor example, `doseq` for adding services to a mutable object.\nIf you wanna keep the startup msg, I would do:\n```\n(let [b (ServerBuilder/forPort port)\n      srvr (do (doseq [h handlers]\n                 (.addService b h))\n               (.start (.build b)))]\n  (println \"gRPC server started listening on port\" port)\n  srvr)\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "611",
    "text": "You gotta love those proofs tho, suppose we have x, if we define x\u2019 and y, we would have to solve the halting problem. That\u2019s not possible\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "612",
    "text": "How can I analyze a directory of files using tools.analyzer?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "613",
    "text": "One thing I've found useful to build into functions like these is a promise that is delivered once the service has started. It can either be passed in by the caller, or returned as part of a map that wraps the server object. This makes it possible for tests to use it to ensure the service is ready for requests before the test starts hitting it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "614",
    "text": "Anyone has an experience with Multi-part uploads with Amazonica ? Context: I am trying the merge 30K+ files into a single file in a Lambda function.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "615",
    "text": "I would expect `fn?` to return true as well. Kinda surprised it doesn\u2019t.  It looks like MultiFn extends AFn implements IFn and the fn? implementation is ```(instance? clojure.lang.Fn x)``` \u2026. so difference between IFn and Fn. I don\u2019t know why\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "616",
    "text": "Why does `transit-cljs` allow you to read/write directly from/to strings, but `transit-clj` require the construction of `ByteArrayInputStream`/`ByteArrayOutputStream`? Is there a way to read and write strings directly in the Clojure version?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "617",
    "text": "```Clojure 1.9.0\n(ins)user=&gt; (defmulti foo identity)\n#'user/foo\n(ins)user=&gt; (ifn? foo)\ntrue\n```\n<@Ronald> because String is the right abstraction in a js runtime, but not in the java runtime. It's simple to call the String constructor on a byte-array, but you end up doing a bunch of pointless work in common use cases if you convert to string (because often your target isn't a String in memory, it's an output destination like a File or socket which provides and OutputStream to write to directly). Similarly for input, the thing that you get the transit data from will almost always offer an input-stream, getting a String first then translating reduces flexibility and adds pointless layers of work.\nHow to automatically construct spec from data structure?\nThat's fair. It just seemed very non-Clojurey to be creating and mutating this odd Java object, but it makes sense in that context. I'll just make a wrapper for my purposes that dumps to an in-memory string.\nThanks for the response <@Dann>\nyeah - it's very easy to convert a byte-array to string or string to byte-array\nI think there's a good comparison to the various collection operations here - it would be trivial to provide a function that scans a collection for a matching key, but it's not provided in order to make using a set or hash-map the low-friction path\n(compare to common-lisp or scheme which have sets/hash-maps but many programs use lists instead with O(n) access because it has less friction with a normal coding style)\nIt makes a lot of sense from that perspective\n<https://github.com/stathissideris/spec-provider>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "618",
    "text": "is that even doable for a highly dynamic and flexible thing like spec?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "619",
    "text": "Is there a Markdown parser in Clojure (or Java) than can parse Markdown with GH extensions?\nI'm pondering what best to do with a vanilla `java.util.concurrent.Future` I'm getting from the Firebase API. trying to `.get()` it seems to be blocking my REPL thread forever? not sure.\nis there a way to wrap it into a Clojure future that will play nicer?\nthe functions that work on a clojure future also work on that object\n`realized?`, `deref` (with optional time-out arg), `future-cancel`\noh, I didn't think I could deref it.\nderef will block the same way .get will, except you can optionally provide that time-out arg\ngoogle found me this: <https://github.com/atlassian/commonmark-java>\nI was wrong about `realized?`, but `deref` will work ```egret.run=&gt; (doto (java.util.concurrent.FutureTask. #(+ 1 1)) (.run))\n#object[java.util.concurrent.FutureTask 0x2fa829be \"java.util.concurrent.FutureTask@2fa829be\"]\negret.run=&gt; (def f *1) \n#'egret.run/f\negret.run=&gt; (realized? f)\nClassCastException java.util.concurrent.FutureTask cannot be cast to clojure.lang.IPending  clojure.core/realized? (core.clj:7453)\n\negret.run=&gt; @f\n2\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "620",
    "text": "<@Meagan> That's what I'm playing with (via `commonmark-hiccup`), though it does not seem to be handling tables in my test files even after adding an extension ta parse them.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "621",
    "text": "Hi, I am trying to use DynamoDB (dockerized local) with com.cognitect.aws/api.\nI am struggling to override the endpoint to match the local one.\nI am doing this:\n```\n(def db (aws/client {:api :dynamodb :endpoint-override \"local\" }))\n(aws/invoke db {:op :ListTables})\n```\nBut I get:\n```\n=&gt; #:cognitect.anomalies{:category :cognitect.anomalies/not-found, :message \"local\"}\n(meta *1)\n=&gt;\n{:http-request {:request-method :post,\n                :scheme :https,\n                :server-port 443,\n                :uri \"/\",\n                :headers {\"x-amz-date\" \"20190225T205047Z\",\n                          \"x-amz-target\" \"DynamoDB_20120810.ListTables\",\n                          \"content-type\" \"application/x-amz-json-1.0\",\n                          \"host\" \"local\",\n                          \"authorization\" \"AWS4-HMAC-SHA256 Credential=AKIAIEJE6SPXIMLB7VRA/20190225/us-east-1/dynamodb/aws4_request, SignedHeaders=content-type;host;x-amz-date;x-amz-target, Signature=2099f67eb5a11b49446bf3cbcf89202d94f3d0cf9973d1d6f5c37e85db202e63\"},\n                :body \"{}\",\n                :server-name \"local\"},\n :http-response {:cognitect.anomalies/category :cognitect.anomalies/not-found,\n                 :cognitect.anomalies/message \"local\",\n                 :body nil}}\n```\nis \"local\" a placeholder here? I'd expect at least a valid name like \"localhost\" otherwise\nand the credential pointing to something on us-east-1 is suspicious\nI believe this is a known issue\n<https://github.com/cognitect-labs/aws-api/issues/59>\nI have tried \"<http://localhost:8000>\" but it gets interpreted as a IPv6.\nI am suing \"local\"due to an entry on\n<https://github.com/aws/aws-sdk-java/blob/master/aws-java-sdk-core/src/main/resources/com/amazonaws/partitions/endpoints.json>\n```\n \"dynamodb\" : {\n        \"defaults\" : {\n          \"protocols\" : [ \"http\", \"https\" ]\n        },\n        \"endpoints\" : {\n          \"local\" : {\n            \"credentialScope\" : {\n              \"region\" : \"us-east-1\"\n            },\n            \"hostname\" : \"localhost:8000\",\n            \"protocols\" : [ \"http\" ]\n          },\n```\nThanks <@Jasmine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "622",
    "text": "make sense, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "623",
    "text": "Anyone who has experience with http-kit: how do you send \"multipart/form-data\" parameters? I'm currently working with the discord api and that's what it's asking for, but I can't get it to send properly. I've tried putting the data directly into the :form-params key of the request map but that didn't do it, and I've tried putting the data directly into the :body as well, also no luck.\nI think I've figured it out.\n<@Marlon> Let me know if you still need assistance with that. We use `http-kit` in our test suite to POST images etc into our API for processing.\nOh, thanks! Only issue I'm running into now is actually getting file contents into it. Not sure what's causing problems with it honestly.\nI've gotten it figured out now though\nI have a tree traversal problem: I'm trying to substitute values in a tree according to a substitution map in the tree. for example, if the node `[:expr {:x 1} ...]` should substitute all `:x` child nodes with 1. here's an example: ```(subst [:a [:b [:expr {:x 1} [:d :e [:f :g :x]]]] [:expr {:y 2} [:h :y]]])\n=&gt; ([:a [:b [:expr {:x 1} [:d :e [:f :g 1]]]] [:expr {:y 2} [:h 2]]])\n```\nI'm aware of clojure.walk but I'm having trouble using it with \"memory\". any pointers?\n<@Mireille> you can use a thread local to propagate the context down the recursion\n<@Mireille> do you know <https://github.com/nathanmarz/specter>? ```transform``` might help.\n<@Ariel> thanks, i was reading <https://github.com/nathanmarz/specter/wiki/Using-Specter-Recursively> but it'll take a while to get my head around it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "624",
    "text": "hey guys can I get an extra eye please? I have this `ns` form failing with spec on clojure 1.10:\n```(ns af-rematcher.deeplink\n  (:require [clojure.string :as s]\n            [cemerick.url :refer [query-&gt;map]]\n            [cheshire.core :as json]\n            [version-clj.core :as ver]\n            [com.taoensso/timbre :as timbre]))```\ngenerating: `clojure.lang.ExceptionInfo: Call to clojure.core/ns did not conform to spec. {:clojure.spec.alpha/problems [{:path [], :reason \"Extra input\",`\nWhat am I doing wrong?\n`com.taoensso/timbre`\noh it should be `taoensso.timbre`\nthanks <@Harris>!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "625",
    "text": "I\u2019m trying to translate this from java to clojure:\n```\nint alpha = (pixel &gt;&gt; 24) &amp; 0xff;\nint red = (pixel &gt;&gt; 16) &amp; 0xff;\nint green = (pixel &gt;&gt; 8) &amp; 0xff;\nint blue = (pixel) &amp; 0xff;```\nbut I don\u2019t know how to do the `&amp; 0xff` part, anyone point me in the right direction?\n`(bit-and .....   0xff)`\nsweet, I had just gotten there myself :slightly_smiling_face:\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "626",
    "text": "Hi fellas, this mind-boggling error is consuming me `Can't make API call blobstore.CreateEncodedGoogleStorageKey in a thread that is neither the original request thread nor a thread created by ThreadManager`\nIt's happening with me trying to do an interop where the original is\n```\nBlobstoreService blobstoreService = BlobstoreServiceFactory.getBlobstoreService();\nBlobKey blobKey = blobstoreService.createGsBlobKey(\"/gs/\" + bucket + \"/image.jpeg\");\n```\nto\n```\n(.createGsBlobKey (BlobstoreServiceFactory/getBlobstoreService) \"/gs/crowd-hm.appspot.com/users/5644647548321792/profile/0eb6082b-f67d-46b4-ad2c-d2ef2b737ee5.jpg\")\n```\n<@Lowell> sounds like that method whitelists specific threads for the call and you are trying to call it outside the allowed thread\nNever stumbled in that before, how do I handle it?\nyou could send a function (which is a Callable) to be executed in an app-engine thread pool / thread <https://cloud.google.com/appengine/docs/standard/java/runtime#threads>\nI think that would satisfy it (based on a common sense reading of the error message and docs at least)\nit wants to impose extra coordination over what you get by default with network calls and threads I guess(?)\n&gt; if you want to call App Engine APIs (com.google.appengine.api.*), you must call those APIs from a request thread or from a thread created using the ThreadManager API.\n<@Lowell> ~to clarify about the above, if something hands you a Thread you can use `(.run t f)` where f is any clojure function taking no args~ -- not quite right...\nso I think the solution is to ask the google ThreadManager for a thread, and pass your 0 arg function to the run method of that thread\nthe root issue might be that you are in eg. an http server or go block some other context where new threads are created or allocated automatically to call your function\nAnd I thought that would be just a silly mistake, sounds I need to go deeper :smile:\nYour explanation was awesome <@Dann> so much thanks!\n<@Lowell> I need to correct myself - you can pass a function to the `Thread` constructor, but you can't pass one to its `run` method - so the real fix is different\n:open_mouth:\nbut I'm sure ThreadManager does have the thing you need\n<https://cloud.google.com/appengine/docs/standard/java/javadoc/com/google/appengine/api/ThreadManager.html#createBackgroundThread-java.lang.Runnable-> - this is the method you need, a clojure function of zero args is a Runnable\nso it's still straightforward, just not how I initially described it\n<@Dann> so i've got to `(ThreadManager/createBackgroundThread (BlobstoreServiceFactory/getBlobstoreService))` after the imports\nand had `com.google.appengine.api.blobstore.BlobstoreServiceImpl cannot be cast to java.lang.Runnable`\nso what you do is make that call (and ancillary code if any) inside a function\n`(ThreadManager/createBackgroundThread (fn [] (some-other-step) (BlobstoreServiceFactory/getBlobstoreService)))`\nwhere (some-other-step) might not exist, of course\nyou may also need to explicitly call the Thread's `run` method once it has been created\nMight be something like this `(.run (ThreadManager/createBackgroundThread #(BlobstoreServiceFactory/getBlobstoreService)))` ?\nright\nand you probably don't want that at a top level of the ns (otherwise it runs every time the ns is loaded or compiled)\nSure, it isn't :wink:\nI was taking a literal read of \"after the imports\" :D\nahahahaha\nI find assuming common sense in software discussions is dangerous\nAwesome ahaha\nBUT\n`Current thread is not associated with any request and is not a background thread`\nweird\n:smiling_face_with_smiling_eyes_and_hand_covering_mouth:\noh, :facepalm: you want the `.start` method, not `.run` - newb error on my part\nit's a weird thing about the API that if you call the run method, the thread's code (if any) runs on your thread instead - I have never seen a design where that was useful\nbut start actually uses the thread object like you'd expect\nI've wasted more time than I care to admit accidentally calling .run instead of .start in Java\nI'm glad I'm not the only one\nTo give more context, this is from:\n<https://cloud.google.com/appengine/docs/standard/java/images/#using-image>\nis it about other methods that need to be on google owned threads, or still the same method?\nSame, the snippet here is the same one you see as the first and second line over the link\nyes, that's one work around - the issue is there's no compile time / run time distinction of that sort in clojure - every time your namespace is loaded, whether it's because you are compiling your app or running it, the code inside every def runs (as well as any other top level code)\nthe cleaner fix is to put things that interact with the \"outside world\" or stateful objects inside functions, and arrange to call them via your main or other startup code\nOK - I think that all the api calls related to using the blob store need to be inside the function you pass to the google thread manager\nif you are doing that and still see that sort of error, you might need help from someone who knows app-engine\nInteresting...so why evaluate anything at compile time at all?\nbecause clojure allows you to use the full language while compiling - it's a common thing in lisps\nthere's no \"compile only\" mode other than putting something inside an fn\nand yes, another work around is not using AOT, so that your code is only loaded when running the app (but this still causes problems when eg. linting or running tests, depending what sorts of side effects are in your def)\nYes, I see. The interplay b/t :clj: 's dynamism and Java's static nature always gets me :simple_smile: .\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "627",
    "text": "well.. didn't budge\nCame across this trick to avoid loading files at compile time: <https://stackoverflow.com/a/31333821>\n\nDoes that work b/c the `def`s are evaluated at compile time _and_ runtime?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "628",
    "text": "interesting, do you have an example of this I could refer to?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "629",
    "text": "Hi everyone! Has anyone encountered the `java.lang.module.FindException: Module java.xml.bind not found` error after adding: `:jvm-opts ...` and the `[javax.xml.bind/jaxb-api \"2.4.0-b180830.0359\"]` dependency?\nFixed it! Adding one is fine but not both.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "630",
    "text": "Anyone heard of a library that points out the slowest members in your system? (Component/Integrant)\n\nDoesn't sound hard to build, but who knows, maybe someone already has such code\nwas defnitely easy with robert-hooke.\n\nIf going for it, do all logging in a ns with `clojure.tools.namespace.repl/disable-reload!` set\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "631",
    "text": "None\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "632",
    "text": "G\u2019day! I\u2019ve got a question about database connections in a web application: where do I actually keep the connection? Putting it into a namespace is not so great for obvious reasons. Is it a common pattern to put it in a request object of a http framework?\nMost of the demo/example applications do keep the connection in a namespace :disappointed:\n(specifically speaking of compojure and monger)\nAre you aware of tufte? <https://github.com/ptaoussanis/tufte>\nI'm using this for profiling (a yada server using component)\nI'm not sure something like that would have served\n\nI needed an answer to \"of all my [Sierra] components, which one is the slowest\"?\n\nI cannot add profiling boilerplate to every single component...\nSo, I have to \"profile\" `component/start`, which code I cannot modify\n\ndid so with robert hook, so args and `time` are logged\nRight, that sounds like a good solution\n<@Lucio> <https://github.com/tolitius/mount> and <https://github.com/stuartsierra/component> are precisely for these scenarios\nah, or one can create the connection in a \u201ccreate-routes\u201d method passing the connection down to handlers\n<@Katherina> using components?\nread about stuartsierra/component, but not about mount\nthanks\nmount is an alternative that some people prefer, both have their ways of managing state.\nah \u201ccomponent\u201d even has an example on web applications\nwill check that out, thanks!\njust from contemplating the sources of \u201cmount\u201d: it actually \u201cdoes\u201d define a variable in the respective namespace but defers the instantiation of the actual value until you call \u201cstart\u201d on the framework and from then on it takes care of the lifecycle\n\u2026trying to understand the magic behind it\nsooo technically, if I don\u2019t need lifecycle, I would just define an atom and \u201cassign\u201d the connection to it from somewhere later in the code. That\u2019s what the component framework actually does under the hood\nyeah both of them make state management nicer than the manual way. Mount however tries a kinda less opinionated approach i think: <https://github.com/tolitius/mount/blob/master/doc/differences-from-component.md#differences-from-component>\nWith a thin wrapper we wrote around the bits of it we need to make interacting with it more 'Clojureish'\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "633",
    "text": "which kafka client you are using guys in production ?\nThe Java one\nIIRC Mount has the drawback of failing to create isolated systems that can be run independently\n\ne.g. what if I want to parallelize my test suite? All tests would share the same stuff\nIntegrant is also quite nice.\nYour mileage may vary. We use component heavily at work and are happy with it. But I like what I read about Integrant, seems better\nI agree, but my conclusion is opposite to yours - I view `mount` as simple, and integrant/component as complex. It just so happens that in this case, it is \"made easy\" as well.\n\nLike you say, your mileage may vary.\nOne is pure, the other is not. Sure it's more work to handle when pure, but that's also more powerful (testing/repl etc). Same argument can be made for functional programming and here we are, using clojure, so you might as well embrace (relative) purity. And you're free to use whatever you want, the rest is just subjective arguments (simplicity etc).\nOn a side note, that would be cool to have first class namespaces but that's another subject\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "634",
    "text": "I (and my team) bounced off duct, and by extension integrant, pretty hard. I strongly suspect component would be the same story, but it's been years since I last tried it out.\n\nFWIW we migrated everything duct/integrant to mount in an hour and the productivity boost that we have seen from doing that has been incredible.\n\nI find mount more amenable to just starting a part of the system, which means I can now do REPL-driven development inside the namespace I am writing, as opposed to somewhere else, followed by shipping it out when I'm done.\n\nIn short, I just find mount to be a lot closer to rolling plain Clojure without any of this stuff than the other two.\n<@Toccara> We use <https://github.com/dvlopt/kafka.clj> which is a thin wrapper around the Java one. It even supports the Kafka Streams stuff, should one desire to use it.\ngreat thanks guys\nHonestly that sounds like a classic simple vs. easy contrast.\n\nI absolutely do repl-driven dev with Component. Everyone else in the team does, and it's a diverse one (vim, emacs, cursive...)\n\nComponent/Integrant make things explicit + testable, similarly the Reloaded workflow forces you to keep things pure and non-cyclic :slightly_smiling_face:\n\nIt wasn't entirely an easy journey, here are some notes taken <https://github.com/reducecombine/rehardened>\n&gt; Honestly that sounds like a classic simple vs. easy contrast.\nexactly\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "635",
    "text": "Announcing ClojuTRE 2019, September 26-27th in Helsinki, Finland. Tickets are on sale, get yours now from <https://clojutre.org/2019/>\nI try to avoid controversy, but it might be helpful to wonder \"I say _x_ is complected, but it complects what with what? Is it a complection or a composition?\"\n\nMount appears to complect namespaces with state. You cannot take a namespace without also taking its state, and vice versa. Other libraries keep those orthogonal: I can create state (e.g. new app instances) without creating namespaces,\n\nThat's the magic of Rich's discourse: he pursues an objective definition of simplicity, enabling more fruitful discussions :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "636",
    "text": "Is there any library out there with some kind of `let-debug`  that prints a debug statement after each let? :stuck_out_tongue:\n```(let [a (f1)\n      b (f2)]```\ninto\n```(let [a (f1)\n      _ (println \"a\" a)\n      b (f2)\n      _ (println \"b\" b)]```\nwould you have any links to share about first class namespaces <@Min> ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "637",
    "text": "there's a dlet explained at <https://cambium.consulting/articles/2018/2/8/the-power-of-clojure-debugging>\nI think there are some libs out there with stuff like this, but I'm not sure which ones off the top of my head\nhere\u2019s my shot:\n```\n(defmacro letd [bindings &amp; body]\n  (let [pairs (partition 2 bindings)\n        dbg   (map (fn [[v value]] `(_# (println ~(str \"&gt;&gt;\" v) ~value))) pairs)\n        intv  (interleave pairs dbg)\n        bs    (into [] (apply concat intv))]\n    (println dbg)\n    `(let* ~(destructure bs) ~@body)))\n```\nmy solution does not work with destructuring :cry: tks <@Jasmine>\nI guess is one of those things, everybody quietly rolls their own :smile:\nnot really, it's not a thing in clojure, racket has something like that and ocaml functors come to mind (somewhat)\ntil interleave. i was reducing\n```\n(defmacro let-debug\n  [bind-vec &amp; body]\n  (let [parted (partition 2 bind-vec)\n        new-bind (reduce\n                   (fn debugger [aggr [name value]]\n                     (conj aggr\n                           name value\n                           '_ `(println ~(str name \" is \") ~value)))\n                   []\n                   parted)]\n    `(let ~new-bind ~@body)))\n```\nI'll have to move these languages up from my learning list\n<@Min> I think you are confusing purity with functional programming.\n\nWith mount we still have pure functions. The point of FP is pure functions, not pure namespaces - since namespaces are just groupings of things. Whether said groupings contain state or not is, in my humble opinion, completely beside the point of writing pure, stateless functions.\n\nState needs to live somewhere. I don't think it matters whether it's spread across the place or living in a single namespace if you can easily get hold of it when you need it. Beyond that, it boils down to whether it forces me into a particular way of doing REPL-driven development.\n\nAnd my point was that mount allows me to do it any way I like, unlike the alternatives.\nI am not :) But as I said it's all quite subjective arguments at this point. \nI like to be able to pass my state around, have multiple versions of it etc, you like to shove it at the namespace level, so be it. \nI see, my original question has no clear answer, there\u2019s some controversy about where to keep the state :smile:\nas a reminder of the wide variety of options.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "638",
    "text": "There doesn't seem to be a channel for `clojure.java.jdbc`, so a simple question here. I need to write some code that will be generating a ton of very postgresql specific DDL.  Without meaning to slight `clojure.java.jdbc/create-table-ddl`, it is nowhere near prepared to deal with schema entity references, quoted identifiers for table or column ids, and the many _many_ options for `create table`.  Even something as simple as a column default constraint requires special quoting to use `create-table-ddl`, e.g. `[:text-col :text :default \"'the default value'\"]`  (note inner single quotes).\n\nI'm just wondering if someone has written an abstraction like `create-table-ddl` that is more capable with regard to supporting the many options of `CREATE TABLE`.  If not I suppose I'll just be concatenating up a lot of strings, no time to write this dreamed-of abstraction now.\nare you dynamically generating tables?\nI think the suggestion would be to try both `mount` and one of `component`/`integrant` and find out which one fits you better.\nyes\ni feel your pain\nPart of a semi-structured to structured data storage project\ntables, schemas, partitions, the whole bit\n<@Chauncey> - There's also <#C1Q164V29|sql>, FYI.\nOn a side note, I was kind of suprised when I couldn't find a nice package that encapsulates queries on the the supposed-SQL-standard \"information schema\" supported by postgresql.\nthanks, will cross post there\n(as in, return maps of maps that represent schemas/tables/columns etc in a hierarchical view)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "639",
    "text": "&gt; There doesn't seem to be a channel for `clojure.java.jdbc`, so a simple question here.\nThe <#C1Q164V29|sql> channel is for `clojure.java.jdbc` discussions, as well as general SQL questions (and also other SQL libs).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "640",
    "text": "I am trying to do some calls to https with http-kit/client , but all I get is \" :message \"HTTPS is not supported\". What http-client lib do you guys use for async-http-requests? I need to use ssl with pkcs12\nI am on the latest version of Http-kit. I tested Clj-http before but I did not like the async-connection-manager\naleph has a client iirc\nit has its own setup for async (manifold) which is similar to core.async in some ways\ni'll have a look, thanks :slightly_smiling_face:\nawh yeah. Aleph looking sweet\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "641",
    "text": "<@Holly> I cant think of a destructuring form that doesnt just use symbols\nso if you wanted that macro to log everything, you would just need to scan the thing on the left for \"all symbols except _\" recursively\nI think ur right\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "642",
    "text": "i've been seeing obscure errors in my stacktraces like `in unnamed module of loader 'app'` since upgrading to java 11 and clojure 10. others seeing this? example: ```class clojure.lang.PersistentList cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentList and clojure.lang.IFn are in unnamed module of loader 'app')```\nI have seen those - my understanding is that\u2019s just letting you know what jvm module (jigsaw and all) was responsible for the classes listed. but the exception is that you\u2019re using a list as a function somewhere\nI believe with jigsaw there\u2019s an implicit top level module if you don\u2019t define your own modules\npresumably that\u2019s what \u2018app\u2019 is\nyeah, that looks like a regular error with a little extra java module information appended\n```\nuser=&gt; (())\nExecution error (ClassCastException) at user/eval602 (REPL:1).\nclass clojure.lang.PersistentList$EmptyList cannot be cast to class clojure.lang.IFn (clojure.lang.PersistentList$EmptyList and clojure.lang.IFn are in unnamed module of loader 'app')\nuser=&gt; \n```\nThat\u2019s standard for Java ClassCastExceptions now\nIn Java 9+\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "643",
    "text": "Is there a common name for this function in Clojure?\n```\n(defn &lt;*&gt;\n  [fs xs]\n  (reduce-kv (fn [m k f]\n               (assoc m k (f (get xs k))))\n    (cond (vector? xs)      []\n          (associative? xs) {})\n    fs))\n```\nit applies each `f` in `fs` to each `x` in `xs` while trying to keep the original data structure\n```\n&gt; (&lt;*&gt; [dec inc] [10 20])\n[9 21]\n\n&gt; (&lt;*&gt; {:a dec :b inc} {:a 10 :b 20})\n{:a 9, :b 21}\n```\nso, I\u2019ve seen thinks like `map-vals` that\u2019s basically `(into {} (map (fn [[k v]] [k (f v)])) coll)`\nit\u2019s _very_ questionable to me that there\u2019s value in not knowing whether you have a vector or a map\nlike, I _kinda_ see it, but I mostly don\u2019t :stuck_out_tongue:\nhmm ok, just realised that it's almost equivalent to\n```\n(defn &lt;*&gt; [fs xs]\n  (reduce-kv update xs fs))\n```\nah :derp:\nI misinterpreted what you were doing\n(a little)\nthe concept is roughly equivalent to the Applicative typeclass in Haskell, or like `juxt` with multiple arguments\nso I was wondering if there was a primitive for it\nnot something I\u2019ve seen before :slightly_smiling_face:\nlooks like `reduce-kv` doesn't work on lazy sequences though\nI wonder what would be the expected behaviour for missing keys :thinking_face:\nor variadic arguments\nreal-world example: let's say you have a map of strings, each to be parsed differently\n```\n(def data {:date  \"2019-02-28\"\n           :price \"$20.50\"\n           :id    \"0a18abb7-dd4f-4aad-a49a-acb46cf23955\"})\n\n(&lt;*&gt; {:date  parse-date\n      :price parse-currency\n      :id    parse-uuid}\n  data)\n```\n<@Loria> You can use `empty` instead of that condition (from 30 minutes ago). `(empty xs)` will produce `[]` if `xs` is a vector and `{}` if `xs` is a hash map.\nThanks for the tip!\nThat's interesting, I've only used `spec` for instrumenting functions during development - is it common practice to use it in this way for actual application logic?\nWe use spec very heavily in production code. We use it for API parameter validation (and we use heuristics on top of `explain-data` to produce user-facing error messages).\nWe have three layers of spec: API parameters (conforming from string to simple values), domain model (this isn't used a huge amount right now), persistence model.\nWe don't use instrumentation a great deal (we use it around some tests). We use `s/exercise` to produce \"random example\" data for unit tests. We have a few `st/check` tests as well, and some \"occasionally run\" generative tests.\n(we started using early releases of spec in production during the early 1.9 alpha cycle)\nThanks for the explanation :slightly_smiling_face: Sounds like I should start looking into `spec` more deeply\nIn the above case, missing keys are dealt with by passing values through unchanged if there's no corresponding function\nand calling the function with `nil` if there's no corresponding value\n```\n(defn &lt;*&gt;\n  \"apply functions in `fs` to values in `xs`\"\n  [fs xs]\n  (reduce-kv update xs fs))\n\n&gt; (&lt;*&gt; [dec inc str] [1 2 3 4 5])\n[0 3 \"3\" 4 5]\n\n&gt; (&lt;*&gt; [dec inc str] [1 2])\n[0 3 \"\"]\n```\nAnd in the case of hash maps?\n```\n&gt; (&lt;*&gt; {:a str} {:b 3})\n{:b 3, :a \"\"}\n```\nAh, OK. Not what I expected.\nI wasn't expecting the function to _add_ new keys to the map being processed. But that's a reasonable behavior too.\nI guess that using spec would return `s/invalid` or throw an exception? Unless using `opt` keys, which I recall were going to be deprecated in the future\nI don't think a decision has been made on that yet.\nSpecs should return either a successfully conformed value or `s/invalid`. Throwing an exception is not useful there.\nWhat we do for specs that conform strings, is we wrap their parsing in `try`/`catch` and in the `catch` we return `s/invalid`.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "644",
    "text": "For the above example, I'd probably be tempted to use conforming specs... ```\n(s/def ::date parse-date)\n(s/def ::price parse-currency)\n(s/def ::id parse-uuid)\n(s/conform (s/keys :req-un [::date ::price ::id]) data)``` where each of the `parse-*` functions accepted a string and either returned the parsed value or else `s/invalid`.\n(but you'll get howls of protest from the folks who say specs should not conform from string to non-string types :slightly_smiling_face: )\nAlso, in the above example, what should have to keys that aren't in the parse hash map? Clojure's principles would suggest that such any additional key/value pairs should be passed through unchanged.\nWe also use spec around our persistence model, to strip hash maps down to just the expected keys (which we extract from the `s/keys` in the spec via `s/form`) and that the values conform to what the database expects.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "645",
    "text": "How do I define a custom return value for `s/conform`?\nE.g. I have a spec like\n```\n(s/def ::nested\n  (s/tuple (s/tuple #{\"s\"} int?)))\n```\nand I'm only interested in the int\nso I would like to have `(s/conform ::nested [[\"s\" 123]]) =&gt; 123`\n(apologies if this is more suited to the beginners channel)\nAlso is there any way to recursively conform specs?\n```\n&gt; (s/conform ::int-string \"3\")\n3\n\n&gt; (s/conform (s/keys :req-un [::int-string])\n    {:int-string \"3\"})\n{:int-string \"3\"}\n```\nGoogle searches didn't lead me anywhere :confused:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "646",
    "text": "Hey how do Clojure people run db migrations? In .NET I have my project set to auto-migrate a DB on startup in production if there is things to migrate. So I just have to git push and I'm done deploying a new version of my app.\n\nAnything similar in Clojure?\ndoes somebody here have experience with integrating single sign via OAuth or SAML 2? Wondering which of the many java libraries to choose. Today I only need Azure Active Directory support, but it would be handy if the library handled more\u2026\nI used <https://github.com/weavejester/ragtime> worked out pretty okay for me\nI generally call the migrate function in the main which applies it everytime the server starts in an idempotent manner\n<@Katherina> Nice, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "647",
    "text": "hi guys! is there a canonical way to get a subspecification from a clojure.spec? something like get-in where you would supply a spec path? The use case is to validate the results of \u00b4update-in\u00b4 when you have a spec for the root  without checking the entire datastruct\nI guess I could work from spec/form, but maybe there is a better way.\nOut of a binding vector with destructuring:\n\n```\n[{::keys [foo bar]\n  baz ::else/omg\n  {:keys [tomato]} :potato\n  :as self}]\n```\n...how would you get a mapping of the extracted variables to their paths? Like the following\n\n```\n{foo [::sth/foo]\n bar [::sth/bar]\n baz [::else/omg]\n tomato [:potato :tomato]\n self []}\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "648",
    "text": "<https://docs.racket-lang.org/guide/units.html>\nis this the feature you had in mind <@Min> ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "649",
    "text": "Destructuring in macros is backed by a function called `destructure` which rewrites the binding vector into a binding vector without destructuring. It won\u2019t give you paths but it\u2019s halfway there\nThat function is intentionally not doc\u2019ed (as it\u2019s an impl detail) but it takes a binding vector and returns a binding vector so you can invoke it by quoting your vector\nThe next step of going from that binding vector to paths is probably not fun, but it\u2019s possible\n<https://gist.github.com/leonoel/e933ee2b3f1e627063ab1db90d5396f9>\nWhile reading the manual I've written a clojure implementation of the example, with injure\nFeel free to comment\nthanks Alex :slightly_smiling_face:\n\nI had played a bit down that path... and yes, didn't look very fun!\nWe use <https://github.com/yogthos/migratus>\nHi <@Katherina> - nice to meet you at ClojureD :slightly_smiling_face:\nBtw, there\u2019s also a GraalVM version of migratus:\n<https://github.com/leafclick/pgmig>\nShould be super fast to run, didn\u2019t try it.\nNice to meet you too <@Clarine> :smile:\nwhat would be the best way to log an exception\u2019s ex-data using logging? Say with logback as the logging backend. E.g when if I did\n```\n(log/errorf (ex-info \"test\" {:foo 42}))\n```\nand it produced something like\n```\n- host date | \"test\" {:foo 42}\n```\nDoes it mean I have to write my own appender or convertor class?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "650",
    "text": "Can you elaborate a little on these heuristics? We like spec but have found it very troubling to have to wrap any user-facing validation (since the messages are pretty atrocious for those who don't speak Clojure).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "651",
    "text": "what would be your expected output?\n<@Tressa> as I posted above, e.g. `- &lt;host&gt; &lt;date&gt; | \"test\" {:foo 42}`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "652",
    "text": "We have a hash map for each API that maps symbols (or occasionally sequences of symbols) to error codes, and we walk the `explain-data`, looking at `:path` and `:pred` and build a `reductions` of partial combinations of those, then walk that list looking for a match in our API hash map.\nMissing parameters match to a `contains?` check on the API parameter name. Incorrect types match to a pair of the API parameter name and the spec operator, e.g., `int?`.\nI was teaching a bunch of people Clojure. I asked them to implement the game 2048 and one of the constraints I had was to use as few `defn` as possible.  <https://gist.github.com/craftybones/42f180cf753db07b6694de87f4182ece>\nI\u2019d appreciate it if people can critique that solution.\nQuite a few people landed at roughly the same solution\n<@Nigel> many of those partials could be transducer arities instead, using comp to combine them, then using a transducing context at the top level\n<@Dann> thanks. I hadn\u2019t yet taught them transducers at that point, but point taken\nAlso, I didn\u2019t realise that partition returns a transducer\nDarn, so cool :slightly_smiling_face:\nyeah, I think all your partials are valid transducers\nyour comps would need to reverse order of course\nOf course.\nBut ok otherwise isn\u2019t it? Its remarkable how a game such as 2048 can be written almost entirely without a single \u201cvariable\u201d and letting a managed stack do all the work\nfor transpose, there are few cases where `list` is better than `vector` and I suspect this isn't one of them\nboth are eager, you can easily seq on a vector, you can't easily do indexed lookup on a list\nand in many cases creating a vector is lower overhead (one contiguous object instead of a linked series of allocations)\nso `(def transpose (partial apply map vector))` instead?\nand agreed, it's a good demonstration of how elegant and powerful higher order functions can be\nTo be clear, a seq is eager, so seq on a vector and a seq on a list should theoretically be the same, so why the vector?\nlist is eager\nBut wouldn\u2019t the seq force both?\nthe difference is that vectors are more efficient to allocate, and they have fast indexed lookup\nthere's no forcing in question, both are eager\nRight. That\u2019s what I assumed.\nOk, got it\nthe allocation is the performance you are talking about\nlists have few (no?) features that make them superior to vectors\nthe allocation and the lookup time\nlists make better stacks?\nvectors are great stacks, you just pile onto the end\nand peek ?\npeek / pop work on both vectors and lists\nright\nI remember reading somewhere about peek performance.\nor last. I can\u2019t remember which\npeek is faster than last, and happens to find the last element of a vector\nok. Thanks.\nvectors are indexed, so all lookups by index are faster\n(of course you lose this advantage by calling seq, but you are still no worse off than you were with a list)\nI am guessing lists are there primarily for homoiconicity?\nand we always need more parentheses, of course\nyeah, you need lists from macros (but only weird macros are built out of *direct* calls to list)\nThat\u2019s true. Regular old quoting seems to cover most needs\nIs the idea of LightTable dead? There seems to be a brave soul who every now and again revives it from the dead\nI am more interested in the idea itself even if the project doesn\u2019t rekindle itself\n(like, I am familiar with the project, and have seen chris talk, etc)\nOne of the things that the original video from the kickstarter campaign spoke about was a function as a unit of code as opposed to a file and the ability to live debug as you built stuff\nI thought both those ideas had a lot of merit and would have liked to see it go some distance\nyes and no. The repl by itself is certainly powerful, but the repl that he showcased and seemed to be aiming at was far more powerful and was real time, often highlighting values overlaid on the original code etc\nI haven\u2019t yet seen/used rebl. Is that what I want? I have the talk bookmarked and am meaning to watch it\nit is a kind of gui data explorer\nI dunno, in general gui tools tend to pass me by because I do all my work ssh'ed into a vm specifically setup for work programming\nOk. There was this fancy node.js repl that doesn\u2019t seem to be maintained anymore which was quite cool as well\nCan\u2019t remember the name now\n<@Celestine> - A lot of tools have this thing where they are born again later and somehow seem to catch on\nREBL is \"different\" because it's in-process and it's very focused on data viewing/visualization/exploration right now. It'll be interesting to see where it goes.\n<@Clarine> - LOL :smile:\n<@Clarine> - yeah, unlike fish that die and are never born again\nI\u2019ll definitely try out REBL\nLiquid is also a very interesting project: again, it's an in-process editor, that's fairly vim-like, but written entirely in Clojure and using curses-style terminal UI (so it can run in an ssh session on a remote box, for example).\nJust hanging out in these channels is a wealth of information. Thank you <@Clarine> and <@Celestine>\n<https://github.com/mogenslund/liquid> -- see the demo videos for insight into the workflow. I really like it (and will like it more after it completes its transition to more vim-like key bindings!).\nI'm hoping to extract the generic heuristic code into a library and open sourcing it at some point. Right now, it's a bit tangled up with some of our proprietary code.\n<@Celestine> - the best of vim and emacs but with Clojure instead of elisp.\nSeems cool\nThis is a ridiculously cool project. <@Celestine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "653",
    "text": "Wow, that seems like a lot of work, but is sort of what I imagined would be required to prettify those. Is that code public? Thinking of building something similar at work in the medium-long term.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "654",
    "text": "what is the idea of lighttable?\nbut what do you think the idea is?\nisn't that just a clojure repl?\nhave you seen rebl?\nwith repl hooks\nThe original demo for LightTable was a radically different way to edit/work with functions -- but in testing with actual users it proved too alien/confusing so they scaled back to a much more \"normal\" editor experience. The main \"novel\" features it included were inline result display and auto-evaluation of code as you typed (which, frankly, I found a bit too dangerous/annoying and quickly turned that off).\nso lighttable wasn't very compelling, rebl itself isn't super compelling, but it is built on some protocols which are usuable elsewhere which is kind of nice\nI think several editors provide the inline results and auto-eval options now and LT is virtually abandoned (I think).\nlike bash\ned for clojure running from the repl\nbtw, which is also kinda cool if you work in a terminal: <https://github.com/denisidoro/floki>\njust spit your edn to some file and then inspect it. I\u2019m not sure if I\u2019ll use it, since I can inspect things with CIDER pretty well, but it\u2019s cool that this kind of thing can be written in CLJS now\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "655",
    "text": "lists are much faster than vectors as stacks btw\noh! - good to know\nI mean the data structure modification is a pointer, so that should be the guess (but it's easy to see in a perf test)\nyou'll get more variability with the vector I suspect as it will depend on how deep in the data structure you are updating\nso for an empty vector, would likely be pretty fast, but you might see a different story on one with a few dozen elements\nthe jvm has two bytecodes supporting \"switch\" - one is a linear series of checks, the other is effectively a constant time jump table keyed off of hashcode\nClojure's case does a ridiculous amount of work to use the latter\nThat got me scrolling through my phone to find the case source, which stirred up a couple of questions/comments:\n\n1.) some?, if-some, when-some\u2014 do people use these often? I don\u2019t, personally. Anyone have insight as to why they made it into core? I think I saw an added in 1.6, which makes me guess at it being related to transducers?\n\n2.) `mod`\u2019s docstring has a line \u201cTruncates toward negative infinity.\u201d Could someone explain that to me, and perhaps provide an example of why it\u2019s important to know?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "656",
    "text": "using criterium and a random series of stack operations I was able to confirm that, though the difference was smaller than the smaller standard deviation\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "657",
    "text": "from the docstring of <http://clojuredocs.org/clojure.core/case>\n&gt; Unlike cond and condp, case does a constant-time dispatch, the clauses are not considered sequentially.\n\ncan someone explain in plain English what that means?\nit jumps to the condition, rather than linearly checking the conditions one at a time\nit compiles to effectively (or maybe literally) a hash-map lookup on the dispatch value\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "658",
    "text": "I prefer `if-some` and `when-some` over `if-let` and `when-let` almost every time\nif I remember correctly the reason why they were added was because `core.async` channels impose `nil` as the end-of-stream sentinel\n&gt; I prefer `if-some` and `when-some` over `if-let` and `when-let` almost every time\n\nyes I've met other clj programmers following that style\n\nIt might boil down to Java-like vs. Lisp-like boolean semantics (in Java there's no 'truthiness' - just true and false can be used in conditions). Some people prefer Java-like\nI typically avoid calling modulo/remainder or division operations on negative numbers, to avoid having to know, and because applications I have written didn't need such operations on negative numbers.  But this page on the divide and modulo behavior in various flavors of C/C++ might answer some of your question: <http://www.microhowto.info/howto/round_towards_minus_infinity_when_dividing_integers_in_c_or_c++.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "659",
    "text": "Hi! Anybody knows of a clojure nlp library with things like RAKE/LDA?\n<@Jaimee> I\u2019d take a look at <https://stanfordnlp.github.io/CoreNLP/>\nThank you! I actually know about corenlp but it doesn't have LDA nor RAKE. I know Spark has LDA but I'd like to avoid to massive overhead Spark creates... Worst case I'll go an implement it...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "660",
    "text": "I saw something about LDA mentioned in the JavaDoc of CoreNLP, that\u2019s why I thought it may be relevant, but maybe not.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "661",
    "text": "I'm trying to find any previous implementations (or some library I could steal ideas from) for having a pipeline which basically all functions inside this pipeline depends on the previous step and also have side-effects. Goes something like `fetch source -&gt; build -&gt; report status` but with a bit more steps in-between. Any previous art or thoughts on the subject are welcome! I've looked at some implementations using `async/pipeline` but feels like over-engineering for my case, no need for it to be async\nAh, basically build up some context map that contains all the parts that are needed? Actually not a bad idea\nthanks!\nYep exactly.  You\u2019re welcome :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "662",
    "text": "If I understand your requirement, I\u2019ve done similar before simply using thread-first, passing a context as I go: ```(-&gt; initial-context fetch-data parse-data categorise send)```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "663",
    "text": "I think that would definitely help improve practicality of spec\n<@Ronald> Have you looked at `expound`?\nI have, and I think it's pretty solid. But for a lot of purposes I want to leak even less Clojure/spec stuff in error messages. So if a user sends JSON to my application and gets back this error message, they aren't confused by seeing the actual keys, maps, predicates etc. that I used internally.\nFor me that's just meant trying my best to wrap any `spec` checks and give \"Clojure-free\" messages, but it's tedious and failure-prone\nMaybe there isn't really a great solution, since failing a spec inherently means getting \"you were missing key `:some-key` in `some-map`\", and you can't really send that out to the world without revealing internals of Clojure code\nIf you need to produce domain-specific error messages, you pretty much have to have domain-specific heuristic code... but if I can reduce it to generic data walking and lookup + a simple hash map, then it would be worth releasing as an OSS lib...\nYes I think so (on both accounts)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "664",
    "text": "I couldn\u2019t find `clojure.java.jdbc` channel, so asking here: At the time of table creation, if I provide `[:age :int :default 18]` then jdbc throws error, but it accepts `\"18\"`, which is logically incorrect. How to handle this?\nthe channel for jdbc is <#C1Q164V29|sql>\noh okay, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "665",
    "text": "I'm making myself crazy with this... I'm using clojure.data.json to create a json string. The string I want to create looks like this:\n{\"query\":\n   {\"field\":\n       {\"text\": \"123\",\nSorry, hit the wrong key. Let me try again.\n{\"query\":\n  {\"field\":\n      {\"text\": \"123\",\n       \"title\":  \"ABC\"}\n  }\n}\nthe json/write-str I use looks like this:\n(json/write-str {:query {:field {:text \"123\", :title \"ABC}}})\nBut I keep getting\n\"No value for key\" error on the generation.\nI've tried just about every combination I can think of, with no joy.\nis the \" after C missing in your original?\nDoes someone see something I'm missing?\nNo, it's there. Just a typo.\n```\nuser=&gt; ((fn [&amp; {:as m}]) 1)\nExecution error (IllegalArgumentException) at user$eval1467$fn__1469/doInvoke (REPL:1).\nNo value supplied for key: 1\nuser=&gt; \n```\n```egret.run=&gt; (j/write-str {:query {:text \"123\", :title \"ABC\"}})\n\"{\\\"query\\\":{\\\"text\\\":\\\"123\\\",\\\"title\\\":\\\"ABC\\\"}}\"\negret.run=&gt; (println *1)\n{\"query\":{\"text\":\"123\",\"title\":\"ABC\"}}\nnil\negret.run=&gt; (j/write-str {:query {:text \"123\", :title \"ABC\"}} :foo)\nIllegalArgumentException No value supplied for key: :foo  clojure.lang.PersistentHashMap.create (PersistentHashMap.java:77)\n\n```\nextra arg, yeah\nIt seems to me that query is matched by field, field is matched by the object containing text and title. Everything has a key value. The original JSON validates. It just doesn't work with json/write-str. Very odd.\nyou are providing the wrong number of args to write-str\nwhat does the stacktrace say?\nWhere did the :foo come from in your example?\nit's how you make that error message happen\nAh. Is there a better way to make sub-objects in a JSON string with json/write-str?\nyou have supplied the error message, which says what the error is, but the stacktrace will tell you where the error is actually happening\nwhat does this mean?\nIllegalArgumentException no value supplied for key:\nthen: clojure.lang.PersistentArrayMap.createAsIfByAssoc (PersistentArrayMap.java:79)\n`*e` will contain the full trace\nThat's the whole stack trace (this is in the repl)\nthat's not a stack trace, it's a message\n*e contains the trace\nNever mind, I see it.\nHere's the whole thing:\nat [clojure.lang.PersistentArrayMap createAsIfByAssoc \"PersistentArrayMap.java\" 79]}]\n :trace\n [[clojure.lang.PersistentArrayMap createAsIfByAssoc \"PersistentArrayMap.java\" 79]\n  [clojure.core$array_map invokeStatic \"core.clj\" 4256]\n  [clojure.core$array_map doInvoke \"core.clj\" 4249]\n  [clojure.lang.RestFn applyTo \"RestFn.java\" 137]\n  [clojure.core$apply invokeStatic \"core.clj\" 646]\n  [clojure.core$apply invoke \"core.clj\" 641]\n  [clojurewerkz.elastisch.arguments$__GT_opts invokeStatic \"arguments.clj\" 9]\n  [clojurewerkz.elastisch.arguments$__GT_opts invoke \"arguments.clj\" 3]\n  [clojurewerkz.elastisch.rest.percolation$register_query invokeStatic \"percolation.clj\" 30]\n  [clojurewerkz.elastisch.rest.percolation$register_query doInvoke \"percolation.clj\" 25]\n  [clojure.lang.RestFn invoke \"RestFn.java\" 467]\n  [esearch.handler$get_register_search invokeStatic \"handler.clj\" 124]\n  [esearch.handler$get_register_search invoke \"handler.clj\" 119]\n  [mysql.core$eval11790 invokeStatic \"form-init1224899402989498950.clj\" 1]\n  [mysql.core$eval11790 invoke \"form-init1224899402989498950.clj\" 1]\n  [clojure.lang.Compiler eval \"Compiler.java\" 6927]\n  [clojure.lang.Compiler eval \"Compiler.java\" 6890]\n  [clojure.core$eval invokeStatic \"core.clj\" 3105]\n  [clojure.core$eval invoke \"core.clj\" 3101]\n  [clojure.main$repl$read_eval_print__7408$fn__7411 invoke \"main.clj\" 240]\n  [clojure.main$repl$read_eval_print__7408 invoke \"main.clj\" 240]\n  [clojure.main$repl$fn__7417 invoke \"main.clj\" 258]\n  [clojure.main$repl invokeStatic \"main.clj\" 258]\n  [clojure.main$repl doInvoke \"main.clj\" 174]\n  [clojure.lang.RestFn invoke \"RestFn.java\" 1523]\n  [nrepl.middleware.interruptible_eval$evaluate invokeStatic \"interruptible_eval.clj\" 79]\n  [nrepl.middleware.interruptible_eval$evaluate invoke \"interruptible_eval.clj\" 55]\n  [nrepl.middleware.interruptible_eval$interruptible_eval$fn__764$fn__768 invoke \"interruptible_eval.clj\" 142]\n  [clojure.lang.AFn run \"AFn.java\" 22]\n  [nrepl.middleware.session$session_exec$main_loop__865$fn__867 invoke \"session.clj\" 171]\n  [nrepl.middleware.session$session_exec$main_loop__865 invoke \"session.clj\" 170]\n  [clojure.lang.AFn run \"AFn.java\" 22]\n  [java.lang.Thread run \"Thread.java\" 748]]}\nesearch.handler is my code.\nso this problem has nothing to do with data.json\nProbably not, but I presume that people have built JSON like this before with data.json..\nI'm just looking for what I'm doing wrong in my write-str.\nwrite-str has nothing to do with that error\nwrite-str triggers it, that's all I know.\nif that were true, write-str would be in the stack trace\nI'd think so. It could be when it gets passed to ElasticSearch. Maybe something goes wrong there.\nwhat does -&gt;opts do and how is it being called?\nYou are most likely realizing a lazy sequence that was created somewhere else.\nI think one problem might be that the values for title and text aren't simple like \"123\". They are 1024 character strings containing search terms that may or may not have foreign characters in them.\nAnd the error is in what you passed to the code that created that lazy sequence.\nThat's a reasonable idea.\nIs `-Dclojure.compile.warn-on-reflection` property supposed to work? If so, what effect should it have? I supposed it will set the reflection warning dynvar for all namespaces by default, but it doesn't seem to.\n<@Delcie> have you shown us exactly what code is on line 124 of `esearch.handler`?\n`-Dclojure.compile.warn-on-reflection=true` should work.\n```$ clj -J-Dclojure.compile.warn-on-reflection=true\nClojure 1.10.0\n(cmd)user=&gt; *warn-on-reflection*\nfalse\n```\nthis is Elastisch, submitting a query to the ElasticSearch percolator:\n(pcl/register-query conn index rowid json)\nThat's on line 124. 'json' is the output of data.json. index and rowid are strings.\nAh, yes, that's it.\nWhich version of Elastisch are you using? The stack trace does not match the latest version.\nIt looks to me like `register-query` expects kw-args style arguments, i.e., named arguments, not a single JSON map.\nSo its not controlling the value of `*warn-on-reflection*`, it is just looked up as well by the compiler when compiling to decide if it should emit or not the warnings.\nElastisch is 2.2.1\nReally, I didn't see that in the docs. That is very helpful to know.\nYes. Then you're calling it per the 3.x API, instead of the 2.x API.\n<https://github.com/clojurewerkz/elastisch/blob/2.2.x-stable/src/clojurewerkz/elastisch/rest/percolation.clj#L27>\n`&amp; args` is expected to be unrolled keyword args, not a map.\nIn Elastisch 3.x, this call changed to accept a single hash map of `opts`\n<https://github.com/clojurewerkz/elastisch/blob/3.0.x-stable/src/clojurewerkz/elastisch/rest/percolation.clj#L27>\nSo you either need to change your call or update to 3.x.\nI'll try both. :slightly_smiling_face:\nWell, updating Elastisch to 3.0.0 didn't fix it. Same problem. I'll try keyword args rather than the JSON.\nIt should be a hash map not a JSON string.\nHere's the commit that changed the kwargs to option hash maps across the whole of Elastisch in May 2016 <https://github.com/clojurewerkz/elastisch/commit/f3ea4289b9a9cb37a491f0a3a2df4ec6388d27ae#diff-62e296465e10f4b062c0484560be3e12>\nSo `(pcl/register-query conn index rowid {:query {:text \"123\" :title \"ABC\"}})` for 3.x or `(pcl/register-query conn index rowid :query {:text \"123\" :title \"ABC\"})` for 2.x.\nThanks that's very helpful. OF course our ElasticSearch servers just went down so I'll have to test later. My localhost ES doesn't have enough data for what I'm doing.\n<@Celestine> I have to thank you. That one post about 3.x vs. 2.x was the key. It's fixed now.\n<@Dona> Congratulations! That's pretty exciting.\n<@Delcie> This is a good example of why Rich is such a strong advocate of accretion, relaxation, and fixation -- rather than _breakage_. Admittedly, Elastisch did a major version change to signal \"potential breakage\" per so-called Semantic Versioning, but it really does show that you never really know whether updating to a new major version is \"safe\" or not -- and changes like this make it hard to trust the docs, unless they are also fully versioned for every new release.\n(That said, my \"flagship\" Clojure project, `clojure.java.jdbc` also went through two rounds of API breakage -- to move to a more idiomatic API -- and, in fact, it was precisely the same changes that Elastisch made, switching from keyword arguments to an options hash map!)\nThat's true. I use your java.jdbc as well. Many times reading code is all that really works. Still, in my job I'm often trying to hack together something needed in a matter of hours, and I rely on docs to get things started probably more often than I should.\n(I write mostly back end data moving stuff)\nNice, congratulations!\n`clojure -J-Dclojure.compile.warn-on-reflection=true -e \"(compile 'entry.point)\"` should do it <@Margit>?\n(you'll need a `classes` folder for it to compile into -- or else add a `binding` call around the `compile` for `*compile-path*`)\nI don't think I've broken the `java.jdbc` API in about two and a half years now, but 2016 and 2013 were bumpy years for the API :slightly_smiling_face:\n(unfortunately there are still a lot of books and tutorials out there containing 0.2.x examples which haven't worked since 2013 :disappointed: )\nI saw the following spec in some code and I was wondering what the `or` was supposed to do.\n```\n(s/def ::my-string string?)\n(s/def ::my-int integer?)\n(s/def ::my-spec (s/keys :req-un [(or ::my-string ::my-int)]))\n```\nI generated a few samples using `clojure.spec.gen.alpha/generate` and saw that it does not yield the same results in Clojure 1.9 and 1.10.\nIn 1.9, it always returns maps with both keys (which looks like a bug :thinking_face:)\nIn 1.10, it returns maps with either `::my-string` key, `::my-int` or both (which looks like a normal `or`)\n\nWhat is the expected behavior?\n<@Celestine> I recently learned about clojure.jdbc. Are you aware of it and its criticisms of java.jdbc?\n<https://funcool.github.io/clojure.jdbc/latest/#why-another-jdbc-wrapper>\nFWIW I still use java.jdbc but I thought it might be worth sharing\nI find it odd and annoying that the clojure.jdbc docs call clojure.java.jdbc java.jdbc, and that the project picked a name such that many discussions about using jdbc with clojure now look ambiguous\nI haven't used it at all though\nyeah, we can refer to it as funcool jdbc :wink:\nwell first,  the or here is not xor, so the generated examples in 1.9 are still \"correct\". in 1.10, it was updated  to include either or potentially both.\nso, expected behavior is its current behavior\nGreat, thanks for your answer \nIt seems like the `valid?` function behaves the same way on this spec, though\nSo in 1.9, it generates only one case (both keys) of the 3 valid ones (first key, second key, both keys)\nAre you aware that it started life by copying code from `clojure.java.jdbc` and ripping out the license and copyright? I had to call the guy out on the main Clojure Google Group for that.\n<https://groups.google.com/d/topic/clojure/Louc1PRdb_s/discussion>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "666",
    "text": "I think it only sets it when compiling \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "667",
    "text": "[ANN] Cognitect Labs' aws-api 0.8.273 is now available: <https://groups.google.com/forum/#!topic/clojure/PgnJxiam_qk>\nthis is pure gush but i just got my first full-time clojure gig and am incredibly excited. thanks for being such a thoughtful, curious community :lambdalove:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "668",
    "text": "<@Madeleine> So it seems like I can't use it to check all namespaces for warnings. Sad.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "669",
    "text": "Also, it's criticisms are mostly out of date (and will be completely irrelevant when `next.jdbc` comes out which I've been working on a for a while). And it hasn't had any code updates in three years now (and only minor doc updates that were two years ago) -- so I'd say it's abandoned at this point.\n<@Clarine> ^\ngreat, thanks. So yes, you were aware, now I know :wink:\ndidn\u2019t know there was this \u201cdrama\u201d associated with it. I just saw someone mentioning it on clojureverse\nSomewhere he said:\n&gt; Currently I have removed all taken code from the clojure.java.jdbc, license problem should be solved.\nI wonder with what he replaced that code then\nI won't comment on that... for legal reasons...\nfine, we can close this topic\nWhere it was mentioned on ClojureVerse, I also pointed out that the original code was ripped off, BTW. <https://clojureverse.org/t/next-jdbc-early-notes/3480/5> Or is there another thread that mentions it?\nI\u2019ll see if I can find this\n(that's the only thread that search finds where it seems to be mentioned)\nyes, we improved it\nthats so uncool, not attributing code. Even disregarding the legal implications\nor maybe it was on Reddit\u2026 or Zulip\u2026 or Slack\u2026 I forgot, sorry :confused:\nI think I saw a mention on Reddit (and also linked to the Google Group thread there about the code being ripped off in the early versions).\nyeah, I think it was this one: <https://www.reddit.com/r/Clojure/comments/ao8hlb/using_databases_in_clojure_a_lot_of_options/>\nThis was the comment: <https://www.reddit.com/r/Clojure/comments/ao8hlb/using_databases_in_clojure_a_lot_of_options/efzpxxj/>\nand I see 3 days later you reacted on it. I think I missed that.\nderivation is at the heart of open source, but not by copying others work and posing it as your own\nI try to catch every mention of it I can. As someone who's been doing OSS development for over twenty five years, I'm very sensitive to the issues of licensing and plagiarization :angry:\nRightly so. Sorry man, didn\u2019t want to trigger you into a bad mood.\nWe're good. I'm just listening to Amanda Palmer's new album so not much is going to dampen my enthusiasm today :slightly_smiling_face:\nlegal issues aside, it's a disrespectful way to engage with a project whose work is leveraged that heavily\nthat\u2019s totally (f)uncool\n(sorry, bad joke :wink: )\nthis went from technical to legal issues ( but the technical part was never talked about )\nor ethical :stuck_out_tongue:\nAs technical people, we'd do well to remember there are ethical and legal aspects to our work a lot of the time... for example <http://2018.clojure-conj.org/keynote-speaker-rebecca-parsons/>\nI often cite \u2018computer ethics\u2019 as the most influential course in my masters\nwhich uni? my uni also paid quite some attention to it\nUniversity of Twente (Enschede, The Netherlands)\nYep, that\u2019s where I was too :slightly_smiling_face:\nAlso had lectures from Johnny S\u00f8raker? Its such a shame that he\u2019s no longer at the uni\u2026\nI graduated in 2005\nDon\u2019t know the name.\nyeah probably not, I think he started teaching around 2006. Anyhow, cool to hear that this has been a trait of the UT for so long. I still believe that having a good ethics course is great for a computer scientist.\nQuite, moreso because the university we went to is one of the smaller of The Netherlands\nYou can use `run!` or `doseq` for that.\nFor example, you can do:\n\n```\n(run! #(%) [f1 f2 f3])\n```\nor\n```\n(doseq [f [f1 f2 f3]]\n  (f))\n```\nWhat user was that? Almost makes me want to avoid all funcool lib\nIt could be a liability to do so\n<@Madeleine> As far as I'm aware, it was just the one guy, called out in the thread I linked to...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "670",
    "text": "Small world :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "671",
    "text": "I still use Boot, but thanks, I will try to do something similar.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "672",
    "text": "Can I somehow read the args of a function passed into a macro?\nTried to see how `#()` does it with the variadic args but can't find the source for that macro\n`(:arglists (meta #'my-symbol))` seems to do the trick, and I don't even need a macro\nSo, got it to work with vars, but would like it to work with anonymous functions as well, if possible (feels like I need another way of reorganizing the forms in a different macro to solve this)\nCurrent implementation\n```\n(defmacro read-args [f]\n  `(first (:arglists (meta #'~f))))\n\n(defn use-log-func [log] (log true))\n\n(read-args use-log-func) ;; Works\n(read-args (fn [] (println \"None\"))) ;; Fails\n(read-args (fn [one] (println \"One\"))) ;; Fails\n;; Failure:\n;; clojure.lang.PersistentList cannot be cast to clojure.lang.Symbol\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "673",
    "text": "This:\n```\n(let [in (java.io.PushbackReader. (StringReader. \"#&lt;Namespace user&gt;\"))]\n    (try (read in) (catch Exception e nil))\n    [(read in) (read in)])\n```\nreturns `'[Namespace user&gt;]`\nHow do I get the reader to skip over this thing entirely?\ni.e. I\u2019m not interested in anything `#&lt;foobar&gt;`\nuse case: I\u2019m parsing REPL sessions that can be interleaved with valid clojure expressions and their output\nAnother issue. I\u2019m generating code like this:\n```\n(defn example-104\n    \"clojure.core/extend\"\n    []\n    (defprotocol Dateable\n      (to-ms [t]))\n    (extend java.lang.Number\n      Dateable\n      {:to-ms identity})\n    (extend java.util.Date\n      Dateable\n      {:to-ms (fn* [p1__19578#] (.getTime p1__19578#))})\n    (extend java.util.Calendar\n      Dateable\n      {:to-ms (fn* [p1__19579#] (to-ms (.getTime p1__19579#)))})\n    (in-ns (quote speculative.clojuredocs-parser)))\n```\nbut it seems that defprotocol is not supported well in defns: the symbol `to-ms` cannot be resolved.\nA declare helps\nI\u2019m just reading examples from clojuredocs and generating a function for each example\nI could just spit out all the code at the top level I guess\nbut this makes it a bit more manageable\nI could also spit each example to their own namespace\n<@Clarine> in your example `to-ms` cannot be resolved because you're referring to a symbol/var before the protocol is defined\nIt is the defprotocol that defines it\nThe protocol is defined at runtime of that function.\nThe symbol is resolved at compilation time of that function\nI fixed it now by emitting the defprotocol before the start of the function (same for import, require, etc.)\nYeah. That works\nSome people call this the \"Gilardi scenario\" which sounds sort of creepy\nIt's at least a variant of it\noh yeah, sounds familiar\nI don't know the origin story, but it's about Stephen Gilardi, one of the OGs \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "674",
    "text": "Weird pattern\nJust wondering, why isn't the defprotocol at top level? \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "675",
    "text": "Creepy?  Does it remind you of something else with a similar name that is creepy, perhaps?  If it reminds you of \"The Cask of Amantillado\", then agreed, but the only thing I can see common between those is that they contain an Italian name :slightly_smiling_face:\nwhat\u2019s the origin of this name for this problem btw. I tried to look it up before, but couldn\u2019t find it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "676",
    "text": "In Clojure Jira, how do you comment on an issue?\n<@Samual> You need additional permissions to add comments -- we've had a lot of problems with spam, unfortunately.\nIf you ask in <#C06E3HYPR|clojure-dev> and give your JIRA username, someone from Cognitect should be able to add your permissions (usually <@Jasmine>)\n<@Celestine>, that means they accept comments only from signatories to the contributors' agreement?\nNo, you just need to ask for comment permission to be added.\nBut they need to know your JIRA account name for that.\nAnd the folks who control permissions on JIRA are mostly hanging out in <#C06E3HYPR|clojure-dev>\nJava interop question: If I'm extending a base class using gen-class and all that, from within an overriden method how can I call the parent's method (_super_ .theMethod()) in plain java\n<@Keenan> Looks like you need to expose the super class method and rename it <https://stackoverflow.com/questions/9060127/how-to-invoke-superclass-method-in-a-clojure-gen-class-method>\nAwesome, thanks <@Celestine>\n(I can't vouch for it, I've never tried it -- I just searched on Bing for a suggestion for you)\n^^^ No problem. In experimenting for a few seconds, it doesn't seem to be taking...but I could be missing something. That, and in this case I'm the author of the base class, so I can just make `parentMethod()` and call that for stuff I'd rather handled in pure java from the overriden one in clojure\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "677",
    "text": "<@Clarine> I get several hits via a Google search for the term: Gilardi scenario.  Yes, it was named for Steve (Stephen?  not sure of spelling) Gilardi, who was one of the first to describe it.\nWhat the macro receives is not a function, but code. So you will need to parse the code yourself and identify the args within it.\nIt might be possible for you to delegate back to def in this case.\nActually, it seems only defn parses args into arglists\nYou can try this:\n```\n(defmacro read-args [f]\n  (if (symbol? f)\n    `(:arglists (meta (var ~f)))\n    `(do (defn ~'_ ~@(rest f))\n         (:arglists (meta (var ~'_))))))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "678",
    "text": "Nice! Thanks a lot, works perfectly for what I wanted it to do!\nI\u2019m having an issue running boot inside my Docker image. Locally it works fine, but when I run the command\n`boot --verbose api-uberjar` it gets stuck on:\n`Writing api-0.1.0-SNAPSHOT-standalone.jar...`\nThe last output I see in the docker build (with the --verbose option) is:\n`Filesystem: writing META-INF/MANIFEST.MF...`\n\nIt\u2019s the first write operations, so it seems like docker does not like to write to disk it for some reason.\nI am running the build as root.\nAny ideas?\nThis is the full docker image:\n```FROM openjdk:12-jdk-alpine AS build-api\nRUN apk add bash curl\nRUN bash -c \"cd /usr/local/bin &amp;&amp; curl -fsSLo boot <https://github.com/boot-clj/boot-bin/releases/download/latest/boot.sh> &amp;&amp; chmod 755 boot\"\n\nWORKDIR /app\nCOPY boot.properties build.boot ./\nRUN BOOT_AS_ROOT=yes boot api-deps\nCOPY api /app/api\nRUN BOOT_AS_ROOT=yes boot --verbose api-uberjar\n```\nreboot fixed it\u2026\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "679",
    "text": "I seem to miss something in my understanding about `let`. In this example, the first function calls works but the second doesn't, as it seems a `let` binding is not a `var`. Only if I use `def/n` it's a `var`? Could I get what the `var` binding is pointing at somehow?\n\n```\n  (var one-arg)\n  (let [f one-arg]\n    (var f))\n```\n\nSomething that confuses me is that these too function calls gives the same output, but according to ^, are clearly not the same\n\n```\n  (println one-arg)\n  (let [f one-arg]\n    (println f))\n```\nThe issue with the first example is that `var` is a special form which treats its arguments literally as syntax, so the let bindings don't get substituted inside it\njust like `def` is a special form and you don't expect\n```\n(let [f 42]\n  (def f :abc))\n```\nto be equal to\n```\n(def 42 :abc)\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "680",
    "text": "Hi all!\nis there a way i can start my system (i\u2019m using mount) only once before all tests run ?\n<@Lakeisha> are you using clojure.test?\ni\u2019m using eftest runner but my tests are all clojure.test\n<@Lakeisha> clojure.test \"fixtures\" do set-up and shut-down for tests. A fixture can set-up once before running all the tests in a ns.\nyes i\u2019ve been looking at it, but i need something to run before all ns\nHow do you invoke eftest?\neither through the REPL with `(run-tests (find-tests \"test\"))` or through the CLI with `lein eftest`\ni have a problem with multithread mode and when running with `:multithread? false` its running ok\nso i know that if i start mount only once when starting to test it will work ok\nIn Clojure, symbols point to values.\none-arg is a symbol, and so is f\nWhen you eval a symbol, you don't get the symbol back, you get what the symbol points too, or what people sometime say the symbol is bound too\nThere are lookup contexts to find the value of a symbol, from the inner local scope to the outward local scope and finally to the global scope until a value for the symbol is found.\nIf you want to get the symbol back on eval, and not the value it points too, you can prefix the symbol with quote: `'one-arg`\nNow you have a kind of value in Clojure called a Var\nA Var is also a pointer to a value\nYou can think of it like a collection of one element\nSo `(def bla 42)` binds the symbol bla to a Var which contains 42 as its value. \nThat's how def, defn, defmacro, etc. work. They always wrap the value in a Var and bind the symbol to the Var.\nNow for convenience, when you eval a globaly scoped symbol which is bound to a Var, you will not get the Var back, but the value contained within the Var\nIf you want to get the Var back on eval, you can use the `var` special form or prefix it with `#'`\nNow, `let` and other local bindings of symbol to value do not wrap the value in a Var for you.\nThis: `(let [bla 42] bla)` has no Var in it. Just the symbol bla is bound to 42 directly, so bla points to 42.\nSo in your example: `(let [f one-arg] (println f))` what happens is when you eval it, one-arg is a symbol which points to a var,  and that gets resolved, and then the var points to a value, that gets resolved as well, and the symbol f is bound to point to that value. And for `(println one-arg)` one arg is a symbol that points to a Var, which points to a value, and again, both get resolved until you get the value and it is printed.\nSo, since you are interested in the var itself, you just need to bind f to the var itself.\n```\n(let [f (var one-arg)]\n  f)\n```\nSpecifically, in this case, it isn't really because var is given f as a symbol, since var resolve the symbol. The issue is that let binds f at runtime, and var runs at compile time. So f isn't bound yet, and will resolve to nothing.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "681",
    "text": "I see. Thanks for explaining! Follow up question: Is it possible to get whatever the binding is pointing at?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "682",
    "text": "Can you give an example? What are you trying to achieve?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "683",
    "text": "is there a SnowFlake implementation for clojure?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "684",
    "text": "<@Luke> (From the snowflake website, I learned that snowflake is a cloud service that you access with SQL.)\nLike this? <https://github.com/snowflakedb/snowflake-jdbc>\n<@Luke> Mac Address based Base62 String ID <https://github.com/maxcountryman/flake>\nthanks <@Shakita>\ni just need 8 bytes, it seems is 16 bytes, can not store as a interger in db?\nyou can change it with less bytes. For Example, less length for unix timestamp epoch, or use ip address instead of MAC address, or use less length for seq.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "685",
    "text": "This has turned out to be kind of ungoogleable, why do people write `~` in their clojure code? What is the convention?\nThis is a way to get the scope inside a qouted macro\nthat is if you quote a macro to create a list of the symbols, ~ will actually expand (eval) the part you use it with\nmaybe have a look at something like that: <https://learnxinyminutes.com/docs/clojure-macros/>\n<@Elly> It's the unquote for syntax-quote: <https://clojure.org/reference/reader#syntax-quote>\nThanks, haven't gotten around to reading about macros yet.\nThanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "686",
    "text": "<https://clojure.org/guides/weird_characters> this is useful :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "687",
    "text": "Where is the best channel to report documentation improvements? Github?\nI am under the impression that there is something wrong with <https://clojuredocs.org/clojure.core/reify>\nclojuredocs is a community driven site\nif you want to improve the docstring of a clojure function itself, you can first discuss in <#C06E3HYPR|clojure-dev> and ask if it\u2019s worth posting an issue\nand if it is, you can go sign up for the CA and open a JIRA ticket\nthe snark is really unnecessary\nwhat's the question?\nSnark removed, just a joke, didn\u2019t mean anything by it :slightly_smiling_face:\nI think the docs for reify says a lot about _how_ but misses the point for _what_ \"reify\" does. Under the perspective of somebody who came across that function in a codebase, and looked it up, the expectation was to find some definition like the one in Stu's+Aaron's Book:\n\n```\nReify lets you create an anonymous instance of a datatype that implements either a protocol or an interface.\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "688",
    "text": "I have a design/architecture question: I I have some logic that's repeated in a couple different places, and I want to DRY it a bit. The only way I've figured out how to do so is to build a \"wrapper\" that takes in 5+ functions and then uses those to pivot or pass the necessary data around. I've looked into multi-methods that's not quite what I need (because I'd end up just repeating myself in each method)\nDoes anyone have resources or suggestions as to how to pull abstractions out without turning it into a weird \"mess\"?\nIf this were more OOP, I'd build an interface or base class, write the base logic in a method on it, and then inherit and write the variations in each child, relying on the parent to provide the abstraction, but I'm dealing with generic data structures (maps as my main data object)\nif you need something like an interface you can write a Protocol\nbut I\u2019m not sure if that make sense in your situation\nwhat could also work:\n`(merge {:fn1 default-fn1 :fn2 default-fn2} {:fn-1 override-fn1})`?\nWith my current proposed changes, it'd look like this:\n```\n(let [wrapped-damage (prevent-wrapper :runner\n                                      (fn [target args] [:damage :damage-prevent (:type args)])  ;prevent-loc-fn\n                                      (fn [target args] (:type args))                            ;card-prevent-fn\n                                      (fn [target args] \"Runner to prevent damage\")\n                                      (fn [target args] \"Prevent damage?\")\n                                      resolve-damage\n                                      nil\n                                      :prevented-damage)]\n  (defn damage\n    \"Attempts to deal n damage of the given type to the runner. Starts the prevention/boosting process and eventually resolves the damage.\"\n    ([state side type n] (damage state side (make-eid state) type n nil))\n    ([state side type n args] (damage state side (make-eid state) type n args))\n    ([state side eid type n {:keys [unpreventable unboostable card] :as args}]\n     (swap! state update-in [:damage :damage-bonus] dissoc type)\n     (swap! state update-in [:damage :damage-prevent] dissoc type)\n     (trigger-event state side :pre-damage type card n)\n     (let [n (damage-count state side type n args)]\n       (if (pos? n)\n         ;; This is where all of the old logic would have gone (very messy)\n         (wrapped-damage state side eid n (assoc args :type type))\n         (effect-completed state side eid))))))\n```\nand that doesn't feel quite right to me\n<@Shayla> Could you implement a protocol to define the interface that each child (w/ variations) will implement. The common code can be in functions that take realizations of this protocol as argument?\nIf possible, I would also try to write most of the logic as pure functions and do the mutations (swap!) \"outside\".\nalso have the two swaps! just update `:damage` once rather than do it twice\nI'd love to do that, but sadly, the engine leans _very heavily_ on that kind of stuff\nYeah, if the API is already heavily stateful, don't bother :slightly_smiling_face:\nI'm reading the official clojure page on protocols (<https://clojure.org/reference/protocols>) now! any other protocol references I should look into?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "689",
    "text": "worth noting the most recent development with protocols, in Clojure 1.10: <https://github.com/clojure/clojure/blob/master/changes.md#22-protocol-extension-by-metadata>\nIs there a way to fully realise a data structure (all sub values) for the purpose of performance testing? \n<@Brittney> doall, generally. Do you have lazy seqs within lazy seqs? \nPostwalk with identity would probably do the trick\nYeah that was the first thing I thought of but felt a bit gnarly. \nIt's a big old data structure of maps and lazy seqs. Wanted a easy solution. Calling str on it atm. Appears to work \nAlthough I admit inelegant\nnot really. you could maybe create your own type that implements the metadata protocols in a specific way\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "690",
    "text": "Is there a way to attach metadata to a map that gets purged whenever the map is modified in any way? (e.g. a new key is assoc\u2019ed, etc)\n<@Meagan> ah ok, unfortunate. I was wondering if I could use such a feature to make runtime checks of validity against a spec cheap. e.g. I could do a `s/valid?` check, and cache the result on the object (as metadata), so that future checks would be a simple look-up\n(if the map doesn\u2019t change)\n<@Matha> why not cache it in an atom or something and look it up in there?\nyep could do that too\ngood point\nanyone knows the reasoning why `(seq (transient []))` throws an exception?\nthat's right, I can't see how this could lead to trouble...\nif you want a seq, why not first call `persistent!` on it?\nI am trying not, so that it can be done outside of the scope I need seq\nI guess my idea of transient must be wrong, perhaps it is more local than my goal\nyou should never expose transients outside of a public API\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "691",
    "text": "I like how this is called `weird_characters`\nbecause transient does not implement the seq abstraction, probably for good reasons\nHas anyone used `cheshire` to lazy load json content from a particular nested node? For example, I have a json file like `{\"package\": \"354\", \"misc-info\": {..}, \"entries\": [{...lots of data...}]}` and I need to lazy-parse precisely the `\"entries\"` part of json file. I'm not sure cheshire's `parsed-seq` is suitable here. Is there a way to achieve that?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "692",
    "text": "Hey, uh, I can't figure out how to comment on any issue on the Clojure JIRA. I've commented on issues before, so I'm thinking that maybe somehow my commenting permissions have been disabled? I can still create issues, though. Who should I ask about this?\nyeah permissions were restricted due to spam. Just reach out to alex miller tomorrow and he can get you settled. It's 2am in his time zone so he's not likely to be up right now\nAh, okay, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "693",
    "text": "This seems a strange behavior with the or\n\n```\n(deftest destructuring\n  (let [foo1 (fn [{:keys [bar] :or {bar 2} bar {}}]\n               bar)\n        foo2 (fn [{:keys [] :or {bar 2} bar {}}]\n               bar)]\n    (is (= (foo1 {{} 1}) (foo2 {{} 1})))))\n\n(destructuring)\nFAIL in (destructuring) (form-init5648150256962006264.clj:6)\nexpected: (= (foo1 {{} 1}) (foo2 {{} 1}))\n  actual: (not (= 2 1))\n```\n:or never creates values from thin air\nso if you don't put the local in :keys, the :or default isn't used\nAnd `:keys` has precedence over \u201cregular\u201d destructuring?\nno, it's all \"regular\" destructuring\nif you've made it ambiguous where a destructured symbol comes from, then you are in the land of undefined behavior\ngenerally, destructuring maps are array maps, thus retain order, thus last one wins\nbut it's possible to use those maps in contexts (like macros) that go through an extra step that potentially destroys that order\nif you want to see how destructuring will expand, use the (intentionally undocumented) `destructure` function:\n```(destructure '[foo1 (fn [{:keys [bar] :or {bar 2} bar {}}]\n               bar)\n        foo2 (fn [{:keys [] :or {bar 2} bar {}}]\n               bar)])\n;;=&gt; [foo1 (fn [{:keys [bar], :or {bar 2}, bar {}}] bar) foo2 (fn [{:keys [], :or {bar 2}, bar {}}] bar)]```\nI guess that didn't help much\n```\n(deftest destructuring\n  (let [foo1 (fn [{:keys [bar] bar {}}]\n               bar)\n        foo2 (fn [{bar {} :keys [bar]}]\n               bar)]\n    (is (= nil (foo1 {{} 1})))\n    (is (= nil (foo2 {{} 1})))))\n```\nDoes not seem to be order based\n`:keys` wins in both cases\nwell, I wouldn't rely on that. I suspect it's an artifact of implementation we would not commit to\nI will come back to: if you make it ambiguous, it's undefined\nYeah, we stumbled on it with a misplaced `}` : `{:keys [a b c d e] :or {a {} b 44 c d \"Not found!\"} e {}}` and wondered how the compiler treats that\nA linter to detect the same symbol bound multiple times in the same destructuring is in order\n<https://github.com/jonase/eastwood> would be a good place for that\nI expect there are thread-safety issues with mutable updates\nif you _really_ want a mutable data structure, then Java has got plenty of them; use one of those\nand makes it a bit more obvious that you are going contrary to Clojure convention\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "694",
    "text": "Hey! Many thanks for the very elaborate explanation <@Madeleine>! :thumbsup:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "695",
    "text": "are there any libraries for EQL &lt;-&gt; GraphQL parsing?\nI'm mainly interested in EQL -&gt; GraphQL\nit looks like pathom _might_ be what I want. I specifically would like to avoid having to write a bunch of custom parsing stuff\nmost of the examples are using fulcro, though, and I have no need for client-side stuff for my use case\n<@Meagan> I think fulcro has some examples of doing this, but I think you're right that you'll be porting things from cljs examples unfortunately.\n\nI only looked into this briefly though.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "696",
    "text": "Is there a way to print components of the merged project from leiningen? I basically want to `(get project :java-cmd)` as lein would see it with all profiles activated and merged on the merged profiles.\nAh duh. `lein pprint` can do it natively. :facepalm:\n```\n$ lein pprint :java-cmd\n\"/var/lib/jdk/openjdk-7-jdk/bin/java\"\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "697",
    "text": "Do you know lacinia?\nwe're using Lacinia for our GraphQL service. I need EDN -&gt; GraphQL _query_, not GraphQL SDL\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "698",
    "text": "I'm torn between using plain functions for grabbing users from a database for my website or a protocol. I'm using component to manage dependencies and I saw this: ```At this point you may be thinking, \u201cAPI functions where the first argument determines a lot of the behavior\u2026 that sounds a lot like a protocol.\u201d That\u2019s an excellent point. For many common components, particularly ones that can be swapped out with different implementations like database connections, it can be valuable to define their API as a protocol. This can also enhance testability, since it gives us a flexible way to inject different mock components in our tests.```\nI don't understand what a protocol offers vs functions such as get-user : db * username -&gt; user_row\nyou can pass in a \"mock\" db that just returns pure data\nOh shit.\nI've been thinking this whole time about only mocking with a test database but if I use a protocol I can mock everything.\nMaybe though not at the user level.\n<@Tonya> depends on your use case:\nif you're building a http service, then the interface of your system is your HTTP api, and not the functions/protocols inside of it\nif you're building a library, then you may consider using a protocol\n\nWith functions, if I want to mock the database call for testing, we use `with-redefs` to make it explicit that we're monkey patching a particular function for testing\nI'm building a website, so neither.\nWould it be better to mock jdbc/sql commands though?\nrather than the individual user calls\nyep. you can just have a\n```\n(deftype FakeDB\n  IUserInfo\n  (get-user [this username]\n   {:posts [] :name \"Foo Bar\"}))\n```\nand use that in your component system\nI feel like IUserInfo will be really large\neventually\neh, usually you want to operate at a higher level of abstraction in most of your code\nhave defprotocol SqlDB with query do_command etc I feel like that offers a more powerful way to swap in certain behaviours.\nIf I were to have:\ndepends on how coupled you want to be to your SQL\nBut I guess both could work\nAS they are not mutually exclusive\nIMO you usually want to use abstractions to model your domain\n<@Meagan> I really appreciate your help btw, now I see the value in the defrecord crap.\n:+1: :smile:\nI'll take your advice, I can always add the SqlDB later.\nIf necessary\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "699",
    "text": "Does anyone know if using side-effects in lazy sequences can result in the side-effects being executed twice?\nI'm getting this error getting a docstring for a function (using clojure 1.10.0, nrepl 0.4.0, and monroe), has anyone seen it before? seems to be project specific because I don't get the error for a new project, but I'm not sure how to go about debugging the issue\n```\n#error {\n :cause \"clojure.repl\"\n :via\n [{:type java.lang.ClassNotFoundException\n   :message \"clojure.repl\"\n   :at [java.net.URLClassLoader findClass \"URLClassLoader.java\" 471]}]\n :trace\n [[java.net.URLClassLoader findClass \"URLClassLoader.java\" 471]\n  [clojure.lang.DynamicClassLoader findClass \"DynamicClassLoader.java\" 69]\n  [java.lang.ClassLoader loadClass \"ClassLoader.java\" 588]\n  [clojure.lang.DynamicClassLoader loadClass \"DynamicClassLoader.java\" 77]\n  [java.lang.ClassLoader loadClass \"ClassLoader.java\" 521]\n  [java.lang.Class forName0 \"Class.java\" -2]\n  [java.lang.Class forName \"Class.java\" 398]\n  [clojure.lang.RT classForName \"RT.java\" 2207]\n  [clojure.lang.RT classForNameNonLoading \"RT.java\" 2220]\n  [clojure.lang.Compiler$HostExpr maybeClass \"Compiler.java\" 1041]\n  [clojure.lang.Compiler macroexpand1 \"Compiler.java\" 7044]\n  [clojure.lang.Compiler macroexpand \"Compiler.java\" 7074]\n  [clojure.lang.Compiler eval \"Compiler.java\" 7160]\n  [clojure.lang.Compiler eval \"Compiler.java\" 7131]\n  [clojure.core$eval invokeStatic \"core.clj\" 3214]\n  [clojure.core$eval invoke \"core.clj\" 3210]\n  [clojure.main$repl$read_eval_print__9068$fn__9071 invoke \"main.clj\" 414]\n  [clojure.main$repl$read_eval_print__9068 invoke \"main.clj\" 414]\n  [clojure.main$repl$fn__9077 invoke \"main.clj\" 435]\n  [clojure.main$repl invokeStatic \"main.clj\" 435]\n  [clojure.main$repl doInvoke \"main.clj\" 345]\n  [clojure.lang.RestFn invoke \"RestFn.java\" 1523]\n  [nrepl.middleware.interruptible_eval$evaluate$fn__9015 invoke \"interruptible_eval.clj\" 86]\n  [clojure.lang.AFn applyToHelper \"AFn.java\" 152]\n  [clojure.lang.AFn applyTo \"AFn.java\" 144]\n  [clojure.core$apply invokeStatic \"core.clj\" 665]\n  [clojure.core$with_bindings_STAR_ invokeStatic \"core.clj\" 1973]\n  [clojure.core$with_bindings_STAR_ doInvoke \"core.clj\" 1973]\n  [clojure.lang.RestFn invoke \"RestFn.java\" 425]\n  [nrepl.middleware.interruptible_eval$evaluate invokeStatic \"interruptible_eval.clj\" 84]\n  [nrepl.middleware.interruptible_eval$evaluate invoke \"interruptible_eval.clj\" 54]\n  [nrepl.middleware.interruptible_eval$interruptible_eval$fn__9060$fn__9063 invoke \"interruptible_eval.clj\" 220]\n  [nrepl.middleware.interruptible_eval$run_next$fn__9055 invoke \"interruptible_eval.clj\" 188]\n  [clojure.lang.AFn run \"AFn.java\" 22]\n  [java.util.concurrent.ThreadPoolExecutor runWorker \"ThreadPoolExecutor.java\" 1128]\n  [java.util.concurrent.ThreadPoolExecutor$Worker run \"ThreadPoolExecutor.java\" 628]\n  [java.lang.Thread run \"Thread.java\" 834]]}\n```\nIf you run `(require 'clojure.repl)` in the REPL first and then try to get a docstring, does this still happen?\nI'm thinking that getting docstrings maybe runs `clojure.repl/doc` (or some other function from that namespace) and it's not loaded in your project for some reason, so that's why you're getting the error.\nI'm not really familiar with Monroe, but if the require works, a quick fix could be adding the require to `user.clj`.\nI don't think so, no. They get cached.\nIf you act on a reducible which has side effects however, that will side effect as many times as you interact with it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "700",
    "text": "```\nuser=&gt; (let [x (eduction (map println) (range 3))]\n  #_=&gt;   (when (seq x)\n  #_=&gt;     (map identity x)))\n0\n(0\n1\n2\nnil nil nil)\n```\nthere's a good talk from conj by ghadi I think :slightly_smiling_face:\n<https://www.youtube.com/watch?v=-zszF8bbXM0> I think this is the one :slightly_smiling_face:\nboth are probably good though :smile:\nnice\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "701",
    "text": "oh wow, that works for me!\nI think it's because I'm starting the repl server with `nrepl.server`, so clojure.repl namespace doesn't get included.\nanyways, I know how to fix the issue now, thanks so much!\nSo I came to clojure from c# and node, so was mostly shielded from all the java and jvm things that happen behind the scenes. I would very much like to read about those parts of the echo system, but obviously a **java/jvm for clojure developers** book does not exist :smile:. Any suggestions on where I can find some resources or what parts might be valuable and what can be left out?\nthis? <https://www.youtube.com/watch?v=S1mzUi_zbEs>\nnice thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "702",
    "text": "Thanks, that's what I thought as well\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "703",
    "text": "What's the normal workflow like for making changes to a dependency library? (e.g with the intent of fixing a bug and contributing those changes upstream)\nfrom Emacs specifically, I can jump to function or symbol definition, then edit and eval forms in that buffer, but the actual location is in a .jar file somewhere in my ~/.m2/ folder, which I assume isn't meant to be edited directly\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "704",
    "text": "Is there a way to do incremental changes with `enlive`? for example `(at [:p] (add-class nb-of-p))`\nwhat do you mean by incremental? what is `nb-of-p`?\nLet's say I have a few p tags in my code, I'd like the first p tag to have the class \"p1\" the second \"p2\" etc\nNo, nothing standard. Are `pN` unbounded?\nAnyway you can cheat by using a mutable counter `(at [:p] #((add-class (str \"p\" (swap! cnt inc))) %))`\nI\u2019ll deny having made this suggestion :wink:\nhaha thank you though !\nIt's not unbounded though, essentially I load an html file and I do some manipulation of it\n<@Meagan> I'm using this, which may be what you're looking for?\n<https://github.com/district0x/graphql-query>\nMaybe I could use a random number generator though, I don't care if they are ordered, I just want to make sure that each one of these has a unique class or id\nAlthough, I'm not sure that it takes EQL exactly. \nWould that be cleaner?\nor maybe the hash of the content\nperhaps this would help too: <https://purelyfunctional.tv/guide/clojure-jvm/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "705",
    "text": "Hey everyone\n\nI'm building something that started from the chestnut template (<https://github.com/plexus/chestnut>), using muuntaja for de/encoding (<https://github.com/metosin/muuntaja/>).\nUnfortunately, unlike in the toy example of muuntaja (<https://github.com/metosin/muuntaja/blob/master/doc/With-Ring.md#simplest-thing-that-works>) returning hashmap response bodies doesn't work in my app, I have to encode them in my request handler.\nI added muuntaja's middleware `muuntaja.middleware/wrap-format` to the default middleware (which looks like this: <https://github.com/plexus/chestnut/blob/master/src/leiningen/new/chestnut/src/clj/chestnut/config.clj>), but something works differently there.\n\nThe failure is very weird too:\nI get the following exception:\n`java.lang.IllegalArgumentException: No implementation of method: :write-body-to-stream of protocol: #'ring.core.protocols/StreamableResponseBody found for class: clojure.lang.PersistentArrayMap`\nwhich seems reasonable, but then the request is repeated (even when I use curl to send the request, so it's not the frontend logic or the browser).\nThe second request then also fails and I get a 500 response.\n\nThe double request happens with only the default middleware in a fresh chestnut project as well, so it's not caused by muuntaja or my changes\n\nAny idea why muuntaja's auto-encoding doesn't seem to work in chestnut and where the request duplication comes from?\nthank you\nI made a repo <https://github.com/SneakyPeet/java-for-clojure-developers>\nI\u2019ve made a repo for java/jvm resources specifically for clojure devs. please feel free to add anything you think ads value <https://github.com/SneakyPeet/java-for-clojure-developers>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "706",
    "text": "<https://www.youtube.com/watch?v=P76Vbsk_3J0>\n\nand\n\n<https://www.youtube.com/watch?v=hb3rurFxrZ8>\nOh maybe I missed the point, you mean the opposite\nsorry\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "707",
    "text": "<@Garnett> by default, muuntaja will encode only `:body` if it's a collection (a map is) and there is `Content-Type` header set.\nmaybe something sets the content-type?\nI think I tried to depend on the automatic negotiation because the request sends `application/transit+json` in the accept header\nIf you have a public repo of the setup I could look at that today\nunfortunately not :confused:\ni'm gonna try to reproduce it in a public repo\nthanks!\nOkay so I have this Database record (a component) that implements a protocol called UserInfo. I want to mock a test database, so to do this I swap out the config (very easy) but I'm having trouble adding startup/cleanup code (such as adding certain users, creating schema, destroying schema, etc.). The trouble is that I don't want to have to re-implement all of my UserInfo methods for this TestDatabase record, I want it to inherit them from the real Database record.\nive got it in a repo:\n<https://github.com/TimoFreiberg/map-return-test>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "708",
    "text": "<@Shirleen> hehe yes. \nIs there a good way to do this?\nFor example I have code that looks like the following:\nNone\nI feel as if I shouldn't need to reimplement this for a test database that does some extra setup/finalization.\nOh, it seems like this is a use case for reify.\nok, i added some logging to `muuntaja.middleware/wrap-format`, and I notice that it receives a response that looks like this: `{:status 200, :headers {Content-Type application/octet-stream}, :body {:a x}}`\ni noticed here: <https://github.com/TimoFreiberg/map-return-test/blob/master/src/clj/map_return_test/routes.clj#L38>\nthat when my handler sets a Content-Type header, muuntaja doesn't touch the body anymore (because the Content-Type header should only be set when the body is already in that format, I assume)\nnow I only have to find out where that header is being set... - looks like it's `ring.middleware.defaults/wrap-defaults`\nthat's it.\nkeeping `ring.middleware.content-type/wrap-content-type` from being added by `wrap-defaults` fixed it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "709",
    "text": "thanks! I'll check it out. it might be what I'm looking for\ndon't need EQL exactly, but am looking for something that does EDN -&gt; GraphQL. EQL just looked like a good standard\nok. That ought to do it then.\nI don't have much experience with that lib or graphql, but let me know if I can help\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "710",
    "text": "Great! The middleware-stack is not the easiest to debug\nDoes anyone know how to do an `in` query using `clojure.java.jdbc`?\nLike `[\"select * from foo where id in ?\" a-vector]`?\n... but would be great if the `ring-defaults` and `muuntaja` would work together by default.\n<@Garnett>  Could you write issues to both repos about that default mismatch. We could figure out which one should change.\nsounds reasonable\nOh lord. Is this post still true? <https://stackoverflow.com/questions/15580371/how-do-you-use-where-x-in-y-clauses-with-clojure-java-jdbc>\nI need to generate the correct number of question marks? :neutral_face:\n<@Arline> the <#C1Q164V29|sql> channel may be able to provide more details as well.\n<@Arline> `(str/join \",\" (repeat (count v) \"?\"))` isn't a terrible hardship since you'll need to use `(into [(str ... SQL fragments here ...)] v)` to \"pour\" the elements of the vector into the sql+params vector anyway :slightly_smiling_face: But, yeah, use `honeysql` if you want to avoid that. `clojure.java.jdbc` is deliberately *not* in the business of building your SQL for you and JDBC requires a placeholder `?` for each parameterized value...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "711",
    "text": "see also: <#C1Q164V29|sql>\n<@Arline> I don't know for sure what capabilities `java.jdbc` has in that regard, but I know that most people in Clojure use libraries on top of it, to operate at nicer levels of abstraction. For example, I can see the use of a `where .. in` that looks nice in the README of HoneySQL <https://github.com/jkk/honeysql>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "712",
    "text": "The last I checked (a couple of months ago), yes. I ended up using honeysql.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "713",
    "text": "Any tips on de/serializing records with edn? Should I just not? I will have probably a hundred or more \"things\" that need polymorphic behavior, but I need to put these things to a file and get them back out. Better to find a way to use plain maps and defmulti, or...?\nthe `transit` library is intended for this sort of usage, but defrecord already implements a printer and reader tag that should do the right thing when read back in\nI've definitely found transit easier to use and more reliable than the `pr` / `read` combo though\nthat said, pr / read does work ```(ins)user=&gt; (defrecord Foo [])\nuser.Foo\n(ins)user=&gt; (-&gt;Foo)\n#user.Foo{}\n(ins)user=&gt; (= (-&gt;Foo) (read-string (pr-str (-&gt;Foo))))\ntrue\n```\n<@Dann> Interesting...I guess two questions:\n\n1. Did this not used to work/be supported out of the box? When I realized I might have an issue I looked around and saw info about reader hints and other stuff that indicated it didn't.\n2. If it works as you say with the pr/read combo...what is `transit` providing?\ntransit allows extension of new type tags without a global reader registry, and it has better performance\nwhat are reader hints?\nSorry, using imprecise language. The last example in this \"x in y\" on edn suggests some kind of \"help\" that needed to be given to parse records: <https://learnxinyminutes.com/docs/edn/>\n^^^ <@Dann> The above is the first thing that got me worried I may have issues with deserialization\n~if that document was ever accurate about records, it's definitely wrong now~ see convo below, it's right, I was wrong\nHaha. Good to know...probably not great it's one of the first things you'll see if you're looking for some basic info about it\nthe behavior of the functions for reading in clojure.edn differ from those in clojure.core\nthe clojure.edn functions don't automatically look up records\noh, now I see that\nthe xiny page is about as clear as mud about it\n~OK, so another advantage of transit is that it implicitly works with record types without risking code injection via read-eval~\nactually it downcasts the record to a hash-map unless you define a custom writer/reader\nAlso some docs at end of <https://clojure.org/reference/reader>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "714",
    "text": "Ah, okay...starting to see what this is about now. Well, darn, I probably do want to go with edn, so I guess I'll have to figure out something there...I will have a lot of record types, and it's going to suck to explicitly declaring each one for reading in edn. Hmmm\nYou can set a default-data-reader-fn\nThis is probably not what you want to do, but it might help connect the pieces: <http://insideclojure.org/2018/06/21/tagged-literal/>\nThanks <@Jasmine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "715",
    "text": "Hi, how do we check a `spec` across a combination of 2 different keys in a hashmap. eg: `{:user \"string\" :valid :string }` or `{:user nil :valid :nil}`\n`:user` can be nilable only when `:valid` is :nil but not when `:valid` is :string\nsounds like it might be a use-case for multispecs?\nHow would that work?\n<https://clojure.org/guides/spec#_multi_spec>\nYeah. I saw that but I don't quite understand how that applies to this case, that seems to apply only to multimethod?\nyou use a multimethod to decide which spec to use\nOkay, I see where you're coming from\n```\n(defmulti user-valid-type :valid)\n\n(defmethod user-valid-type :nil [_]\n  ;; return spec to use\n  )\n\n(defmethod user-valid-type :string [_]\n  ;; return spec to use\n  )\n```\nIn this case, I've been ingesting the document the actual `tag` is one level deeper. ie:\n\n```\n{:user \"string\" :profile {:valid :string}}\n{:user nil :profile {:valid :nil}}\n```\nSo how would that work? The document is a bit hard to parse\ninstead of `(defmulti user-valid-type :valid)` you could use eg. `(defmulti user-valid-type (comp :valid :profile))` or `(defmulti user-valid-type (fn [m] (get-in m [:profile :valid]))`\nWhat about the last parameter to `(s/multi-spec)` then?\nthe same thing you pass to defmulti I think\nhmm... it seems to be more complicated than that\nit is used during generation, and should either be a key (if the dispatch is by a key) or a function that takes a thing and a value and tags the object - so it's like the inverse of the multimethod dispatch function it seems(?)\nYeah, the additional nesting makes it a whole lot complicated it seems.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "716",
    "text": "a multimethod can use any function for dispatch\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "717",
    "text": "<@Arline> <@Ronald> there's also Walkable which is more expressive <http://walkable.gitlab.io>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "718",
    "text": "Can somebody briefly tell the difference between (and high level overview of) Socket-REPL and prepl?\n<@Xiomara> prepl is a REPL for other programs -- it offers no prompt and it returns data: a hash map containing the result, the form read, etc. prepl can run locally or over a socket connection.\nWhen folks talk about Socket REPL, they mostly mean a regular REPL (with a prompt, and that prints results) running over a socket connection.\nDoes that help?\n<@Celestine> Thanks, that makes it clear for me. :slightly_smiling_face:\nSocket REPLs can be started for any process, just by providing JVM options -- that's most how we run REPLs on our processes. You can tell Clojure to start a Socket REPL (added in 1.8) with either a regular REPL (prompts, prints results) or a prepl (new in 1.10, no prompt, returns data). The nice thing is that you can do this for _any_ Clojure process now, external to the code.\nI switched to using unravel (based on unrepl) at the command line to connect to process that have a Socket REPL started up, and more recently to Atom + Chlorine for my editor experience that can connect to any Socket REPL -- no need for nREPL etc. Which means I can interact with any of my processes -- locally for dev or remotely on QA/production -- using the same editor or command-line setup, with no server-side deps.\nI also use REBL the same way: I start up REBL but also start a Socket REPL via JVM options, and then I can connect to it and `submit` forms and values to REBL for display in the visualization pane.\n(I don't know how many people are using REBL in their day-to-day workflow?)\nI posted an example the other day, showing Atom + Chlorine + REBL running on Windows 10 (via the work-in-progress PowerShell version of `clj`): <https://clojurians.slack.com/files/U04V70XH6/FGKMLGF41/image.png>\n(it was on my tiny laptop so it looks a mess -- works great on my 27\" desktop tho' :slightly_smiling_face: )\n<@Celestine> Coincidentally, I started thinking about this after reading your Chlorine-Atom blogpost.\nThat makes me happy :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "719",
    "text": "Hey folks, was just doing a little `defprotocol` / `defrecord` / `extend-protocol` / `extend-type` demo to a member of my team here. It's actually been a little while since I really did much of this stuff in anger and at one point I said, \"I'm pretty sure you can just treat Java interfaces as protocols\" and tried to, `extend-protocol` java.lang.Runnable. As it turns out... you _can't_ do this :wink:. Aware of the existence of things like `reify` and `proxy` etc, but I am interested in whether there is a good technical reason why interfaces and protocols can't just be treated as transparently the same.\njava interfaces aren't open to extension, clojure protocols are\nin java you can't extend a class to an interface _after_ having created that class\nAhhh, I see. We actually spoke a little about this. I actually waved my hands and said, \"I guess clojure does some kind of magic to allow for the runtime implementation of interfaces\", instead it separates the concepts entirely. Makes sense. Thanks.\nyeah\nprotocols are backed by an interface for performance\nbut that's just an implementationd etail\nthe interface is only used if you extend the protocol inline while defining the type\nwhen you extend an existing type to a protocol, the impl lives in an (open) vtable\nMakes sense. Thank you <@Harris>.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "720",
    "text": "Just discovered\n<https://github.com/dvlopt/clojure-raspberry-pi>\n\nFascinating\n<@Celestine>  can the Socket REPL be configured for SSL?  Or do you only open the port to certain clients.  thanks by the way for you blog post about Atom + Chlorine.  I am really liking that combination\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "721",
    "text": "In Scala, using a future requires an `ExecutionContext`. Is there anything analogous in Clojure?\nJust a plain socket. We don't open the port on the box -- we use an ssh tunnel over a VPN to connect. \nno\nthere is one global pool for futures\nit is possible to replace the global executor used for futures with <http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/set-agent-send-off-executor%21> but that's not something most people do (or even know exists)\n<@Eduardo> You can however use libraries that mimick Clojure future but allow passing a threadpool:\n<https://github.com/mpenet/knit>\nManifold also allows configurable thread pools\nor <https://github.com/TheClimateCorporation/claypoole>\nIn the Scala world, it\u2019s a whole other layer of complexity to manage. I\u2019m just curious why we never worry about it in Clojure.\nwell realistically, there are only a finite number of threads :)\nam I right that in Scala you set an implicit somewhere once to a ThreadPool and then never worry about it again? what is the added complexity in Scala?\nClojure has an ambient global pool and suggests you use that by default\n(well, two global pools - an unbounded cached thread pool for I/O and a bounded thread pool for CPU)\nfutures and agent send-off use the first, send uses the latter\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "722",
    "text": "ahh .  ok makes sense.. thanks\n<@Celestine> Makes sense. :slightly_smiling_face: <https://clojurians.slack.com/archives/C03S1KBA2/p1551911775401700>\nwith pg you could use ANY(?) and pass an array\nfriends don't let friends make sql with string concat\n^\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "723",
    "text": "<@Clarine> I just read an article on the three different ways to manage an ExecutionContext in Scala, depending on your goal. So it\u2019s not a set-and-forget, necessarily. But I\u2019m certainly no expert in Scala futures, either.\nMe neither\n<@Min> I just co-incidentally found an email from 2014 in my inbox and realized it was you I bought a EuroClojure ticket from last-minute\nright!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "724",
    "text": "Hi all. I'd like to submit a minor change to the <http://clojure.org|clojure.org> website, so I need to sign the contributor agreement. But I can't seem to actually _see_ it, no matter what I do it shows up as \"thumbnail not available\" or a broken image icon. I've tried this in both Safari and Chrome, with/without adblock, I even installed Flash and had someone else check the site, still broken. Any idea what to do so I can sign it?\n<@Ashlie> seems something is wrong with the image loading, not the image itself. If you visit <https://secure.na1.echosign.com/document/ci/3AAABLblqZhDSsExRd_lWlJxQm5A6RsQuKSIJlSvjgSw_zJ8BPFSdTqI4Xy5JV14UpnUiBQCEbbNtASDjPyMn5hb1a5KjWaQf/z100.png&amp;sns=z100&amp;snp=1> you'll see the actual agreement. You can also not trust my link, and right click, copy image url and visit it manually\nthat document in general seems broken (<https://secure.echosign.com/public/hostedForm?formid=95YMDL576B336E>)\nDidn't think of that. Thanks, good enough for me.\nthere is a CORS error in the echosign site, which seems totally broken\nwe are aware of it, but are at the mercy of adobe's broken junk afaik\nall that stuff is under Rich's account so it's fighting for attention with a lot of other stuff\nOh well. I got it submitted still :)\nit is the url indeed\nshould be <https://secure.na1.echosign.com/public/hostedForm?formid=95YMDL576B336E>, will fix\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "725",
    "text": "as a part of an internship programme, I have a setup where I run my tests against the intern\u2019s code. My setup is currently only for Javascript, but I\u2019ve been thinking about a setup like this for Clojure\nI guess I\u2019d have to write my own runner for this\nwhat is your question? if there\u2019s a clojure test runner that works for your needs?\n<@Clarine> - yes. I need two things. One, a way into hook into various stages of execution(before test, after test etc), the other is some way to generate a JSON\nif I have the first feature, I can easily obviously build the other\nI would like to stick to `clojure.test`\nIf you only need the JVM then kaocha can already do this\nWith CLJS it\u2019s pretty early days for kaocha\nyou can also use the multimethod that\u2019s in clojure.test maybe\nno, just jvm for now. T hanks <@Clarine> I\u2019ll look into it\nThis is great. Thanks <@Clarine>\nAn unrelated question: Have you played with yetibot? I want a project that I can get the interns to hack together on\n<@Nigel> here\u2019s an example of using the hooks in clojure.test: <https://gist.github.com/metametadata/c40a5f099814e591cd627b874f9bb595>\nI don\u2019t know yetibot\nI usually talk directly to Slack via webhooks\n<@Clarine> Thanks. <https://cljdoc.org/d/lambdaisland/kaocha/0.0-389/doc/plugin-hooks> is what I was looking for\nso the `test` passed to the hook is a map with test metadata?\nIf you don\u2019t want to usa kaocha but plain clojure.test, you can use these hooks, is what I tried to say:\n<https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj#L408>\nFor questions about <#CCY2V0U6A|kaocha> you better ask in that channel\nthanks.\n`clojure.test` is enough for my needs. Thank you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "726",
    "text": "i'm happy to answer any yetibot questions\n<@Vinnie> - are you the author?\nyep\nCool! I\u2019ve a bunch of people that I am planning on teaching Clojure to. I thought it would be a good idea for them to hack on something like Yetibot\nBuild their own chatbot and at the same time, learn Clojure\nthose are the goals, broadly\ncool :slightly_smiling_face: i'm actually doing something similar in a few weeks. teaching a workshop on yetibot to people who are not familiar with Clojure\nit's a pretty good project for it because a command is pretty well isolated\ndon't need to understand the rest to build a command that interacts with an external API\nCool. Let me play with it a bit and see where I go with it\nsounds good. just ping me if you need anything\nAnd ask me anything about... crazy uses for Yetibot: like eval-ing Clojure expressions in Slack\n*admin-only feature `:-D`\nLol. :slightly_smiling_face:\nYep. Stuff like\n\n```\n!eval (xml/emit-element (zip/root [{:tag :a, :attrs {:href \"<http://yetibot.com|yetibot.com>\"}, :content nil} nil]))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "727",
    "text": "What would be a good interface for a module that provides a wrapper around a serial port (full-duplex)? A pair of `core.async` channels?\nYou could construct a channel type that wrapped two channels and implemented WritePort using one channel and ReadPort using the other\nI think manifold is meant to be a more general interface for async programming: <https://github.com/ztellman/manifold>\nmeh\nHmm, a pair of a source and a sink.\nmanifold provides nice integration with netty, but it is hardly general, and doesn't properly expresses things like choice over streams\nI haven't used it at all. I just know that in a talk I watched, the reason ztellman gave for creating it was that core.async was more of a app-level abstraction choice\nand he wanted a library that didn't force you to warp your application to be core.async-y\ninstead forcing your application to manifoldy\nand not having proper choice\nIs there really a way to do `alts!` over disparate streams? It's not like Java gives us an analogue of `select(2)` system call.\njava does\nyou use nio\ndo it over channels\n(nio channels)\nI don't see how can I do `nio` on `core.async` channels, or on a `BlockingQueue`, or on a lazy sequence.\ncorrect\nSo there is no way to implement `alts!` in Manifold.\ncore.async's alt only works on core.async channels\nYou could implement the channel protocols on top of nio channels\nmanifold doesn't seem to be nearly as infectious as core.async\nI have some concurrent ml kind of experiments that provide concurrent ml events as sync points (instead of sync'ing directly on channels) and extends them to nio operations with a selector\nI doubt that\nand then has the cml events implement ReadPort\nit seems pretty straight forward. functions that return values. without e.g. syntax transforms\nyou can do that with core.async too\nanyway, I'm talking out of my ass anyway so I'll assume you've done your due diligence. but I'm curious why it fails to approach its goals given in the rationale: <https://aleph.io/manifold/rationale.html>\nif you don't use the go macro, and are on the jvm, you use the thread blocking version of everything, boom same thing\nit fails because zach started from netty, a concrete io famework, vs some concurrency formalism\nso for example, alts! on some collection of core.async channel ops will succeed for one of them once atomically\nwhere as for manifold, taking from a stream returns a deferred, and then you can us or to make a choice between deferreds, but you cannot untake that deferred from a stram\nwhich is very io like, you cannot un read that stream\nbut even then, concurrent ml (which builds on the ideas from csp which core.async is built) provides hooks for building transactional io operations\nI don't get the netty connection\noh\nthat whole codebase grew out of aleph, which is zach's netty library\nI see\nthe tricky thing with integrating with nio there is naively you assume that similar to core.async having !&gt; and &lt;! on channels, that the integration point is reading and writing to nio channels, which would leave with similar issues to manifold with regard to atomic choice between multiple actions, so the correct integration point is around the selector or the selectionkey (I don't deal directly with nio all that often so the specifics escape me)\nold code\n<https://dev.clojure.org/jira/browse/CLJ-1545>\nit seems like it never made it into clojure (so far)\n<https://github.com/clojure/clojure/blob/8fbafa92faacb92a9bd49fa1e9b7e2c8c0747c07/src/clj/clojure/core.clj#L1015-L1020>\nGot removed here <https://github.com/clojure/clojure/commit/6ab3e4cd672092823a04c944210a23c29142785d>\nstackoverflow\nyou'd need a very deep nesting of maps for that to be an issue\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "728",
    "text": "I have encountered several examples from a clojuredocs dump that use a var called `unchecked-divide`:\n```\n{:var clojure.core/unchecked-divide,\n :example 582,\n :toplevel nil,\n :sandboxed\n [(def thous 1000)\n  (def trill (* thous thous thous thous))\n  (unchecked-divide trill 10)\n  (/ trill 10)]}\n```\nbut I can\u2019t find this in clojure itself nor on the clojuredocs site. What\u2019s the history behind this?\nthe links on this page indeed exist, but point nowhere: <https://clojure.org/reference/java_interop>\nnow there is `unchecked-divide-int`\nok \u2014 thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "729",
    "text": "this took me way too long to come up with for some reason:\n```\n(defn deep-merge [x1 x2]\n  (cond\n    (and (map? x1) (map? x2)) (merge-with deep-merge x1 x2)\n\n    (and (coll? x1) (coll? x2)) (into x1 x2)\n\n    :else x2))\n```\nQuestion about datomic ions: is there a way to do a compiler check without pushing to AWS? I am still new to Clojure\u2026\nFunny:\n```\n $ clj -Sdeps '{:deps {org.clojure/clojure {:mvn/version \"1.5.0\"}}}' -e '(pr-str (quote))'\n\"nil\"\n$ clj -Sdeps '{:deps {org.clojure/clojure {:mvn/version \"1.10.0\"}}}' -e '(pr-str (quote))'\nWrong number of args (0) passed to quote\n```\nSeems like a breaking change to `quote`. Not important, just something I found while mining clojuredocs :slightly_smiling_face:.\nSame with `clj -Sdeps '{:deps {org.clojure/clojure {:mvn/version \"1.5.0\"}}}' -e '(pr-str (quote 1 2 3 4 5))'`, doesn\u2019t seem to work anymore.\nI came across that code here: <http://clojuredocs.org/clojure.core/quote#example-542692d0c026201cdc326ea2>\nnot really. maybe specter offers something really short here, but that would be a library\n<@Clarine> Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "730",
    "text": "Nothing to add here, just noting how trivial it was to test this with `clj`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "731",
    "text": "Hi! Is there a short form for something like `(update coll #(map (fn [item] (if (condition item) (modify item) item)) %))`? Something like a `:when` for updating a collection?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "732",
    "text": "hmmm\n`wat`\n```\nuser=&gt; (type 1)\n;;=&gt; java.lang.Long\nuser=&gt; (case (type 1)\n         java.lang.Long :long\n         java.lang.Double :double\n         :something-else)\n;;=&gt; :something-else\nuser=&gt; (= (type 1) java.lang.Long)\n;;=&gt; true\n\n```\noh because case is a macro?\nIt doesn't evaluate the test?\nno sorry, that\u2019s only the case for the values on which it dispatches.\n```\n(macroexpand ' (case (type 1)\n         java.lang.Long :long\n         java.lang.Double :double\n         :something-else))\n(let* [G__141 (type 1)] (case* G__141 1 1 :something-else {0 [java.lang.Long :long], 1 [java.lang.Double :double]} :compact :hash-equiv nil))\n```\n(else `case` would be pretty useless)\nmm\n```\n(case 'java.lang.Long java.lang.Long :long) ;;=&gt; :long \n```\nso the symbol is not evaluated\nthe class is not a compile time constant is what it boils down to\n```user=&gt; (case (type 1) #=java.lang.Long :long :else)\n:long```\njust beware that if you AOT compile this, it may break between different jvm versions, since it relies on the class hash identity\nin other words, just go with `cond` here\nyep\nor if you need constant~ish time dispatch, use a protocol or a multimethod instead\n```\n(case (symbol (.getName (type 1)))\n  java.lang.Long :long\n  java.lang.Double :double\n  :something-else)\n```\nclever :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "733",
    "text": "What is this magic?\nread-eval\ndon't think it's documented anywhere\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "734",
    "text": "multimethod sanitycheck -\nIf I declare\n```(defmulti example-multi (fn [arg] (:type arg)))```\nand I want to create a default method that returns a string,  it always feels like I ought to be able to write something like\n```(defmethod example-multi :default str)```\nbut I've never got that to work, and instead I have to invoke it manually\n```(defmethod example-multi :default [arg] (str arg))```\n\nAm I missing something here, or is it just not possible?\nmy driver is that plain old functions are easier to work with than multi-method tentacles\nI would like multi methods to be solely about dispatch/invocation and not contain any other functionality\nyeah I figured that I was probably doing it wrong with case to do runtime type dispatch when protocols and multimethods exist\nbut then got more caught up with why it didn't work\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "735",
    "text": "I want to write some property tests, and I have done that before with `clojure.test.check`.\n\nHowever, am I right in thinking that I could just write some spec for my functions and get the property testing for \u201cfree\u201d?\nin a lot of cases yes, unless you use `s/and` + some predicates, these will mostly require writing a generator\nYou still need to write your properties, you just get generators \"for free\".\nRight, I suppose I\u2019m more asking, is there any reason why I would still use `test.check`, rather than using spec and getting a bit more bang for my buck?\n&gt; You still need to write your properties\nah wait so I _do_ still need `test.check` to actually do the tests. Thanks <@Clarine> and <@Gilberto>\nYep - you still need to do `for-all`, you can just use your specs to generate the data. You can also use your specs to validate something is conformant to a spec (via `valid?`) in your property so you do get plenty of mileage with spec, but it won't give you properties for free.\n\nNot entirely related to this I also highly recommend using <https://github.com/gfredericks/test.chuck> if you are not doing that already.\nAwesome, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "736",
    "text": "<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LispReader.java#L115>\nis there a convenient way round this? Do I just have to accept that I cannot do it?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "737",
    "text": "I'm using deps.edn for my project. Is there a way to list which dependencies have newer versions available?\nyes: <https://github.com/Olical/depot>\nI was hoping to\n```\n(extend-type PGobject\n  Named\n  (getNamespace [^PGobject this] (.getType this))\n  (getName[^PGobject this] (.getValue this)))\n```\nbut it gives me\n```CompilerException java.lang.IllegalArgumentException: interface clojure.lang.Named is not a protocol, compiling:```\nNamed is an interface, not a protocol, so you can't use extend with it\nis that an intentional choice?\nwell, intentional in that it's not possible\nI\u2019m using clojail and need to add a permission to read a Property. I thought this is how I should do it:\n```\ngrant {\n  permission java.security.AllPermission;\n  permission java.util.PropertyPermission \"line.separator\", \"read\";\n};\n```\nbut I\u2019m still getting access denied (\u201cjava.util.PropertyPermission\u201d \u201cline.separator\u201d \u201cread\u201d) when using `clojure.pprint` in the sandbox\npresuming that PGObject is  a Java class, it can't be retroactively made to implement an interface (Java classes  are closed  for extension). Clojure protocols are open for  extension, which is why they're cool.\nI guess i'm asking why `Named` is not a protocol\nwell it's in the guts of Clojure and was created several years before protocols existed\nthe PGObject is a convenient way of hooking into Postgres enum types\nah okay, so its an accident of history\nit is in ClojureScript which benefited from being created later:\n<https://github.com/clojure/clojurescript/blob/master/src/main/cljs/cljs/core.cljs#L839>\nrather than a deep design decision\nah well\nthanks\nyeah, most of the core abstractions in Clojure are Java interfaces (CLJS had the benefit of hindsight)\nI fixed it now by customizing the `:context` arg to:\n```\n:context (-&gt; (permissions (java.util.PropertyPermission. \"line.separator\" \"read\"))\n                                         domain\n                                         context)\n```\nApparently this policy file is needed but ignored\nso I can achieve a similiar result using `proxy`\n```\n(proxy [PGobject clojure.lang.Named] []\n  (getNamespace [] (.getType this))\n  (getName [] (.getValue this)))\n```\nOr just a function\nis that going to reflect?\n<@Clarine> not quite clear what you mean\nyou can check with *warn-on-reflection* and add a type hint\nyou can make a function which turns a PGObject enum thing into a keyword\nthis is usually how I do it: when reading from the database turn it into something clojure-y instead of working with those objects directly\nwell the point of doing this is that I want to call `(comp keyword name)`\nbecause I'm not sure if its a PGObject or just a keyword\ncomputer says ```Reflection warning, /tmp/form-init3318477797552259570.clj:2:20 - reference to field getType can't be resolved.\nReflection warning, /tmp/form-init3318477797552259570.clj:3:15 - reference to field getValue can't be resolved.```\nthe point I\u2019m making is that I would get rid of the PGObject as soon as possible and not expose it beyond the database layer\nyeah, you are prolly right\nif you're proxying you're already switching objects, might as well make it what you want\nI wasn't sure if proxy _automatically_ inferred type of *this*\nbut clearly it doesn't\nI'm using clojure.java.jdbc to access a Microsoft SQLServer database. I'm using the following database connection structure: {:subprotocol jtds:sqlserver, :subname //192.168.2.129:1433;database=demo;integratedSecurity=false, :user sa, :password whatever}. I'm connecting as the system admin, so I have access to the demo database, but the JDBC connection is binding to the default database, master, rather than the specified database, demo. Has anyone having experience with MS SQLServer and/or the JDBC driver seen anything like this? Any ideas as to why the driver isn't honoring the database parameter specified in :subname?\nmight you  have got the syntax of that URL wrong?\nsometimes the default database parameter name gets changed or moved\nthis is a very old memory I'm dredging up\n? intead of ;\nthat sort of thing\nOh, I understand now. The sad thing is that that isn't an actual URL. It's just a parameter string to the MS SQL Server JDBC driver, which has about fifty different optional parameters that can be appended to the servername and port (as detailed in the page <https://docs.microsoft.com/en-us/sql/connect/jdbc/setting-the-connection-properties?view=sql-server-2017>). It appears that databaseName is a synonym for database and I'll try that. The odd thing is that this connection structure worked about two years ago when I last ran this program.\ntwo years is a long time\nSure seems to be.\nin the days when SQL server 2017 was Young-And-Wild-And-Free\n<http://classicprogrammerpaintings.com/post/183312119276/clojure-programmer-at-work-henri-lebasque>\nWell done.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "738",
    "text": "<@Rosella> I'm more likely to see `clojure.java.jdbc` questions in <#C1Q164V29|sql> -- FYI. My first reaction is \"don't use the subprotocol/subname format of DB spec\" -- use dbtype/dbname per the docs. It's much better supported and easier to use. Then you should be able to specify `:integratedSecurity false` directly in the DB spec hash map.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "739",
    "text": "can I make a var `:dynamic`?\n```\n(def x 1)\n\n(alter-meta! #'x assoc :dynamic true)\n\n(doseq [i (range 1 10)]\n  (with-bindings {#'x i} ;;complains, cant dynamically bind a non-dynamic var\n    (println x)))\n```\nmy guess is alter-meta should work\nas I understand it the :dynamic metadata changes how the def is compiled, in order to create a dynamic var\napplying the metadata after the var already exists skips the actual thing that makes the var dynamic\nthats my guess, but it's a shame isn't it? :stuck_out_tongue:\nthere's a setDynamic method on clojure.lang.Var\n<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Var.java#L106>\nI assume the code that implements def decides whether to call that method\nyeah, that happens in compiler.java <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L431>\ncrap\nwhy can't you just use setDynamic? it's public\nit worked, wow.\ntks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "740",
    "text": "After reading this great post <http://insideclojure.org/2016/03/16/collections/> I want to kind of extend clojure abstractions to a custom Java type so it can act just like a map and it can be manipulated elsewhere in the code (including libraries) with standard functions like `assoc`, `dissoc`\u2026\n\nThe following code doesn\u2019t work, but here is the idea.\n\n```\n(extend MyCustomJavaType\n  Counted ;;  - countable collections\n  (count [this])\n\n  Indexed ;;  - extends Counted, allows index-based lookup\n  (nth [i])\n  (nth [i not-found])\n\n  Associative ;;  (extends ILookup)\n  (containsKey [key])\n  (entryAt [key])\n  (assoc [key val]))\n\n(assoc (MyCustomJavaType.) :a 1)\n;; =&gt; #&lt;something&gt;\n```\n\n- How to express it in Clojure? I thought protocols are Java interface, but this previous isn\u2019t valid.\n- Where can I find all the interfaces I need to implement to be 100% sure my object will be treated like a map?\nwhy not use defrecord? that lets you have something that acts like a hash-map but you can implement more interfaces / protocols\nthere's also a library with functions for making  a map-like thing if defrecord isn't flexible enough <https://github.com/ztellman/potemkin#def-map-type> (with the warning here that the author considers the things in this library \"almost good ideas\")\n<@Catalina> and regarding ` I thought protocols are Java interface, but this previous isn\u2019t valid.` - protocols use interfaces as an implementation detail, but extend only works on protocols not interfaces\nthe jvm doesn't let you add methods to a class that already exists at runtime\nextend basically implements a dispatch table that protocol methods use if they can't find the method directly on a target\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "741",
    "text": "How does performance differ between `(apply merge list-of-maps)` vs `(reduce merge {} list-of-maps)` ?\nThat\u2019s what I thought\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "742",
    "text": "Not in a way that matters\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "743",
    "text": "The variadic arity of core functions is often optimised, so `apply` is faster in some cases. In this case it doesn\u2019t really matter since `merge` only has a single arity, which uses `reduce`. An example where there is a difference is `apply str` vs. `reduce str` \u2013 the former is faster because the variadic arity of `str` uses a single `StringBuilder`\nA counterexample is `apply +` vs. `reduce +`. The latter is faster, because the variadic arity of `+` has to use the slower `reduce1` due to `reduce` not yet being defined\nBut `(reduce +)` is faster than `(apply +)` :smile: benchmarking is the best way to find out if you care \n:ninja:\nAgreed about always benchmarking though, and even better than benchmarking is profiling w/ real use cases\nThanks a lot\nSomewhat-related: there is a ticket looking at the performance of `merge` \u2013 <https://dev.clojure.org/jira/browse/CLJ-1458>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "744",
    "text": "How can I get the source of a test? I have a bunch of tests in a namespace, and I need to randomly yield a test to someone(like koans let\u2019s say). So far I have `(filter (comp nil? :test second) (ns-interns 'some-ns))`\nThe above gives me a list of all the tests in that namespace\nWhat I want now is to randomly pick a test and get its source. I could use `source` but that\u2019s in `clojure.repl`\nBut that won\u2019t work really\nWhat's wrong with that?\n<@Sixta> - I am not sure `source` is able to see it\n`(map (comp #(source %1) first) (filter (comp nil? :test second) (ns-interns 'mars-rover.plateau-test)))`\nsource is not found.\ntest is defined using `deftest`\nAh darn\nOk, got it\nits a symbol and a fully qualified namespace problem\nOk, another foolish question. Is there a simple/canonical way of finding all test based namespaces? Do I just ferret under the `test` dir?\nCheck the orchard codebase, it has a query namespace which can do this\nIt's designed for building tooling\nThanks <@Sixta>\nI sometimes write tests inline rather than separately, so searching test folder bothers me. :)\nI'm an orchard contributor, feel free to bother me if you need help. <#C17JYSA3H|nrepl> is probably the best channel for help with orchard generally, we are all tooling authors.\n<@Sixta> - my use is as follows. I have a bunch of interns and I want to provide them a koan like experience, but with a slightly more gamified environment. They get a random test yielded to them, upon completion of which they get another etc.\nSo this system has to take their submission, evaluate and provide a test to them\nso, an inline test is not a concern at the moment\nHow do I get a symbol out of a var?\nI\u2019ve a bunch of interned vars in a namespace. I am using `(ns-interns 'my-namespace)` to get a map. Now, I want the source of every interned var here.\nThe map that `ns-interns` returns has a symbol as the key and the value contains a var that the symbol is interned as\n`source` accepts a symbol. But the symbol that `ns-interns` returns is not namespace qualified\nCall `meta` on the var to get a map of its metadata\nSorry, I misread \u2013 you already have the name to hand if you\u2019re using `ns-interns`\nYeah\nBut it is not namespace qualified\nSo I have to hand it myself I guess\nYeah, I think just create it yourself (the `symbol` function has a two-argument arity for this)\nEffectively, I want something as follows: `(map the-source-of (ns-interns 'my-namespace))`\nTry the following:\n\n```\n(defn ns-sources\n  \"Returns a mapping from name to source for the namespace's interned vars.\"\n  [ns]\n  (-&gt;&gt; (keys (ns-interns ns))\n       (into {} (keep (fn [n]\n                        (when-let [s (clojure.repl/source-fn (symbol (str ns) (str n)))]\n                          [n s]))))))\n```\nJeez! Thanks a ton <@Vernia>\n<@Nigel> I\u2019m using it myself with a minor tweak (added a deps.edn file, forked from someone who upgraded to clojure 1.10)\n<@Clarine> - ok, because the github page hasn\u2019t had a commit in a while.\nthe author is no longer with us, he passed away in 2016\nOh damn. I\u2019m sorry to hear that.\n<https://www.reddit.com/r/Clojure/comments/5gyyxw/clojure_open_source_contributor_anthony_grimes/>\nhere\u2019s my fork of a fork. It still works well. I\u2019ve been parsing examples from clojuredocs and executing them in a safe environment:\n<https://github.com/borkdude/clojail>\nClj has a -Sresolve-tags command\nThat\u2019s ridiculously crazy given that so much more has been added in clojure since then.\nSad to hear this\nYeah, since there\u2019s been stuff added to Clojure, there might be some things that should be added to the \u201cforbidden vars\u201d, like requiring-resolve maybe.\nbut since that calls resolve, it\u2019s probably already fine\nOh, I didn\u2019t notice it. How does it work? `github-kwladyka/form-validator {:git/url \"<https://github.com/kwladyka/form-validator-cljs.git>\" :tag \"v1.0.0\"}` and after `clj -Sresolve-tags` `:sha` will be added? I can\u2019t find any explanation about it in google.\nAnyway I would like too see something what work on the fly, not overwrite deps.edn. But better this, than nothing :slightly_smiling_face:\nbut it does attest to Clojure\u2019s and Java\u2019s strength that it still works :slightly_smiling_face:\nit adds the :sha to anything that's missing it, yeah :slightly_smiling_face:\nI also wrote a version which preserves comments/formatting/whitespace: <https://github.com/SevereOverfl0w/clj-resolve-tags/>\n:+1:\nDoes someone remember what I refer to here? <https://twitter.com/borkdude/status/1104366075561549824>\nalready found it in the podcast\n<@Nigel> In case you want to see it, here\u2019s the code I used clojail with:\n<https://github.com/borkdude/speculative/blob/master/test/speculative/clojuredocs.clj>\nThanks <@Clarine> - I\u2019ll take a look\nyeah, that is also how 4clojure works where it forbids certain functions\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "745",
    "text": "Has anyone played with pagination and the new Nav protocol? I'm trying to provide a simpler interface to navigate a HTTP api lazily.\ndeps.edn\n`github-kwladyka/form-validator {:git/url \"<https://github.com/kwladyka/form-validator-cljs.git>\" :sha \"5917f9c4fc3c0ea0f22d71bc6a9f1c1257a72319\"}`\n\nDo we have any way to use `:tag` instead of `:sha` for `deps.edn`? How do you solve versioning with git deps?\nIs `clojail` still being maintained? If not, is there an alternative?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "746",
    "text": "<@Celestine> I suppose this is similar to jdbc ResultSets? I'm now considering reducers, but I seem to recall you having an issue with them?\nThis is so neat! So a basic blacklist\nI am guessing I can also timeout potential infinite loops\nseems like I can. the api has a timeout\nyep, it has a timeout by default turned on as well\nNot sure what you're thinking of <@Sixta>? Reducible queries maybe? \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "747",
    "text": "Hi. I have a noob question. I am using tools.dep with Datomic Ions. I want to be able to compile locally instead of having to push to see error messages. Anyone know how to do this?\n<@Ruthann> You'll need to create a `classes` directory and either add it to `:paths` or use an alias and add it it `:extra-paths` and then use a `:main-opts` to invoke the compiler for the namespace `-e \"(compile 'your.namespace)\"`\n(if I'm understanding your question correctly)\nBut I think I'd really recommend adjusting your editing workflow to rely more on a REPL running in the context of your project and make sure you eval the code into the REPL regularly as you're working -- since that will also _compile_ the code locally (in the REPL).\nAs a general rule of thumb, in my opinion, you should evaluate all the code you write into the REPL, as you're writing it. That way you don't even leave your editor and you have the fastest possible feedback loop.\nThanks <@Celestine>. I tried using a REPL for this as you suggested, but the Datomic Ions has dependencies in AWS that are not downloaded to my computer. This is causing difficulties for me.\nFor _compiling_ code, you should only need the library deps specified locally -- it wouldn't need to _run_ the code (but I would run as much code as you can before pushing it up to AWS).\nYou may find more specific assistance in the <#C03RZMDSH|datomic> channel around workflows for Ions (I haven't used them, but I have worked with code that depends on AWS services and libraries, from my local REPL).\n<@Celestine> I found a thread about you implementing IReduce or something?\n\nAnd I seem to remember you planning to change something about that?\nFor jdbc \"2\"\nThanks so much for your help <@Celestine>. I did not know there was a <#C03RZMDSH|datomic> channel.\n`clojure.java.jdbc` introduced `reducible-query` ages ago that implements `IReduce`.\n`next.jdbc` will only implement `IReduceInit` (which greatly simplifies things). Neither of those have anything to do with `datafy`/`nav` tho'...\nAn example (from `next.jdbc`): ```  ;; raw java\n  (defn select* [^Connection con]\n    (let [ps (doto (.prepareStatement con \"SELECT * FROM fruit WHERE appearance = ?\")\n               (.setObject 1 \"red\"))\n          rs (.executeQuery ps)\n          _ (.next rs)\n          value (.getObject rs \"name\")]\n      (.close ps)\n      value))\n  (quick-bench (select* con))\n\n  ;; almost same as the Java example above\n  (quick-bench\n   (reduce (fn [rs m] (reduced (:name m)))\n           nil\n           (execute! con [\"select * from fruit where appearance = ?\" \"red\"])))\n```\n(there's syntactic sugar wrapping available but that's the raw, under-the-hood call)\nAnd that currently looks a bit like this ```(defn- reduce-stmt\n  \"\"\n  [^PreparedStatement stmt f init]\n  (if (.execute stmt)\n    (let [rs     (.getResultSet stmt)\n          rs-map (mapify-result-set rs)]\n      (loop [init' init]\n        (if (.next rs)\n          (let [result (f init' rs-map)]\n            (if (reduced? result)\n              @result\n              (recur result)))\n          init')))\n    (f init (.getUpdateCount stmt))))\n\n(extend-protocol Executable\n  Connection\n  (-execute [this [sql &amp; params] opts]\n            (let [factory (pre-prepare* opts)]\n              (reify clojure.lang.IReduceInit\n                (reduce [_ f init]\n                        (with-open [stmt (prepare-fn* this sql params factory)]\n                          (reduce-stmt stmt f init))))))\n...```\n(I'm still figuring out how best to handle statements that produce update counts instead of result sets)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "748",
    "text": "I must be misremembering. I thought someone had done some experimenting in another repo with performance maybe\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "749",
    "text": "what's the difference between `(Integer. \"1\")` and `(Integer/parseInt \"1\")`\nseems to be the same thing:\n<http://hg.openjdk.java.net/jdk8/jdk8/jdk/file/687fd7c7986d/src/share/classes/java/lang/Integer.java#l867>\nahhh ok\nthanks\nis there a way to do `(map Integer/parseInt coll)`? it barfs on using a java function like that\nyou have to wrap it in a function\n`(map #(Integer/parseInt %) coll)`\nok\nthat's what I was doing but I figured there might be a trick\nor,\n```\n(defn parse-int [n]\n  (Integer/parseInt n))\n\n(map parse-int coll)\n```\nright\nI'm doing ```(defn parse-int [string-to-parse]\n  (Integer/parseInt string-to-parse))\n\n(defn split-to-digits [num]\n  (as-&gt; num n\n    (str n)              ;; convert to string\n    (string/split n #\"\") ;; split to digits\n    (map parse-int n))   ;; parse digits back into integers\n)\n```\nwhich seems reasonable\nI love threading macros so much\nyeah :smile: I miss it in every other language\nelixir's pipe operator is good too but it only does first arg\nbut you can do anonymous functions to trick it out and pass the arg in another position\nbut it's just ugly\n<https://exercism.io/tracks/clojure/exercises/armstrong-numbers/solutions/c91ba2cff80645c6a28e671a73668e4e>\nyeah. I remember being unsatisfied with the pipe operation both in Elixir and ReasonML\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "750",
    "text": "Use the latter\nIt will cache integer values around 0. The former always constructs a new object\nahhh ok\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "751",
    "text": "`next.jdbc` is a lot about performance, building on the performance of `reducible-query` compared to `query`, and also by using protocols more heavily.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "752",
    "text": "Any cool open source DSLs?\nHonestly I'm not sure what the difference between a DSL and a library of utility functions is.\n<@Elly> DSL for?\n<@Nigel> anything popular and/or considered good code.\nJust want to see what constitutes a DSL.\nInstaparse\nat some level, isn\u2019t Leiningen a DSL of sorts?\nSo what makes Instaparse a DSL vs a library?\nhiccup\nBecause you can use most if not all functionality of both hiccup and instaparse without having to muck about too much with Clojure itself\nBut the definition is sketchy\nI think it's a library for implementing DSLs\nhiccup looks much more DSLish\nto me\n<@Elly> - agreed\nIf I'm writing a monolithic app in Clojure but I want to go with a container like Kubernetes or Docker to simplify deployment, which one should I choose? Is there one I haven't mentioned?\nNvm I'm retarded. I knew that Kubernetes had something to do with containers, thought it's a container.\nTurns out it's not really a competitor to Docker whoops.\nOh shit I remember why I gave up on Docker before.\nRequires Windows 10 Pro or Enterprise.\nNow isn't that some bullshit.\nI have some weirdness when executing examples in a sandbox (clojails). In the REPL (works) vs running with tools/deps -main function from the command line (fails). In the REPL it works, but from the command line I get:\n```\n\"executing\" (send counter inc)\nException in thread \"clojure-agent-send-pool-0\" \"executing\" (clojure.core/deref counter)\njava.lang.IllegalMonitorStateException\n\tat java.util.concurrent.locks.ReentrantLock$Sync.tryRelease(ReentrantLock.java:151)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer.release(AbstractQueuedSynchronizer.java:1261)\n\tat java.util.concurrent.locks.ReentrantLock.unlock(ReentrantLock.java:457)\n\tat java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:449)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1074)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1134)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\n\tat java.lang.Thread.run(Thread.java:748)\n```\nand\n```\n\"executing\" (send pulp-fiction assoc :act-two \"VINCENT VEGA &amp; MARSELLUS WALLACE'S WIFE\")\nCaused by: java.lang.RuntimeException: Agent is failed, needs restart\n\tat clojure.lang.Util.runtimeException(Util.java:225)\n\tat clojure.lang.Agent.dispatch(Agent.java:238)\n\tat clojure.core$send_via.invokeStatic(core.clj:2109)\n\tat clojure.core$send_via.doInvoke(core.clj:2101)\n\tat clojure.lang.RestFn.applyTo(RestFn.java:146)\n\tat clojure.core$apply.invokeStatic(core.clj:671)\n\tat clojure.core$send.invokeStatic(core.clj:2120)\n\tat clojure.core$send.doInvoke(core.clj:2111)\n\tat clojure.lang.RestFn.invoke(RestFn.java:464)\n\tat sandbox4362$eval4454.invokeStatic(NO_SOURCE_FILE:0)\n\tat sandbox4362$eval4454.invoke(NO_SOURCE_FILE)\n```\nIt\u2019s this example from clojuredocs:\n<https://clojuredocs.org/clojure.core/agent>\nI think I\u2019ll just exclude this example, but it\u2019d be nice to know what\u2019s causing this\nWith leiningen + clojails I get the same thing. For now I find it too time consuming to find out why this particular example doesn\u2019t work outside the REPL, so I\u2019ll leave it for now.\n<@Tonya> Here I\u2019ve got a project like that: <https://github.com/borkdude/lein2boot>\n<@Clarine> Thank you that is perfect.\n<@Clarine> what if I don't want to use figwheels static server function. I desire figwheel to automatically recompile my code as I use a ring handler to serve the static content.\nI believe that\u2019s what the project in the link does too\nI just ignore the figwheel server\nWhere does it specify that?\nOh so its running you just ignore it.\nI think lein figwheel reads the cljsbuild config, at least that\u2019s my vague memory about it. I\u2019m pretty sure it worked back then, since it was a requirement that I wanted to replicate in boot\nOkay thank you.\n<@Clarine> thank you for your time and help.\nyeah, maybe you can pass an option to not start a static file server but it wasn\u2019t important to me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "753",
    "text": "Pretty sure I run docker without either Windows 10 Pro or Enterprise :slightly_smiling_face: You can always give virtualization a try (running Ubuntu in VirtualBox)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "754",
    "text": "Could someone recommend a library for parsing binary data in Clojure? The format is not very complicated, but it has variable-length fields with a length specified in the packet body, and a moderate amount of branching.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "755",
    "text": "ztellman might have a library for that\nI was looking at the guestbook application from Luminus, it was using nrepl.server, I am trying to understanding what is the need for nrepl.server? does it open a port in production which I can connect cider to?\nCode looks ok to me\nIf you want to make a jira, go for it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "756",
    "text": "I'm trying to setup my website to use clojurescript and I want to have two directories src/clj and src/cljs for the different source files. I'm using Lein and am unsure how to specify this new directory structure. Anyone have solutions?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "757",
    "text": "Can I connect cider to clojurescript and clojure simultaneously?\ntypically I have two REPLs open: one for the Clojure process, and one for the ClojureScript process\nYes, then how do you connect to both?\nmm, I just `cider-jack-in` inside of a .clj file, and then `cider-jack-in-clojurescript` inside of a .cljs file\nOkay, makes sense.\nI use cider-connect\ninstead of cider-jack-in but I'm sure it's easy\nif you already have e.g. a clojure REPL and a figwheel process running, you can connect to the Clojure REPL and then connect again to the figwheel REPL\nNone\nNone\nyes. what I typically do is print the data to a string and put it inside of a `&lt;script&gt;` tag\ne.g. `__QUERY_PARAMS__ = ...stringified params...`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "758",
    "text": "Is it possible to pass data from clojure -&gt; reagent as in my fake example?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "759",
    "text": "Hi. How can I print to repl? Unfortunately putting println in functions the backend uses doesn't work\nIs anyone familiar enough with pomegranate and dynapath to help me figure out how to integrate them into my project? I provide an environment where people can add code in the field, and I compile and run it. I wanted to be able to let them pull in their own dependencies, and pomegranate seemed like the answer, but it is blowing up saying it can\u2019t find a suitable class loader to modify, even though in my startup code I tried setting my context class loader to a `clojure.lang.DynamicClassLoader`. Unfortunately, the readme for pomegranate just says \u201cyou will need to explicitly enable the java.net.URLClassLoader support in dynapath (upon which pomegranate relies for such things)\u201d and does not say *how*. Nor can I find anything that seems helpful in the dynapath read-me.\nUsing tools.cli I want to parse a repeat number of the same argument and collect into a vector:\n```\n(parse-opts [\"-n\" \"1\" \"-n\" \"2\"]\n              [[\"-n\" \"--num NUMBER\" \"Run example number\"\n                :parse-fn #(Integer/parseInt %)\n                :default []\n                :update-fn conj]])\n```\nWhy is `num` still the empty vector here?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "760",
    "text": "hi who used expo on cljsrn?\nlein new expo myapp +reagent  then  exec \u2018(start-figwheel!)\u2019 in repl   but it\u2019s error ,it\u2019s con\u2019t found evn.dev/ip\nNone\nNone\noh I see, I have to use `assoc-fn`\nI back to this topic from time to time and each time I don\u2019t feel satisfied.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "761",
    "text": "I am thinking today about databases and tools around Clojure. What is your stack of dream for FE+BE? Datomic is cool, but it is too expensive for me. So I am talking about free DB, tools. I like idea of EQL, but I didn\u2019t use it. I like idea of using `:user/id` instead of `:id` in query and insert / update. I am trying to find tools in Clojure / ClojureScript which will let me use databases in this new way. It needs to be stable and popular, it is too critical to choose something on early stage. Do you have your thoughts in this topic?\nthere is free datomic version?\n<https://www.datomic.com/get-datomic.html>\nthere is starter, but you have only 1 year update\nthere is also `datomic free` but it is limited AFAIK\nAnyway it sounds like a trap :slightly_smiling_face:\nStable and popular, but free for commercial use? There are other triplestores like <https://jena.apache.org/documentation/tdb/> or Neo4J ?\n<https://github.com/walkable-server/walkable>\nbut feels a bit like orm to me\u2026\nneo4j probably wouldn\u2019t be the best choice for warehouse, bookkeeping systems etc.\nFor such a system I would just go with Postgres if you want free and popular\nalso if I am not mistaken `jdbc.next` will add support for namespaces keywords\nbut better ask here <#C1Q164V29|sql>\nI don\u2019t know how stable <https://github.com/replikativ/datahike> is nowadays, but they do offer support for it\nWhat is walkable vs pathom? I am not sure I catch what job it really do\nalso in walkable doc I can red:\n```\nCurrently Walkable only takes care of reading from the database, NOT\n\nmaking mutations to it. I think it varies from applications to\n\napplications. If you can think of any pattern of doing it, please\n\nopen an issue.\n```\n\nSo it sounds like it is read only solution\nyou can insert with plain old sql\nin datomic it is also separated\n&gt; in datomic it is also separated\nCan you expand what you mean?\nfor read - datalog\nfor update - transaction\nwalkable tries to first read part\nbut you can still insert with plain old sql\nWhy you think datomic free wont work for you?\nwhat limitations concern you?\nSo\u2026 pathom (FE-&gt;BE) -&gt; walkable (BE-&gt;DB) -&gt; PostgreSQL\nAm I understand it?\nyes, i think so\n(didnt use it at all, just read)\n&gt; Why you think datomic free wont work for you?\nI will have to start to pay sooner or later. I don\u2019t want to care about licence.\nthe free version is free forever (with updates supported)\nit is just limited to only 2 peers\n<https://jena.apache.org/documentation/tdb/> What is it? I am not very familiar with it.\nthere is also datomic cloud\nsolo costs only 1 dollar per day\nif i am not mistaken\nMaybe I \u201cover fear\u201d of this Datomic licence things. I don\u2019t know. I just make me fear of this choice.\nMy purpose is to not make code more complex because of choice of DB\nI fully understand you :slightly_smiling_face:\n\nI did think about datomic (free) + datascript\nSo for example if I will choose to use Datomic in AWS, then I can\u2019t use google cloud. I have to use other solution for developing\nyou probably shouldn't chose a DB that is not open source. Not sure what the commitment from Datomic is when in the future the product gets deprecated/unsupported, but the move of data would be a hassle anyways\nRDF is a format to store facts. SPARQL is the query language that is often used with it.\nindeed\nthats a vector lock\nTDB is an implementation that supports these standards\ndatomic peer can use other stores (like sql or cassandra)\nso not that much vendor specific\ndatomic seems sexy\nbut sql works most of the time :wink:\nThis might also help you understand it: <https://github.com/arachne-framework/aristotle>\nClojure tools don\u2019t support it yet, right?\nnot aware of any sql with namespaced keywords\u2026\nalso, it is still sql, not a datalog\n<@Isa> JUXTs (of which I'm an employee) may be what you are after, except it is very new. It will be announced at clojure north.\n\nIt has support for namespaced keywords though :)\nYou may go <#C1Q164V29|sql> and ask there\n<@Sixta> what is it, a triplestore?\nSean Cornfield is the author\nkeep us posted!\nI\u2019ve never tried to build a business-y type app with <https://github.com/arachne-framework/aristotle>\nIt might be fun to try.\nWhat is the status of the project?\n\nFor example `yada` is super cool idea, but IMO it is not ready to use yet, because of to up to date documentation and few issues. But it will be cool product soon probably.\n\nI would like to avoid something similar with DB tool.\nIs it for graph DB?\nit\u2019s for Apacha Jena:\n<https://jena.apache.org/>\nexactly, I don\u2019t know this tool :slightly_smiling_face:\nnot sure what it really is\nThis is a nice tutorial by my colleague:\n<https://joelkuiper.eu/semantic-web>\nYada is something we use on all our projects, we consider it production ready. It's just hard to find time to document things :)\nit looks like graph DB\nI'm not sure how much information is public, so I'm going to hold off answering.\nWe have been running yada in production for years now. It\u2019s mature.\nFair :slightly_smiling_face:\nExactly. Without good documentation it is good for you, but not for me, because I don\u2019t know to use the tool and frustrate to find out how :slightly_smiling_face:\nIt\u2019s more important to understand the yada model of execution than the documentation, there\u2019s not much to it really\nBut I found pedestal even harder in that respect because of missing docs. I believe we have had this conversation before :slightly_smiling_face:\nI didn\u2019t try pedestal. It doesn\u2019t seem like tool for me.\nSo I have no opinion about that :slightly_smiling_face:\nYes we had\nMaybe luminus is more for you then, it\u2019s got nice docs\nI wanted only to say if this new tool for DB haven\u2019t good documentation I can\u2019t consider it to use for my purpose. At least it is how I see it.\nyeah\nBut I appreciate the idea and I hope your tools will grow up soon and things around will be cleared. I understand how hard it is to make open source and maintenance docs etc.\n:+1:\nyou are doing very good job, just need more time\n<https://github.com/replikativ/datahike> hmm do you know something more about it? It looks like beta\n&gt; We provide a small stable API for the JVM at the moment, but the on-disk schema is not fixed yet. We will provide a migration guide until we have reached a stable on-disk schema\nask in <#CB7GJAN0L|datahike>\nSo the conclusion: nothing really changed. Still we can use <https://github.com/clojure/java.jdbc> and potentially pathom / walkable on top of SQL. But it is worth to consider if use pahtom. As far as I understand it in this way we close the system for only Clojure / ClojureScript vs GraphQL solution which let developers use other languages for API.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "762",
    "text": "if you want GraphQL you can use lacinia. it\u2019s about trade offs I guess. GraphQL comes with its limits too.\nDon't fall in to the false economics of trying to be provider independent, though.\n\nAn alternative economical analysis is to observe that the more abstracted you are, the less you can leverage the particulars of the platform of your choice. Possibly to the point where you are paying up front for what it would cost to do a migration later (if you should need it).\n\nMy advice would be to not worry too much about large scale problems until you've done the initial work, and proven your model.\nThe teaser says \"Unveiling of JUXT's new bitemporal database\"\nVery exciting\n<@Ali>\n\n&gt; An alternative economical analysis is to observe that the more abstracted you are, the less you can leverage the particulars of the platform of your choice. Possibly to the point where you are paying up front for what it would cost to do a migration later (if you should need it).\n\nDo you mean better is to use JDBS directly instead of extra layers on SQL like Datomic? Not sure what you really mean in this sentence.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "763",
    "text": "I'm looking forward to talking about it \nIs it a commercial or free/OSS product?\n&gt; My advice would be to not worry too much about large scale problems until you\u2019ve done the initial work, and proven your model.\n\nI care more about make data and state management simpler. For example I want to use everywhere `:user/id` vs `:id` etc.\nAt the extreme, it would be like choosing tools built for Google-scale problems when starting out with a hobby project, because one day you might have a company the size of Google.\n\nIf you feel like Datomic can get you off the ground quickly, then pick Datomic and don't worry too much about maybe, perhaps, potential, but current non-problems like the license until you have reason to do so. It's a bad tradeoff to worry about long-term scalability problems before you have a workable proof of concept for what you intend to do.\n\nThat being said, you should still pick a solution that fits the problem of course.\n&gt; tools built for Google-scale problems\nWhich exactly?\ni think details doesnt matter\nthe point was - overoptimization is not good\nI need this info to understand what we are talking about :slightly_smiling_face:\nit was abstract point :slightly_smiling_face:\nlike cloud postgresql or other kind of tools\n<https://blog.bradfieldcs.com/you-are-not-google-84912cf44afb>\nno-no, I think it was like you should not think about your map-reduce cluster with 1000 machines\njust start with one instance\noh I think I interpreted this sentence exactly opposite. Now I see what he wanted to say.\nBut I don\u2019t care about infrastructure scaling, I care about simple code :slightly_smiling_face:\nAnd managing state\ndoes it mater which db you will take? :slightly_smiling_face:\nI think yes. For example I saw project which use NoSQL, but data were relational. It was so messy after years.\ndo you think if they will pick relational - they would do it right? :slightly_smiling_face:\nyes\nkk )\nDB wouldn\u2019t let them to make this mistakes\nhehe\nwith sql you can much a lot of mistakes\neven not noticible :slightly_smiling_face:\nDo you _really_ think that what you write right now is going to be run years from now? Pick the best thing for now, then refactor it in a year when it has matured, and you know more about the constraints you need.\ni think it is not about the tool\nit is how you use the tool :slightly_smiling_face:\nthey say only third rewrite makes things kinda optimal\ngo for datomic :slightly_smiling_face:\nanyway,  need to work :slightly_smiling_face:\nDatomic is great because it's very flexible, you can adapt it as you go along. Postgres is also great as a default unless you know that you need something specialized, just because of the tons of support and documentation.\nMake it work -&gt; Make it right -&gt; Make it fast :slightly_smiling_face:\nSure I agree. I need to make feel comfortable with whatever choice I will do :slightly_smiling_face: So this is why I am thinking about it today, because I am at this step where I should make a decision.\nI used Datomic Solo to make a proof of concept. I demoed the proof of concept and got resources to start an initial project.\n\n98% of the code I wrote is unused from the PoC, and ElasticSearch is the main workhorse, because it is the solution to the kind of problem we're dealing with _right now_. We'll bring back Datomic to do some of the more clever things, but for all intents and purposes, almost nothing of I did is in production right now. But it achieved the goal it set out to achieve: prove a workable model. And Datomic + Clojure was hands down the correct choice to make a working PoC as fast as I did.\nAnd boy, let me tell you that ElasticSearch is expensive to run, compared to Datomic.\nIt gobbles up resources like there's no tomorrow.\nNevertheless, Datomic is not built for fulltext indexing and search, so here we are.\nProbably my issue is I don\u2019t have too much Datomic experience to understand what I lose / get when using it. I understand only 5000$ :wink:\nAh! Now we're getting to the core of the problem :slightly_smiling_face:\n:wink:\nI have plan to build tools around  bookkeeping, warehouse, label printing etc. as SaaS. E-commerce things.\nSo PostgreSQL sounds reasonable\nDatomic can behave like a relational, or graph-like database. If you're modelling something that's sparse\u2014that is, lot's of relatively small pieces of data, not necessarily of the same shape, with tons of relations between them in all directions\u2014a graphlike database is nice.\n\nIf you know for a fact that you're storing something that could almost be a spreadsheet, where you stack lot's of data together side by side, and nearly always fill out all the columns, then a document store or relational store might be suitable.\n\nFor example, I know that one of the major postal services in Europe has modelled their package delivery system in a graph database, because a package delivery is traversal of nodes through out a huge system of interconnected nodes (delivery centers). Using this, rather than a relational database, made it easy for them to keep track of where a package was, where it is going, and customers can even cancel a package mid-delivery, and it will be routed back to the origin, based on a calculation of where trucks are and how much space they have available, etc. etc. etc.\nYour stuff sounds spontaneously more spreadsheet-like, which you could model in Datomic or Postgres.\nBut eventually, most systems that solve a complex enough problem will be using different stores for different purposes. We're currently using ElasticSearch, a small piece of Datomic, DynamoDB and S3 (and Postgres, for midpoint-storage related to some ingestion of data).\nThanks for input :+1:\nI am curious how system for warehouse, bookkeeping, orders etc. will look in graphql. Because one of the main issue is to keep sync order -&gt; bookkeeping / warehouse and all documents around and check if they are ok with law in country and don\u2019t break other rules.\nIt is OSS\nWhen add products to it, which have to be in sync with all orders / warehouse / bookkeeping there are a lot of relations\nThis history about delivery packages sounds inspiring :slightly_smiling_face:\nBut on the end I want to keep this system independent but cooperate by integrations.\nWell, at that moment just sharing my thoughts :slightly_smiling_face:\nI recently made a intro to protocols blog post (<https://alcamech.com/an-introduction-to-clojure-protocols/>) , would love some feedback !\n<https://juxt.pro/technology.html> public info here :slightly_smiling_face:\n<@Yen> s/methods/functions. They sometime compile down to methods but not always\nin the clojure sense they are just functions\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "764",
    "text": "<@Meagan> thanks.\n:heart:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "765",
    "text": "More excite\nIs the call for testers still relevant?\n<@Ali> yep :slightly_smiling_face: will PM you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "766",
    "text": "methods is the term that\u2019s often used though, for example here:\n<https://clojure.org/reference/protocols>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "767",
    "text": "what's the easiest way to remove Chunking from a sequence?\nI can write something like\n```\n(defn unchunk\n  \"convert a Chunked Seq into something else\"\n  [[head &amp; tail]]\n  (if (nil? tail)\n    (list head)\n    (cons head (lazy-seq (unchunk tail)))))\n```\nbut seems a bit of a palaver.\nIs there a more concise way?\n<@Danna> Usually when you need this, it\u2019s a bad sign\nagree\nyeah you are prolly right\nok\nback up to the prior step and use loop/recur or transducers instead\nwhen Alex told me the same, I went with transducers :stuck_out_tongue:\nso I'm leaning towards something like\n```\n(defn first-filtered\n  \"similiar to (comp first filter) but without chunking\"\n  [pred coll]\n  (reduce (fn [_ v] (when (pred v) (reduced v)))\n          nil\n          coll))\n```\n(first filter) is also an anti-pattern, mostly :wink:\nyou think so? `(some` leaves a semantic hole in my life\nbecause I don't always want the _result_\nwell, this was discussed a while ago. you should organize your data such that you don\u2019t need to walk over it like this at all, if possible\nthere are cases where it\u2019s appropriate\nhaha there always are\n<@Danna> medley has find-first\nAh yes! of course it does\ngood old James\nAnd it's exactly what you wrote, but usable as a transducer, too.  I didn't know about the transducer case, and I've wanted that!\nhaha. the side effect I'm trying to avoid is just a log statement\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "768",
    "text": "And here's our daily \"Thank you!\",  <@Angila>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "769",
    "text": "If I need to extend a Java base class to use a specific Java library that requires that and I don't want to use genclass &amp; AOT, what options do I have?\n`proxy`?\nor `reify` if that's an interface\nI need to extend an abstract base class. I was reading about proxy myself. I think I need to read about proxy a bit and try it.\nIt's a common misconception that GraphQL has anything to do with Graph Databases. It's almost like Java and Javascript. The one is a query language, the other a database, it might be a little easier to use GraphQL with a graph database, but you can also perfectly use GraphQL with a relational database.\nI wasn\u2019t the one bringing GraphQL to this conversation.\nbut you\u2019re right\nI was reading Programming Clojure, 3rd ed, page 172 by <@Jasmine> , <@Berta> and Aaron Bedra. If I understood the example I can create a defprotocol and then extend some Java class with the defprotocol?\nthere's nothing other than `gen-class` for extending abstract classes ATM\nSorry, my mistake. It's not an abstract class, it is an ordinary Java class that I need to extend somehow in Clojure (just checked the library source code).\ndoesn't matter, you just can't extend classes at all other than with `gen-class`\n<@Nannette> <@Harris> it occurs to me that you may be using \u201cextend\u201d in different senses?\nI'm talking about `class A extends B` :)\nits true that is less hassle to extend the class from java and then call it from clojure?\nI\u2019m guessing <@Nannette> was thinking in terms of ```\n(extend SomeJavaClass \n  SomeProtocol\n  {:foo some-custom-fn\n     ...})```\nBut perhaps not \u2014 an in any case it\u2019s important to understand what Java `extends` gives you that protocol `extend` does not.\nfor interop clojure's `extend` is useless\nprotocols are a concept that exists just in clojure, java doesn't know about them\nOk. Thanks for clarifying that for me. What I need is to somehow extend a Java base class to use a specific Java library in Clojure and I thought that there could be other ways to do it in Clojure than genclass which requires AOT.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "770",
    "text": "there's also proxy, which can extend a java class to new interfaces\n(or just extend a class by overriding some/all methods) - see also proxy-super\nIf genclass is the only option I have what's the best practice in a use case like I have (I need to extend a Java base class provided by a Java library to use that library in Clojure). Should I create the extended Java classes using Java instead and put the class files in the Clojure class path or something like that? That way I would avoid AOT.\nyou don't need aot for proxy, the only problem with proxy is you get an auto-generated name\nextending a base class in java makes a new subclass, it doesn't alter the parent\nOk. I'm a bit confused. One Clojure expert says that genclass is the only option in my use case, and another Clojure expert says that I can use proxy as well. Well, I think I follow this roadmap: 1. I try proxy first. If it works I'm good. If not, then 2. I implement the extended classes in Java, put the Java classes somehow available for my Clojure app and use Java interop in Clojure to use those Java classes with the Java library.\n~is there some gotcha for abstract classes and proxy that I should know about?~ n/m it was clarified that this isn't about abstract classes anyway\n<@Nannette>, you can use `proxy` to create an instance of an (abstract or not) class, you just can't create a named class, that's what I meant, I wasn't very clear\nahh, so we agree\nOk. So, I can try to use proxy to create an \"extended class\" for that Java base class and then to use that proxy to interop with that Java library within Clojure. Good, I'll give it a try. Thanks everyone! I'll tell you later if I managed to use proxy like this.\nthe class is only implicitly created, proxy gives you an instance of that class, but yeah, this should work with most libs that require a class be extended\nwhere it doesn't work is if it needs the string name of a class that extends its base class (eg. quartz)\nas mentioned above, proxy gives you an instance, not a class\nYep. Now I understand. So, basically, my options are: genclass (with AOT - already tried this - works but causes issues with my repl workflow) or extend the classes with Java and use those Java classes in Clojure to interact with the Java library.\nI try the second way as instructed in that Leiningen document.\nAnyway, I'm really grateful for you helping me. Thanks!\nyou can get the class of a proxy object ```(cmd)user=&gt; (def c (proxy [clojure.lang.IFn] [] (invoke [] \"hi\")))\n#'user/c\n(cmd)user=&gt; (.newInstance (class c))\n#object[user.proxy$java.lang.Object$IFn$e81cd1ee 0x5b40ceb \"user.proxy$java.lang.Object$IFn$e81cd1ee@5b40ceb\"]```\nthe setDynamic method should work on the var\noh but binding wants symbols...\n```user=&gt; (with-local-vars [^:dynamic a 0] (push-thread-bindings {a 1}) @a)\n1```\nwhat's missing here is the finally clause that cleans up the push with (pop-thread-bindings)\ncool\nThanks, I really appreciate how you helped me.\nI went back over the special forms and noticed that the specification says that one parameter can be variadic, but it doesn't specify that it must be the last one: <https://clojure.org/reference/special_forms#fn>\nIt would have been an interesting way to capture first and last, I guess, with any number of arguments between.\nNot that `(last z)` is particularly hard.\n`(defn hello [x &amp; [y z]] (println x y z))`\nI think in the version <@Ali> imagined, y would suck up a variable number of items, and z would always be the last one\nYeah, exactly.\ndestructuring is implemented by the function `clojure.core/destructure`, and nothing stops you from implementing `fn+` that uses a modified destructure function\nbut destructure is a very tough nut of code\nTransduce could benefit from this. I think it has to modify it's docstring \n_Wasn't sure if this was beginner or not so put it in both, will remove once I get an answer on one ^^^_\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "771",
    "text": "I didn't do that well :slightly_smiling_face: : java.lang.ClassCastException: class simpleserver.util.azuregenclass.productgroup.proxy$com.microsoft.azure.storage.table.TableServiceEntity$ff19274a cannot be cast to class java.lang.Class...   I.e. I managed to create the proxy but when I tried to use the proxy with the Java library it blew.\nMaybe I'm trying my second option: create the extended classes using Java and use the java classes in Clojure to interact with the Java library. I found a document which suggests how to mix Java with a Clojure project using Leiningen: <https://github.com/technomancy/leiningen/blob/master/doc/MIXED_PROJECTS.md>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "772",
    "text": "Is it possible to `binding` a `with-local-var`?\nI\u2019m having trouble getting the macros to compose. Maybe I just need to push-thread-bindings explicitly?\nthanks\nright\nnoisesmith: you are the man. :slightly_smiling_face:  It worked:\n\n(def productgroup-proxy\n  (class (proxy [com.microsoft.azure.storage.table.TableServiceEntity]\n                               [])))\n... and using it:\n          table-query (TableQuery/from simpleserver.util.azuregenclass.productgroup/productgroup-proxy)\n=&gt; Worked.\nLet's see if I can create another proxy class, but this time I need to add some extra getters/setters.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "773",
    "text": "I never actually tried this before, but you're not allowed to do,\n\n```(defn hello [x &amp; y z] (println x y z))```\n\nAs it turns out\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "774",
    "text": "Is there a way to catch an error in a macro, and return the error I want rather than the error from the body?\n\nExample:\n```(defmacro describes [msg &amp; body]\n  `(try (do (println :start ~msg)\n          (let [ret# (do ~@body)]\n            (println :end ~msg)\n            ret#))\n     (catch Exception e# \n       (throw (Exception. (str \"The Error I want\"))))))```\nI\u2019m unexpectedly having to deal with Java 9 modules, and I feel like my grandma trying to use a mobile phone.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "775",
    "text": "ain't no fun\nDid I just post this at a bad time, late Sunday night, or is this simply not a good place to ask?\nThat\u2019s probably true, if I don\u2019t see anything for a while I guess I will open an issue against the read-me asking for an example.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "776",
    "text": "<@Alison> curious about your experiences with modules\nI think that pomegranate is not a very widely use lib, so it might be hard to find someone else who has run into this same issue\n<@Marlyn> Mostly I am hoping to ignore them, since Cursive will need to support Java 8 and Java 11 for the moment. I was trying to figure out how to get Gradle to co-operate but my problem is looking like a bug in the Gradle plugin I\u2019m using: <https://github.com/JetBrains/gradle-intellij-plugin/issues/374>\nSo with a bit of luck I can just continue in blissful ignorance for now. I previously worked with OSGi, and I have no desire to go back there.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "777",
    "text": "hey clojurians: quick: What's the best acronym for NON-REPL development?\n\nCECR - Compile Execute Crash Repeat?\nAny fun acronyms you guys are using?\n<@Tanesha> \"FOD\" file-oriented development\nMitigated by having a 'main' in each file.  That's multi-main file oriented development, MMFOD\nTrying to connect to a nrepl server with `lein repl :connect`. But facing an error\n```\nConnecting to nREPL at 127.0.0.1:50724\n       java.lang.ClassNotFoundException: nrepl.core\nclojure.lang.Compiler$CompilerException: java.lang.ClassNotFoundException: nrepl.core, compiling:(null:1:82)\n\nError loading namespace; falling back to user\n#object[clojure.lang.Namespace 0x6bee017d \"user\"]nil\n```\nMy favourite is FDD. Faith driven development. Hit enter with one hand, cross fingers in the other, and let entropy determine your ourse\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "778",
    "text": "if you have a decent compiler, your program never crashes, it all just works the first time around :stuck_out_tongue:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "779",
    "text": "I wonder when we will see a decent compiler...\nAlso see <https://github.com/weavejester/medley/blob/master/src/medley/core.cljc#L174>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "780",
    "text": "*course\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "781",
    "text": "I\u2019m stealing FDD forever, sorry, it\u2019s too good.\nGDD, Guardrail Driven Development, an alias for TDD. (From Simple Made Easy of course)\nfor accommodating side effects? It only seems to return the last argument\nthat\u2019s funny yes:\n```\ncljs.user=&gt; (def x (lazy-seq (println \"dude\") [1 2 3]))\n#'cljs.user/x\ncljs.user=&gt; x\ndude\n(1 2 3)\n```\nI like it\nyeah, all the examples I found only use it as single arity\nwell observed. you can add an example to clojuredocs if you want :wink:\nand isn't the above equivalent to\n```\n(def x (lazy-seq (do (println \"dude\") [1 2 3])))\n```\nyes, it is. basically lazy-seq takes the same as fn, which is always implicitly wrapped in a do\nyeah, but so is `(fn [] (println \"foo\") 1)` equivalent to `(fn [] (do (println \"foo\") 1))`, clojure implicitly wraps `do` in places where it's convenient\nhmm, that just seemed to me like a strange design decision for `lazy-seq`, for example the `for` macro doesn't have a implicit `do` block\nseems highly non-idiomatic to have side-effects inside lazy sequences\nagreed :)\ndoes lazy-seq have a guarantee that the side effects in the implicit do won't run twice?\nYes\nit guarantees that the next time the seq will be called, the cached result is returned, so I\u2019d say yes\nI was thinking of race-type conditions\neg. memoized functions can be called twice for the same arg in some situations\noh right\nlazy-seq has a synchronization barrier\nyeah, just found it: <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/LazySeq.java#L39>\ni assume it can still be chunked though?\nnot lazy-seq\nyou can build chunked seqs over a lazy-seq\nbut lazy seqs aren't chunked per se\nso if you `(take n ..` you can guarantee that n and only n side effects would be triggered?\nif `..` is a lazy seq that yield _only_ lazy seqs in its tail, yes\nn depends on how many args you used to create the lazy seq with of course\nbut you have no guarantee that'll happen\n```user=&gt; (first (lazy-seq (map println (range 3))))\n0\n1\n2\nnil```\nas opposed to e.g. ```user=&gt; (defn f [n] (lazy-seq (if (= 0 n) () (cons 1 (f (dec n))))))\n#'user/f\nuser=&gt; (first (lazy-seq (map println (f 3))))\n1\nnil```\nwhere each \"tail\" of the lazy-seq is a lazy-seq itself\nClojure does not make guarantees about how lazy lazy seqs are. If that is of critical importance to you (due to side effects or resource consumption), don't use lazy seqs.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "782",
    "text": "Just curious, does anyone know why `lazy-seq` takes a variable number of \"body\" arguments?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "783",
    "text": "Just wondering, what should I use?\nloop/recur or transducers\nBut my transducer is just going to consume a lazy sequence, no?\n<https://dev.clojure.org/jira/browse/CLJ-1906>\nloop/recur requires users to implement map/filter/reduce/etc themselves \na transducer can be used in multiple contexts, the input need not be lazy\nor even a ~sequence~ data structure\n<@Rosaline> I've been playing with that recently. I wasn't sure how collections played into this conservation. I did have to make modifications to the proposed functions there, so I should make a comment :)\nI haven't used anything on the ticket in anger other then the original unfold\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "784",
    "text": "I'm really struggling to setup emacs CIDER with clojurescript + clojure together.\nHappy to help in <#C0617A8PQ|cider>\nIt's a breeze with just clojure, but adding clojurescript seems to be difficult.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "785",
    "text": "what would the idiomatic approach be to the following problem. You have `n` threads and a single set. You require a function `(insert! coll val)` such that `insert` returns `true` if `val` was inserted into the collection by the calling thread and `false` if `val` is already contained in `coll`?\nwhile swap! can update the value, it seems that you need another atom to capture the success/failure state of the operation\nsounds like a good use for an atom and `compare-and-set!`\nThere's a swap-vals that returns the old value and you can check for the presence of what you added\nMore what you want then check and set which is overly strict it would seem\nAlthough I guess atoms are check and set either way under the hood\ncompare-and-set! is a building block for swap! and swap-vals!, but yeah, I forgot swap-vals! was there and it does precisely what you want\nthe atom isn't check-and-set, the compare-and-set! operation is (which every op that alters an atom other than reset! uses in some form)\nperfect, so just ```(defn foo [xs x]\n  (let [[old new] (swap-vals! xs conj x)]\n    (not= old new)))\n```\nthey all use the underlying compareAndSet method on AtomicReference <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Atom.java>\n<@Joette> yeah that should be it\na manual `compare-and-set!` would avoid a write if the value is present, so it should perform better\nwhere xs must be an atom containing a set\nexactly, or at least something conjable\nthe return value is much less interesting for anything but a set (or a map if the arg is another map or a map-entry I guess...)\nwas considering if multiple clients wanted to register a topic (anonymously) in the context of pub/sub. How do you you indicate that a publisher has successfully registered that topic? This approach relies on the publishers being well behaved. An alternative would be to call `(insert! m topic publisher)` and return  true if `topic` is a new key in the map\u2026\nthen you would also want to stop short if the topic key is already present instead of overwriting...\nso you'd likely want compare-and-set! for that\n(or a function that replicates compare-and-set! by not altering the input if the value has changed)\nI guess that custom function could have better key granularity and thus do fewer retries -- abort if any alteration has occured, vs. abort if this key exists\nHas anyone seen this error: \"java.lang.ExceptionInInitializerError\n        at clojure.main.&lt;clinit&gt;(main.java:20)\nCaused by: Syntax error compiling . at (ring/adapter/jetty.clj:28:9).\"\nI'm getting it when I run lein repl\nI'm surprised - that indicates that ring.adaptor.jetty has a syntax error, are you using an up to date version of ring and the ring jetty adapter?\nYes, it is a problem with figwheel-main\nIf I leave it out the error doesn't occur.\nthe error is in the ring jetty adapter which figwheel uses because it wants its own webserver\nSo what is the issue?\nWhy can't it have its own webserver\nit can, the problem is this version of the ring jetty adapter has a syntax error, which makes me assume it's an old version\nring jetty adapter is included in ring.\nI'll update though and see.\nNo I'm using ring \"1.7.1\"\nin that case clojure is claiming this is a syntax error, which is weird <https://github.com/ring-clojure/ring/blob/master/ring-jetty-adapter/src/ring/adapter/jetty.clj#L28>\nYes, it does seem strange.\nWhy does setting up my dev environment have to be so hard !!!!!\nanything happening in the compiler will report as a \"syntax error\" so that may be misleading you in this case\nIt's weird, all I added was figwheel and I staarted getting these erros.\n\"Syntax error compiling .\" just means it's an error being thrown out of one of the host expressions (field, method, etc)  calls\nNone\nThere's the full stacktrace.\nand that's probably happening while compiling, while loading the system via user.clj (which happens under the RT static initializer), which is the ExceptionInInitializer part\n```java.lang.ClassNotFoundException: org.eclipse.jetty.http.BadMessageException``` this is the real problem\n`Caused by: java.lang.ClassNotFoundException: org.eclipse.jetty.http.BadMessageException` is the real cause\nlooks like ring jetty adapter wants a version of jetty different from the one you are pulling in\nyou could check `lein deps :plugin-tree` for jetty version conflicts\nNothing there but does this mean anything?\n[refactor-nrepl \"2.4.0\"] -&gt; [nrepl \"0.4.4\"]\n overrides\n[cider/cider-nrepl \"0.19.0-SNAPSHOT\"] -&gt; [nrepl \"0.5.3\" :exclusions [org.clojure/clojure]]\nyou likely need `with-profile` to ensure it checks the profile that figwheel uses\nI forget how that's typically set up, but it will be evident in project.clj, something like `lein with-profile +figwheel deps :plugin-tree`\nSo removing: \"[com.bhauman/figwheel-main \"0.1.5\"]\" from my :dev dependencies fixes the error\nBut I see no conflicts even with my dev profile\nif you have the figwheel plugin it would likely be pulling that in already\nNo figwheel plugin\nbut figwheel probably changed significantly since I last used it :/\nI was trying to figure out figwheel + cider when everything broke\nanyway, if it's not a dep conflict, and figwheel is just pulling in a bad jetty version, that's just a bug, but you can work around it by explicitly asking for the version that has the class you need before the figwheel dep\nbe aware lein-figwheel and figwheel main are different and incompatible\nI should use figwheel main correct?\nI'm not using lein-figwheel\nI wrongly assumed that you were using `lein figwheel`, I haven't used cljs in about a year, sorry\nno problem\ndoes figwheel-main look at :cljs-build?\nSo I have clj source files in src-clj and cljs source files in src-cljs. I want run both a figwheel repl and a clojure repl and connect to both with CIDER. I'm trying to use figwheel-main but I'm running into a bunch of issues.\nI keep getting this error: [WARNING] No nREPL middleware descriptor in metadata of #'cider.piggieback/wrap-cljs-repl, see clojure.tools.middleware/set-descriptor!\nmaybe also ask in <#C0617A8PQ|cider> or <#C17JYSA3H|nrepl>\nIt works as a maven dependency\nI vaguely recall someone releasing something like the graph recently\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "786",
    "text": "is there a cljc library like plumatic\u2019s graph (<https://github.com/plumatic/plumbing>) ? Plumbing doesn\u2019t work with deps.edn because of cljx.\nEven if there wasn't cljx, it doesn't work as a git dependency because it doesn't have a deps.edn\ngood to know thanks. Are you aware of other libs that are easier to fork/change?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "787",
    "text": "are you running cursive?\nwhen you start up the repl you have give it a startup option that instruments it for cljs\nthat error (usually) means that you have tried to use a cljs repl on something that has not been instrumented for it\nCursive does not yet natively support this instrumentation for cljs\nbut if you are running from command line then its much easier ...\nultimately you need to stick something like ```-m nrepl.cmdline --middleware [cider.piggieback/wrap-cljs-repl] --interactive```\ninto your Clojure Java process\nits the details of what technology you use to get it there that might vary\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "788",
    "text": "hello... need an advice for which clojure server lib to use? ring, http-kit ....???? tks\nring usually means jetty, but ring is a spec that defines an interface between clojure code and a webserver, so there there are implementations of that spec (usually called an adapter) for a number of jvm webservers\nhttp-kit to some degree implements the ring spec even\njetty just happens to be kind of the default choice for ring because I believe it is the only adapter that is part of the ring project\nI like jetty too, and it supports all the cool stuff these days (http2, websockets), but a lot of that post-dates the ring spec, so the jetty ring adapter doesn't expose it in an easy to use way\nyou know if http-kit is abandonware?? i mean that because my background is in common-lisp and i really dont want to get all the jvm stuff for now... i started to use http-kit but i heard that it is now abandoned by the author... i know i can just \"plugin\" another server... but i really want to focus on the app and not the server per se\nbecause the http-kit implements the ring spec, you can actually switch between it and jetty pretty seamlessly, which if I recall we've done at work a few times (I mostly don't notice the switch), and I think we are using http-kit now\nsomething that I can't really put my finger on about http-kit makes me nervous, but we are using it at work and don't have problems with it\nI do have a (unreasonable?) soft spot for jetty\n<@Corine> Aleph is also a nice alternative to ring\naleph infact also implements the ring spec to some degree\naleph is a webserver and ring is an interface for connecting clojure code to webservers, they are not directly comparable things (apples and oranges)\n<https://github.com/ring-clojure/ring/blob/master/SPEC>\ntks <@Augusta> and <@Rosaline>\ni will stick with http-kit ....after knowing <@Rosaline> employer is using it!!!\ntks!!! :sunglasses:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "789",
    "text": "It also depends in if you need  to do async stuff, the official ring/jetty combo has some async apis but it can't really do non-blocking IO.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "790",
    "text": "this seems normal\nbut this surprised me\nIf the values in an `update` application are fns, it seems only the first one applies\nhuh\n<@Fredda> `update` only works on 1 key at a time, always\nbut the second thing is weird\noh, no it isn't\nit is weird, and it is not what I get locally\n```\nuser=&gt; {:b inc}\n{:b #object[clojure.core$inc 0x18fdb6cf \"clojure.core$inc@18fdb6cf\"]}\n```\nfor update-in and update, it works on a single thing, the rest args are for arguments\nWhy is it weird?\nalso\nWhat I wanted to do\n<@Rosaline> it is what I get locally, so I am confused :slightly_smiling_face:\nI copied and pasted the wrong thing out of the two examples\nhaha :smile:\nThe function `constantly` returns a function which takes any number of args\nanyway, ` (constantly 2)` is passed the arguments `inc`, `:b`, and `(constantly 1)`\nand the result is assoc'ed in under `:a` in the result\nwhich is why you get the wrong arity exception\nSorry, maybe my intentions got mixed up there. I wasn't actually trying to `inc` 2\nah okay\n`((:a (update {:a inc, :b inc} :a comp inc inc inc)) 38)`\nI get it now\nreturns 42\nooooh\n`:b` remains associated to `inc`\nI thought update expected key value pairs\nthe rest of the args are used as in `apply`\nupdate doesn't take multiple keys to update\njust one key, a function, and trailing args to the function\nright\nif only someone had documented the arguments somehow :)\nI've been banging my head against this one for over an hour now. I've tried using various libs for Reader/Writer to Input/OutputStream so that I can run an interactive process in the REPL against `*in*` and `*out*`, but I'm having mixed results. I don't see anything until I hit Ctrl-D.\n\nI want to be able to run this in any repl (socket or terminal, or maybe even nrepl).\nokay okay\nma' bad\nAm I hitting a fundamental limit that I don't understand?\nnrepl has a whole other thing going on\nSomehow I had the wrong contract for update in my head\nbasically for reading *in* to work in the nrepl the client has to have special support for it, and many clients implement it as a weird different thing\nnrepl does some stuff with in &amp; out, so may not apply. Going to circle round to that one. That's a bad thing to mention at this stage perhaps :smile: I'm more interested in terminal &amp; socket at this stage.\nhere's some things I tried: <https://gist.github.com/SevereOverfl0w/c4c8876f20d6ce1772a77e2cc216d814>\ndoesn't make sense to me\noh, 'cause of `assoc`, that's why\nyou do have to be careful to flush when dealing with `*out*`\nnote that `*in*` is not  exactly  stdin\nstdin in Java  is typically an inputstream.  The REPL wraps a reader around that.\ninputstream being byte-oriented, reader being char-oriented\nah, WriterOutputStream requires a flag to flush immediately!\nor just call flush\nI don't know when writing has happened, that's down to the process.\ngotcha\nautoflush is probably a lot slower but interactively, prob don't care\nthat didn't solve it anyway :disappointed:\nah, removing the piping of `*in*` fixed it. I guess I'm blocking _some_ thread.\nNo idea what one.\nI wonder if it is because .available always returns 0, so you can't do the equivalent of a select on the input/output to decide what to do\nThat would be a blocking limitation for this idea\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "791",
    "text": "I'm trying to remove some reflection from my code\nthere is a `(.set foo inst)` that works via reflection but I can't find WHY it works (inst is java.util.Date, there is no mention to java.util.Date in this lib)\nThere is some way to debug this? some way to \"print the reflection result\"\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "792",
    "text": "What is the type of foo?\nAfter I did cider jack in, I installed more deps. Looks like cider doesn\u2019t know the new packages installed, is there some way to refresh cider?\nyou can do `cider-restart`. it will shutdown the REPL process and start it again\nso you will lose the state of your application\n<@Meagan> is that the only way?\nthere are libraries out there to help with this, but in general yes\nadding new dependencies means you need to add new things to the class path. in general, class path are determined before you start the JVM process clojure lives in\nI\u2019ve heard of people using pomegranate: <https://github.com/cemerick/pomegranate>\nbut I\u2019ve never used it\nif you\u2019re using `clj` + deps.edn, I\u2019ve heard of some branch that has an `add-lib` function but I don\u2019t know how well it works right now\n<@Meagan> nice. Thanks\n<https://clojure.org/guides/deps_and_cli>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "793",
    "text": "there isn\u2019t a way to reload?\nI am trying to find some lib which can do this\n<@Guy> If you're using `deps.edn`, see <https://github.com/seancorfield/dot-clojure/blob/master/deps.edn#L103-L116> which shows how to use the `add-lib` branch.\n<@Celestine> I was looking up what deps is.\nMaybe ask in <#C03RZMDSH|datomic> ?\ngonna do that\nIf you're using Leiningen, there's no simple way to add deps once you're up and running (you'd have to use Pomegranate I think). Boot lets you add deps to a running REPL easily. CLI/`deps.edn` lets you add deps if you depend on that branch of `tools.deps`.\nNice.\n<@Celestine> Is there some way to install packages from emacs? I have seen clj refactor but it doesn\u2019t work with cider 21(which is the default now)\nNo idea. I stopped using Emacs years ago, sorry.\nAnd by \"install packages\" I assume you mean \"add Clojure dependencies\"?\nOr do you mean \"install Emacs packages\"?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "794",
    "text": "i've got an api endpoint for listing entities. entities are many, so they are returned paginated, sorted by a given attribute. this is backed by datomic. how do i achieve in datomic what in sql would be a order by + limit + offset?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "795",
    "text": "<@Janean> you may consider <https://github.com/leonoel/injure/>\nsame goals as plumatic graph, slightly different approach\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "796",
    "text": "That's the library I was thinking of!\nYou might ask in <#C099W16KZ|emacs> or <#C0617A8PQ|cider>.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "797",
    "text": "Hi guys\nis there something like lisp trace in clojure?\nlike, <https://clojure.github.io/tools.trace/#clojure.tools.trace/trace>\nwhat is best performant approach for iterating over a list by two elements what i have in mind is:\n(map vector l (rest l))\n<@Toccara> `(partition 2 1 [1 2 3 4])`\nshould be faster than map solution for big l ?\ndon\u2019t know, run a benchmark :slightly_smiling_face:\nokay thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "798",
    "text": "hi all... anyone knows if hiccup can indent the generate html????\n<@Corine> nope.  <https://github.com/weavejester/hiccup/issues/27>\n<@Marlyn> tks! gonna see that!\nI'm a big fan of `clojure.test/are`. Occasionally for each \"iteration\" I'd need the `:each` fixtures to be re-run.\n\nWondering if anyone has solved that problem, maybe with a custom `are`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "799",
    "text": "you can always re-parse it with something else if you really want indentation\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "800",
    "text": "is there cljs/cljc map-like datastructure that allows lookups by key OR value?\nmakes me wonder if anyone has implemented bimap on top of map (not precisely this, but very close)\ncgrand has a version of bimap in this mailing list thread <https://groups.google.com/forum/#!topic/clojure/L1GiqSyQVVg>\nyes, unfortunately CLJ only\nahh, I missed that detail - seems like you could do something similar portably, at the cost of performance of course\nyou could also use two maps\ncgrand's version is \"just\" a deftype which uses two maps internally\nthe tricky part is concisely implementing the N interfaces / methods for a map\nI mean, if you know you\u2019re searching with the key or the val, that would make the most sense probably\nwhat about `{:a :duplicate :b :duplicate}`. what would bimap lookup return for `:duplicate`?\n<@Becki> I'm pretty sure a bimap should remove :a :duplicate if :b :duplicate is inserted\n```java 11\nclojure 1.10\nlein 2.9.1\nnrepl 0.6.0```\nis the solution to set a jvm flag to ignore it?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "801",
    "text": "<https://clojurians.slack.com/archives/C03S1KBA2/p1552584346974800>\nyup that\u2019s a bit of work. I might start with a few function wrappers to get it to work initially\nWhat would it return when you lookup avalue?\nquite surprised that among the numerous datastructures in the eco-system, bi-map isn\u2019t one of them\n<@Marlyn> the key\nthe idea to be able to do lookups in either direction, from k to v or v to k\nJust assoc both directions\nalso, if you need this only once and not in the datastructure there's set/invert-keys\n<@Becki> depends when the entries were added. one would overwrite the key for the other\ni see\nI could be wrong though...\nmy use case is to keep it around / mutate / do many lookups\n&gt; A bimap (or \"bidirectional map\") is a map that preserves the uniqueness of its values as well as that of its keys.\n<https://google.github.io/guava/releases/21.0/api/docs/com/google/common/collect/BiMap.html>\nah, and you can ask for the inverse.\nohhh cool datastructure, what would be a usecase for a bimap\nthings that link two unique entities - eg. customer / assigned seat\nas long as it's guaranteed 1:1\nwhat am I overlooking when I say that in that case you can just use two maps?\nyou need to keep them in sync, and it would be nice to be able to use assoc / get etc.\nbut yeah, easy to implement with two maps and some clever dissoc logic to keep in sync\n(I just found a bimap in rust, it uses two hash/tree maps apparantly)\n{:a 1 :c 1} would be invalid, because chair 1 would be allocated twice right\nits tough without mutation. since the mutable one lets you ask for the inverse, but if you're immutable only one \"direction\" can use assoc,\n<@Clarine> exactly, your assoc implementation would need to guarantee that wouldn't occur\n`{:a :b :b :c}`. how do you lookup `:b` in vals or in keys\nthat's another invalid state you'd need to avoid\nbut that is valid\nor at least in the mutable one\noh, I might misunderstand\nsince you can specify which direction you are using and use the same underlying data\nso it appears the guava version has a method to access the \"reversed\" view\nso you can get on the canonical or reversed view (backed by each of the two underlying maps of course)\n<@Becki> for real world your case is eg. secret santa or spouse, defined as 1:1 but the same item can appear on both sides\nanytime K and V intersect\nany tips on cleaning up these warnings on repl startup?\n```\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by mranderson049.orchard.v0v4v0.dynapath.v0v2v5.dynapat\nh.defaults$eval39549$fn__39550 to method java.net.URLClassLoader.addURL(java.net.URL)\nWARNING: Please consider reporting this to the maintainers of mranderson049.orchard.v0v4v0\n.dynapath.v0v2v5.dynapath.defaults$eval39549$fn__39550\nWARNING: Use --illegal-access=warn to enable warnings of further illegal reflective access\n operations\nWARNING: All illegal access operations will be denied in a future release\n```\n\ni've been searching my deps. not sure what `mranderson049.orchard.v0v4v0.dynapath` is but seems related to <https://github.com/clojure-emacs/orchard/issues/2>\nthere's a jvm arg for the newer jvm versions that overrides the new module protection rules, and if I understand correctly that's what makes this reflection illegal now\nbingo <@Dann> <@Becki> <https://github.com/CharlesHD/chulper/blob/99c35dffb5e725a5dba08da5a70e053f9fb4bde4/src/chulper/bimap.cljc>\nic. i wonder if the reflection is a necessary part of whatever lib that's causing it or if there is a better alternative\nso it seems this one cannot express the secret sant problem\nit\u2019s missing a protocol and impl for reverse lookup\nthe problem is that the jvm lies, it says these things are accessible, but they aren't. There's parts of clojure that can trigger this too.\nit's written such that one of the maps contains all keys and vals as keys, which is why it can't express secret-santa, unlike guava's version of bimap\nbut that also means that there's no distinct \"reverse lookup\" - lookup is just lookup\nis there some way to figure out what are the exported fns from a package?\nI'd need to know a lot more about mranderson (the lib that is causing this problem) to offer any other suggestion\nand it would mean fixing mranderson\nyeah i can't figure out what it is or where it's coming from. maybe `cider-nrepl`\nit doesn't show up in `lein deps :tree` (at least by anything with `anderson`)\nconfirmed: it goes away if i remove `cider-nrepl` from my profiles.clj\nby package do you mean namespace, dependency, ...\n(jvm has a concept of packages but most don't contain anything implementing clojure.lang.IFn)\n<@Dann> external lib/dependency  like compojure\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "802",
    "text": "```\nuser&gt; (bimap :a :b :b :c)\n{:a :b, :b :c}\nuser&gt; (get *1 :b)\n:c\nuser&gt; (get (inverse *2) :b)\n:a\n```\nlooks good actually\nlibraries are just namespaces that are distributed together, there is no language level feature that distinguishes them as a group\neverything def'ed in a namespace is available when you load the namespace (there is a way to flag a def as private, but meh)\n```\n#:foo{:bar 1}\n=&gt; #:foo{:bar 1}\n(def foo {:bar 1})\n=&gt; #'user/foo\n#:bar foo ;; how can I achieve it in the simplest way for first level keywords in the map? Something native in Clojure?\n```\nyou have to traverse the map and re-create the keys with the namespace\nok, so there is no simple way with native solution. Thank you for confirmation.\n#:foo{:bar 1} is syntax that works at read time, you are looking for something to happen at runtime\nat read time, the symbol foo is the symbol foo\nsure, just wanted to be sure if I didn\u2019t miss something\nClojure sometimes come with crazy simple solutions with blow up my mind :slightly_smiling_face:\nprobably not recommended, but when hiredman said his last sentence, I though of this:\n```\ncljs.user=&gt; (cljs.reader/read-string (str \"#:foo{:bar 1}\"))\n#:foo{:bar 1}\n```\nor, you know, use clojure.walk\ntoo dirty\n```\ncljs.user=&gt; (defn foo-ize [m] (cljs.reader/read-string (str \"#:foo\" m)))\n#'cljs.user/foo-ize\ncljs.user=&gt; (foo-ize {:bar 1})\n#:foo{:bar 1}\n```\nyes, dirty, agree :slightly_smiling_face:\n<@Rosaline> so, I do ```(require '[selmer :as s])``` how do i iterate on `s`?\nho you are saying there isn\u2019t a way\n<@Isa> something like `explicate` might work <https://github.com/clojure/spec-alpha2/blob/master/src/main/clojure/clojure/spec_alpha2.clj#L334>\n<@Guy> do you mean something like:\n```\ncljs.user=&gt; (require '[planck.http :as p])\ncljs.user=&gt; (ns-publics 'planck.http)\n{put #'planck.http/put, get #'planck.http/get, patch #'planck.http/patch, delete #'planck.http/delete, head #'planck.http/head, post #'planck.http/post}\n```\nThanks. In the meantime I got an idea how to solve my issue on form level in UI :slightly_smiling_face:\nI could imagine something more general that lists definitions in all files in some dep, I don't know if there's a tool that does that though\n<@Guy> I don\u2019t know the answer but you can see how clojure editors make hints for functions in namespace when you are writing `alias/my-fuction`\nat least it should be accessible in REPL\nhi <@Maren> :slightly_smiling_face:\n<@Clarine> ah yes nice\n`(keyword (name :foo/bar))` no 1 function to get `:bar`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "803",
    "text": "`(comp name keyword)`\n1 function :slightly_smiling_face:\nor backwards. `(comp keyword name)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "804",
    "text": "it is coming from cider-nrepl. mr.anderson isn't causing the issue, it's just a tool for inlining other deps, dynapath in this case.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "805",
    "text": "I am playing with sierras-component. My system component starts web server, db etc. how does compojure handler gets access to db connection instance?\nAnyone have luck getting Log4j2 JsonLayout working that actually outputs JSON in the `message` field?\n<@Guy> What I typically do is to have middleware that accepts the system component and puts it into the Ring `req`uest as `:app/system` for example, then each handler function can access it as `(-&gt; req :app/system :database)` or something similar.\n(and then I wrap that middleware around my routes as part of the Ring setup in the web server startup)\nok, so, you are creating a higher order fn\nThat's what middleware is.\n`(defn add-system [handler system] (fn [req] (handler (assoc req :app/system system))))`\nThen `(-&gt; routes (add-system system) (other-middleware))` is how you build the app that you pass to the web server.\nSo I typically have an \"application\" component and a separate \"webserver\" component that has \"application\" as a dependency, so that when it `start`s, it can pass in the (already started) application component.\nDoes that make sense?\ngot it.\nI tend to have a component for each \"subsystem\" that needs to be \"started\". So I'll have a DB component that builds a pooled datasource from the db-spec, and that DB component would be a dependency of the app component and so on.\nThat's where the real power of Component comes in.\nI was looking at the example here: <http://www.luminusweb.net/docs/migrations.html>\n\nsearch for `*db*`\nwhat they are doing there is, they are pinning the instance to a dynamic var and importing that everywhere.\none of the main points of component is not doing that\nright.\nI second <@Celestine>\u2019s approach by adding it via a middleware. We do something like this in yada too.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "806",
    "text": "<@Tiffanie> got any more info?\nWhat does the config look like, what is it named, does it not work locally, when jarred up, what is in the message field if anything, etc. etc.\nis there any way to reify dynamically?\n```\n(defn my-reifier [classname]\n(fn [f]\n  (reify classname\n        (invoke [args] (apply f args))))\n```\nThere's a code that I'm trying to get running with AOT, and there's some series of eval that's preventing it from happening.\nyou could do that in a macro\n```(defmacro my-reifier [classname f] `(reify ...))```\nyou likely need eval to retain the same functional abstraction\nyes the args as args# gensym doesn't seem to work well. I think all in all I'll abandon this idea. This is the clj-native library I'm trying to hack, and there are already much better ways to interact with jna than with this eval soup.\nlike loading library into a gen-interface, seems to make the symbols predictable, rather that converting the name of the classname from string to a variable.\nperhaps even all files of a given extension while we're at it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "807",
    "text": "is this supposed to be happening?\n```\n(ns myns\n  (:require\n    [clojure.core.match :as m]\n    [clojure.core.match.regex])\n\n(let [a {:a :b}]\n  (m/match [a]\n    [{:a #\"arst.*\"}] 1\n    :else 2))\nExecution error (ClassCastException) at myns/eval13037 (form-init1389493813015240111.clj:2).\nclojure.lang.Keyword cannot be cast to java.lang.CharSequence\n```\nshouldn't this, like, just not match?\n<@Chester> you didn\u2019t close your `ns` form\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "808",
    "text": "anybody got a nice way of listing all files in a given classpath directory?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "809",
    "text": "My base code is all here:\n<https://github.com/defndaines/argo>\nBut I\u2019ve been having trouble finding examples of people actually using this feature, even in Java. When I look at the original PR, it only tests passing a simple value (integer) and not a more complex map-structure or anything.\n<https://clojuredocs.org/clojure.core/file-seq>\nclasspath implies resources, not files\nand I don't think there is any such support for resources\nin the most general sense\nbut if you can detect the resource is really a dir, then you can fall back to files\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "810",
    "text": "<@Bart> if you search for \"list resources java\" there's examples of listing every resource visible inside a given classpath entry - for a folder on disk that corresponds to files in a directory\nof course for physical directories there's also file-seq (and now I see that was already suggested)\nyeah, if i can just get the directory i can use file-seq\nbut how to easily get the (context independent) root of your classpath?\nthere's no such thing\na class path is a list of roots\n```user=&gt; (System/getProperty \"java.class.path\")\n\"src:/Users/justin.smith/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar:/Users/justin.smith/.m2/repository/org/clojure/spec.alpha/0.2.176/spec.alpha-0.2.176.jar:/Users/justin.smith/.m2/repository/org/clojure/core.specs.alpha/0.2.44/core.specs.alpha-0.2.44.jar\"```\ni mean, the problem i'm trying to solve is letting people stuff some resources in a given directory that gets built into the JAR\nand the app should just read the contents of that directory\nOK, than you want to list all resources under that directory, which should be a child of a classpath entry (your root jar for example)\nand i'd prefer to avoid having hardcoded references to the files in the code as well (though that would fix the problem since you would then know the full path)\nthen if you have them put it in \"foo/\", ask the classpath resource finders for all resources under \"foo/\"\nI think I have a clojure translation of that java code that lists resources under a path, one moment...\nand i'd have to implement this resource finder myself? it doesn't seem to exist in the standard libraries\nright, strangely enough it isn't in any lib I know of, but it's only four lines of code or so\nNone\nthat's the code i have right now, which obviously works just fine locally\nwhat i need next is a context agnostic path for the server environment\nyeah, the code for listing things inside resources is trickier\ni'm looking at this now <https://stackoverflow.com/questions/3923129/get-a-list-of-resources-from-classpath-directory>, which was maybe what you referred to initially\n<https://stackoverflow.com/a/22363700> - clojure solution\nlooks like you can hand it a jar file and list things inside, from there you could filter, and given that classpath will have all your visible jars, you can iterate and check them all...\nusing mapv like that is real gross\nhm. feels weird that this would be such an ... intractable problem\nyou can't list resources on the classpath\nclasspath is not even the starting point to this story\nyou can only access resource via classloaders, classloaders provide a key/value like interface\nthe JVM has a hierarchy of classloaders, each of which can find resources based on arbitrary means\nthe classpath is just a list of roots for the system classloader to use\nand can be made up of dirs, jars, etc by  default\nbut the provided URLClassloader can handle anything  you can make a URL for, which is itself a protocol open for extension\nthe general solution is to build some kind of manifest file with a well known name that contains a list of the resources\nyes, that was the \"fallback\" solution I was thinking of. listing the resources so i can just map them as `(io/resource)`\nthe whole class loading / resource loading mechanism is intentionally built to not require enumerability -  it's like a map (keyed by resource name), not a seq.\notherwise i'd have to iterate through the entire classpath until I hit the directory i'm looking for\nwhich leads to stuff like this\nthere are various classpath scanning libraries out there\nNone\nstuff like <https://github.com/classgraph/classgraph>\n^^ that has functions to do what you're asking for example (all  resources that match a path)\ngood list of alternatives in the readme too\nbut it isn't a general solution, because not all classloaders can be scanned\nyep\nbut if it's stuff \"on the classpath\", that's a pretty good answer\nyeah, like, if you are backed in to a corner by something else, I would look at that, but if you are building something from scratch as a library, code that other people might consume, it is far better not to rely on something like that, because at some point it will break for someone (maybe you)\n```(defprotocol XMLParsable\n  (parse-xml [this]))\n\n\n(extend-protocol XMLParsable\n  (Class/forName \"[B\")\n  (xml-parse [xml-bytes] (with-open [r (io/reader xml-bytes)] (xml/parse r)))\n\n  File\n  (xml-parse [xml-file] (with-open [r (io/reader xml-file)] (xml/parse r)))\n\n  String\n  (xml-parse [xml-str] (xml/parse-str xml-str)))```\n\nwhy doesn\u2019t this work?  `Don't know how to create ISeq from: java.lang.Character`\nI know i\u2019ve used `Class/forName` to extend a protocol before\nyou have to def it, if I recall\nsure\nit has been a while\nI tried that and I get `Unable to resolve classname: Bytes`\nI just came across  this SO answer that says it has to be the first class <https://stackoverflow.com/questions/13924842/extend-clojure-protocol-to-a-primitive-array>\nwhich seems to work, but i\u2019m assuming that\u2019s a bug? or at least I don\u2019t understand why it would have to be first\nI don't think classes for array types were considered when the extend-protocol macro was written, and it just happens to work in certain ways, and people have just limped along on that\nthere's a ticket for t his\nwe've come back to it  a few times but never gotten it over the  line\n<https://dev.clojure.org/jira/browse/CLJ-1381>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "811",
    "text": "like so? `(def Bytes (Class/forName \"[B\"))`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "812",
    "text": "hey everyone, i\u2019m interested in creating a data structure that is identical to a map, except behaves well with keys that are raw bytes.\nis this feasible in clojure? what would it entail?\nwhy would a map misbehave if a key were a byte?\nbased on my last experiment, equality doesn\u2019t seem to work as i would expect\nso merging two maps containing a key `(.getBytes \"foo\")` results in two keys\noh you mean arrays of bytes\nso i\u2019ve written a function called `bytes=`\nyeah\nyeah, those use pointer equality by default\nright. so all i really need to do is change how equality is handled. \u201call\u201d\nthe easy option is to use vec on the keys (it's cheap on an array and safe if you don't mutate)\nfor Clojure maps,  you can't change that\nbut there are various Java map implementations that can use identity or custom equality for  maps\nguava has lots of options for this\nsorry, could you elaborate?\ncool, so then in theory i could wrap it as an associative collection to use with `merge`, for example\n(vec b) makes a vector, it's cheap as it reuses the array, it has value rather than pointer equality\noh, that\u2019s super cool, did not know that\nthanks\nand there's a method to get the backing array back out - also should be safe if you don't touch the vector other than comparison / reading\nor  rather, you can just use IdentityHashMap  in the  jdk <https://docs.oracle.com/javase/8/docs/api/java/util/IdentityHashMap.html>\nI think if you made two IdentityHashMaps and called `merge` on them in Clojure, it would do what you want\nwith any of the options mentioned, using value semantics plus any change to the array would have bad and wrong results\nwho would do such a monstrous thing :)\nwhy, me of course\nwell, I guess you really want custom equality, not identity\nright\nso  IdentityHashMap isn't what you want\nbut same principle - if you can  find  a Java map impl with custom equality, then that's good  enough\nyou will need to be careful not t o mix those  with Clojure maps  though  or you're likely to have surprising things happen (like using Clojure equality semantics)\nI think value equality and treating the keys as immutable is called for here, so why not just call vec on each byte-array before insertion / lookup?\nyeah, i think that\u2019s looking like my best option\nalthough all this leads me to think i\u2019ve made a wrong turn in my design choices to this point. so maybe i\u2019ll have another look at that\nall the same, appreciate the help\nbytebuffer has slightly better behavior has a key\n<https://docs.oracle.com/javase/7/docs/api/java/nio/ByteBuffer.html#equals(java.lang.Object)>\ndepend on what you want raw bytes for, you might look at `(vector-of :byte)`\nis there a replacement for clj-refactor? It is painful to keep typing the namespace. I couldn\u2019t get clj-refactor to work with cider 21 and clojure 1.10\nhm, interesting\nI haven't used gvec much, I kind of find the ease of interop as a regular clojure vector alarming, I might accidentally lose my precious specialized vector of bytes\n<https://github.com/hiredman/vbuffer> is a thing that I kind of doubt is very useful in its self, but it might be some interesting wreckage to pick through\nvector-of might be interesting thing to try here.  note that getting values from the vector will incur boxing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "813",
    "text": "can i require a namespace from a string, outside of the `ns` form? like, a message queue says \u201chandle this task with function `f` in namespace `a.b.c`\u201d - my mq handler says `(require '[\"a.b.c\" :as executor])` or somesuch?\n<@Marylin> Yes, you can turn the string into a symbol and call the `require` function.\n```user=&gt; (require [(symbol \"clojure.set\") :as 'q])\nnil\nuser=&gt; (q/union #{1} #{2})\n#{1 2}```\nawesome, thanks <@Celestine> - my personal clojurians slack guardian angel\nI just have no life :slightly_smiling_face:\nha\nwhile i\u2019m here, does anyone know of a task queue implementation any higher level than carmine message queue?\nlike, priorities on the tasks, etc\nCarmine is just a wrapper for Redis, isn't it?\nyep, a little on top\nMaybe you'd want RabbitMQ and priority queues? Not sure if Langohr supports that aspect of RMQ?\ni mean, it has a message queue support\nYeah, Redis is pretty basic tho', right?\nit is - there\u2019s also this: <https://github.com/b-ryan/farmhand> , but it looks moderately abandoned (the webpage doesn\u2019t work anymore\u2026)\n<https://github.com/gabfl/redis-priority-queue>\nSeems to implement priority queues on Redis via the Lua scripting support...?\nah! maybe i could use that - good idea\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "814",
    "text": "any good links for maintained and working   larger-than-memory collections library for clojure ? (something that would keep maps or vectors efficiently on disk (as a temporary storage, not a full blown database))  i found spicerack   (and an apparently abandoned clj-mapdb)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "815",
    "text": "that description reminds me of datascript, might worth checking out?\nIf you just need key/value rocksdb might be a good fit, <https://github.com/kotyo/clj-rocksdb> is recent, haven't used it myself.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "816",
    "text": "If performance it not (so) important you could also just write/read files. That's what I did for my current project. Also because With those files it's easy to generate the html files statically.\nrocksdb sort of falls into the same category as spicerack ... if you look under the hood your uberjar jumps by over 10 megabytes in size and you get native extensions ontop :disappointed:\ndatascript is also not in the direction i'm looking at\nIf the size of the application  is important writing/reading files might not be bad, you don't need any dependencies. It's to bad for the JVM we don't have something like Closure, removing/stripping unused stuff. Using a native image kind of does it, but kan be hard to get it to work.\nhandling files on their own is not a problem for me, but i was hoping to skip a set of excess code :slightly_smiling_face:\nit would feel nice to just say something\n`(let [persistent-map (make-a-file-backed-transient-map \"datafile.dat\")] ... )`  for writing things and in a similar way just say that hey, that file there contains a vector of data that i want to process, let's fly through it (obviously with lazy or iterator style functions only) :slightly_smiling_face:\nis there a way of getting the test results from `run-tests` as data rather than it's printing a report to stdout?\n<@Epifania> yes! this is what cider does, there's a multi-method you can rebind. I think it's clojure.test/report\nYou could do this:\n\n```\n(let [events (atom [])]\n  (binding [clojure.test/report (fn [evt] (swap! events conj evt))\n    (run-tests \u2026)\n    @events)))\n```\nI just store/get them as .edn but keeping them all in memory maks it real simple, cause I just need to read on start up, and then I only need a file-sync to keep the files in sync.\n```(defn- keys-&gt;path\n  [k key]\n  (str (k file-map) (name key) \".edn\"))\n\n(defn- keys-&gt;map\n  \"fetches the vector from a part, and turns is into a map\"\n  [k key]\n  (let [full-path (keys-&gt;path k key)\n        [spec vec-values] (edn/read-string (slurp full-path))]\n    [spec (de-ser-vector spec vec-values)]))\n\n(defn- add-reference\n  [k map reference]\n  (let [reference-map (keys-&gt;map k reference)]\n    (assoc map reference reference-map)))\n\n(defn- init-data\n  \"get the initial data from the file system\"\n  [k]\n  (let [[spec-summary map-summary] (keys-&gt;map k :summary)\n        data {:summary [spec-summary map-summary]}]\n    (reduce (partial add-reference k) data (keys (second (first map-summary))))))```\nI also so some stuff with spec to make the data more compact\nAnother trick that's in there is that all the names/keys of the map are in the summary file.\nYou could for example keep the keys in memory, so you now before trying to read if a file exists. And keep a weak reference to it, so when it's required soon after it's still in memory.\nworks perfectly! :thumbsup:\nThis might clearify how it's working. Each folder is 'linked' to an atom to keep the content of the folder in sync. The names of the files are the keys in the map of the atom.\nI didn't even test it :see_no_evil: \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "817",
    "text": "oh, sweet. Thanks a lot <@Sixta>\n<@Sixta> well, to be honest, you missed a `]` in the binding :wink: But in general, the idea works well! :slightly_smiling_face:\nphew! at least the world is right again :slightly_smiling_face:\nmy usage pattern will be indexing through a few gigabytes of data at time, storing the results into about 1 million subbuckets before i store it back to the real storage in batched form from the subbuckets ... it's a long story :smile:\nat first i thought i could open the million files around in the local filesystem but giving it some thought this is probably a terrible idea :slightly_smiling_face: from both the fopen&amp;close overhead and also the local filesystem may not agree\n<@Sheron> you might take a look at <http://immutant.org/documentation/current/apidoc/guide-caching.html#h3205>\n\nI have used it outside of a container for larger than memory storage.\no_O but that depends on some fancy jboss infinispan that claims to need 55mb in it's smaller form :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "818",
    "text": "Hi, I have a pipeline that batch processes files (using threadpool for concurrence) and I would like to make an interface that shows the progress for each file individually using <https://github.com/ptaoussanis/sente>\nHowever given that the different files are processed in parallel, is it ok to share the socket across threads and have them all send stuff separately?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "819",
    "text": "Can I have something like `dir` but for function internals or let macro ? E.g. is it possible to extract symbols from inside fn?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "820",
    "text": "You can if you use an analyzer like tools.analyzer on the source\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "821",
    "text": "what is a simple clojure rest server?\n<@Jenni> You might want to look at Ring + Compojure API.\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "822",
    "text": "```(reduce (fn [x [k v]]\n                               (str (name k) \":\" v)) \"foo\" {:id 1 :name \"foo\"})``` =&gt; \u201cname:foo\u201d\nI was expecting this to return \u201cfooid:1name:foo\u201d\n```(reduce (fn [x y]\n                               (str x y)) \"foo\" '(:id 1 :name \"foo\"))``` =&gt; \u201cfoo:id1:namefoo\u201d as expected\ncould someone explain me what is the difference here?\none is a seq and another is a hashmap but both can be iterated\nin the first one, you never add on to your accumulator `x`\nso it is just returning the value of the last iteration `(str (name k) \":\" v)`\nthe reducing fn doesn\u2019t get the accumulator as argument, how do I concat?\nhow is that different for the second one?\nyour reducing function does get the accumulator\n`(fn [x [k v]] ...`\nx is the accumulator, `[k v]` is the map entry\nah, I though I was destructing\nyou are destructuring the map entry\nit helps to give your variables more explicit names\n```\n(fn [accumulator [key value]]\n  (str (name key) : value))\n```\nwhen reduce is used on a hashmap, it passes the MapEntry value as the second argument which can be destructured as `[key value]`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "823",
    "text": "then there's reduce-kv\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "824",
    "text": "Hi\ni am using re-natal readme to generate new app (all deps install, and verified that they work)\n\nafter doing init i got\n```Creating Leiningen project\nUpdating Leiningen project\nCreating React Native skeleton.\nCreating Re-Natal config\nCompiling ClojureScript\nCommand failed: lein prod-build\n```\n\nso i read <https://github.com/drapanjanas/re-natal/issues/108>\nand ran it manually but got this\n\n```Could not transfer artifact re-frame:re-frame:jar:0.10.6 from/to central (<https://repo1.maven.org/maven2/>): Connect to  [localhost/127.0.0.1] failed: Connection refused (Connection refused)\nCould not transfer artifact re-frame:re-frame:jar:0.10.6 from/to clojars (<https://repo.clojars.org/>): Connect to  [localhost/127.0.0.1] failed: Connection refused (Connection refused)\nCould not transfer artifact re-frame:re-frame:pom:0.10.6 from/to central (<https://repo1.maven.org/maven2/>): Connect to  [localhost/127.0.0.1] failed: Connection refused (Connection refused)\nThis could be due to a typo in :dependencies, file system permissions, or network issues.\nIf you are behind a proxy, try setting the 'http_proxy' environment variable```\n\ni am not behind proxy i asked in <#C0E1SN0NM|cljsrn> but they said to look for help here\n\nedit: SOLVED <https://github.com/technomancy/leiningen/issues/2368#issuecomment-451581572>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "825",
    "text": "for the various `rand` functions like `rand-int`, is it possible to set the seed value somehow?\nlooking through the source of clojure, I find no relevant mentions of `seed`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "826",
    "text": "<https://dev.clojure.org/jira/browse/CLJ-1452>\nVote!\nNone\nprobably what really happened =&gt;\n```&gt; (defrecord ConversionError [key val exception])\n&gt; (def -q- (-&gt;ConversionError 1 2 3))\n\n&gt; (defrecord ConversionError [key val exception])\n&gt; (def -w- (-&gt;ConversionError 1 2 3))\n\n&gt; (type -q-)\nConversionError\n\n&gt; (type -w-)\nConversionError\n\n&gt; (instance? ConversionError -q-)\nfalse\n\n&gt; (instance? ConversionError -w-)\ntrue```\nas in the defrecords end up making different types with the same name?\nif they get eval'ed twice\nyep, you have 2 types with the same name ..   and 2 instances; the 1st from the 1st type and the 2nd from the 2nd type   .. the type name being equal is throwing you off      `(= (class -q-) (class -w-)) =&gt; false`\nguess I'll rethink what I'm doing there\nthat is also the case\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "827",
    "text": "Hello, all!\nWhen using <#CEA3C7UG0|jackdaw> `peek` to process the messages in a `KStream`,  is there any way to get message's offset?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "828",
    "text": "how am I supposed to concat two transient vectors?\nIIRC reduce using conj! with 1st vector as `val` arg to reduce  ....actually you might be right; it's not clear how one reduce with a transient as `coll` arg .. hmmm x)\nah i see, thanks!\n`(persistent! (reduce conj! (transient [0 1]) (persistent! (transient [2 3]))))`    works of course, if you're ok with the early call to persistent! there (for the 2nd vector)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "829",
    "text": "Any better method to select keys only in `spec`, than macro?\n```\n(s/def ::person (s/keys :req [::first-name ::last-name ::email]\n                        :opt [::phone]))\n```\n\nSo I want to validate it, but also I want to remove all other keys, which are not specified like `::phone2`, but pass `::phone`, `::first-name` \u2026\n\nI see developers did solutions like here <https://stackoverflow.com/questions/47781002/reuse-structure-definition-code-from-clojure-spec-keys>\n\nDo we have common solution (function, library) which can I use? I can write my own macro to use also namespaced keys, but maybe we already have solution, which I can use :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "830",
    "text": "the general wisdom is that this is an antipattern\nI wouldn\u2019t say that, just that it\u2019s not well supported yet\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "831",
    "text": "anyone know why `(bit-test 1 32)` returns false on the JVM and true in CLJS? estoy confundido\u2026\noff by one\u2026 31 is the highest bit, not 32. good to know that still happens to me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "832",
    "text": "Q: when using fn indirection for development I can use #\u2018get-person and this allows me to reload get-person from the repl - awesome!\nBut what if get-person is the result of a higher-order fn call and I still want that indirection? i.e. I want #\u2019(get-person-factory)\nIs this possible?\nyou can call a var as is\ni.e.    `(let [my-fn #'+] (my-fn 3 2))` =&gt; 5      ...maybe answers your Q ..          or maybe you want to go from + to #'+     ?   ..i don't think that's something people generally do, tho i might be wrong\nI want to return an anonymous fn that behaves as if it was not anonymous and referenced via #'\nthe more I describe this, the more it seems impossible.\nI had an idea. maybe I can have the anon fn call a #' ref. I\u2019ll try that\n<@Phylicia> not sure if I understand your issue, but maybe this help\n```\n(with-redefs [email/send-email! #(-&gt;&gt; (:body %2)\n                                            (re-seq #\"(?s)https://.*(/authentication/confirm-email/[a-z0-9-]+)\")\n                                            (first)\n                                            (second)\n                                            (reset! email-confirm-url))]\n        (is (= 204 (-&gt; (request-auth {:action \"sign-up\"\n                                      :user/email \"<mailto:foo@example.com|foo@example.com>\"\n                                      :user/password \"qwaszx\"})\n                       (get-status)))\n            \"pass\"))\n```\n`with-redefs` can change `fn` to different one under the hood\nHi there\nI don't think there is a straightforward way to do it\nBut here is a not straightforward way:\nWhen you configure the server, pass a configurator to server/start `{:io.pedestal.http/container-options {:context-configurator f}`\n\nIn the function, grab the Server, map over .getConnectors, mapcat over .getConnectionFactories, filter the instances of HttpConnectorFactory, get their HttpConfiguration, and setRequestHeaderSize() on it\n\n<https://github.com/pedestal/pedestal/blob/master/jetty/src/io/pedestal/http/jetty.clj#L113-L125>\nideally pedestal could add an option here to expose that config\nYou must be using JWTs :slightly_smiling_face:\nyes, with ACL included, doesn't scale well... we moved away from it, but still supporting the old cases\nthanks, I'll try this out\n<@Marlyn> it worked, thank you so much!\nand for anyone looking to do it, this is the fn to configure the context:\n```(defn set-request-header-size [x max-size]\n  (-&gt;&gt; x\n       (.getServer)\n       (.getConnectors)\n       (mapcat #(.getConnectionFactories %))\n       (filter #(instance? org.eclipse.jetty.server.HttpConnectionFactory %))\n       (run! (fn [factory]\n               (-&gt; factory\n                   (.getHttpConfiguration)\n                   (.setRequestHeaderSize max-size))))))```\ncool\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "833",
    "text": "If I want to create a size-bounded list of size 50 I could just\n```(take 50 (cons new-value size-bounded-list))```\nevery time I need to add an element\nbut I am wondering if there is a tidier/more idiomatic way\n<https://github.com/clj-commons/ring-buffer>\nis the thing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "834",
    "text": "hello, using pedestal, I'm having a problem because I have to deal with big auth tokens, they are causing trouble because the header goes over the size limit (431 (Request Header Fields Too Large)), does someone know how can I increase the max header size for local running pedestal server?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "835",
    "text": "Did the URL for the Slack archives change? I'm not able to browse the archives via <https://clojurians-log.clojureverse.org/>\nI guess it was taken offline due to some privacy concerns\nThanks <@Clarine> I hope something like it comes up again :disappointed: that was a good resource for documentation :slightly_smiling_face:\nThe current suggestion is to move the community to Zulip because there all history is preserved. In fact, they are also saving these Slack chats there via some bot.\nOh cool, I've heard about Zulip, are the messages here being replicated there currently?\n<@Emmie> the slack-archive can be found at <https://clojurians.zulipchat.com/#narrow/stream/180378-slack-archive>\nThank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "836",
    "text": "Not that I would actually do this, but if one were to leave an NREPL port open on a public instance, has anyone heard of hackers scanning for that port and if so, would they know to use a Clojure interpreter and would it be possible to pull in all the namespaces, functions, etc ?\nwith regard to the last, yes all state in the Clojure runtime is globally accessible. repl access should be controlled.\n<@Fairy> make sure the port isn't listening on all interfaces, and make people use SSH forwarding to reach it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "837",
    "text": "Is anyone attending Clojure North in Toronto? If so, you can meet the author of <https://www.metosin.fi/blog/faster-and-friendlier-routing-with-reitit030>. He's in a group that created Tilakone Finite State Machine, too.\nI\u2019m also looking forward to the Juxt talk, introducing a new DB. Lots of exciting stuff in April I guess. Have fun over there!\nI have a set of scored pairs as below and would like to identify the set of pairs that produce the highest score in total:\n```\n{#{0 1} 0.98,\n #{0 3} 0.62,\n #{1 3} 0.71,\n #{1 2} 0.01,\n #{0 2} 0.89,\n #{3 2} 0.16}\n```\nI assume this is a solved problem but am not sure what I should be searching for. If anyone could point me in the right direction that would be very appreciated :slightly_smiling_face: (guess maybe I should have gone to uni after all :smile:)\ncant you just sort the map and get the first two?\nI might be understanding the problem wrong, but this returns:\n```\n(apply max-key val sp)\n[#{0 1} 0.98]\n```\n<@Danyell> <@Clarine> probably doing a bad job at explaining :smile: The list above contains all permutations(?) of 4 items. I want to find the two pairs that produce the highest total value. N might be higher than 4 :slightly_smiling_face:\nor is this like x0 + x1 = 0.98, x0 + x3 = 0.62, \u2026 find max(xi + xj)?\nfrom the above it\u2019s not entirely clear what the equation is, it could also be x0*x1, etc.?\n<https://www.wolframalpha.com/input/?i=solve+x0+%2B+x1+%3D+0.98,+x0+%2B+x3+%3D+0.62,+x1+%2B+x3+%3D+0.71>\nYea I am not quite getting it then\nthe score is `score(pair)`. In the example above the optimal solution would be `[#{1 3} #{0 2}]` because the sum for the score of these pairs is the maximum that can be achieved\nah, so that fact that these are sets of numbers is irrelevant?\nthen yes, you can simply sort and take the first two\nbut there has to be more to it, as #{0 1} had a high score and was ruled out\n<@Clarine> sorting won't work because it might return an invalid result like `[#{1 3} #{0 1}]`\nah so the sets have to be distinct\nOK so you can only use a number once in the key sets?\nyes\nand there is no way to calculate the individual contribution of each id?\nno, they are always in relation to another\nnice Advent of Code puzzle :wink:\nGlad to hear this is half-entertaining :smile:\n```\n(s/def ::address (s/keys :req-un [::recipient ::country ::postal-code ::city ::street]\n                         :opt-un [::house-nr ::flat-nr ::phone]))\n```\nI want to write macro. How can I get by `::address` all keys from it?\nIs it possible to read this from macro definition?\n<@Isa> does it need to be a macro? this might be easier to extract from the spec registry\n<@Cira> I think you must enumerate all partitions of #{1 2 3 4} in subsets of two and then calculate the score of the partition and then take the max\nwhatever, If I can to id in fn, I can do it in macro. But how to get this data from `s/def`?\ntake a look at `get-spec` (I think that's what it's called)\n```\n(s/get-spec ::address)\n=&gt;\n#object[clojure.spec.alpha$map_spec_impl$reify__1997 0x29848e69 \"clojure.spec.alpha$map_spec_impl$reify__1997@29848e69\"]\n```\nis there any way to call getBasis() on a record without knowing the type of the record? I\u2019m trying this, but it\u2019s giving me an exception:\n```(defrecord TestComposite [a b])\n(let [x (TestComposite. \"HI\" 1)]\n  (.getBasis ^clojure.lang.IRecord x))\n```\nhmm how to get keys from it?\n```IllegalArgumentException No matching method found: getBasis for class user.TestComposite  clojure.lang.Reflector.invokeMatchingMethod (Reflector.java:53)\n```\nis the error\nis getBasis something you call on the instance, or the class?\nit\u2019s on the class\nthan call it on the class of x\nbut i get a different exception when I try to call it on (class x)\nI think `(meta (get-spec ,,,))` or something like that\n`(s/form (s/get-spec ::address))`\nit's static ```(cmd)user=&gt; (defrecord Foo [a b])\nuser.Foo\n(cmd)user=&gt; (Foo/getBasis)\n[a b]\n(ins)user=&gt; (. Foo getBasis)\n[a b]\n```\nI found it\n:beers:\nsounds good\nuse (. (class x) getBasis)\nDo you know if this registry I can read only during run app or I can do it during compilation?\nWell, probably I have to try :slightly_smiling_face:\n```(let [x (TestComposite. \"HI\" 1)]\n  (. (class x) getBasis))```\nthat fails with `IllegalArgumentException No matching field found: getBasis for class java.lang.Class  clojure.lang.Reflector.getInstanceField (Reflector.java:271)`\nalso fails if I put getBasis in parens, as a method call\nI wonder why it works with the class as a literal arg but not as the result of an expression\nit's a method call as is, adding parens doesn't change that\nIt's available at runtime\nyeah, i\u2019m a bit confused about this aspect of java interop. Normally these things work just fine\noh, getBasis isn't on IRecord <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/IRecord.java>\nwe need the interface that actually has that method\nI can only think of the brute force solution here\n<@Clarine> the issue with generating all possible 2-pair combinations of `#{1 2 3 4}` is that with just 10 items the combinations explode\nYou want to two points that do not intersect in neither the x or y direction\nI mean maybe this is just the wrong approach to the problem :smile:\nif the inputs lead to a combinatorial explosion, you either need to consume them lazily and hold the two highest found so far, or you need some other property of the index / scoring function that helps you narrow the space\n<@Hae> I found where getBasis is added to the class: it's done while emitting bytecode, separately for each record / type rather than using an interface <https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/jvm/clojure/lang/Compiler.java#L8210>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "838",
    "text": "<@Cira> quick REPL session:\n```\n$ clj -Sdeps '{:deps {org.clojure/math.combinatorics {:mvn/version \"RELEASE\"}}}'\nClojure 1.10.0\nuser=&gt; (require '[clojure.math.combinatorics :as mc])\nnil\nuser=&gt; (mc/permutations (range 4))\n([0 1 2 3] [0 1 3 2] [0 2 1 3] [0 2 3 1] [0 3 1 2] [0 3 2 1] [1 0 2 3] [1 0 3 2] [1 2 0 3] [1 2 3 0] [1 3 0 2] [1 3 2 0] [2 0 1 3] [2 0 3 1] [2 1 0 3] [2 1 3 0] [2 3 0 1] [2 3 1 0] [3 0 1 2] [3 0 2 1] [3 1 0 2] [3 1 2 0] [3 2 0 1] [3 2 1 0])\n(def scores {#{0 1} 0.98,\n #{0 3} 0.62,\n #{1 3} 0.71,\n #{1 2} 0.01,\n #{0 2} 0.89,\n #{3 2} 0.16})\n#'user/scores\nuser=&gt; (def perms (mc/permutations (range 4)))\n#'user/perms\n(user=&gt; (defn score [perm] (-&gt;&gt; perm (partition 2) (map set) (map scores)))\n#'user/score\nuser=&gt; (score [0 1 2 3])\n(0.98 0.16)\nuser=&gt; (defn score [perm] (-&gt;&gt; perm (partition 2) (map set) (map scores) (reduce +)))\n#'user/score\nuser=&gt; (score [0 1 2 3])\n1.14\nuser=&gt; (apply max-key score perms)\n[3 1 2 0]\nuser=&gt;\n```\nyou might leverage the fact that `[0 1 2 3]` and `[1 0 2 3]` is the same score so you can filter those out first.\nbut with n = 10 you might still have a problem, I could test \u2026\nif you have some test input for n = 10 :slightly_smiling_face:\n<@Clarine> 1s\nNone\n<@Clarine> 6s for 10 items, I'll need to do this for maybe 50-hundreds\nso I guess a new approach might be needed :smile:\nif you search the clojure repo for `getBasis` I think one of the things that pops up is how to find that method - it requires explicit reflection rather than clojure's implicit reflection (?)\nwhat does this data represent?\nI'll tell you over a beer some time :smile:\nfun :slightly_smiling_face: I mean, is this the real data or just some mock data?\nit's a real problem and real data in that the numbers represent some kind of IDs\nthe above code is the real data?\nI guess you don't need all permutations\nJust distinct ones\n<@Fredda> this?\n&gt; you might leverage the fact that `[0 1 2 3]` and `[1 0 2 3]` is the same score so you can filter those out first.\nright, just don't produce them\nthat\u2019s even better. I couldn\u2019t find the right function for that yet\nsubsets-of-2\u2026 or something\n`(combinations (range 4) 2)`\nI mean `(partition-into-subsets-of-2 #{1 2 3 4}) =&gt; [[#{1 2} #{3 4}] [#{1 3} #{2 4}] ...]` etc.\nyeah, I see that. I\u2019m assuming that\u2019s why my reflection calls are all failing, but I don\u2019t quite understand 100% why. I\u2019m going to try a slightly modified approach to my problem, since I want to avoid reflection anyway.  I appreciate the help though, thank you.\n<@Clarine> <@Dann> <@Danyell> I think this might be the \"proper solution\": <https://en.wikipedia.org/wiki/Blossom_algorithm>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "839",
    "text": "<@Dann> I see, thanks for the help.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "840",
    "text": "how are people using rebl? using something like this? <https://github.com/DaveWM/nrepl-rebl>\n(i haven't used it yet. just starting to figure out how)\nthanks i'll try that next. `nrepl-rebl` was erroring out\ni did manage to get a rebl launched but when i eval from vim-fireplace it doesn't auto show up in REBL. guessing that's what the middleware will help with :slightly_smiling_face:\ninteresting\nBut, yes, the nrebl middleware should help you with automatically sending values to REBL as they are evaluated in nREPL.\nwill find out soon :slightly_smiling_face:\nfunny you popped up i was just reading your post <@Celestine> <http://corfield.org/blog/2018/12/03/datafy-nav/> :slightly_smiling_face:\n(I don't \"inspect\" every value but for anything complex that I want to be able to drill into and explore, REBL is great)\ni'm guessing if i have as nrepl middleware i won't have the choice - everything will show up\nwhich might be fine. not sure yet\nThat's my understanding, yes.\nThere's a <#CEFN9UP8R|rebl> channel here if you have more detailed questions...\noh, thanks. i missed that\n...especially about using the middleware.\nworks great. eval results show up in vim like usual and *also* shows up in REBL!\nnow to learn how to use this thing :slightly_smiling_face:\nyetibot weather response\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "841",
    "text": "<https://github.com/RickMoynihan/nrebl.middleware>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "842",
    "text": "I use REBL all the time but I start a Socket REPL (via JVM options) and I connect my editor to that (Atom/Chlorine) so I avoid nREPL. Chlorine has support for \"inspect\" as well as \"eval\" -- the latter is just regular eval-in-REPL but the former additionally sends the form and the result to REBL (via `cognitect.rebl/submit`) so values show up in the browse/view panes.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "843",
    "text": "Is it possible to use sente with the hot reload of compojure?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "844",
    "text": "<@Clarine> Another option is k-combinations. I use k-combinations in meander to generate the search space used find to all possible pattern matches for set and map patterns containing variable keys: <https://gist.github.com/noprompt/6a4624a81908baf60263dcd4efeda4d8>\nNote, this solution requires realizing the input collection (it counts). In practice that hasn\u2019t bit me because the collections I\u2019m counting are cheap to count e.g. sets and maps.\n<@Diamond> I think your `k-combinations` is the same as math combinatorics\u2018 `combinations` when you supply a second arg?\n<@Cira> no because my version has a different interpretation of the word \u201cunique\u201d. That version will give you unique selections via a `distinct` view of the input collection, my version doesn\u2019t do that. It yields all the selections even if they produce duplicates. In my case, doing it that way ensures a full survey of the search space. Apart from that, I think they will also have different space and performance profiles depending on the context.\nI also notice now that the combinatorics solution also realizes the input up front.\nAnd here I was berating myself. :smile:\nI see.\n<@Belia> clojure definitely supports java 11, I wrote cljfx in it :slightly_smiling_face: Join <#CGHHJNENB|cljfx>!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "845",
    "text": "Does Clojure support Java 11 now? like reflection? I want to use JavaFX through library `cljfx` which has minimum Java 11 requirement.\nif there is a clojure wrapper for a library which requires Java 11\nI would assume support is there\n<@Roslyn> Thanks for your work!! I like it very much. After I switched Java version to 11, then I just runned `re-find.fx` which rely on `cljfx`. It works. BTW, I got an error in output: `Reflection warning, cljfx/fx/table_cell.clj:33:11 - call to method updateItem on javafx.scene.control.TableCell can't be resolved (no such method).` I think it should be cljfx issue. Do I need to post an issue on GitHub?\nI use command\n```\nclj -Sdeps \"{:deps                   {MageMasher/re-find.fx                      {:git/url \\\"<https://github.com/MageMasher/re-find.fx\\>\"                       :sha \\\"b29bde3519f7632b63eb71415943bf8a7cfa1462\\\"}}}\" \\    -m re-find.fx\n```\nI tested some of my usually used libraries, some libraries still have problem on Java 11. But I decide to switch to Java 11 now. I will report issue on library repo.\nYeah, it's a cljfx problem, I put reflection warnings to not lose on performance, but using proxies with proxy-super generates them. I should disable these warning in proxy-super calls. Please open an issue!\n<@Roslyn> Ok. I will add a new issue on GitHub :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "846",
    "text": "a clojure design question. Assume I have a server side function which, when called, will make a (potentially large) number of async http requests, process the responses and return a value based on the responses. Requests form a tree in that a returned request, depending on the returned data, might lead to more requests. Let\u2019s further assume both the time for request completion and the time to process a completed request is non-negligible. Clojure has a lot of async primitives, promise, future, channels, async pipelines, pmap, etc etc. What primitives would you choose for a scenario like this?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "847",
    "text": "how is performance of `map` compared to `mapv`, especially on larger data?\ni've heard claims that `mapv` is much faster than map, at least in the \"core\" case of `mapv f coll`\n<@Diamond> Nice! Still k-combinations doesn\u2019t yield all ways to partition a collection into 2-sized subsets. If you call `(k-combinations [1 2 3 4] 2)` you still have to figure that part out yourself\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "848",
    "text": "I'd benchmark it.\nBut, the major difference is mapv is eager, and map is lazy\nYou said the response processing is non negligible? That means it is CPU heavy? Or just doing a bunch of IO?\nBasically, you need to see. Is there any.two things you could do concurrently?\nand for n = 50 this will still explode :slightly_smiling_face:\nalso it yields `[1 2] [2 1] ...` which are duplicates in <@Cira>\u2019s problem\nThanks, I'll have a look at it today later when I'll be home\nyeah I certainly want to do both querying and processing in parallel\nI think I\u2019m opting for just using promises, makes things simple. Less control than say async pipelines, but I think the clarity is worth it in this case\nI mean, can you? Like is there a case where the next thing to do needs the answer to multiple prior requests?\nHum, alright. I'm not tottally following, but promises are just a way to deliver a value between two places, threads normally. So they could work if your async http requests can deliver them on result. Otherwise you will probably need future instead.\ncan I use <https://github.com/clojure/tools.analyzer.jvm> to analyze just one file from a project without loading an entire project on the classpath?\nit seems like tools.analyzer.jvm is meant to be run in process and isn\u2019t that suitable to build a static linter with maybe?\nis there a way to make something like this work?\n```\n(-&gt;&gt; (ana.jvm/analyze '(ns foo (:require [bar :as b])))\n       (ana.jvm/analyze '(b/func 1)))\n```\nI guess it really needs a runtime for macro-expansion\n<@Clarine> there's `analyze-ns` but yes, that needs runtime evaluation\nwe could do without evaluation if clojure had clearly defined evaluation stages (a la CL or racket) , but alas, it's not the situation we are in\nI was thinking of making a simple linter that gives a warning when you use def inside def. But I think I can do this just on the literal s-expressions maybe\nmakes sense\nI never know what to think of those kinds of approach because of `(def def let)` kinds of thing (okay, less likely for this specific kind). It would be useful to have a way to know what a symbol resolves to in a file. If it's a local, that's fine too.\nwell for `def` in particular that's a bit easier since the only valid value of `x` in `(x new-var init)` is a _literal_ `def` (modulo macros)\nuse case: personally I use def inside defn for debugging and my linter gives me an overview of where to remove these before committing.\nbut linters don't have to be 100% accurate so it's fine\nIt's also useful for doing analysis of function calls. Who calls what &amp; where. Using analyzer for that causes macro-expansion, so it would appear that you never once refer to clojure.core/ns\nthe analyzer keeps track of macroexpansions\noh, I didn't see that in the output. How can I perform mappings to the original?\nThat's a little ambiguous. How can I list things in the original only?\nI guess that's impossible without macro-expansion to some level :thinking_face: Because macros can make symbols special, so you have to track where they end up, and what they end up being used for?\nyou can't really perform mappings\n```user=&gt; (defmacro m1 [] `(m2))\n#'user/m1\nuser=&gt; (defmacro m2 [] 1)\n#'user/m2\nuser=&gt; (select-keys (analyze `(m1)) [:val :raw-forms])\n{:val 1, :raw-forms ((user/m1) (user/m2))}```\noh, that's cool. How did I miss that :thinking_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "849",
    "text": "no\neach response will result in one answer, the function returns a collection of answers\nbut each response can in addition to an answer also result in further requests, so it\u2019s a \u201cdraining\u201d kind of process\u2026but I think promises will be good enough here\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "850",
    "text": "is there any visual tools to aid reading clojure/tools.trace output?\nsome visualizer or similar\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "851",
    "text": "Can someone help me understand the behavior of `sequence` when passed an xform and multiple collections?\nI really don't understand what the documentation is getting at.\n&gt;returns a lazy sequence of applications of\n&gt;the transform to the items in coll(s), i.e. to the set of first\n&gt;items of each coll, followed by the set of second\n&gt;items in each coll, until any one of the colls is exhausted.  Any\n&gt;remaining items in other colls are ignored. The transform should accept\n&gt;number-of-colls arguments\n\nexample behavior that I dont understand at all\n```\n  (sequence (comp (map inc) (map inc) (map inc)) [1 2] [-1 -2] [0.1 0.2])\n=&gt; (4 5)\n  (sequence (comp (map inc) (map inc) (map inc)) [1 2] [-1 -2] [0.1 0.2 0.3])\n=&gt; (4 5)\n  (sequence (comp (map inc) (map inc) (map inc)) [1 2 3] [-1 -2 -3] [0.1 0.2 0.3])\n=&gt; (4 5 6)\n```\nwhich part of the doc are you not understanding?\nI think it\u2019s analogous to `map` with multiple seqs:\n```\n(sequence (comp (map vector)) [1 2] [-1 -2] [0.1 0.2])\n;; =&gt; ([1 -1 0.1] [2 -2 0.2])\n```\nthose examples you pasted make no sense and are not valid, I have no idea how you got those results\n```user=&gt; (sequence (comp (map inc) (map inc) (map inc)) [1 2] [-1 -2] [0.1 0.2])\nExecution error (ArityException) at user/eval9 (REPL:1).\nWrong number of args (3) passed to: clojure.core/inc```\nuh, well, I ran them in clojurescript, so thats probably how.\nthis is what should be happening, because you're trying to `(inc 1 -1 0.1)`\nlol, clojurescript will chew on anything\nah right, clojurescript doesn't have strong arity checks\nthat\u2019s because JavaScript\u2026\nso in cljs `(inc 1 -1 0.1)` is 2 instead of an arityexception\nwhich is what was confusing you I guess\nright, yeah, thats exactly it\nI see, I see.  okay, this is awesome, I get it now.  Thank you guys SO much.\nmaybe I should ask that in the cljs channel...\nno, it's a transducer specific thing (the part in the docs)\nI'm referring to the fact that, despite what the documentation seems to imply, the sequence appears to be of type LazySeq.   So, I guess I'm asking if that LazySeq is special and works incrementally behind the scenes, or is it really just a LazySeq in clojurescript\ni've got this java method\n```public int put(int row, int col, double... data) {```\nhow do i call it from clojure?\ni tried `(.put a 1 1 (into-array Double [2.0]))` but it says `No matching method put found taking 3 args`\nseems to also be of type LazySeq in clojure.  guess its just fancy under the hood\nYou might <http://need.to|need.to> type hint\nThe ints\n`double...` is a varargs argument, which in the jvm is an array of &lt;type&gt;\nAlso I would try using `double-array` instead of into-array. In case it matters that it is a primitive double array\nhere, double is the primitive double, not the boxed Double\nso you need to use `double-array`\noh, `(.put a 1 1 (double-array [2.0]))` works\nyep\nthank you, sir\nnp\nthank you\n<https://clojure.org/guides/faq#varargs> is missing the primitive aspect so I'll update that\n&gt; sequence\nfunction\nUsage: (sequence coll)\n       (sequence xform coll)\n       (sequence xform coll &amp; colls)\nCoerces coll to a (possibly empty) sequence, if it is not already\none. Will not force a lazy seq. (sequence nil) yields (), When a\ntransducer is supplied, returns a lazy sequence of applications of\nthe transform to the items in coll(s), i.e. to the set of first\nitems of each coll, followed by the set of second\nitems in each coll, until any one of the colls is exhausted.  Any\nremaining items in other colls are ignored. The transform should accept\nnumber-of-colls arguments\nThe doc mentions lazy-seq it seems\nI think those docs are just saying that, e.g,  `(sequence (map inc [1 2 3]))` will not force realize the map operation like a `doall` would\nYa, I admit that part you highlighted in bold is confusing.\nBut sequence will not force realize a lazySeq as well\nSo I fail to see what is different about the transducer usage\nyeah \u00af\\_(\u30c4)_/\u00af\nthe docs seem to suggest that the actual process of realizing a sequence is incremental, meaning it only computes one element at a time (which would be different from lazyseqs which realize in chunks)\nYa, but, somehow I doubt that :yum:\nhahaha\n<@Jasmine> any thoughts?\nIf its just a lazySeq of applying xf to each element. That lazySeq would behave like any other I'd guess\nsorry, what's the question?\nIs this another clojurescript specific thing?\n<https://clojure.org/reference/transducers#_sequence>\n&gt; The resulting sequence elements are incrementally computed. These sequences will consume input incrementally as needed and fully realize intermediate operations. This behavior *differs from the equivalent operations on lazy sequences*.\n\n```\n(type (sequence (comp (map inc) (map inc) (map inc)) [1]))\n=&gt; cljs.core/LazySeq\n```\nno, same in Clojure\nno, that part we know now\nthe question is:\nSorry, shouldn't have included the first bit \nWhat.differs about the transducer sequence over the normal one? What's that part in bold referring too?\n`sequence` returns a value of type `LazySeq`, the docs say that the behavior of sequence differs from equivelant operations on lazy sequences.   Is the LazySeq returned by sequence actually realizing values differently (i.e. incrementally rather than in chunks)\nit's what it says - \"These sequences will consume input incrementally as needed and fully realize intermediate operations. \"\nlazy seqs are fully lazy in their intermediate operations too\nso  you  could  have a nested operation that creates an infinite sequence for example and just take some of i t\nthe transducer equivalent will never return\nright, but the question is the difference between lazy seqs and sequence\nnot sequence and transduce\nare you talking about concepts or specific function names?\nI think an example would help me. Or, what do we mean here by intermediate operations ?\n`(sequence (comp (map inc) (remove even?)) (range 10000))`\nit's  easier to get with an expanding op\n`(-&gt;&gt; (range 5) (mapcat #(range (+ 100 %))))`\nwill  create an output lazy sequence of 510 values\n100 +  101 + 102 + 103 + 104 vals\n`(take 5 (-&gt;&gt; (range 5) (mapcat #(range (+ 100 %)))))` can make and return just 5 values\n(ignoring chunking  for the moment)\n`(take 5 (sequence (mapcat #(range (+ 100 %)) (range 5))))` will return the same result\nbut must fully realize the first intermediate chunk of 100 values\nlazy seqs are ok with an arbitrarily (infinitely) long intermediate sequence, the transducer equivalent is not\n...wait, wouldn't taking 5 just realize the lazyseq value, which would then emit 5 values lazily?\nthe result production model is different -  lazy  seqs are a fully \"pull\" driven  model where values are produced when needed (again, ignoring the wrinkle of chunking)\nbecause range is lazy, right?\n`sequence` with a  transducer is pull  on the  outside level, but the transducer \"push\" model  inside\nyes, range is lazy\nconsider `(take 5 (-&gt;&gt; (range 5) (mapcat (constantly (range)))))`\nso, sequence is a lazyseq of lazyseqs, so if I take 5, wouldnt it only realize 5, because it would realize the first value, which is a lazyseq value, and then would consume 5 values from that?\nthat concatenates five infinite sequences\nignoring chunking, yes it only realizes what it is being asked to produce\n`(take 5 (sequence (mapcat (constantly (range))) (range 5)))` will never return because it will attempt to fully  realize the  first intermediate result (which is  infinite)\nwell how about that.  Thank you!  thats extremely helpful!\nand that's  what the docstring is trying  to say: \"The resulting sequence elements are incrementally computed. These sequences will consume input incrementally as needed and fully realize intermediate operations. This behavior differs from the equivalent operations on lazy sequences.\"\n\"incrementally computed\" because still lazy, but avoiding the word \"lazy\"  b/c it's different than lazy sequences\nstill implemented by LazySeq but backed by transducer iteration instead\nyeah, that distinction is crucial.  thank you so much.  that probably would have gotten me good\nit's rare to actually need the `sequence` function at all. most things that are being used to produce  the initial collection are seqable and the consumers are calling `seq` on it automatically, so things  plumb together  automatically without needing this\nwhen you bring chunking back into the discussion, does `sequence` have the performance benefit of fewer intermediate values for long chains of operations?\nim working in lambda so I'm trying to optimize on memory efficiency\nHum, I get it. But I need to take some time to internalize it :rolling_on_the_floor_laughing:\nthere are two levels here - the top level is lazy seq, unchunked, will be computed as needed\nthe  lower level is a transducer stack and will depend on what you're doing\ngenerally yes, but depends a bit\ndepends what the source collection is, whether it's a seq, whether it's chunked, etc. and also what you do with the output\nright, yeah.  If the sequence being realized is an infinite sequence, its obviously not going to be more memory efficient\nno :)\nwhether or not you plan to use the full result is important.\nand some tension between \"memory efficient over time\" vs \"minimizing overall work\"\nI take it lazyseqs supply the latter in most cases?\nlazy seqs  generally being better at the former and transducers on the latter\noh, how about that\ntransducers avoid all intermediate seq caching so do less overall work (and consume less overall memory)\nbut they do it at one time\nahhhhh\nrather than  smeared over consumption\nOk, I think it clicked. Each element is processed eagerly. Because the pipeline is a transducer. And sequence lazily applies the xf to each element. But the application of xf is eager. It's just that sequence will wait till you need the next element before applying xf to it. So its only lazy at the first level. And that level is unchunked as well.\nright\nseqs and transducers are both useful models  in different circumstances. `sequence` with transducers is  kind  of a mix\nyou could `map identity` over the top  to get chunking at that level\nAs it happens, three minutes later I discover that I was missing something. Oh well :slightly_smiling_face:\nhaha! thats interesting\nchunking is its own set of tradeoffs from amortization\nless memory and faster than unchunked  at the expense of less laziness\nand less control\nI think I had never really thought about nested lazy seq before. It seems like the nested lazynes only makes sense in a cat scenario no?\nOtherwise, taking the next element requires full realization of the sequence in it as well \nHum... or I guess that might be due to me printing the result. It would juat take a lazySeq I'm guessing.\nonly  really matters in an  expanding  intermediate op, `mapcat` being  the canonical example\nbut even things that collect and  report can be  affected, like `group-by`\n`partition`, `dedupe`, etc\nRight I see. Anytime where in theory, taking the next doesn't need everything in the next element to realize.\nyeah\nIts kind of mind boggling a bit hehe\nfortunately, the majority of time it doesn't  matter :)\n`(first (last (take 3 (-&gt;&gt; (range 5) (map #(map (fn[a] (println a) (inc a)) (range %)))))))`\nHaha, its amazing to see.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "852",
    "text": "Is this another clojurescript specific thing?\n<https://clojure.org/reference/transducers#_sequence>\n&gt; The resulting sequence elements are incrementally computed. These sequences will consume input incrementally as needed and fully realize intermediate operations. This behavior *differs from the equivalent operations on lazy sequences*.\n\n```\n(type (sequence (comp (map inc) (map inc) (map inc)) [1]))\n=&gt; cljs.core/LazySeq\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "853",
    "text": "Hey, question with Lacinia, if I have a field such that\n```:xs {:type (list :x)\n     :resolve :my-resolver/get-xs}```\nwhen I try to change the resolver to use an Async following the example here: <https://lacinia.readthedocs.io/en/latest/resolve/async.html>, it ends complaining because it was expecting a collection, not a single item. Using `resolve-as` works correctly\n\nIs it not possible ?  or is the case that I am missing something?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "854",
    "text": "I\u2019m now looking at rewrite-clj as an alternative for tools.analyzer to do some static analysis. It was perfect until I discovered that it doesn\u2019t support ClojureScript and you don\u2019t get line numbers with your tokens\u2026\none argument could be: if you\u2019re already running a server with aleph or http-kit, you have the dependency anyway\nI'm using clj-http atm. One annoyance was a lack of mocking support for async requests but it otherwise has been quite painless to use, currently using client certs with it which was quite easy to setup\nread a reddit thread claiming that http-kit randomly stopped working in prod, and it seems that clj-http only does async via callbacks\u2026guess I\u2019m going with aleph until somebody tells me otherwise\n<@Lesa> async via callbacks or something like futures/promises?\nUsing callbacks. We have a small wrapper that takes as arguments the specific clj-http function, the url, and any options, the wrapper creates a `promise-chan` which the callbacks push their return value onto, and we return that promise-chan to the caller\nwhich we can then consume using the usual core.async stuff\n```(defn- req! [func url options]\n  (let [prom-chan (a/promise-chan)\n        callback (fn [v] (a/&gt;!! prom-chan v))]\n    (func url options callback callback)\n    prom-chan))```\nok\nthe calling code is then responsible for handling any exceptions that come out, but you could return separate result-chan / exception-chan promises as well\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "855",
    "text": "another \u201copinion based\u201d question as s.o. would phrase it - does anybody have any guidance/feelings/grudges/info between clj-http, http-kit, and aleph for production level async http client requests?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "856",
    "text": "Hello! I'm writting a POC web app to learn clojure, and I was thinking on how to handle users. Since I'm going the easy way for now I thought about having a dynamic variable `*user*`, which would be set for every request in a middleware. Something like this (untested):\n\n```\n(ns a.vars)\n(def ^:dynamic *user* nil)\n\n(ns a.middlewares\n  (:require [a.vars :refer [*user*]]))\n\n(defn middleware-add-user [handler]\n  (fn [request]\n    (binding [*user* (get-user-from-request request)]\n      (handler request))))\n\n[...]\n```\n\nI'm using `luminus` lein template, which uses `ring` and `immutant/undertow` if I understood the config correctly. My question is: is the `with-bindings` safe to be used in a situation where multiple requests are arriving? In other words, will the binding be unique for each request context? Something like a thread-safe biding?\n\nThanks for the help :slightly_smiling_face:\n<@Gina> it's normal to assoc data onto the `request` object itself - it's a hash map\nalso I think `with-bindings` there would just be `binding` (but passing the data is cleaner IMHO)\nYes, I imagined, it just feels that I'm gonna have to pass the `user` to virtually every function I call from the routes, so I was trying to be lazy :stuck_out_tongue:.\nRegardless of whether it is a poor design (I agree with you), would it work? Is the binding request-specific?\nyes, but certain scenarios can make you lose your dynamic binding where an explicit arg would be preserved\nclojure's good about propagating bindings, but eg. if you interop with a lib from java that uses threads you can easily lose bindings\nI see. Cool. I really appreciate the help <@Dann> :slightly_smiling_face:. Thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "857",
    "text": "We (Amperity) use Aleph heavily in production and it\u2019s been great to us so far.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "858",
    "text": "hey folks, Is there any protocol to implement in a type that makes it print friendly ?\nyou mean like implementing the toString method of Object?\n<@Valrie> maybe you're thinking of <https://clojuredocs.org/clojure.core/print-method>\nmaybe\nthanks <@Celestine> that's what i'm looking for\nthere's also print-dup for things that should explicitly be readable from the printed output\nwhat does `dup` stand for?\nduplicate\nas in, print, read, get the duplicate back\nright\u2026\nBut it's separate because it isn't compatible with clojure.zip\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "859",
    "text": "<@Clarine> it does have a mode which includes line numbers\nAlso see rewrite-cljs in clj commons\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "860",
    "text": " zipmap or rename keys does not maintain order same as input keys or map , seems it is due to assoc function which is used by them . Please Can someone suggest an way to rename keys with map key order maintained \nI don\u2019t think there is a guarantee that a maps keys remain ordered\nAs in \u2014 as a datastructure\nI wonder what your usecase is, there are sorted-maps in core, and there are ordered-maps in libraries, I just wonder how you wish your map to remain ordered\nI get an dictionary of [excel-number-date, values] from Java api . Convert result into sorted-map , similar to here let  [result ( into (sorted-map) java-dict-result)] , now  trying to rename the keys from number into \u2018yyyy-mm-dd\u2019 format \nWhen I rename the keys the order of keys gets changed \nBasically I believe it is due to assoc function used internally \nI wonder whether the map you get from renaming keys is still a sorted map. Nevertheless, you could again convert it to a sorted map, can\u2019t you?\nYes I can since new keys are of \u2018yyyy-mm-dd\u2019  sorting works fine here. But was checking if there are some way which maintains orders . \n<@Ahmad> Did you want to preserve the order of insertion, or ensure that they are sorted in key order when iterating?\nfor the latter, there's sorted-map:```\nuser=&gt; (sorted-map :b 2 :d 4 :a 1 :c 3)\n{:a 1, :b 2, :c 3, :d 4}```\nI want to preserve order  while rename keys , Was trying zipmap and set/renames-keys \nfor the former, I'm not aware anything native to clojure. you could try using java.util.LinkedHashMap\nalternately, you could build your own using a list or vector of pairs; you'd lose the map syntax shortcuts and the sub-linear access time, but insertion order would be preserved\nor: store insertion order in a list/vector and pairs in a map; you'd just need to keep the two structures synchronized\nOk I sort my result again after rename , which works for my current scenario \nI would try you suggestions later and add them to my util , thx for your suggestion \nnote that LinkedHashMap is a mutable map\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "861",
    "text": "<@Sixta> How do I turn the line numbers on? I can\u2019t find any docs on this\nI found it. Like tools.reader it uses meta for this.\nYep!\nThanks! :slightly_smiling_face:\nNo problem, I'm excited to see what you come up with :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "862",
    "text": "<@Ahmad> I'm not sure I understand your issue - if you use `sorted-map` then the order is preserved after `assoc`, `rename-keys` et al.\nIf sorting after `rename-keys` would lead to a different order from what you want then I don't understand the \"I sort my result again after rename\" bit. However, in that case you could use <https://github.com/flatland/ordered/blob/develop/src/flatland/ordered/map.clj#L140>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "863",
    "text": "does anyone know if there is a java equivalent for this datastructure?\n<https://github.com/michalmarczyk/psq.clj>\n<@Sherril> you could try adapting <https://github.com/michalmarczyk/psq.clj/blob/master/src/main/java/psq/PersistentPrioritySearchQueue.java> to pure java\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "864",
    "text": "Graal native complains about:\n```\nDiscovered unresolved type during parsing: rewrite_clj.node.protocols.Node\n```\nbecause I\u2019m using that protocol somewhere. How can I resolve this?\nsomehow moving the predicate in which I use this protocol to another namespace helps\u2026\n```\n(ns ild.pred\n  (:require [rewrite-clj.node.protocols :as node]))\n\n(defn uneval? [node]\n  (= :uneval (node/tag node)))\n```\nit\u2019s black magic to me\nI am trying to make handling of Postgres enumtypes feel more idomatic.\nI have writtten an `intern` function to help with this\n```\n(defn intern-enumobj\n  [_ enum-obj]\n  (println enum-obj)\n  (let [start-ns *ns*\n        the-ns (in-ns (symbol (str start-ns \".\" (namespace enum-obj))))\n        objref (intern the-ns (symbol (name enum-obj)) enum-obj)]\n    (in-ns (symbol (str start-ns)))\n    objref))\n```\nthis is called directly within a namespace\n\nMy problem is that I cannot refer to one of these dynamically created namespaces from a `(:require` clause; I get a the error ```CompilerException java.io.FileNotFoundException: Could not locate notifications/enumset/channel_type__init.class or notifications/enumset/channel_type.clj on classpath. Please check that namespaces with dashes use underscores in the Clojure file name., compiling:```\n\nI can work around this by _instead_ making a call to `clojure.core/alias`\nThis feels a bit hacky though; is there a better way of doing this?\nthat function is just broken\nusing in-ns in code like that is never a great idea\nI'd suggest starting with a `(def postgres-enum-objects (create-a-map-from-name-to-enum-object))`\nyeah i did.\nwhich will give you want you want, without creating namespaces\nso it marginally nicer to refer code to the var\n`enumset.comms_status/sent`\nrather than to\n`(:sent enumset/comms_status)`\nbut I accept that it is unimportant in the big scheme of things\nand perhaps I should just get over it\nit seemed worth investigating though;\nIn practice I will always need the map representation as well in order to process keywords\nis this not the sort of this a self modifying LISP is supposed to be good at?\nWhat if you create the namespace the regular way, and just write a macro to automatically `def` the names you want based on the enum?\nactually if I'm using plain old `alias` I can use `create-ns` instead of `in-ns` which is a little simpler but doens't address your fundamental point\n```\n(defn intern-enumobj\n  [_ enum-obj]\n  (let [the-ns (create-ns (symbol (str *ns* \".\" (namespace enum-obj))))]\n    (intern the-ns (symbol (name enum-obj)) enum-obj)))```\nso I have a single `enumset` namespace where I define the  enumtype/enumvals\nI'd rather keep the 'enum type' definitions in one place\nrather than have a ```(def comms_status (postgres-enumset \"comms_status\"\n                                    #{\"abandoned\"\n                                      \"failed\"\n                                      \"sent\"\n                                      \"unsent\"}))```\nmap in `enumset` and then seperate-and-distinct `enumset/comms_status.clj` file\nbut yeah perhaps\nI'm just looking for raindows in a star filled sky\nSo what happens to the parts of your program that rely on `&lt;ns&gt;.&lt;enum-obj&gt;` when they try to load when the database connection isn't available yet?\nwell I've hard coded it as strings\nso it does not rely on a database connection\ntempting although that was\nOh so you just are aliasing data in some ns to vars in another ns?\nhardcoded like ````(def comms_status (postgres-enumset \"comms_status\"\n                                    #{\"abandoned\"\n                                      \"failed\"\n                                      \"sent\"\n                                      \"unsent\"}))```\nyeah\nSo 99 times out of 100 I'd never advise someone out of the blue to \"use a macro instead\"\nRight, I\u2019m thinking you\u2019d create the `enumset/comms_status.clj` file manually, give it a regular `(ns ...)` declaration, and then have a macro  that could do something like `(defenums comms_status)`\njust to save yourself the trouble of hooking everything up to keep the compiler happy.\nBut you've managed to work your way into the 1%. I really encourage you to write a macro that iterates over `comms_status` and defs the appropriate vars, and to invoke the macro in the namespace where you want the aliases to show up, because I predict it'll be more evident and less error prone than programmatically interacting with the ns api.\nwell. sticking just a\n```(alias 'comms_status 'notifications.enumset.comms_status)\n``` directly underneath the namespace declaration seems to solve the problem\nand is simpler than a macro\nInteresting.\nokay so I have a numpty macro question then: how do I return multiple S expressions from a macro?\n```(defmacro generate-postgresenum\n  [enum-type valset]\n  (let [ns-name (symbol (str *ns* \".\" enum-type))\n        enum-map (postgres-enummap enum-type valset)\n        syms (into '() (map (fn [v] (list 'def (name v) v))) (vals enum-map))]\n    (list* `(ns ~ns-name)\n           `(def enum-map ~enum-map)\n           syms)))```\n```(macroexpand '(enumset/generate-postgresenum \"comms_status\"\n                                             #{\"abandoned\"\n                                               \"failed\"\n                                               \"sent\"\n                                               \"unsent\"}))```\nthen gives me a *list* of s-expressions\nwhich I need to eviscerate\nHmm this might be one rabbithole too far\nat this point\nso a namespace is a sequence of s-expressions, starting with `(ns `\nand I don't know you would get a macro to return a sequence of s-expressions; `unquote-splicing` looks it wants a single container to be run inside\nwhich isn't compatible with the format of a `(ns`\nIs it possible to do?\nAnd sometimes it\u2019s useful to emit multiple things in a `do`\nWhich, reading again is probably irrelevant for what you\u2019re seeking to do\ni'm starting to think that `(create-ns` and a few `alias` statements is comparatively quite simple\n&gt; Although emitting an ns form + stuff in it is a classic issue aka \u201cthe Gilardi scenario\u201d\ncan you point me any discussions/blog posts on this?\nGoogle is prob best\nok thanks\n`Gilardi` is quite a Googleable phrase\nBut really it\u2019s having a block of code that need to be broken up into multiple top level expressions to be properly evaluated \n<@Danna> how is using create-ns etc. better than using ns inside a macro? I don't fully understand your use case\nso I would want write a macro that emitted a sequence of s-expressions like\n```\n(ns notifications.enumset.comms_status\n  (:require [notifications.enumset :as enumset]))\n\n(def enum-map (enumset/generate-postgresenum* \"comms_status\" #{\"abandoned\" \"failed\" \"sent\" \"unsent\"}))\n(def abandoned (:abandoned enum-map))\n(def failed (:failed enum-map))\n(def sent (:sent enum-map))\n(def unsent (:unsent enum-map))\n```\nand I don't know how I could get a single macro to do that\nthe normal thing is to put them all in a `do` block, as <@Jasmine> said\nputting the forms at the top level is good style, but clojure doesn't require it\nYeah, this is the kind of thing that typically doesn\u2019t work well in a single top level do\nSpecifically the ns part (the rest is fine)\ncan I nest the forms _inside_ the `ns` part\nwould be the other obvious thing to try\n(I just tried wrapping that wole thing in a `do` in a .clj file; its weird)\nthis is a fairly frivolous piece of syntactic sugar for me\nand I've probably spent enough time on it\nthanks for your input\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "865",
    "text": "you can't return N items, but you can use one collection as if it were N items, and that's what unquote-splicing is for\nso you don't write a magic macro that inserts multiple things into the parent (ns), you write a new top level form that expands to an ns call, and also expands some collection\nAlthough emitting an ns form + stuff in it is a classic issue aka \u201cthe Gilardi scenario\u201d\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "866",
    "text": "Is it possible to read and transform EDN without evaluating the reader literals? I\u2019m playing with programatically transforming a `duct` `config.edn`, and I need to be able to `read-&gt;transform-&gt;write` without evaluating some of the literals\u2014since the output would contain, for example, expanded absolute file paths for resources, etc\nI supposed I could override the readers?\nyes, for sure. it's all up to what your data readers do\nthey are passed read but unevaluated values\nyou can use the built-in `tagged-literal` function to read your data literals and  print back to the same data literal (without doing any eval)\nah perfect, thanks Alex!\n```user=&gt; (def x (tagged-literal 'hi '[a b c]))\n#'user/x\nuser=&gt; x\n#hi [a b c]\nuser=&gt; (:tag x)\nhi\nuser=&gt; (:form x)\n[a b c]```\ntagged literals were designed specifically to support this case (flowing data through intermediaries without necessarily \"understanding\" it)\nif the tag is `#inst` or `#uuid` -- you have to explicitly pass those in to override them\nyes,  otherwise  you can  fall back to setting the `*default-data-reader-fn*`\n`(binding [*default-data-reader-fn*  tagged-literal]   ...read-transform-write...  )`\n```\nuser=&gt; (edn/read-string {:readers {'inst #(tagged-literal 'inst %)} } \"#inst \\\"what?\\\"\")\n#inst \"what?\"\n```\ninst and uuid are edge cases\nYou guys are awesome, that was exactly what I needed. Thanks!\ni have a quick question about macros in tests. I want to get nice `expected: X actual: Y` output from calling `is` on a `re-find`\nI don't think I need to write a new reporter, I just need to compare the output of `re-find` with whatever I want to pass in\nhowever, i can't seem to write a macro (or function, if necessary) to take in the expected string and the actual string and compare them in such a way as the reporter will put them into the right places\nThe best I've gotten is to double-print the error by embedding `do-report`:\n```\n(defmacro last-log-contains\n  [state content]\n  `(let [log# (-&gt; @~state :log last :text)\n         found# (re-find (re-pattern ~content) log#)]\n     (do-report\n       {:type (if found# :pass :fail)\n        :actual log#\n        :expected ~content})))\n```\nafter some more experimentation, i've found that returning `true` at the end works to suppress the secondary error but it then hides the comment at the end of the `is`\nI am not! that's super interesting\nyeah, i see what you're saying, that's cool as heck\nlook at the definitions in clojure.test for more info\nand the docstring for clojure.test namespace is excellent and a nice little novel of how to use it\nawesome, thank you so much\n<https://github.com/clojure/clojure/blob/master/src/clj/clojure/test.clj#L492>\naround there - there's also a big inline comment  higher up in  the source that  explains some of this\nooooooo yeah, that's awesome\nThank you so much, <@Becki> and <@Jasmine>, y'all are great\nFor those following along at home, here's my solution, thanks to some generous help:\n```\n(defmethod assert-expr 'last-log-contains\n  [msg form]\n  `(let [state# ~(nth form 1)\n         content# ~(nth form 2)\n         log# (-&gt; @state# :log last :text)\n         found# ~form]\n     (do-report\n       {:type (if found# :pass :fail)\n        :actual log#\n        :expected content#\n        :message ~msg})\n     found#))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "867",
    "text": "has anyone tried their hand at something like this?\n`is` is a macro so that you can tell it how to execute and compare the results of the test right?\nare you aware that `is` takes assertions with an open multimethod `assert-expr`? you could probably define your own assertion type more easily than this\nso you'd define `(defmethod clojure.test/assert-expr #'log-contains [state content] (...))` and use it like `(is (log-contains ...))`\noh yeah, like dpsutton says :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "868",
    "text": "My understanding of cider is that it starts the nrepl and sends the code I write in emacs to the nrepl; if that is correct, when I say `(doc doc)` in the `lein repl` that works but not in my cider repl.\ndoc is `clojure.repl/doc` and clojure.repl is only in scope in your initial ns (whichever that is) usually\nso if you run it in a namespace other than the init, it usually won't find doc (but cider has its own tooling for pulling up docs)\n<@Dann> thanks. Any pointers on why the cider\u2019s tooling for pulling up the docs are not working?\n<#C0617A8PQ|cider> is likely your best bet\nthanks\nMade this today :slightly_smiling_face: <https://github.com/borkdude/clj-kondo>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "869",
    "text": "Any ideas on where to find the fault? Slightly stumped by this stack trace\nI get this when running lein midje\nand after the tests have run\nhave you forgotten to explicitly require `io` in one of your namespaces?\nYour code might be working because `io` might be loaded by another ns when running the code, but when running the tests, `io` might not be indirectly loaded.\nA recent version of Eastwood has a linter for this.\n<https://github.com/jonase/eastwood/blob/master/src/eastwood/linters/implicit_dependencies.clj>\nWill give it a spin\nFound it. Thanks <@Leeann>\nHe\u2026 big midje tests crashed eastwood when analalyzing the test code\n:sadpanda:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "870",
    "text": "Question regarding cemerick.friend: the typical approach seems to be that you perform your authentication (including starting sessions) in middleware. However, I would like to start a session in handler body. Reason: in that handler body the user is created in the database, and I would like to associate that user with the session. Is there a way to do this?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "871",
    "text": "Does tools.alpha / deps.edn have capability of starting a repl in a given namespace like the :init-ns thing in lein?\nnot really, that's hardcoded in the default repl code\nyou could (instead of using the default repl start),  run a script that started the repl yourself with that part customized\nclojure.main/repl is (annoyingly) customizable\nI assume that's  more  trouble than it's worth though\nYeah, most likely though I will take a look. I think this is a case of me trying to map my previous lein style onto tools.alpha. One thing I used to do quite a bit is create a repl namespace with all my fun little tools and have lein start the repl there. I can either switch every time I start (first world problems), or create the `user` namespace. The latter triggers my OCD a bit though since I like to have everything sit nicely in the project NS.\n\nNot the end of the world by any means. Thanks Alex.\nultimately,  it's all  a matter of calling  clojure.main/repl  with the right stuff. so  just follow what clojure.main does  and  deviate where it's useful to you. you can bake that into an  alias with :main-opts  in your deps.edn.\nOk, that doesn't sound too tricky on the surface of things. I will take a look. As I think about it though, i'd probably want it all to work smoothly with cursive and the REPL integration there too. It's probably easier to just get used to switching it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "872",
    "text": "is it possible to memoize a `deftype`'s proto impls?\nno, but you can `(deftype T [] P (f [this arg] (memo-f this arg)))`\nwhere `memo-f` is your concrete memozied impl\ntks, thats what im doing. ideally the memoization would not be observable outside the deftype, but this works too\nbah, why is my brain stuck on this ...\ni have this long list of `true/false` conditions that should each be checked and if `true`, add a specific key to a vector\nand the only way i came up with was stuffing `conditions` and `keys` into each their vector, `zipmap`-ing those, and filtering the resulting `map`. there must be something nice\n*nicer\nNone\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "873",
    "text": "```(into {} (comp (filter (fn [{:keys [condition] ...)) (mapcat (fn [{:keys [keys vals]}] (map vector keys vals))) &lt;&lt;list of things...&gt;&gt;```\nkinda thing?\nit sounds like it _IS_ a filter and a map, fundamentally\nmaybe it is. this was my solution that I thought smelled a little funny.\nwell that call to `zipmap` does seem like wasted electricity\nyup. i wanted a solution that avoided that and just worked on the original lists\nsomething like ```(sequence (comp (map (fn [k c] (when (true? c) k)))\n                (filter some?))\n          (range 10) \n          (cycle [nil true nil]))``` maybe\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "874",
    "text": "hello, is it possible that with large lists `rand-nth` can go in `stackoverflow`?\nit uses nth, and nth doesn't consume more stack to get larger indexes\ndid you build up your large list with `concat`?\nbut if coll is defined pathologically, `(count coll)` can stack overflow\nyeah, what <@Becki> said, that would be the s/o risk\nyep\nanyone have the link?\nah\n<https://stuartsierra.com/2015/04/26/clojure-donts-concat>\nit's not just about concat - it's also the more general problem of mixing strict execution and lazy functions in a way that matches up badly\nbut recursively calling concat is the common source of the problem\n(common pitfall by the way, <@Coreen>) its the best dicussion of what's going on\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "875",
    "text": "Earlier, I submitted <https://dev.clojure.org/jira/browse/CLJ-2493>, a fix for clojure.java.browse/browse-url hanging on systems that use xdg-open. If there's agreement that my diagnosis makes sense, I would be willing to also submit some code, but I'm unfamiliar with the process for Clojure. I know there's the CA &amp; some sort of patch format. Maybe it's GitHub-like (Fork, branch, make changes, git diff), but I'd appreciate some guidance.\nYou can also ask on the clojure-dev channel here, but the process for developing and creating patches is documented.  Finding link ...\nthere's a git command that creates a patch, I think there's a clojure doc that outlines the steps; the git command is `git format-patch`\n<https://clojure.org/community/developing_patches>\nNot sure of your expectations, but just realize that code review and patch submission proceed at a pace comfortable for the maintainers, not necessarily the submitters.\nticket and approach seem reasonable\nThanks to all. New to this Slack thing also (just signed up). I don't see a clojure-dev channel\nCA: <https://secure.na1.echosign.com/public/hostedForm?formid=95YMDL576B336E>\n<#C06E3HYPR|clojure-dev>\nCA signed. Now to see about the patch :slightly_smiling_face:\nI think it comes down to this ```user=&gt; ((fn [&amp; {as :as}] as) :as 'a :as 'b)\nb```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "876",
    "text": "Maybe multiple `:as` should be prohibited by the ns/require spec?\n```\n(ns foo (:require [clojure.set :as s :as set]))\n```\nIt seems the last `:as` wins\nProposed patch for CLJ-2493 attached. Apologies for anything non-standard. It _is_ my first patch. (Hopefully not my last)\nTried it out and added comments with results on the ticket.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "877",
    "text": "Thanks!\nbtw, <#C06E3HYPR|clojure-dev> is prob better channel for this stuff, but no biggie\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "878",
    "text": "where can I find the COC for this channel?\n<@Faustino> Look at the Channel Details for this channel (click the `(i)` button top right to get the sidebar, then expand Channel Details)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "879",
    "text": "I am using postgres, Is there some lib that does type conversion like hashmap to json?\nehm, what do you mean. Do you want to store a hashmap in clojure as a JSON(B) column in postgres?\nyes\nand vice versa.\narray to vector\nyeah ofcourse, would be stupid if you could store something in postgres but not get it out right x)\nbut sadly, this is where my knowledge ends, I did find this: <https://github.com/jeffpsherman/postgres-jsonb-clojure>, but I can\u2019t say that I tried\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "880",
    "text": "nice, that was helpful. Thank you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "881",
    "text": "i got this bit from luminus\n```\n(extend-protocol jdbc/IResultSetReadColumn\n  org.postgresql.jdbc.PgArray\n  (result-set-read-column [value metadata index]\n    (vec (.getArray value))))\n```\nit works with array/vector\nany reason why macroexpand-1 would not work in a the context of a `clojure.core/deftest`?\n\nMy test is in the form\n\n```\n(testing \"The macro expands to a known-good form\"\n    (is (= '(foo ...)\n           (macroexpand-1 '(foobarize ...)))))\n```\nif run it from the repl, the test passes. But as I run the test suite, `macroexpand-1` expands nothing, so the equality fails\n(...I have written such tests in the past so this issue surprises me)\nahhh. got it. inside the macroexpand I was using an alias:\n\n`(macroexpand-1 (sut/foobarize ...))`\n\nI replaced `sut/` with the FQN and voila\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "882",
    "text": "Hi! I write a compiler for a query language in Clojure. The idea is not to interpret the expressions from the query language. Instead the compiler generates Clojure code at runtime and uses `eval` to compile it to byte code. So far it works very well. But now I have the problem that every compilation step creates new classes which go into the metaspace of the JVM. If I restrict the metaspace to a certain size, the GC stops my app for more than 10 seconds. Does someone use `eval` in production and has an idea to improve the GC behaviour?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "883",
    "text": "Why are you restricting the metaspace size?\nBecause if I don\u2019t, it grows unlimited.\nwhen and how classes get unloaded depends on the garbage collector you're using. I noticed that Java 12, which just came out, has support in the ZGC for concurrent class unloading, not sure about the others\nyou may need to do some research on how to choose and configure the best garbage collector for this application given its unique constraints.\nthanks! you wouldn\u2019t recommend against using `eval` in production? I see compilation vs. interpretation as a big plus for my use-case.\nNo, I wouldn't recommend against it out of hand.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "884",
    "text": "I have a list of net changes, e.g. `[1 -3 5 -10]`, and I'd like to get the totals at each point, so `[1 -2 3 -7]`. My immediate thought for this is `reduce`, but that doesn't feel particularly natural even here.\n\nAny other ideas?\nreductions jumps out at me\n`(reductions + 0 [1 -3 5 -10])`\nI hadn't made the link for how good that was, perfect\n:+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "885",
    "text": "how would I specify a relation between keys in spec?\nThat is something like (s/and (s/keys :req [::k1 ::k2]) #(= ::k1 ::k2))?\nsaying that the value of two keys must be equal\nwell you're almost there,  just fix the last pred\n`(s/and (s/keys :req [::k1 ::k2]) #(= (::k1 %) (::k2  %)))`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "886",
    "text": "How do you do OOP with inheritance hierarchies and overriding in Clojure? It looks like `deftype` does not allow you to specify a superclass. I know OOP is not popular in Clojure, but there is one situation where I like it: when defining UI components. I want to define behavior for a base class/type, and inherit and override that behavior in specific component subclasses. (I'm using ClojureScript so I want to use pure Clojure, not some JVM interop thing.)  The only way I see to do this is with `defmulti/defmethod`, and my `objects` would be some map or record with a type field.\n<@Deb> inheritance just isn\u2019t something that is well supported outside of multimethods and the ability to `derive` keywords\neven that isn\u2019t popular. composition is usually favored over inheritance\n<@Meagan> Okay, thanks. That may work fine; I'm just not used to it.\nI would highly suggest using composition. reagent, Rum and other frameworks are well set up to support complex composition of UI components in ClojureScript\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "887",
    "text": "Hi, we are planning on migrating from RabbitMQ to Kafka to increase the throughput of our services. I'm working on a proof of concept, would anyone recommend any particular library?\n<https://github.com/dvlopt/kafka.clj>\nThanks! how does it compare with \"jackdaw\" and \"kinsky\"?\nI prefer it to `jackdaw`, having seen/worked with that library before, and I haven't used `kinsky`. This is just a thin wrapper around the standard Java SDK which is why I like it so much.\nI'll give it a go, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "888",
    "text": "I vaguely recall that there were some blog posts about the major differences between Clojure 1.9 and Clojure 1.10. Specifically one that mentioned a change in reflection\nYou can find a detailed change log at <https://github.com/clojure/clojure/blob/master/changes.md>\nand this is probably the thing you're thinking about: <https://clojure.org/guides/faq#illegal_access>\nWhat's the most efficient way to get a sequence with *one copy* of an element removed?  I'm using `sequence` with a custom xf, but it's rather verbose.\nis `dedupe` useful?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "889",
    "text": "hi, has anyone invoke a lambda function yet? (with clojure)\nassuming aws lambda instead of mathematical lambda :stuck_out_tongue:?\nso, i need call a function lambda on aws. Today i called through of API Gateway, but my service stay in amazon ECR, so is better use the invoke than API GATEWAY. The call is made internal and not external\nUgh, looks like I\u2019m hitting <https://groups.google.com/d/msg/clojure/pxLN9tYti4c/zbhLCOrTBgAJ>\nAre there plans backport the fix for the JDK regression to Clojure 1.9 or 1.8? Or will that be a 1.10-only fix\n<@Ashlea> I think only 1.10\n<@Ashlea> it shouldn't be hard to update your project to use 1.10, clojure upgrades cleaner than any other compiler I've used\nnope\nit\u2019s not usually hard, but we\u2019re having trouble with a particular bug\nRan into an issue where a lib has an invalid ns import under 1.10 and not 1.9 :(\n<@Ashlea> can you remove the meta from the symbol?\nIt\u2019s an internal dependency, I think we can remove the meta\nTrying it out now, will report back\nI'm not sure anyone ever filed the jira for that mailing list message\nI would :-1: kinsky - in our experience it didn\u2019t provide enough functionality and it\u2019s full of reflection issues\nI don\u2019t think they did. I will as soon as I can\nso wasn't on my radar, but certainly seems like a candidate for 1.10.1\nI'll take care of it\n:heart_eyes:\nThanks!\nfirst I will try to decide if it is actually a bug :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "890",
    "text": "So couldn't test the beta at work\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "891",
    "text": "Or it is within a dependency\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "892",
    "text": "Hi!  Does Clojure have a short form for the following?\n```\n(if-let [a ...]\n  (if-let [b ...]\n    (if-let [c ...]\n      (f a b c)\n      default)\n    default)\n default)\n```\nnope\n`some-&gt;` is in the ballpark, but it doesn't do binding\nIn my case I would have to wildly mix `some-&gt;` and `some-&gt;&gt;`, so that would not be better. Even though conceptually it would be the right tool (`c` depends on `b` depends on `a`).\n<@Marlyn> Thanks!\n<@Jasmine> I put together a minimal reproduction of the issue here: <https://github.com/nwjsmith/meta-regression>\nvery minimal :slightly_smiling_face:\nthanks <@Ashlea>.  Would that happen in practice, or would the result of reflect get shredded for the juicy bits?\nIt\u2019s happening in practice for us. We have a macro that reflects on some Java Protobuf objects to generate functions to translate from Clojure maps into said objects.\nthx, the stuff that was in the google groups message was sufficient so didn't really need that\n:+1: please let me know if I can provide any more context or other help\na more minimal repro: ```(eval `~(clojure.reflect/reflect String))```\nrepro golf!\nyou can invoke the lambda directly through the API\nI'll post an example in <#C09N0H1RB|aws>\n<@Melynda> Was thinking maybe better-cond could help: <https://github.com/Engelberg/better-cond>\nSlightly odd, but golfed around this:\n```\nuser=&gt; (or (b/cond\n  #_=&gt;       :when-let [a 1\n  #_=&gt;                  b 2\n  #_=&gt;                  c 3]\n  #_=&gt;       (+ a b c))\n  #_=&gt;     :default)\n6\nuser=&gt; (or (b/cond\n  #_=&gt;       :when-let [a 1\n  #_=&gt;                  b nil\n  #_=&gt;                  c 3]\n  #_=&gt;       (+ a b c))\n  #_=&gt;     :default)\n:default\n```\nWe have a workaround for now: strip the datafy metadata\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "893",
    "text": "<@Britteny> Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "894",
    "text": "logged at <https://dev.clojure.org/jira/browse/CLJ-2494>, may not make much headway on it  for the next week. Need to think about this one a bit.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "895",
    "text": "I wanted to copy some metadata to all objects in a tree:\n```\n(defn copy-meta [tree m]\n  (clojure.walk/postwalk\n   #(if (instance? clojure.lang.IObj %)\n      (with-meta % m) m) tree))\n```\nWhy do I get a stackoverflow when using prewalk?\nsounds like it's walking into the object you replaced recursively\nwhat was the setting again to not load core specs?\n<https://clojure.org/guides/faq#skip_macros>\nah thanks\nI hoped to avoid running into this error with GraalVM (native) with it:\n```\nCall path from entry point to clojure.spec.gen.alpha$dynaload$fn__2628.invoke():\n\tat clojure.spec.gen.alpha$dynaload$fn__2628.invoke(alpha.clj:21)\n```\nbut it doesn\u2019t help\nI just ran into that with edn-tool and had to drop back to 1.9.0 :disappointed:\n<https://dev.clojure.org/jira/browse/CLJ-1472>\nEither `(read-string \"(-&gt; 1 inc inc)\")` or `(macroexpand '(-&gt; 1 inc inc))` don\u2019t work for me in GraalVM native, I end up with the above error. Maybe too dynamic.\nmaybe `(clojure.string/join separator (.getStackTrace e))` - but you want the `getMessage` in there too\n```user=&gt; (try (throw (ex-info \"foo\" {:a 0 :b 1})) (catch Exception e (pr-str e)))\n\"#error {\\n :cause \\\"foo\\\"\\n :data {:a 0, :b 1}\\n :via\\n [{:type clojure.lang.ExceptionInfo\\n   :message \\\"foo\\\"\\n   :data {:a 0, :b 1}\\n   :at [user$eval149 invokeStatic \\\"NO_SOURCE_FILE\\\" 1]}]\\n :trace\\n [[user$eval149 invokeStatic \\\"NO_SOURCE_FILE\\\" 1]\\n  [user$eval149 invoke \\\"NO_SOURCE_FILE\\\" 1]\\n  [clojure.lang.Compiler eval \\\"Compiler.java\\\" 7176]\\n  [clojure.lang.Compiler eval \\\"Compiler.java\\\" 7131]\\n  [clojure.core$eval invokeStatic \\\"core.clj\\\" 3214]\\n  [clojure.core$eval invoke \\\"core.clj\\\" 3210]\\n  [clojure.main$repl$read_eval_print__9068$fn__9071 invoke \\\"main.clj\\\" 414]\\n  [clojure.main$repl$read_eval_print__9068 invoke \\\"main.clj\\\" 414]\\n  [clojure.main$repl$fn__9077 invoke \\\"main.clj\\\" 435]\\n  [clojure.main$repl invokeStatic \\\"main.clj\\\" 435]\\n  [clojure.main$repl_opt invokeStatic \\\"main.clj\\\" 499]\\n  [clojure.main$main invokeStatic \\\"main.clj\\\" 598]\\n  [clojure.main$main doInvoke \\\"main.clj\\\" 561]\\n  [clojure.lang.RestFn invoke \\\"RestFn.java\\\" 397]\\n  [clojure.lang.AFn applyToHelper \\\"AFn.java\\\" 152]\\n  [clojure.lang.RestFn applyTo \\\"RestFn.java\\\" 132]\\n  [clojure.lang.Var applyTo \\\"Var.java\\\" 705]\\n  [clojure.main main \\\"main.java\\\" 37]]}\"```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "896",
    "text": "Cleanest way to log an exception stack trace in a single line? (for line-based log consumers)\nor just some variation of `(pr-str e)` which has all that stuff and escaped newlines\nit's ugly, but it's one line, and knows what to do with ex-info\n<@Dann> That seems to be exactly the cost/benefit ratio I\u2019m looking for tonight :slightly_smiling_face: thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "897",
    "text": "<@Jasmine> regarding 1.10.1-beta1, the documentation for prepl mentions :clojure.error/phase but didn't this change to :exception?\nWhat documentation for prepl?\n<@Jasmine> the docstring for prepl mentions the 4 types of maps that prepl can return\nyep,  possible that drifted, will   check it\noh, actually these are separate things\n:exception is a boolean flag indicating that a :ret map is  from an exception\nah, yeah the docstring is wrong, probably my bad\n<https://dev.clojure.org/jira/browse/CLJ-2495>\nI can trick it doing `(s/def :user/email (s/and ::s-common/email))` but it is dirty\nAny better way?\nPersonally I would say it is a bug, not a feature :wink: Unless I miss something big about it.\nTheir solution was to use the cats lib either monad\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "898",
    "text": "thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "899",
    "text": "```\n;; ::s-common\n(s/def ::email (s/with-gen (s/and string? (partial re-matches #\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,63}$\"))\n                           (partial gen/fmap #(str % \"@example.com\") (s/gen string?))))\n\n;; ns where I define user\n\n(s/def :user/email ::s-common/email)\n(s/def ::create-user (s/keys :req [:user/email :user/password]))\n```\n\n`(s/explain-data ::create-user {:user/email \"foo\"})` return\n```\n({:path [:user/email],\n  :pred (clojure.core/partial clojure.core/re-matches #\"^[a-z0-9._%+-]+@[a-z0-9.-]+\\.[a-z]{2,63}$\"),\n  :val \"foo\",\n  :via [:api.auth.db/create-user :spec.common/email],\n  :in [:user/email]})\n```\n\nhere is an issue `[:api.auth.db/create-user :spec.common/email]`. Why there is no `:user/email` here from `(s/def :user/email ::s-common/email)`?\nIt makes issue to translate it into human understandable message. Normally I would find `:user/email` in `:via` and could return proper message.\n\nWhy is it done in this way? Can I consider it as a bug?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "900",
    "text": "Check out this blog post <https://blog.skyliner.io/fourteen-months-with-clojure-beb8b3e4bf00>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "901",
    "text": "some of this has to do with when resolution via the registry occurs in spec, would be fine to jira it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "902",
    "text": "```\n(defn example []\n  \"\")\n\n(defn uses-example [] ;; reflection warning!\n  (-&gt; (example) (.endsWith \"omg\")))\n```\n\nWondering, how come the Clojure compiler doesn't try to attach a `:tag String` to var metas (at least in easy cases)?\n\nMight result in automatically performant code\nI think I get what you mean.\n\nBut under a good Reloaded workflow, dependent vars are also recompiled...\ninteresting! this one I assume? <https://soundcloud.com/defn-771544745/defn3-repls>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "903",
    "text": "what happens in the repl if change the definition of example to return a boolean in your hypothetical?\n<@Milford> has done quite a bit of work on this in Clojurescript, and as <@Rosaline> points out, it has implications as to what needs to be re-evaluated on, well, re-evaluation. I think <@Milford> discussed that on a defn podcast. \nI think Erik may have been referring to <https://www.therepl.net/episodes/3/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "904",
    "text": "Is it time to move to <https://github.com/clojure/spec-alpha2> vs <https://github.com/clojure/spec.alpha> ? Is it stable and ready to switch in clj and cljs? Or should I wait?\n<@Jasmine>\n\nI am not super familiar with JIRA. I did typo when reporting in bug explanation and I don\u2019t see any way to edit it. I can\u2019t also add comment about it. Am I right there is no edit option and comment?\n\n\u201cSo `(s/def :foo/email (s/and ::common-email))` is totally omit here.\u201d\n\nBut should be \u201cSo `(s/def :foo/email ::common-email)` is totally omit here.\u201d\n\n<https://dev.clojure.org/jira/browse/CLJ-2496?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#issue-tabs>\n\nI made it so ugly. I used to github issues. Sorry :slightly_smiling_face:\nWhat should I do to correct my issue?\nI just needed to bump up your permissions - should be able to now \nNo. You should wait.\nThat might just be. It\u2019s hard to keep track, you\u2019re all over the place these days :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "905",
    "text": "```\n(s/def :user/password (s/and string? #(&lt;= 6 (count %) 32)))\n(s/def :db/user (s/keys :req [:user/uuid :user/email :user/updated_at :user/created_at]))\n; there is no :user/password in :db/user !\n```\n```\n(s/assert :db/user {:user/uuid (uuid/v0)\n                      :user/password \"0\"\n                      :user/email \"<mailto:foo@example.com|foo@example.com>\"\n                      :user/updated_at #inst\"2019-03-24T13:19:45.150875000-00:00\"\n                      :user/created_at #inst\"2019-03-24T13:19:45.150875000-00:00\"})\n```\n```\nSpec assertion failed\n\"0\" - failed: (&lt;= 6 (count %) 32) in: [:user/password] at: [:user/password] spec: :user/password\n```\n\nHmm again I think I found a bug in spec and it is not a future. Am I right?\nSituation when it start to be issue: plain password has another rules vs encrypted password. Assert check all data expect :user/password by :db/user but it fail because of encrypted :user/password anyway :disappointed:\nJira it <@Jasmine>?\nPretty sure that's not a bug. `s/keys` checks all namespaced keywords in the map against their specs. (Check out the docstring.)\nSo what is the point of `(s/def :db/user (s/keys :req [:user/uuid :user/email :user/updated_at :user/created_at]))` then?\nif it check `:user/password` even if I don\u2019t want\nassert function get spec definition to validate. If it doesn\u2019t care about definition what is the point of it. It should be just `(assert data)` then.\nIf I understand correctly, the purpose of `s/keys` is to express that a certain set of keys are required. So if you were to check a map missing one of the required keys which had all of its keyword conforming to their specs, it would fail due to that missing required key.\nSo what the purpose of `:opt` then for `s/keys`?\nIt's for documentation only (and for spec generation).\nSounds like a hell. Somebody will add in his library `:user/password` and will affect whole app.\nAll spec will start to validate even if I have never say it in code of the app\nMaybe it is an intention, but it sounds so evil :wink:\nGood motivation to use keys namespaced by your app's namespaces, which dependent libraries shouldn't be touching.\nyeah, but even in my app I would like to have control on it\nThere is no simple way to use namespace with keywords for database purpose when think about FE+BE and separate services which should use consistent structure.\nI mean I can simple use `:user/password` but `::ns-for-user/password` is not a thing to do simple\nAt work we have a separate library of specs defined in cljc files consumed by our backend and frontend so they're speaking the same language; that is one solution.\nyeah, but even then people use mobile app etc. Using spec on BE shouldn\u2019t force me to use Clojure / ClojureScript in all services and app in BE / FE.\nAt least it is my opinion. Bug, not a future :wink:\nNot sure I understand how spec is forcing you to use clojure/clojurescript in all services.\nHow will I use `::ns-for-user/password` in PHP? :wink:\nSure I can use full form, but then instead of `:user/password` developers will have to use `:cool-name-of-the-app.users.spec/password` or something like that for all values\nLooks terrible :slightly_smiling_face:\nBecause by API using JSON I send namespaced data\nthere is no `email`, everything belongs to namespaces and I know if it is `:user/email` or `:company/email` etc. It has connection to database, validation etc.\nit's the \"if it's present, it has to be this shape\" thing\nIf namespaced keywords are painful for your use case, you don't have to use them. You could either use un-namespaced keywords or add/remove the namespaces at system boundaries.\nnamespaced keywords are solution for me, not an issue. But validation on keywrods which are not in definition of `s/keys` is unexpected thing.\nbut who knows, maybe I miss big picture of it\nThat namespaced attributes carry global semantics is a core tenet of spec and is laced throughout the design\nYeah I see, but why design in the way to validate keywords, which are not in definition of `s/keys`?\nBecause we want to verify the global semantics throughout the system\ns/keys is being replaced in spec 2 with schema and select so some of the details you mention above are changing, but this aspect is not\nhmm then I have to think about spec validation architecture once again. I totally miss info about `s/keys` and validation values outside definition.\nThank you all for explanation.\n<@Isa>, if you use `:req-un [::ns-for-user/password]`, PHP consumers will simply pass `password`, while your spec will be checked against your namespace's spec, unmistakably\nI want to use namespaces\nThe main point of discussion was about validate keywords, which are not in definition of `s/keys`\nnamespaces is connected to this topic, but not issue itself\nUnderstood, here a minimal reproduction of the bug-feature\n\n```\n(spec/def ::password string?)\n\n(spec/def ::user (spec/keys))\n\n(spec/valid? ::user {::password 1}) ;; false!\n```\n\nI wasn't aware of it to be honest.\n\nOne possible approach is to strip extra keys at the system boundaries... It's what reitit does, see the bottom <https://github.com/metosin/reitit/blob/master/doc/coercion/clojure_spec_coercion.md>\nAnother approach, obviously would be to stop using qualifed keywords if you don't want them to be always checked. The bug-feature doesn't happen for unqualifed `:password`.\nAt that moment I changed it to `select-keys` before validate. It works, but it change architecture and made me confuse how should I change the app.\nAlso I started to use `(confrom (s/keys) data)` and `(assert (s/keys) data)`\nI mean after learned about this it makes spec different tool for me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "906",
    "text": "Awesome stuff, ty both! :cljs:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "907",
    "text": "I have some code:\n`(HashMap. {\"edgePackage\" (::common/list-item-tid notification)})`\n... which warns me with:\n`Reflection warning, av_connector/util/notifications.clj:73:60 - call to java.util.HashMap ctor can't be resolved.`\nHow can this be? And why do I still get warnings if I do this:\n`(HashMap. ^Map {\"edgePackage\" (::common/list-item-tid notification)})`\nPerusing the list of HashMap constructors, I can't see how this would fail the reflection check\n<@Dulcie> `(let [^Map m {..}] (HashMap. m))`\nthe reason why your version doesn't work is a bug\nOK, well at least I know I'm not going crazy :slightly_smiling_face:\n<https://dev.clojure.org/jira/browse/CLJ-1929>\nvote or leave a comment on it\nDone\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "908",
    "text": "Kind of a newbie question here, but if I have `[:cat :bird :dog]`, what's the easiest way to get the infinite lazy sequence `(:cat bird :dog :cat :bird :dog :cat ...)`?\nLooks like you want <https://clojuredocs.org/clojure.core/cycle>\nAha! I knew I wasn't remembering something\nThanks, that's it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "909",
    "text": "anybody know of a library I can use to convert `\"100MB\"` -&gt; `100000000` \u2026 i.e from a string representation to its equivalent in bytes as a long ?\nsounds like something you might not need a library to do\ncl-format does everything, maybe it does this too :)\n```\n(require '[clojure.string :as s])\n\n(def unit-table {\"MB\" 1000000})\n\n(let [[_ amount units] (re-matches #\"(\\d+)(.+)\" \"100MB\")]\n   (-&gt; (Long/parseLong amount)\n     (* (unit-table units))))\n```\n<@Meagan> that code looks like the beginning of a library :slightly_smiling_face: \u2026 yeah, it is simple enough for one case, but as the units add up a library would make sense\nJust saying, some code that handles 20+ different units would probably only be ~30 lines of code. not worth adding a lib to my dependency tree IMO\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "910",
    "text": "Can somebody explain assignment of the null reference to *this* in a closure?\nWhat effects does it have?\nI assume it's part of `closed-over local clearing` feature, but not sure how it looks from JVM stand point.\n<@Roselia> Is there some other context here? Is this decompiled clojure bytecode?\nif `this` is your only reference to `coll`'s head, then the vm can free it for garbage collection\n<@Simonne> not really, just educating myself\nwhich means you can do `(let [coll (range)] (run! frob coll))` without running out of heap\nI mean I assumed this is decompiled clojure bytecode, that's what it typically looks like :D\nsame, was curious what the source code looks like\nso nullifying *this* invalidates any other references to that instance?\n<@Roselia> I was just thinking through that. That can\u2019t be the case\u2026.\nI don\u2019t think.\nsomething like `(fn [coll pred step] (step pred coll))`\nyeah that's kinda bothers me, how nullifying this related to other references to target instance\n<@Roselia> it frees the resources visible only to this object in this context\ninteresting\nor more technically, marks them as reclaimable\nis it documented somewhere?\nI'm really not sure - `locals clearing` is definitely the thing to search for here\nIt\u2019s tail clearing and I implemented it :)\noh! thanks\nHere is a link for reference\nHow do I specify this type in clojure: `Map&lt;String, Object&gt;`?\n<https://dev.clojure.org/jira/browse/CLJ-1250>\n<@Alix> `Map` -the rest is fictional\n<@Marlyn> <@Dann> thanks guys\n<https://dev.clojure.org/jira/browse/CLJ-1793> another follow up\nreally appreciate it\ntail clearing is needed because closures store their closed over values in instance variables\nAnd if the reference to this isn\u2019t nullified, it remains reachable in a local variable slot \nWhich keeps the closed over values alive\nyeah i understood the reason, missing part was the jvm &amp; gc behavior for this == null\n:+1:\n<@Marlyn> is there some part of the JVM spec you know of that defines the behavior for `this` assignment?\n`javac` will not allow it\nIt\u2019s in there somewhere, maybe search for method calls or local variables \n2.6.1 last para <@Simonne> \n<https://docs.oracle.com/javase/specs/jvms/se12/html/jvms-2.html#jvms-2.6.1>\nso the implication being that, because `this` is passed as a local variable, it\u2019s assignable like a local variable?\nit seems like since it's of type `reference`, assigning it to null means you no longer consider the referenced object visible in this scope\nYeah, only in instance methods\nAnd like you said javac won't let you\n<@Roselia> Is this an inner class? I\u2019m really curious the code that generated this.\nAny fn that closes over something will generate it\n<@Simonne> you can use this lib to play with it yourself <https://github.com/clojure-goes-fast/clj-java-decompiler>\n:whoa: <https://stackoverflow.com/a/22175621>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "911",
    "text": "cool, ty\ncool :slightly_smiling_face:\nI\u2019m actually a little surprised that the JVM allows that.\nWell. Surprised and not surprised. Bunch of lisp weenies.\n:rolling_on_the_floor_laughing:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "912",
    "text": "why am i getting \u201cno matching ctor\u201d for the following snippet? `(String. somebytes \"UTF-8\")`\n<@Arnoldo> probably because there are multiple 2 arity constructors for string and clojure isn't sure which to pick\ni don\u2019t typically do much java interop \u2026 is the way to handle that type hinting?\n<@Arnoldo> what is `somebytes` in the above? I'm trying to repro your situation but the \"obvious\" things I've tried all just work :neutral_face:\nthe result of .readPassword\nwhich i\u2019m also having bizarre issues with\ncalling it without the third argument, e.g. just `(String. (.readPassword (System/console)))` works fine\nerr second arg\nAh, OK, let me try that....\nSo `.readPassword` returns an array of `char` from the look of it?\nString does not have a constructor that takes an array of char and an encoding. That's why it fails.\n`char[]` is already encoded (UTF-8 by default) I believe. So the 1-arg constructor is what you want.\nahhh i see - thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "913",
    "text": "What would you prefer in Clojure library *documentation*, to see the usage demonstrated when the namespaces were pulled in via:\n- `use`\n- `require ... :all`\n- `require some.namespace.foo :as foo` \u2026 foo/bar\nThanks\nthe last\nThanks for that <@Harris> and all the others who reacted with an emoji.\nI\u2019m collecting this for a pull request (which I don\u2019t want to share here) but I\u2019m sharing the link to this response.\n\nThe reason that I even asked this is because I remember stumbling upon a comment somewhere that went something like:\n\u201cWhy do we discourage the use of `use` and yet in a lot of the documentation examples for libraries, it\u2019s still prevalent?\u201d\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "914",
    "text": "I think actual arguments would be better then slack polls :smile:\nsee <https://stackoverflow.com/questions/22982303/why-should-you-prefer-require-refer-all-over-use-in-clojure>\n[ANN] Cognitect Labs' aws-api 0.8.280 is now available! <https://groups.google.com/forum/#!topic/clojure/644yYo_qgwM>\n<@Roslyn> that SO post talks about the use in the actual code. Whereas I\u2019m talking about how to show the library usage in documentation.\nMy argument is to show it with the good practices, as per the style guide, so that there isn\u2019t a discrepancy between what is shown in a README and how you\u2019d really use the library in production code. Part of the reason is less of a gap between real usage and part of the reason is not to use deprecated practice. Hope that makes sense\u2026\nI was hoping I could do something like:\n```\n(defmacro asdf [f]\n  (prn &amp;env)\n  (prn (ana/analyze f &amp;env)))\n\n(let [[ a b c ] [ 1 2 3 ]]\n  (asdf (a b c)))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "915",
    "text": "does anyone know what I\u2019m supposed to pass into the `env` arg when using tools.analyzer.jvm?\ndoes this help?\n```\nuser&gt; (-&gt; '(let [a a] a)\n        (ana.jvm/analyze (assoc (ana.jvm/empty-env)\n                           :locals '{a {:op    :binding\n                                        :name  a\n                                        :form  a\n                                        :local :let}}))\n        e/emit-hygienic-form)\n(let* [a__#0 a] a__#0)\n```\nyou need to pass in an environment <@Meagan>, see the README\n`empty-env` is one way of constructing one\nit\u2019s not clear to me at all how to construct one\ncall `empty-env`\nI see that now. how would I populate it with the context of &amp;env in a macro?\nI think so! I might be able to work forward from that\nwhat I ultimately want to do (which might be foolhardy) is try and discover all of the symbols that are used in a form\ne.g. I want to be able to output something like:\n```\n(my-macro (do (+ 1 1) (send-message \"foo\") (fn [] \"callback\")))\n;; =&gt; [do + send-message fn]\n```\n<@Meagan> Have a look at <https://github.com/ztellman/potemkin/blob/e8c64802b8772a90110434d1b515ce35b78b961b/src/potemkin/macros.clj#L29>\n<@Meagan> Simply walk over the body form and collect symbols. But of course, it does not utilize tools.analyzer.jvm\nI thought of that but I was worried about handling things like maps etc.\nI forget how powerful clojure.walk is sometimes :stuck_out_tongue:\nI also want to make sure that the symbol is in fact a binding/var and not an _actual_ symbol the user might be using in their code\nI guess what I could do is walk over the body and then do an intersection with the keys of &amp;env\nthere's also a t.a version of walk\n<@Meagan> I am not sure what you actually are about to do, e.g. what is an \"actual symbol\"? But postwalk works with maps as well, yes.\nwhat I\u2019m trying to do is get a list of all of the bindings/vars a form depends on\nI\u2019m then going to write them out in the returning form\n<https://github.com/clojure/tools.analyzer/blob/master/src/main/clojure/clojure/tools/analyzer/ast.clj#L84>\nfor example:\n```\n;; use macro here\n(do-effect-only-when-deps-change\n  (send-message message-to-be-sent)\n  (prn \"sent message\"))\n\n;; will write out the following:\n(do-effect\n  (fn effect []\n    (send-message message-to-be-sent)\n    (prn \"sent message\"))\n  ;; list the bindings/vars that should trigger the effect again if they change\n  [send-message message-to-be-sent])\n```\nthe `do-effect` works fine it\u2019s just annoying to have to enumerate all of the things that might change by hand\nso I want a macro to do it for me :stuck_out_tongue:\nOK, got it. :slightly_smiling_face:\nit seems like using regular walk should work\noh, and what I meant by an \u201cactual symbol\u201d was if I did something like:\n`(do-effect-only-when-deps-change (send-data ['foo 'bar]))`\nI wouldn\u2019t want `'foo 'bar` to show up in the list of bindings/vars because they don\u2019t exist\nYea, then you should ignore any calls to `quote`. Still wondering why you would need this, just for convenience during development?\nwhy I would need the macro? or the part where the function fires if its dependent bindings/vars change?\nthe latter.\nit\u2019s firstly going to be a wrapper around useEffect in ClojureScript: <https://reactjs.org/docs/hooks-reference.html#useeffect>\nuseEffect already has that behavior. when you update state, and trigger a re-render, it will check it\u2019s dependencies array to see if they have changed since last render and if so, fire the effect\nbut also I intend to use this to enable more reloadable workflows in Clojure too yes :stuck_out_tongue:\nhmm. It looks like I don\u2019t get global vars in `&amp;env`\nAh, interesting. :slightly_smiling_face: Nonetheless, I feel one should not do that during \"runtime\" :slightly_smiling_face:\n\u201cruntime\u201d? :thinking_face:\nWhat I meant was production, maybe I still haven't got you but I cannot imagine a good case for using var/binding-watching for something else than development. :slightly_smiling_face:\nyeah it would probably be inert when deployed. purely a mechanism for reloaded workflow\nIf react does this, I might miss something :thinking_face:  Have to investigate :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "916",
    "text": "saw this thread a tad late. Very good to know, thank you! Aleph looks really promising, will stick on top of the pile and see where things land.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "917",
    "text": "drawing a blank. ` (into [] distinct [:a :b :c])` is not working. what am i missing\nIs it a stateful transducer?\nYep, you need to do (distinct)\nah thanks\nfound another solution which removes the recursion (which could potentially blow the stack):\n```\n(defn nest-by\n  [ks coll]\n  (reduce\n   (fn [m x]\n     (update-in m ((apply juxt ks) x) (fnil conj []) x))\n   {}\n   coll))\n```\nI personally find both solutions quite attractive. This one uses the fact that update-in already does most of what we want\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "918",
    "text": "I'm tearing my hair out trying to figure out why `com.stuartsierra.component` isn't shutting down one of my components. I have other components that shut down just fine. I can't spot any material difference in this one. I'm about to start trying to expose some details from within component itself but thought I would ask here if there are any common tripping hazards I might not be thinking of\nyou need to return a valid component map from both startup and teardown of each component\nthat's the most common reason that teardowns get short-circuited\nyeah that looks fine. everything starts up properly and inspecting the component in the system it's all well and good\ni've got a log statement (and heck, a println, to rule out a logging issue) on the first line of the `(stop)` function and that never gets called\nmost likely you do some operation on the record that turns it in to a normal map\nin which case the nop stop function that component defines for Object is called\n(some operation in your start function)\na common thing that does that is dissoc'ing a field a record is defined as having, but here are other things that do it too\nI was just about to ask...does `dissoc` do it?\n:facepalm:\n```\nuser=&gt; (defrecord Foo [a])\nuser.Foo\nuser=&gt; (assoc (-&gt;Foo {}) :a 1 :b 2)\n#user.Foo{:a 1, :b 2}\nuser=&gt; (dissoc (assoc (-&gt;Foo {}) :a 1 :b 2) :b)\n#user.Foo{:a 1}\nuser=&gt; (dissoc (assoc (-&gt;Foo {}) :a 1 :b 2) :a)\n{:b 2}\nuser=&gt; \n```\nwell, you saved my considerable head of hair from losing (any more) hairs\nhave been tearing them out for the past hour\nthanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "919",
    "text": "Why does `group-by` return a map of vectors instead of respecting the original collection type?\neg. I would expect `(group-by even? #{1 2 3 4 5})` to return a map of hash sets\nit's easy enough to roll my own version which does that:\n```\n(defn group-by*\n  \"Like `group-by` but preserves the original collection type\"\n  [f coll]\n  (let [emp (empty coll)]\n    (persistent!\n      (reduce\n        (fn [ret x]\n          (let [k (f x)]\n            (assoc! ret k (conj (get ret k emp) x))))\n        (transient {}) coll))))\n```\nbut I'm wondering why the default implementation does it that way\nno\nok but it would be helpful.\nBy the way: Using ZGC in Java 12 was not suchessful for my compiled code. I still had 5 sec pauses. So I droped the idea to evaluate code during runtime. Now I just use good old protocol dispatch for my expressions. The protocol dispatch is so fast that it\u2019s not slower than directly compiled code.\nwhat do you prefer for the name of a <http://micrometer.io|micrometer.io> wrapper: clj-micrometer or micrometer-clj?\nreify needs to gen a unique classes every time so you wouldn't want to force a particular name\nprotocol dispatch is designed for speed, for sure\nbut a named prefix like in `(fn my-fn [x])` would be possible?\nyou could just use a deftype?\nyes I could. I also could use defrecord. But for me the code is more readable using reify.\nit\u2019s ok. I\u2019m not totally lost in the profiler. I only liked to ask if I was missing something. But thanks.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "920",
    "text": "Is there a way to control the name of a `reify` class? I like to have that for profiling to be able to see which implementation I have in the profiler.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "921",
    "text": "then you can implement your own `named-reify` macro on top of `deftype` and `new`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "922",
    "text": "<https://medium.com/dartlang/making-dart-a-better-language-for-ui-f1ccaf9f546c> is there a way to do something like this in clojure?\ntldr: interpolate values into a list like so:\n```\n[:item-1\n (add-when condition?\n   :optional-item-1\n   :optional-item-2)\n :item-2]\n```\nassuming its impossible as macros can't expand to multiple expressions as far as I know?\n`cond-&gt;`\nI use `(concat [:item-1] (when condition? [:item-3 :item-4]) [:item5])`\nyou can do stuff with macros and splicing but its unidiomatic imo\nless performant but I also like ````[:item-1 ~@(when cond? [:item-3 :item-4]) :item-5]```\n^ like this guy :stuck_out_tongue:\n```(cond-&gt; [:item-1] \n  condition? \n  (conj :optional-item-1 :optional-item-2)\n  :always\n  (conj :item-2))```\ns/macros/syntax-quote/\nokokok\nthanks\ngoing to give the concat a go for now, seems reasonably nice\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "923",
    "text": "I still don\u2019t understand why `clojure.datafy.nav` needs both `k` and `v`\nto transform v\nrather, to return a transformed v\nsee this <@Patrice> <https://github.com/stuarthalloway/reflector/blob/master/src/com/stuarthalloway/reflector.clj>\n<@Marlyn> thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "924",
    "text": "`java-time/interval` is in the doc but somehow it looks like it can\u2019t be found (I\u2019m on clojure 1.10)\n`java-time/minus` can be found without problem\n<@Nguyet> surely this would be a question of your java-time version, and not your clojure version?\nI feel like I see many more `clj-*` names than `*-clj`\nis that `clojure.java-time`-the-library?\nIn that case, you will need to add <https://www.threeten.org/threeten-extra/> before you get interval\u2019s\n(they didn\u2019t make it into `java.time.*` but were included in an \u201cextra\u201d library made available by the original proposers of the java.time rework)\nThanks for that! Somehow I missed it in the doc\ncheers!\nYeah, I missed it the first few times too\nAlso, I like that clojure.java-time is correct and such, but it doesn\u2019t feel very idiomatic to use from clojure. I looked at juxt/tick, but thats just not complete and/or mature\u2026\nare there other libraries I should be looking at? That are both correct and have nice clojure APIs?\nMy 2c: learn the java time api\nAll the clojure wrapper libraries get some things fundamentally wrong\nHave you evaluated tick at all? I think it has a novel twist\nnope\nwhat's the twist <@Sixta>?\nIt works in clojurescript\nI can't speak too much about the design, as I've just been peripheral to it.\n(btw, not trying to offend, tick just doesn\u2019t feel \u201cdone\u201d to me just yet)\njava.time fits all my needs\nTick is trying to stick to the java.time api. \n<@Tammera> we're using it in production with several clients, but you're right that there's still some gaps. \nRight, I like its way of doing things tho, feels less like a direct wrapper around a java api. Thats why I was asking, I was hoping that I completely missed something as elaborate as clojure.java-time, but with a more clojure-esque API\nAnd thats in the little things right, for example, clojure.java-time does a lot of \u201cjava-style\u201d overloading\n<@Tammera> are there any particular gaps that are a problem for you?\nIt\u2019s been a while, can\u2019t come up with specifics sadly\nIf you check it out again, please feel free to open issues for anything you're missing.\nWill do!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "925",
    "text": "I'm generating the following code using reflection on a javaclass to generate a reify that will implement all methods on the class. The end result looks like this:\n<https://gist.github.com/jjttjj/95ff42fedd49893d51a4333da3abe436>\nThe type hints on return values and arguments are needed to avoid ambiguity.\nCurrently I'm generating the code as a quoted list of symbols, spitting it to a source file, and reading it. Is there a better way to do this? Is it possible to generate an elaborate reify like this with a macro?\nmost macros return a list of symbols (the quoting is done so they remain symbols)\nthe gotcha is that for metadata like type hints you can't just use the metadata reader macro, you need to return a call to `with-meta`\nso instead of `^void foo` you'd have `(with-meta foo {:tag void})`\nok so ```\n(^void currentTime [this ^long time]\n          (cb {:time time, :type :currentTime}))\n```\n\nwould become\n```\n((with-meta current-time {'void true}\n            [this (with-meta {'long true} time)]\n                    (cb {:time time, :type :currentTime}))\n                    ```\nand that should work fine?\nI edited the metadata after checking in my repl\nok cool\ngot it thanks\nthe with-meta call should only wrap the symbol, and the macro quoting would mean it needs to look different from that\nbut that's the basic idea - you need to return a list that has the right metadata on the symbols in it\nok thanks\nI think people have forgotten or don't know, but, Insomnia, the REST client ( <https://insomnia.rest/>) has been supporting EDN without any add-on since some months ago\njust thought it was worth a mention. I know about this because I added the feature :stuck_out_tongue:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "926",
    "text": "Trying an 'official' reducers example, but adding a println:\n\n```\n    (-&gt;&gt; (range 100000)\n         (r/map (fn [x]\n                  (println (Thread/currentThread))\n                  x))\n         (r/filter even?)\n         r/foldcat)\n```\n\n...how come it always prints the same thread? I'd expect things to use all available cores\nShould have googled :slightly_smiling_face: <https://stackoverflow.com/a/26291136/569050>\nRange is reducible though :thinking_face: \nhow do I get reducers to process each member of the coll in a separate thread?\n\nI tried with `(fold 1 ...)` but no luck. The forkjoin pool _is_ used, but each member is processed in the same thread, which proves sequentiality\n\n(I might be better off with pmap. But reducers might give some flexibility)\nMaybe this is my answer:\n\n&gt; . Similarly, reducers is elegant, but we can't control its level of parallelism.\n\n<https://github.com/TheClimateCorporation/claypoole>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "927",
    "text": "Hi, Im new to docker and have to add a clojurescript project to an existing Dockerfile. It uses the ubuntu:latest. Adding `leiningen` to apt-get install fails. Does anyone have a basic configuration to show how to do this in ubuntu image?\nI need something like this: <http://jsondb.io/> with a focus on performance.\n\nBut with the ability to query JSON/EDN without parsing the whole database up front (performance).\nAnd the ability to write objects very fast, without re-indexing the whole database.\n\nRight now I\u2019m doing the naive thing: read a giant EDN file, query it and write a giant EDN file.\nOne way of optimizing this is to split the EDN file into multiple partitions and only read/write the necessary partitions, but there might already be a tool which does this.\nAnother requirement: it must run with GraalVM. I already tried nippy/codox which currently doesn\u2019t run with that.\nMore info: <https://github.com/borkdude/clj-kondo/issues/22>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "928",
    "text": "here is a dockerfile that has leiningen + nodejs <https://github.com/ipfs-shipyard/cube/blob/master/Dockerfile>\nbased on the official clojure image rather than ubuntu though\nif you're planning to use in production, you probably want to lock down the dependency versions, as they are not in the example linked above\nsmartest function composition I ever wrote:\n```\n(defn- wrap-dedupe-args [f]\n  (let [dedupe-fn ((dedupe) (fn [_ args] (apply f args)))]\n    (fn [&amp; args]\n      (dedupe-fn nil args))))\n\n(let [f (wrap-dedupe-args prn)]\n  (f 2)\n  (f 2)\n  (f 2)\n  (f 3)\n  (f 3))\n2\n3\n=&gt; nil\n```\n[ab]using transducers to deduplicate side-effecting calls by their args\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "929",
    "text": "Does anyone know of a library that normalises local variables? `clojure.tools.analyzer.passes.jvm.emit-form/emit-hygienic-form` seems to be the closet, but just appends a `__#&lt;int&gt;` to the var labels. I would like to rewrite variables into the form `x__#&lt;int&gt;` where `x` is an arbitrary constant. This would mean that `(defn f [a b] (let [a (+ a b)] a))` would become `(def f (fn* [x__#0 x__#1] (let* [x__#2 (+ x__#0 x__#1)] x__#2)))`\nyou could walk the ast and rename them probably? take inspiration from tools.analyzer.passes.uniquify\nyeah, that\u2019s exactly what I have been doing, was having some problems with dynamic bindings so I just thought I would see if someone had already written this\u2026\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "930",
    "text": "The key to this is to get the 'right' chunk size for fork/join packets. If it is too small you will just context switch. Too large (for your collection size) won't make enough packets to cover the available cores. Have a look at this <https://github.com/jsa-aerial/aerial.utils/blob/d451f81fc308a7fbae2ca1de22890c2e4f726880/src/aerial/utils/coll.clj#L468>, it has worked very well for me.\nSuper interesting! Will study it\ni needed to use the ubuntu image, finally i've solved that putting this\nRUN wget <https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein>\nRUN chmod +x lein\nRUN mv lein /usr/local/bin\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "931",
    "text": "Is dynamic binding the same as calling a function by variable name?\nIt is formatted very nicely... but I don't understand what it does\nWhat does prn mean?\nhey everyone, i was wondering if there a consensus on the best pattern for a fn defn that can: either perform an operation on one thing or an operation on a collection of those things\ni guess the front runner in my mind is `defn operation [ &amp; args ] ` and then either `(operation thing)` or `(apply operation things)`\nWorth pointing out, `apply` isn't efficient\noh yeah? how so?\ni\u2019m not super concerned with that at the moment, but it\u2019d be good to know in the periphery\nIIRC it boils down to the fact that you are creating short-lived lists in runtime, adding pressure to the GC\nMaybe relevant: <https://stuartsierra.com/2015/06/10/clojure-donts-heisenparameter>\nhmm, cool\nI like your way better... but someone made a ppa...\nsudo apt-add-repository ppa:/mikegedelman/leiningen-git-stable\nsudo apt-get update\nsudo apt-get install leiningen\nmy advice would be not to do that\nIt just tracks the stable lein repo on github\nin that, every time I've ever done that, I regretted it later\neither pick \"one thing\" and use it with seq ops like  map/filter  etc or  make it take a coll\n<@Epifania> is 100% correct. Lock the clojure version, lein version and dependencies versions... or you could be in dependency hell if just 1 library version changes\ninteresting. that\u2019s what i have now, but it feels kind of gross\ncould be lack of experience, though\nthanks!\nOr just apply the new list of arguments to the function?\nReading the docs... it looks like it applies new args to the function\nthat wouldn't work\nahhhh ok, so it does apply the arguments as a whole\nI was thinking that apply operated on each argument, 1 at a time\nyeah you will also see sometimes `(reduce + [1 2 3])` which is something like `(+ (+ 1 2) 3)`\n<@Onita> I think the idiomatic thing to do is to define a function that operates on one, and then compose that with the various seq operations like `map` `reduce` `transduce` etc.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "932",
    "text": "Does '''apply''' operate 1 by 1, on each thing?\nHard to parse what you are getting at\nFunction overloading? Argument overloading\n(apply + 1 2 3)\nyou need to do `(apply + [1 2 3])`\nwhich is the same thing as `(+ 1 2 3)`\nnot 1 by 1\ne.g. apply the function to each argument\nsorry i think i made a mistake\ngenerally i\u2019m looking for the optimal way to write one or more functions that do the same thing but either operate on one item or several\n[idiomatic|optimal]\nsounds like two functions has worked well\nyou can use multi arity functions for that\nyou need a map\ni don\u2019t think multi arity functions would work; i should have specified the \u2018several\u2019 is a collection\n<https://clojuredocs.org/clojure.core/map>\nmap is used to work on collections\n<@Jasmine> suggested map\nright, i guess normally that would be the answer. i guess my question is too abstract. i\u2019m specifically looking at database inserts.\ngotcha not sure what you're trying to do maybe i missed an earlier convo\nnope, i deliberately asked the question a little too abstractly. my bad\nso you have a fn like `insert-item!` that you might call like `(insert-item! item1)` or `(insert-item! [item1 item2])`?\nso, in particular, either way i\u2019d be calling `jdbc/insert-multi!`\nright\npersonally, I thought you were just trying to apply a new set of arguments to the same function\u2026 method overloading\nbut you mean a collection\nyeah, not quite\nin the case of the single item, i\u2019d be looking at `insert multi! [item]`, in the other `insert-multi! items`\nand was trying to avoid `seq? item`\npersonally I think that \u201coverloading\u201d your function signature like that is usually a bad idea\nand I would consider it un-idiomatic\nI agree\u2026 be careful with overloading, especially multi arity\nin my opinion, multi arity is really object orienated style\n\u201coverloading,\u201d meaning have it accept either a collection or a single item\nright\nok, makes sense. sounds like that is the consensus\nI would prefer it to always operate on colls. I agree with Alex, I\u2019ve done stuff like that before and usually come to regret it :grimacing:\nyeah that\u2019s interesting. could you elaborate a bit on how, if any details come to mind?\n<@Faustino> `prn` is similar to `println` which prints it's arguments, and the difference is `prn` prints objects so they can be read back. In practice it usually means that `prn` prints some additional data that helps to understand what exactly is being printed. For example, `(prn false \"false\")` will print `false \"false\"`, making it easy to understand what exactly these printed values are (compare to `(println false \"false\")` that will print `false false`).\ncould you just put the single item into a collection?\nso that the function always takes the same type\ni could, yes. just call it as `do-thing [item]`\nbut i\u2019d rather not have to remember to do that\nor, rather force others to remember to do that\ncould just convert it, inside the function? no?\nyup. but i would also like to avoid `seq? item`. which, again, is kind of a personal aesthetic preference, i guess.\n`run!` is like `map`, but for applying the same side-effecting function\nahhh ,gotcha, avoid type checking\nare you trying to do a bulk insert operation?\n<@Jasmine>, that\u2019s cool, didn\u2019t know that. i would have reached for `doseq`.\ninstead of inserting 1 by 1\nyeah.\nso, anything map-like is not particularly desirable\nahh, it makes it more readable\nif it's a bulk insert i think it should only work on a collection\nwell that's the assumption i would make if i saw something called insert-multi\nwhat about looking for a batch insert? are you just trying to make the map for efficient?\nin ruby, we would batch insert with map\nsince ruby is very slow\nthere\u2019s definitely a batch insert. my concern was more around how to wrap it.\ni\u2019ll just go with two functions\n<https://clojuredocs.org/clojure.core/partition>\nthere is partition if you want to break the collection into smaller chunks\nthanks!\njust in case you have millions of items in the collection, and don\u2019t want to suck up all your JVM\u2019s memory\u2026 since JVM can use a ton of memory\ncan I ask a question though? why would a type check be bad in this case?\ni can\u2019t say i have a super rigorous backing for that preference\none thing is i just find that, if i can completely avoid it, it reduces the number of code paths i could be looking at\nwhich is definitely an argument for more than one function\nya, the type check is also coupling\u2026 still thinking\nmy thought, comparing this to OOP, is to use dependency injection\nbut only use that pattern if you find that you need lots of duplicate functions\nbuild yourself a to_collection function, that can turn any other single data into collection type\nbut that\u2019s only going to be good, if it\u2019s readable, and 1 to_collection function can save you from writing dozens of duplicate code\nso it\u2019s a little premmature to use the pattern\nyeah, also a great idea\nseeing how this one plays out may be a good indication\nwhen I've created functions that take 1 or N, it's usually because I haven't thought enough about how the function is going to be used.  and when I  have created it, I have ultimately had it break down because my single element actually turns out to be a collection itself and I can no longer distinguish\nif the function you're writing is \"insert-multi\", I can't imagine it makes sense to take anything but a coll\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "933",
    "text": "in general, Clojure rewards \"thinking in collections\". you have a huge library of seqable-&gt;seqable functions for doing so, threading macros like -&gt;&gt; built to create pipelines, etc\nmany functions tend to be a predicate (takes a single element and returns logical result) or a transformation (element -&gt; element)\ngenerally I find you should mostly  do those, and use sequence functions to transform from collections of elements to collections of elements\nThe other place I see it used us as an attempt at aesthetics.\nwhich, imo, is false\nmuch better aesthetically to have a single calling convention than 1 or N\nNot being able to later distinguish between 1 vs. N case, because the 1 case is itself a collection, is certainly a bad place to end up.\nI always end up there\none place that makes this stuff visible is creating specs\nif writing the spec for the function args is hard, then that's a good sign that you have possibly introduced unnecessary complexity\nOn the comment earlier of \"could be called as (do-join [thing]), but would prefer not to remember that\", I don't want to sound too forceful, but if the doc of the function says that it _always_ takes a sequence of 'thing', then in Clojure the syntactic overhead of putting thing into a sequence like a vector is very very light, and common in Clojure code.\nI'll +1 Alex here. Early on in our Clojure development (2011), we wrote quite a few functions that could either take a collection or a single element -- and that code has been an albatross ever since, until we rewrote it to either always take a collection (and pass `[item]` in calls that had a single item) or to always take a single item (and call `map` on it for places that wanted a collection processed). In other words, Stuart Sierra's \"heisenparameter\" recommendation is what you should be doing :slightly_smiling_face: (or rather \"don't\").\nI still have angst about stest/instrument for  example <https://clojure.github.io/spec.alpha/clojure.spec.test.alpha-api.html#clojure.spec.test.alpha/instrument>\narguably done in the sake of aesthetics, but it makes me deeply  uncomfortable\nIs `instrument` + `instrument-multiple` bad for aesthetics? It sounds good to me\narguably multi is more primary here, so I'd probably argue just doing `instrument` that takes a coll\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "934",
    "text": "I am new. So it\u2019s better to just convert the single item into a collection type? then pass it to the function. So the function always expects the same type (collection)?\nand rely on function doc comments to know what to pass to it?\nimo, yes\nI definately in favor of functions taking only 1 type and returning 1 type\nBecause functions calling other functions... if just 1 function in the chained calls, stack, messes up, you have to trace it, then possibly refactor code all over the place\nFunc1.func2.func3.fun4 oops... func4 wanted a collection, not a string\nIn ruby... they say... just don't use more than 3 chained calls :rolling_on_the_floor_laughing:\nI started writing the return type into my function names, to make code readable...\nfunc_coll.func_str.func_int\nIn general, yes, but if you have a function that just calls `map` on its argument, it's probably better to name the function that is being applied, and to have callers use `map` on that instead.\nwell I can't endorse that :)\nthat notion is called Hungarian notation i think.\nand the only popular vestiges that I know of are in interface names\nSo its ok for Clojure functions to handle multiple types? Please correct me\nit's possible. whether it's \"ok\" is entirely contextual\ncertainly there are many polymorphic functions in the core lib\nfor comparison, OCaml has different math functions for floating point vs. fixed point (calling `+` on a float is an error, calling `+.` on an int is an error)\nclojure is pretty deeply polymorphic, it's one of my favorite things about the language\nprobably one of the most annoying things about OCaml IMO\nnot specifically the +/+. thing but the general lack of modular implicits\nOCaml is pretty strict on types?\nthey also have different fold (aka reduce) for different sequential collection types - very annoying\nextremely so - ML set the paradigm for modern type-safe languages\nF# was annoying like that as well\nEveryone keeps praising Haskell strict types.\nBut then people say opposite. That inferred types is bad\nbut back to Clojure - polymorphism is normal, and it works well - especially the way of writing code to interfaces / protocols\nI have no idea. I do think a lack of polymorphic duct typing is annoying. With the + operator\nyeah, F# was explicitly an attempt to copy OCaml for the CLR\nwasn't it even a strict superset originally?\ntype inference is just a convenience for strict typing - if your system is strict enough the compiler can know which type has to be used\nOCaml has an object system that is 100% duck typed, but the percentage of people writing OO code in OCaml is small\nRegarding earlier... I think he just needs an implicit type... e.g. single string converts into collection with 1 string element.\nI think interface dispatch / polymorphism is the good part of OO and I'm glad Clojure embraces it while avoiding concrete inheritance and enterprise design patterns\nCan clojure do implicit conversions? Or is that bad idea?\nHmmm. Scala and C++ seem to be against implicit type conversions. Not sure about Clojure.\nit\u2019s basically a lack of type classes what makes this annoying (if I\u2019m not mistaking?)\nimplicit type conversions is something different from polymorphism\nexactly - or just a value ie using `binding` form\nClojure doesn\u2019t convert a string to an integer automatically\nnor a string into a list of strings, nor vice versa.  I certainly wouldn't want it to automatically do so.\nYa... (+ \"a\" \"b\") gives me a cast error\nI kinda don\u2019t like functions who deal with either 1 thing or a list of things. It begets a lot of checks like: am I dealing with a collection here?\nthat sounds right but I'm not sure\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "935",
    "text": "<http://xahlee.info/clojure/clojure_binding_forms.html>\nHow does it know what nth is?\nI like to work with a single unit and find a way to arrange that function in a way that can process more volume if necessary. Sometimes just map of course :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "936",
    "text": "```\n(defn f [])\n(def g #())\n```\nIs there any reason why calling `g` returns a `clojure.lang.PersistentList$EmptyList` where as calling `f` returns `nil`?\nI think you mean the opposite <@Joette>\n:smile:\noops you edited :slightly_smiling_face:\n```user=&gt; (macroexpand '#())\n(fn* [] ())```\nWas this a conscious design decision?\n`#` means \"a function that has the following form as its body\"\nah a meant <https://clojuredocs.org/clojure.core/binding>\nso for `#()` the following form is `()` the empty list\nah, ok\nfor `#(+ 1 2)` the following form is `(+ 1 2)` which is invoking the function + with the args 1 and 2\nbut then again `()` is an invalid form unless it is a macro\nsorry - quoted `'()`\nnope\n```\nuser=&gt; ()\n()\nuser=&gt; \n```\nwhere did I get that from?\nI was certain :sweat_smile:\nsome other lisps are like that\ncoworker had a question about `reduce-kv`: is this purely convenience? Seems like a strange function for core (despite us using it a bunch)\n`reduce-kv` allows consuming a map without boxing the entries `[k v]`\n```\n clojure.lang.IPersistentMap\n (kv-reduce \n  [amap f init]\n  (reduce (fn [ret [k v]] (f ret k v)) init amap))\n```\nis in core. isn't this the naive thing?\n<https://dev.clojure.org/jira/browse/CLJ-1879>\nsorry for breaking the discussion but Stuart talked about the `(if (coll? arg) arg [arg])` antipattern here <https://stuartsierra.com/2015/06/10/clojure-donts-heisenparameter>\nthanks <@Marlyn>. gonna read over and mull this.\nIt is basically a more robust way to encapsulate lexical scope of vars\nAnd then return control back to the original scope\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "937",
    "text": "Or no?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "938",
    "text": "so, I can start a rebel-readline like this:\n```\n  clojure -Sdeps '{:deps {com.bhauman/rebel-readline {:mvn/version \"0.1.4\"}}}' \\\n  -m rebel-readline.main\n```\nand an nrepl like this:\n```\n  clj -Sdeps '{:deps {nrepl {:mvn/version \"0.6.0\"}}}' -m nrepl.cmdline --interactive\n```\nbut, how do I do an nrepl + rebel-readline?\n<@Adolph> perhaps aliases? <https://clojure.org/reference/deps_and_cli#_aliases>\nsorry if not related :slightly_smiling_face:\nis there an inline way to express it without needing to make changes to `deps.edn`?\nthere's probably something fancy you can do with `-e` but it's not going to be fun to type\nWhat is the idiomatic way of generating a list or map from a starting value that has some function applied to it iteratively? This would be the equivalent of an imperative for loop where the end condition is that the initial value has reached or dropped below 0.\nFor example, a credit card payment calculator\n`iterate`\n```\n```\nuser=&gt; (doc iterate)\n-------------------------\nclojure.core/iterate\n([f x])\n  Returns a lazy sequence of x, (f x), (f (f x)) etc. f must be free of side-effects\n```\ndo you mean like `clj -A:1.7:bench:test...` where 1.7, bench, and test are three separate aliases you have set up?\n\nyou just use the -A flag\n<https://dev.clojure.org/jira/browse/CLJ-1906> is also a thing\nthat's all I have, might need to ask again if that isn't what you need :slightly_smiling_face:\n&gt; Is there a way to control the name of a `reify` class? I like to have that for profiling to be able to see which implementation I have in the profiler.\n\n<@Laveta> have you found any workaround?\nI think at that point you can just use `deftype` right? or does it lack some advantage reify has?\n(it doesn't capture scope like reify, but you can translate that into field(s))\nOk, so I looked over the docs and they aren't very clear in how exactly it works. Specifically I have an issue where the examples use `partial`, but that seems to only work when the unknown argument is not the first argument. In a simple function where one number is subtracted from the other this won't work because it's the first number that is unknown, not the second.\nFor example, let's create a simple function for paying off a 0 interest balance so the function would be `(- balance payment)`. It's `balance` that needs to be replaced; not `payment`.\nin my case, I have a docker container with clojure/clj binaries in it and no access to the filesystem and can't mound things in ... if I want to string together multiple deps and two main entrypoints (e.g.: rebel-readline and nrepl mains), how would I do that?\nI've never thought about it, but longish classnames generated by `reify` are indeed inconvenient. Yeah, no scope capturing would be a downside. Maybe one could also try overriding `toString` inside `reify`, but then it's probably impossible to `defmethod print-method` for such instance..\nyou could probably `defmethod` print-method for `(class my-reify)`\nand yeah, overriding toString does also work iirc\nIs there a way to use `partial` when the first argument is the one you want to replace?\n```user=&gt; (reify java.io.Closeable (close [this]) (toString [this] \"my closable\"))\n#object[user$eval138$reify__139 0x37ddb69a \"my closable\"]\n```\n<@Reiko> you can define it, the hard part is a good name\n?\npost a full example of what you're looking for\nI just gave a specific example\nwhat is the input, and what is the full sequence that you want to get out?\nalso `(partial #(func % second-arg))` if you don't want to think of a good name\nfair enough - a cute name for it that I've seen is qartial (since q is a backward p)\nthat's fantastic\nI can't take credit, and in practice I came back and found it used and forgot what it meant and expected it to be some kind of polynomial function\nso \u00af\\_(\u30c4)_/\u00af\nI see what you mean now, you are referring to the command line argument for the entrypoint for each dep.\n\nwhat is your reason for trying to use two entrypoints at the same time?\nyeah, cool! not ideal, but better than the default\nCould you specify your own entry point and call into your dependencies' entry points from there?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "939",
    "text": "What\u2019s the difference between fressian and nippy?\nare they conceptually the same but different implementations, or cover entirely different use cases?\n<@Clarine> maybe this helps - seems like nippy is trying to be faster <https://github.com/ptaoussanis/nippy/blob/master/src/taoensso/nippy/benchmarks.clj>\nit tests and records speed of both\nnippy is like: what if we made bytes out of things instead of printing them and gzipped those bytes\nso fressian is better for reading/writing EDN to disk and nippy may be a bit faster than that?\nwell, I want the readline capabilities of rebel-readline and I want the nrepl port listening at the same time\nfressian is like: lets take a survey of serialization formats, find one that matches what we want for clojure, and include some features like caching to improve performance\nso, I guess maybe that's where that fancy `-e` work would need to come in\nif I have a command line app that needs to read and write EDN data from disk and there is no long-running process, does fressian still make sense?\nI have only used nippy in the context of using libraries that brought nippy along for the ride, and in ever case formed an unfavorable opinion of those libraries, which has rubbed off on nippy\nhow much data?\nthe max edn file I\u2019ve seen right now is about 2MB. but I\u2019m going to split it into multiple EDN files anyway, so probably smaller\nI would go down a list something like pr &gt; transit &gt; fressian\nbut very likely somewhere between pr and transit I would switch to using apache derby\nI\u2019ve tried Derby but that doesn\u2019t compile with GraalVM :disappointed:\nI think Stu's fressian talk  from years ago did a pretty good job at highlighting the goals and tradeoffs of fressian (pre-dated transit, which has different tradeoffs)\n<https://www.youtube.com/watch?v=JArZqMqsaB0>\nplus, that's like peak mullet Stu\nhaha. thanks\n<@Reiko> how about:\n```\nuser=&gt; (let [payment 2] (take-while pos? (iterate #(- % payment) 11)))\n(11 9 7 5 3 1)\n```\n?\nEnded up with something very similar, but instead of `pos?` I'm using `(&gt;= 0 %)`\nThough it actually makes more sense to use `pos?` thinking about it more as depending on the last balance and payment amount it may be less than the usual monthly payment\n`binding` is used when you want to redefine the value of a variable within a code block. The variable needs to have been the `^:dynamic` meta - so lets say you have a variable that is defined in some other namespace. I think this example should make sense: ```analysis.core&gt; (def ^:dynamic hello \"hello\")\n#'analysis.core/hello\nanalysis.core&gt; (defn print-hello []\n                 (println hello))\n#'analysis.core/print-hello\nanalysis.core&gt; \nanalysis.analysis&gt; (binding [analysis.core/hello \"bye\"]\n                     (analysis.core/print-hello))\nbye\nnil\nanalysis.analysis&gt; ```\nIt is thread local - the macro expansion makes this clearer: ```analysis.analysis&gt; (macroexpand '(binding [analysis.core/hello \"bye\"]\n                                   (analysis.core/print-hello)))\n(let*\n []\n (clojure.core/push-thread-bindings\n  (clojure.core/hash-map #'analysis.core/hello \"bye\"))\n (try (analysis.core/print-hello) (finally (clojure.core/pop-thread-bindings))))```\nCan I just say how much I love `tap&gt;`? :heart:\n(and REBL :slightly_smiling_face: )\nsure :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "940",
    "text": "It's probably a subjective question, when and where to start nrepl/rebl - so you may just want to ask again in the main chat :slightly_smiling_face:\nI did a quick comparison between pr-str, fressian and transit.\nReading: EDN 100ms, Fressian 20ms, Transit 20ms\nWriting: EDN 74ms, Fressian 50ms, Transit between 1000 and 2000 ms.\nSo it seems that Fressian is the clear winner here, and I don\u2019t know why Transit writing takes that long\u2026\nThe map has 799 keys and is about 1.8MB in raw EDN.\n<@Marlyn> <https://github.com/borkdude/clj-kondo/blob/fressian/src/clj_kondo/main.clj#L14>\nif you want, I can provide you with the data\nOffhand, it is benchmarking file io\n/tmp maybe a fast in memory filesystem, etc\nthis is my home folder\noh hmm, I\u2019ll try to write fressian not to /tmp\nIt is also not accounting for JIT warmup\nalso, not related to performance, doing defs like that is super gross\nclojure is not scheme, def always creates a global name, no matter where it is nested\nit is, that\u2019s the point of this tool: <https://github.com/borkdude/clj-kondo/#rationale> :slightly_smiling_face:\ndon't do that though\nI know that it\u2019s doing that, I wanted to inspect the value after the run, this is throwaway code\nI'd suggest also trying Jsonista\nAnyway, we use transit at work all the time, it's fast.\nSomething is wrong with the benchmark\nlike, it is entirely possible to build and operate large complex clojure code bases without inline defs to debug things\nI would try to eliminate file IO and account for JIT and then recompare\nMy assumption is that transit is faster than edn and slower than fressian\nthe idea that you do it so often that you need a tool to make it easier is just, I dunno, what are we doing here\nI don\u2019t make it easier, I just don\u2019t want to commit it if I\u2019ve done it. I find it easy to capture e.g. requests and then inspect them. Works for me. You can also use an atom for this, or scope-capture, I don\u2019t care.\nI\u2019ll re-benchmark tomorrow, it\u2019s getting late here.\nI\u2019d be curious to hear if any one of you can reproduce this. I\u2019m afk now. Goodnight.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "941",
    "text": "Kinda hard to say without code\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "942",
    "text": "I updated the benchmark so I can run it with either edn, fressian or transit from a cold JVM as a cmd line invocation.\nThese are the numbers (code is above it): <https://github.com/borkdude/clj-kondo/blob/fressian/src/clj_kondo/main.clj#L59>\nThis is the test file: <https://www.dropbox.com/s/qkhcm5x9fkhvw1f/test.edn?dl=0>\nI\u2019m seeing the same thing with transit.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "943",
    "text": "what's a simple way of testing if a given object is a clojure function? (as defined by `defn`/`fn`)\n<@Loria> `fn?`\noops, how did I ever miss that :sweat_smile:\nah, so it's testing for `instance?` of `clojure.lang.Fn` instead of `clojure.lang.IFn`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "944",
    "text": "Yeah the docstring explains the diff. Also available: `ifn?`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "945",
    "text": "`ifn?` is almost always preferable\n<@Clarine> it would be worth double-checking that all these paths are buffered.  your edn code goes through io/reader and spit which are both buffered, but I'm not sure about the others. certainly the transit perf seems higher than I'd expect, if it's not buffering, then might be worth a check to make sure there's not a bug that's crept in. I doubt this has been profiled in a long while.\nalso, for a big file like this you could probably use larger buffers than the default\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "946",
    "text": "What is the data structure behind Clojure persistent maps? (I need to port them to another language.)\n<https://github.com/clojure/clojure/blob/master/src/clj/clojure/core.clj#L379> `hash-map` -&gt; `clojure.lang.PersistentHashMap` -&gt; `clojure.lang.APersistentMap` -&gt; `Map` if I\u2019m following your question and inheritance chain correctly.\nI just watched Rich's video... vectors are based on tries (trees). Hash maps are probably similar. They also use shared data.\n<https://clojure.org/reference/data_structures>\nThere is hashed and sorted maps. I am not 100% certain they use tries. But probably some kind of branching data structure similar to what underlies vectors.\nWhich language?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "947",
    "text": "<@Jasmine> when I write to a `(java.io.ByteArrayOutputStream.)` it\u2019s already much faster\nI tried to use fressian with GraalVM native. This code works:\n```\n(fressian/create-reader (io/input-stream (io/file clj-cache-file)))\n```\nbut this didn\u2019t:\n```\n(fressian/read-object (fressian/create-reader (io/input-stream (io/file clj-cache-file))))\n```\nThis is the output: <https://gist.github.com/borkdude/5f19d6bb0c3f180273786ae34f63f60f>\nI see spec being mentioned in the error message, I see it often with Clojure libs compiled with GraalVM, but it\u2019s weird how this can be triggered by only adding `fressian/read-object`\nI believe this is a problem with Clojure 1.10.0 and Spec 0.2.176+\nIt's referenced, indirectly here: <https://dev.clojure.org/jira/browse/CLJ-1472> (ignore the bit about android, the juicy bit is at the end)\nI hit the same issue yesterday, doing some experimentation with Graal and Clojure. I had to go back to Clojure 1.9.0 to compile a native image.\nthank you, I\u2019ll try 1.9.0\nAt least Transit JSON works with Graal and 1.10. I couldn\u2019t get MessagePack working:\n```\nMar 29, 2019 9:41:43 AM org.msgpack.template.builder.TemplateBuilderChain createForceTemplateBuilder\nWARNING: Failed to create a TemplateBuilder reflectively\n```\nConfirmed, I can get fressian working when dropping back to Clojure 1.9.0 and adding some type hints about FressianWriter + running with `--report-unsupported-elements-at-runtime`. But since Fressian and Transit are pretty close in performance, I\u2019m going with 1.10 and without the flag.\n<@Alyce> did you try a fork of Clojure with that patch applied btw? With tools.deps that should be possible I think?\nre: <https://clojurians.slack.com/archives/C03S1KBA2/p1553827570192000>\nwhat should I do to buffer the writing to a file?\nI currently have something like:\n```\n(let [writer (transit/writer (java.io.BufferedOutputStream. (io/output-stream (io/file \"/Users/Borkdude/temp/transit.json\")) (* 1024 1024)) :json)]\n                      (time (transit/write writer edn)))\n````\nBut I still get very slow writes\nI\u2019m not seeing any difference with older transit versions, so it must be something on my side\nIf I need a `BufferedWriter` I\u2019m not sure how to do this with transit\nHi, no. Didn't get round to it sorry.\nI think it would be fine to always return a map.\neither ```{:invoice {}}```\nor ```{:error \"I am broken\"}```\nAs a workaround I can first write to a bytearrayoutputstream.\nAnd then surrounding code can easily check for the presence of an error.\nBut like most things it comes down to style and possibly what else is happening nearby in the code.\nYeah, I see <@Nicki> . I\u2019m wrapping inside my Result map format\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "948",
    "text": "hey clojurians, how you guys usually do the follow\nI have one business rule function ( create-invoice ) which could create an invoice or based on some business rule fail.\nshould my function return two different shapes ( on success the invoice and on error a map with ::error key  ) ?\nshould my function throw an exception and my handler dispatch properly to handle that ?\n\nhow you guys normally do that ?\n<@Marvin> use pure data and avoid Exceptions whenever you can\n<@Toby> yeah, so you mean create a wrapper result ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "949",
    "text": "Hello clojurians, I\u2019m looking for a tutorial project implementing simple CRUD API powered by Datomic (ideally with front end in cljs) to use for training purposes with some newcomers. I went through some awesome-clojure lists, with no luck. My next best option would be to write something on top of mbrainz.\nThis is the only one that I can think of , off hand: <https://github.com/robert-stuttaford/bridge> cc <@Korey>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "950",
    "text": "&gt; A persistent rendition of Phil Bagwell\u2019s Hash Array Mapped Trie\n<https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/PersistentHashMap.java>\nthanks, that looks promising\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "951",
    "text": "what is the equivalent of the following in core.async?\nfoobar :: (a -&gt; b) -&gt; (Chan a) -&gt; (Chan b)\n<http://clojure.github.io/core.async/#clojure.core.async/chan>\nlets you pass a transform transducer into the channel itself, if you are in control of constructing the channel\nif you have been given a pre-existing channel then I think you would have to use\n<http://clojure.github.io/core.async/#clojure.core.async/pipe>\nNone\ncorrect?\nthat sort of thing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "952",
    "text": "Depends on the context \u2014 if you can\u2019t really do anything about it, you might throw an exception and let your top-level error handle deal with that (wrap it in a nice HTTP status, for example). Don\u2019t forget `ex-info` which allows you to put arbitrary data in the exception so you can do further dispatching there as well.\nso <@Aubrey> , Yeah, I tend to not control my flow using exceptions . business case rules I\u2019m returing a Result Wrapper map which the caller should if the   ::error key exists or not \u2026\ncan you enumerate some cases of ` if you can't really do anything about it` ?\nIn ruby we use {  } for a code block. It has a local scope but also has access to outside scope (closure). But I don't think Ruby can access different namespace scopes like Clojure bind appears to be doing.\nSo instead of passing parameters to a function, you just bind new variable values to the namespace before running code block or functions. It's almost like a global var but probably immutable?\n<@Clarine> I\u2019ll throw CBOR\u2019s hat into the ring if you\u2019re looking for binary serialization formats: <https://github.com/greglook/clj-cbor>\nhaven\u2019t specifically tried it with Graal yet, but it has no dependencies outside Clojure itself, so it ought to work.\nAlso it\u2019s an open standard, so there are other tools out there for working with the data. :slightly_smiling_face:\nhow much of an anti-pattern is it to run `clojure.test/is` in a seq? like:\n```\n(doseq [ex examples]\n  (t/is (f ex))\n```\n`is` is side-effecting, so that is not unusual from what I\u2019ve seen\nmaybe use `are`?\nhm yeah that might be better\n<@Candis> Cool, thank you.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "953",
    "text": "I\u2019m still a bit unsatisfied with this:\n<https://clojurians.slack.com/archives/C03S1KBA2/p1553851903211300>\nAnyone got a better alternative?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "954",
    "text": "Don\u2019t the `<http://clojure.java.io|clojure.java.io>` functions already return buffered streams?\nyou\u2019re going to have a small buffer in front of your big buffer\n<@Candis> I\u2019m now taking a workaround by first writing to a ByteArrayOutputBuffer and then copy that to a file, which is a bit insane. But that only took 45ms whereas directly writing to a file took 1s (EDN read from a 2MB .edn file)\nhave you tried making a `FileOutputStream` directly?\n(then wrapping in a large buffer as above)\nFWIW:\n```\n% ls -lh bench/reddit.edn\n-rw-r--r--  1 greg  staff   123K Jan  9 09:31 bench/reddit.edn\n```\n```\n=&gt; (def reddit-data (clojure.edn/read-string (slurp \"bench/reddit.edn\")))\n=&gt; (time (cbor/spit-all \"reddit.cbor\" (repeat 17 reddit-data)))\n\"Elapsed time: 158.625145 msecs\"\n1683493\n```\nI was preparing a full repro. Here it is:\n```\n$ wget <https://www.dropbox.com/s/qkhcm5x9fkhvw1f/test.edn\\?dl\\=0> -O test.edn \n$ clj -Sdeps '{:deps {com.cognitect/transit-clj {:mvn/version \"0.8.313\"}}}'\nClojure 1.10.0\nuser=&gt;  (require '[clojure.edn :as edn])\nnil\nuser=&gt; (def edn (edn/read-string (slurp \"test.edn\")))\n#'user/edn\nuser=&gt;  (count (keys edn))\n799\nuser=&gt; (require '[cognitect.transit :as transit])\nnil\nuser=&gt; (require '[<http://clojure.java.io|clojure.java.io> :as io])\nnil\nuser=&gt; (def writer (transit/writer (io/output-stream (io/file \"transit.json\")) :json))\n#'user/writer\nuser=&gt; (time (transit/write writer edn))\n\"Elapsed time: 1151.116438 msecs\"\nnil\n```\nNow I can look at your suggestion\u2026\nnow I\u2019m pretty curious how cbor would do - I tried to copy enough of the sample dataset I had to make ~2 MB, but maybe there\u2019s something gnarly in your data :man-shrugging:\n2MB is right :slightly_smiling_face:\n<@Candis> worse:\n```\nuser=&gt; (def writer (transit/writer (java.io.FileOutputStream. \"transit.json\") :json))\n#'user/writer\nuser=&gt; (time (transit/write writer edn))\n\"Elapsed time: 2039.522802 msecs\"\n```\nI meant to also wrap your own buffered stream around that\nok, I\u2019ll try now\nbecause `io/output-stream` is going to return you a `FileOutputStream` wrapped in a `BufferedOutputStream` with the default buffer size, so wrapping a larger buffer _around_ that isn\u2019t going to help you\nsomething like this?\n```\nuser=&gt; (def writer (transit/writer (java.io.BufferedOutputStream. (java.io.FileOutputStream. \"transit.json\") 1024) :json))\n#'user/writer\nuser=&gt; (time (transit/write writer edn))\n\"Elapsed time: 1078.45894 msecs\"\n```\nyeah, but with a larger buffer size\n```\nuser=&gt; (def writer (transit/writer (java.io.BufferedOutputStream. (java.io.FileOutputStream. \"transit.json\") (* 1024 1024)) :json))\n#'user/writer\nuser=&gt; (time (transit/write writer edn))\n\"Elapsed time: 1016.702847 msecs\"\n```\nwell that\u2019s surprising\nNote:\n```\nuser=&gt; (def bos (java.io.ByteArrayOutputStream. (* 1024 1024)))\n#'user/bos\nuser=&gt; (def writer (transit/writer bos :json))\n#'user/writer\nuser=&gt; (time (transit/write writer edn))\n\"Elapsed time: 31.144918 msecs\"\nnil\nuser=&gt; (time (io/copy (.toByteArray bos) (io/file \"transit.json\")))\n\"Elapsed time: 16.471751 msecs\"\nnil\n```\nbtw, the size for the `bos` buffer didn\u2019t matter very much here\nIf desired, I can make an issue for this, but first I\u2019d like to know if I\u2019m not overseeing something\nI don't understand what the problem is <@Clarine>\nwhen I write directly to a file it\u2019s slow (1s). when I write via a bytearrayoutputstream and then to a file it\u2019s 47ms.\nso yeah, the file writing\n<@Clarine> try to add a call to `.flush()` on the File outputstream on your _other_ (non-Transit) benchmarks and see if it makes them 1sec\n<@Marlyn> Like this?\n```\nuser=&gt; (time (let [fos (java.io.FileOutputStream. \"/tmp/foo.edn\") w (io/writer fos)] (.write w (str edn)) (.flush fos)))\n\"Elapsed time: 77.273308 msecs\"\n```\nyeah, need close the stream too\n`with-open`\nThere's a flush() in transit I'm trying to understand\n```\nuser=&gt; (time (with-open [fos (java.io.FileOutputStream. \"/tmp/foo.edn\")] (let [w (io/writer fos)] (.write w (str edn)) (.flush fos))))\n\"Elapsed time: 73.316135 msecs\"\n```\nok... I can't explain this yet.\nsorry, no time to look atm\n<@Clarine> have you tried profiling it with clj-async-profiler?\nI just used that tool an hour ago, but not for this problem. I could try it now :slightly_smiling_face:\nHere\u2019s the flamegraph: <https://www.dropbox.com/s/4wv7bnvdrnhd5u9/Screenshot%202019-03-29%2020.23.16.png?dl=0>\nneat tool, how does it contrast with the other code?\n(what are you profiling, cpu samples?)\nThis is the EDN code from above:\n<https://www.dropbox.com/s/e0viq6lnquavi0i/Screenshot%202019-03-29%2020.28.25.png?dl=0>\nyes, this is CPU\nThe purple here is `flush`: <https://www.dropbox.com/s/2x8ovkcbjfszmgl/Screenshot%202019-03-29%2020.30.34.png?dl=0>\nHere\u2019s the EDN flamegraph (as data): <https://www.dropbox.com/s/2kd67lbhycw2gj9/edn-flamegraph.svg?dl=0>\nHere transit: <https://www.dropbox.com/s/3dfh77wnvbqkkgv/transit-flamegraph.svg?dl=0>\nit seems indeed that transit spends most of its time flushing\u2026\nclearly FileOutputStream.flush() is slow (the red is a native method).  What I don't understand is why we can't make the EDN writing incur the same cost\nby explicitly flushing. (Mind opening a ticket to cognitect/transit-java <@Clarine>?)\nis that in JIRA?\nno github\nok\nmaybe transit-clj might be better\nok\nuntil we know more about what the source of the problem is\nI suspect flush\na\u2019ight: <https://github.com/cognitect/transit-clj/issues/43>\n[ANN] Cognitect Labs' aws-api 0.8.283 is now available! <https://groups.google.com/forum/#!topic/clojure/cOIF5cjAecI>\nflame graphs are pretty nifty - I was using the same tool while profiling clj-cbor :male-scientist: :bar_chart:\nand why does my computer open .svg files as text in Atom\nthis is absolutely great for deciding what to optimize. fuzzing about details that only contribute to a small gain is a risk\ndoes this also exist for cljs?\nits built on a java library iirc\nI would imagine in CLJS it would be more useful to use e.g. the Chrome profiler\nor the React DevTools profiler if you're doing React\nthere are definitely graphs in that style available with chrome/react\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "955",
    "text": "the file writing being slow?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "956",
    "text": "(you can change what is profiled ^^)\nIf the caller can recover from that error, and is expected to be able to, then perhaps an exception is not a good fit. If the caller can\u2019t really handle the error, but have to deal with it anyway to avoid things like nils or errors maps propagating throughout the system, then an exception is perhaps better suited?\ndo you have the file graph?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "957",
    "text": "I am so amazed in what you can put in a svg\nalso, terrified, why does it support scripts :\u2019)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "958",
    "text": "just opened youtube and I saw this: <https://www.youtube.com/watch?v=yqNLDpooFjw>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "959",
    "text": "I think I remember seeing that someone put together a searchable list of companies using Clojure. Is that still live?\n<https://clojure.org/community/companies>\nCheers <@Becki> \nI did find that. But I thought there was a seperate site. I think it was just the google sheets that the community created to collect more\nOh yeah I remember that now\n<@Gene> <https://clojureverse.org/t/crowdsourcing-list-of-clojure-companies/2825>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "960",
    "text": "how do I find the interfaces/protocols a certain value implements?\nhow do I consume a channel? should i just go-loop over it or is there a more idiomatic pattern?\n<@Jeannette> go-loop is good, you will just need a mechanism to stop the loop by having another channel to signal stop or a special value posted on the same channel.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "961",
    "text": "You can use (ancestors (class x)) and extenders maybe?\nn\nA pid file should be reliable\nThere's FileLock class which you can use on top of \"lock file\" (\"exclusive lock\" I guess): <https://docs.oracle.com/javase/7/docs/api/java/nio/channels/FileLock.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "962",
    "text": "Or just detect when the input channel closes.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "963",
    "text": "I wrote a post about question mark suffixes, not sure it's worth <#C06MAR553|announcements> , so I'll post it here: <https://vlaaad.github.io/2019-03-30/question-marks-in-clojure>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "964",
    "text": "is there a reliable way to lock an entire directory (for reading and writing) over multiple processes in Java?\na simple but maybe not reliable way would be to write a \u201cpid\u201d or \u201clock\u201d file and wait for the process which created that file to remove it\n<@Clarine> Is there a way to do that in _any_ lang?\nSeems like something that would have to be OS enforced. I\u2019ve not heard of anything like that.\nThanks!\nawesome!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "965",
    "text": "Many Linux/Unix variants have `mktemp` commands with guarantees of safety if many processes are trying to do so at once.  I wouldn't be surprised if there are other related system calls and/or even utility commands that apply for creating and removing lock files.\nThis may have some pointers to such commands that are on at least some Linux systems: <https://stackoverflow.com/questions/185451/quick-and-dirty-way-to-ensure-only-one-instance-of-a-shell-script-is-running-at>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "966",
    "text": "Why doesn\u2019t this Java interop work?\n\n```\n(String/format \"Hello, %s!\" \"Larry\")\n```\n\nI get this error message:\n\n```\nExecution error (ClassCastException) at bg-clj.core/eval2010 (form-init14869047494885852816.clj:1).\nclass java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\n```\n<https://docs.oracle.com/javase/7/docs/api/java/lang/String.html#format(java.lang.String,%20java.lang.Object...)>\n`String#format` takes a `String` and _and array of `Object`_\nThe `Classname...` syntax in Java means \u201cvarargs\u201d, but it actually unpacks to an array in the compiler. So `Object...`means \u201cObject array\u201d\n<@Suanne> ^\nSo if you want to use `String#format`, you must do something like: `(String/format \"Hello, %s!\" (object-array [\"Larry\"]))`\nOR (and this is the preferred route), use `clojure.core/format` (<https://clojuredocs.org/clojure.core/format>)\nwhich does the exact same for you\n<@Simonne> Ah ok, thanks for the explanation! I\u2019m trying to do a bit of interop right now just learn how to do it properly. I\u2019d use the Clojure format function otherwise.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "967",
    "text": "What are the best options for parsing BNFs?\nthere's something right up your alley: <https://github.com/Engelberg/instaparse>\n`(:name person)` and `(person :name)` where `person` is a map seem to do the same thing. Is one preferable over the other stylistically? They both seem a little bit magic over using `(get person :name)`.\nnot magic they just implement IFn. Also extremely common. There is a difference: a literal won't be null, the `person` binding might be. A null in the first position will throw whereas a lookup in null will return null\ncontrast `(:a nil)` versus `(nil :a)` in your repl.\ngenerally I don't see maps used as functions unless it's being leveraged in a higher-order function, like `(map person list-of-keys-i-want-to-lookup)`.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "968",
    "text": "I see it in local scope for picking out options.\n`(let [things ({:a [1 2 3], :b [4 5 6]} opt)] ...)`\nIs there a package? I can\u2019t remember for sure, but I think Java disallows using the default package.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "969",
    "text": "newb here w/ an aot question.    i'm compiling a `(defrecord Foo ...)` producing a jar containing the `Foo.class` then depending upon that jar from a java project\ni can successfully load `Foo.class` (ie, `Class.forName(\"Foo\")`) _dynamically_ from the java project\nbut attempting to compile/`javac` statically against Foo (ie, `import Foo` from java), i get a compile error that the symbol can't be found\n`javap Foo.class` shows nothing suspicious.  maybe something obvious, but i'm banging my head here..\nha, there is a package\njava doesn't disallow it, it's just discouraged\nmaybe post the full compilation error?\ni used default package just to keep the question shorter :slightly_smiling_face:\n<https://stackoverflow.com/questions/283816/how-to-access-java-classes-in-the-default-package>\nnext q: is the classpath properly set for the `javac` command?\n```\nError:(6, 30) java: cannot find symbol\n  symbol:   class Foo\n  location: class com.example\n```\nit seems clear it\u2019s properly set for the `java` command (since you\u2019re able to access it via reflection), but it could be improperly set for the `javac` command\nyes the `javac -cp ...` is set\ni'm able to link against other .class files\nit makes me thing the .class generated by compiling the defrecord is special somehow\nto my knowledge, it is not\nthis yields a successful compile/javac:\n```\nimport com.example.*;\nclass Bar { public static void main(String[] args) throws Exception { System.out.println(\"hello\"); } }\n```\nthis doesn't:\n```\nimport com.example.Foo;\nclass Bar { public static void main(String[] args) throws Exception { System.out.println(\"hello\"); } }\n```\nthis compiles and runs w/o exception:\n```\nimport com.example.*;\nclass Bar { public static void main(String[] args) throws Exception { System.out.println(\"hello\"); Class.forName(\"com.example.Foo\"); } }\n```\nAre you overriding the classname? `class Foo`\noh good question -no ..\n(i just edit my slack examples)\nLike I said, the last one is mostly irrelevant. It says nothing about the compilation.\nfair.\nthe one that succeeds of course doesn't if i get the `javac -cp` wrong\nand...\n```\n$ javap com/example/Foo.class \nCompiled from \"model.clj\"\npublic final class com.example.Foo implements clojure.lang.IRecord,clojure.lang.IHashEq...\n```\nYeah I dunno. Would probably need a full example.\nGood luck :confused:\nhmm actually i might be on to something\ni think i have package and a class w/ the same name\nok that seemed to be it\nhowever -- this seems like it'd be a common type of collision in clojure compiles ??\n...ie i `(defrecord Foo...` within `(ns com.example)`\ncompiling yields a `com/example.class` and a `com/example/Foo.class`\na `javac` / static compile finds `import com.example.Foo`\nand doesn't like it b/c `com.example` is a class\n...this explains why the `.forName(\"\")` worked and not the static compile\nbut i guess i'm having trouble seeing why this wouldn't be a common thing\n...okay so i do have a `(:gen-class)` on the `(ns com.example)`\nso perhaps a slightly or much less common sitch?\nafter many years of java coding i did not realize you couldn't safely have a package and class w/ the same name\n```\n...\ncom/example.class\ncom/example/Foo.class\n...\n```\n^bad for javac apparently\n#til\nremoving the `(:gen-class)` fixes the issue\ni guess the lesson is don't `:gen-class` ns's containing `defrecord`'s?\n...revision: explicitly specify non-conflicting `:name` to gen-class will solve it too\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "970",
    "text": "lotta variables there :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "971",
    "text": "Hey guys, I asked thi sin disc but none seems to know what's going on.\nI'm getting:\n```\nSEVERE: Error creating DB connection for {:classname \"com.mysql.jdbc.Driver\", :subprotocol \"mysql\", :subname \"//&lt;ip&gt;:3306/proj_dev\", :user \"root\", :password \"A&lt;censored&gt;\"}\njava.sql.SQLException: No suitable driver found for jdbc:mysql://&lt;ip&gt;:3306/proj_dev\n```\nfor migratus when running `lein migratus migrate`\nthe db is completely empty, first time trying to migrate anything\n```\nWith this in project.clj\n  :migratus \n  {:store :database\n    :migration-dir \"migrations\"\n    :db {:classname \"com.mysql.jdbc.Driver\"\n          :subprotocol \"mysql\"\n          :subname \"//&lt;ip&gt;:3306/proj_dev\"\n          :user \"root\"\n          :password \"*\"}})\n```\nI'm not sure what I'm doing wrong\nI have connected to the server with MySQL Workbench\nI'm trying to connect to a Google Cloud MySQL instance...\nany ideas?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "972",
    "text": "Hi every one, I wrote this utility as an alternative to `with-redefs` such that the redefinition is done only on that thread and not others (ie, the global definition remains the same and redefinitions are per-thread). This is a fork from <@Ferne>\u2019s original solution <https://gist.github.com/gfredericks/7143494>.\n\nWould appreciate if you could check it out to suggest improvements/corrections: <https://gist.github.com/mourjo/c7fc03e59eb96f8a342dfcabd350a927>\n\ncc <@Merilyn>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "973",
    "text": "Hmm. Has anyone else noticed a really slow startup times with `lein repl` when using JDK12?\nMy REPL timeouts almost always with JDK12, maybe 1 out of 10 succeeds to connect. With JDK10 it works normally\ntry clojure 1.10.1-beta1\nthere was a performance regression regaring user.clj that 1.10.1-beta1 addressed: <https://dev.clojure.org/jira/browse/CLJ-2484>\nOh, that has to be it! Cheers\nYeah, I can confirm that after changing to 1.10.1-beta1 REPL starts up normally\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "974",
    "text": "hi all, i'm looking for a good API client HTTP project for reading the source code and design as muster\ndo you have any example in the `clojure` ecosystem and lib in the opensource word?  like it could be dunno, any library with rest-client\nAnyone using nginx-clojure and got it running with openjdk 10+? Project doesn't really seem maintained anymore.\nOr perhaps someone can advise a better deployment method these days, with high performance?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "975",
    "text": "define high performance? what's the use case\nReal time bidding, just want to squeeze out as much performance as possible, and nginx-clojure had decent benchmarks.\nmost of the time aleph or jetty is good enough. Not sure nginx-clojure performs better at all\nYou're probably right, the difference isn't extreme <https://github.com/ptaoussanis/clojure-web-server-benchmarks/tree/master/results/60k-non-keepalive#60k-non-keepalive>\nHey guys, I just downloaded clojure via the installer for windows (it downloaded as powershell module). I need help getting it started.\naleph also scores better than openresty (same models as nginx-clojure I think) on other benchmarks, anyway I bet the kind of platform you're building will likely not have a bottleneck at this level\nPlease ask in <#CFN4QDHPS|clj-on-windows> for help...\nI use nginx-clojure but i think it doesn\u2019t handle java versions above 8 right now. I don\u2019t think there\u2019s much active development happening but it\u2019s been stable for us.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "976",
    "text": "Anybody have experiences to share using Akka with Clojure? I found a couple of small wrapper projects which look inactive. My main concern would be around the requirement that actor classes be serializable, so I'd think you would have to be cautious about typical Clojurisms like grabbing state in a closure.\nI was thinking an agent with for each chunk of state I care about, that eagerly invalidate their listeners. but how can I override the deref behavior?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "977",
    "text": "I was trying to point some of my users at the Clojure documentation to show all the options for `spit`, and hit a brick wall. The `spit` doc string does not list them, <https://clojuredocs.org/clojure.core/spit> and even if they are resourceful enough to look up the entry for `writer` that does not list them. I basically would need to teach them how to bring up a REPL and spelunk through the source code in order to get a definitive list. And they are mostly not software developers. This seems\u2026 unfortunate?\njira welcome, I don't think there is one I'm aware of\nI'm looking for a way to manage state reactively, where the crucial thing is that invalidations are eager and computing the new value is lazy (ie. on deref)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "978",
    "text": "does this match the semantics of a cache at all? with core.cache you can easily get custom access / lookup behaviors\n(while storing the cache itself in an atom, agent, whatever's apropriate)\nhm, I wasn't thinking of it in terms of a cache at all. it's not a typical cache, but perhaps I could (ab)use hundreds of 1-element caches for this.\nthe use case is a large reactive system, containing many hundreds of entities and links between them, but where only a handful of entities are \"live\" at any given time.\nif the invalidations are eager, the views for the few things that are live will know they need to rerender. meanwhile, the rest of the world might be invalid but that's harmless.\nhmm, sounds a lot like what react does under the hood actually\nnot dissimilar in principle.\nwhat's the difference between \"hundereds of 1-element caches\" and \"a cache with an index\"\ndepends on whether invalidation happens at the entry level or the cache level, I guess. I'm reading the core.cache docs now.\nI guess you'd need it loop it through - the cache forcing function would need to look up its data sources in the cache and invalidate it's descendents? now that I think about it you probably want a proper reactive system and not hacking it direclty out of cache / agent building blocks(?)\nwell, I mentioned agents because that's what it felt like when I was vaguely thinking about it last night. but I think there's a bunch of extra bookkeeping to do that pushes me to use a default implementation. I'll probably end up building each reactive block out of a handful of refs I transact over, I guess.\nthere's a whole book about this btw <https://www.amazon.com/Clojure-Reactive-Programming-Asynchronous-Applications/dp/1783986662>\nit uses rxjava iirc\nreact, if I understand, doesn't actually use caches(so avoids figuring out cache invalidation), but diffs the virtual dom to determine what needs doing\nyeah, by extension you could use it to turn data dependency in a data flow app into smart invalidations, but that's still a stretch I think\nfor my purposes, the wiring of dependencies is explicit, so I don't need to infer it. I just want to avoid having to unwire and rewire things as the user navigates.\nanyway, I'm just building a prototype, so I'll just hack something together and not sweat it too hard for this first POC.\nOK, I created one. I forgot that I even had an account on the JIRA. Thanks! Hopefully it was formatted correctly and sufficiently informative.\nit uses rxjava, futures, and core.async in various examples\nassign method implementations that all throw unimplementederror?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "979",
    "text": "thx, I added a patch\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "980",
    "text": "Is there any way to dynamically un-extend a protocol?\nWow, that was fast! :smile:\nuse-case: I have a default `java.lang.Object` implementation of a `Foo` protocol\nthen I extend it to `clojure.lang.Seqable` in the REPL\nafterwards I realise I don't want that implementation to include hash maps, so I change that to a `clojure.lang.Sequential`\nhow do I disassociate `Seqable` so that calling a Foo method on a hash map falls back to the default `Object` implementation?\n(without restarting the entire REPL)\n<@Loria> the extension of the method is stored with the protocol implementation (iirc in the var itself or its metadata) and can in theory be removed, I don't know if there's anything that would be portable though\n<@Loria> this should be enough info for a short term hack, but no promises it would work with the next clojure release ```(ins)user=&gt; IFoo\n{:on user.IFoo, :on-interface user.IFoo, :sigs {:frob {:name frob, :arglists ([this]), :doc nil}}, :var #'user/IFoo, :method-map {:frob :frob}, :method-builders {#'user/frob #object[user$eval145$fn__146 0x42f33b5d \"user$eval145$fn__146@42f33b5d\"]}}\n(ins)user=&gt; (extend Object IFoo {:frob (fn [x] [:obj x])})\nnil\n(ins)user=&gt; IFoo\n{:on user.IFoo, :on-interface user.IFoo, :sigs {:frob {:name frob, :arglists ([this]), :doc nil}}, :var #'user/IFoo, :method-map {:frob :frob}, :method-builders {#'user/frob #object[user$eval145$fn__146 0x42f33b5d \"user$eval145$fn__146@42f33b5d\"]}, :impls {java.lang.Object {:frob #object[user$eval162$fn__163 0x3e14c16d \"user$eval162$fn__163@3e14c16d\"]}}}```\nusually protocol / interface / multimethod changes are the one reason I do an unconditional repl restart, and I try to work on my design in such a way that those would change extremely rarely (which makes sense, as they are all meant to be top level entry points for other code)\ntried doing `(def Foo (update Foo :impls #(dissoc % clojure.lang.Seqable)))`, but that didn't work\nguess I'll just have to restart the repl.. had lots of \"testing data\" state built up from evaluating commented forms which I didn't want to lose, but that's probably another sign of general sloppiness\nI'd suspect `alter-var-root` rather than def/update to be the right path, if anything worked\nhmm, that doesn't do the trick either\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "981",
    "text": "protocol choices get baked into per-call-site caches so it's probably difficult to do this fully without restarting your repl\neasier to do it now before I forget about it :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "982",
    "text": "Hello, I\u2019m having some issues working with mutable Java arrays and can\u2019t find what is going on.\n\nThis code is supposed to return `5` but returns `0`\n\n```\n(let [m (to-array [0 0 0])\n      _ (for [i (range 3)]\n          (aset m i 5))\n      x (aget m 2)]\n  x)\n;; =&gt; 0\n```\n\nNow, when I eval it one form at a time it correctly returns `5`\n\n```\n(def m (to-array [0 0 0]))\n;; =&gt; #'user/m\n(for [i (range 3)]\n  (aset m i 5))\n;; =&gt; (5 5 5)\n(aget m 2)\n;; =&gt; 5\n```\n\nMaybe I\u2019m missing something obvious :thinking_face:\nclassic laziness. `for` returns a lazy collection and is not a good choice for performing side effects like mutating an array. What you are seeing is that nothing is realizing the collection so no work is ever done. the result is that the original array contains 0s rather than 5s\nright, of course, thanks!\ndo you know the best way to fix it or want to ponder/work at it some more?\n(or already know the answer :)\nI was going to try a `doseq`, is that enough? :thinking_face:\nthat's what i would do\ncool!, thanks :+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "983",
    "text": "&gt; if the invalidations are eager, the views for the few things that are live will know they need to rerender. meanwhile, the rest of the world might be invalid but that's harmless.\n<@Jonas> isn't this how some CLJS view libs work? E.g see Reagent (`reaction` and `ratom`), Rum (reactive components and derived atoms), hoplon+javelin, etc.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "984",
    "text": "hey guys, whats the cleanest way to append something to the end of a vector within a thread last macro\n`(-&gt;&gt; v (conj e))` and `(-&gt;&gt; v (concat [e]))` don't work for obvious reasons\nam i stuck having to create a let binding for this?\nAre there any compelling reasons to prefer the `loop` and `recur` pattern over recursive function calls?\n<@Debora>could be the case for `as-&gt;` instead of `-&gt;&gt;`\n<@Debora> I don't understand why you say your first example doesn't work, this works for me:\n```\n(let [c [1 2], v 3] (-&gt;&gt; v (conj c)))\n=&gt; [1 2 3]\n```\nOh, v is the vector not the value. Never mind.\n<@Debora> -&gt;&gt; and as-&gt; are written so they can be nested inside -&gt;\nyou can use -&gt; at the top level, and use -&gt;&gt; / as-&gt; for parts of the pipeline inside that need to use the tread-last behavior\n```user=&gt; (-&gt; [] (conj [:a 0]) (-&gt;&gt; (into {})))\n{:a 0}```\n<@Dann>, that is really good to know! But undocumented, right?\nhmm... I thought I saw it documented somewhere, let me see if I can dig it up\nthere are examples here and there, but I don't find anything mentioning that all the -&gt; related macros are designed to work inside -&gt; <http://clojuredocs.org/clojure.core/as-%3E#example-568eeddae4b0f37b65a3c280>\noh wow this one - I never thought of using `as-&gt;` with destructuring <http://clojuredocs.org/clojure.core/as-%3E#example-5b5e08e9e4b00ac801ed9e3a>\nI guess it's implied that nesting would work, since it isn't prohibited.\nThat is an interesting one with as-&gt; and :as.\ni'd like to use clojure to generate some `defrecord` classes (and some helper methods) that i intend to consume from Java... eg:\n```\n(ns my.core\n  (:gen-class :name my.core.Support :methods [^:static [getEvents [] ...]]))\n\n(defrecord Event [^String name ^Date date_])\n(def -getEvents [] ...seq of Events...)\n```\nfrom Java i should be able to stuff like this:\n```\nimport my.core.Event;\nimport my.core.Support;\n...\npublic static void main(String[] args) {\n   events = new ArrayList&lt;Event&gt;(Support.getEvents()); \n   // ^^ i get ClassCastException here b/c the imported Event is loaded by AppClassLoader\n   //     but the Events produced by the clojure-compiled gen-class are loaded by clojure's DynamicClassLoader\n   //  ... what's the best way to do this kind of thing\n}\n```\ndon't you have to load Support before Event at the very least?\nI've found calling Clojure via Java to be much easier with the clojure.lang.RT static methods (var, require, etc.) rather than trying to use gen-class namespaces as classes\nhmm i do need to statically link/compile in my case.. .. wondering if there's a way to tell Clojure to load certain classes like these instead of dynamically complie them\nyou can't call the clojure API from the java code?\nif you properly aot-compiled you will be able to import the classes, and the classes will in turn initialize clojure if it isn't initialized yet\noh sweet <@Dann> didn't know you could nest `-&gt;&gt;` and `as-&gt;` inside a `-&gt;`... feel like i'm gonna overuse this thoroughly now\n(a gotcha is that with eg. lein, it assumes that your java needs to be compiled before your clojure, and here I think you really want the opposite)\nthat's fixed with ~`:prep-tasks [\"javac\" \"compile\"]`~ `:prep-tasks [\"compile\" \"javac\"]` (fixed)\n<@Bernardine> what type are you defining for getEvents to return in gen-class btw?\n(I assume java.util.Collection by context)\n<@Bernardine> this compiles:\n<@Dann> very cool. thank you for doing that repro. it led me to a fix... while `lein` excludes the `.clj` sources from the built target/jar files, `clojure-maven-plugin` (what i'm using) does not do this by default\nso the presence of my `clj` source was causing clojure to prefer loading the defrecord by dynamic compilation rather than using the `.class` file that the static/linker was using - so the `Event` loaded by the java compiled code was not the same as the `Event` getting dynamically produced by clojure/DynamicClassLoader\nanyway i'm able to configure out the clj sources so that all is getting loaded by the AppClassLoader and now i'm working---thx again !\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "985",
    "text": "interesting thx for that noisesmith, let me try something\nincidentally i'm using clojure-maven-plugin not lein so let me what i can find out here\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "986",
    "text": "note that this is not a public api and you should not rely on it. Instead, you should use the Clojure Java API - <http://clojure.github.io/clojure/javadoc/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "987",
    "text": "Anyone had issues with `lein deps` constantly failing with something like `Could not transfer artifact amazonica:amazonica:pom:0.3.123 from/to clojars (<https://repo.clojars.org/>): Connection reset` during `docker build` and remember a solution?\nThis particular dependency doesn't seem like the issue, it's different every time. Works fine outside of docker.\nsounds like issue about docker environment\nor your Internet connection\nHow to figure out how to mute logging for Java dependency? I use `flyway` and it make so huge mess in REPL by printing even debug info. In the past this was working `(.setLevel (Logger/getLogger \"org.flywaydb\") Level/WARNING)`, but not today (new ver. of flyway? I guess they changed logger or something). How to deal with such situations?\non the end jdbc use logback, flyway use who knows what, how to deal with this mess?\nor maybe <https://github.com/fzakaria/slf4j-timbre> ?\nIn most of examples I see people set this levels by logback, not in slf4j even if they use it\nanother question: If one of my dependency use log4j, but another use logback I guess logback will capture log4j input as facade.\nHow to control it?\nPersonally I use timbre as logger, but Java libraries make a mess sometimes\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "988",
    "text": "I mean what is the one right way to set level for logging? I have to do it separately for slf4j, log4j, logback etc. or is the way to do it in one consistent way? Should I use slf4j or logback?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "989",
    "text": "I ended up using a multi-stage build and compiling the uberjar outside of the runtime environment. Was able to get it to work then, and with a smaller final image, so yay\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "990",
    "text": "Ages ago I think I saw some people talking about the <http://4clojure.com|4clojure.com> site. I'd like to contribute and get it working well, e.g. this <https://github.com/4clojure/4clojure/issues/309> would be good to fix.\nAnyone have any pointers?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "991",
    "text": "On <http://repl.it|repl.it> one can write clojure programs, if that's what you ask.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "992",
    "text": "has anyone used ions in production and can vouch for it? considering using it for a small production project\nNot quite. 4clojure is a learning platform, which works well but has some shortcomings and it seems to have been abandoned. I wondering if anyone knows the authors or has tried to get it active.\naaah, I thought that you want a replacement for <http://try-clojure.org|try-clojure.org>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "993",
    "text": "Does clojure have some command-line tools which are required by some clojure projects to run?\nsome projects depend on leiningen\nMore specifically, I am trying to run 'lein repl' in one such project's root, and I get 'clojure.lang.ExceptionInfo: Could not find clojure executable {:tried-paths [\"/usr/local/bin/clojure\"]}'  which seems to indicate I should have /usr/local/bin/clojure\n`/usr/local/bin/clojure` is installed by homebrew on my macos system. What are you using?\nits part of clojure itself\nI was trying Fulcro (following this documentation here: <http://book.fulcrologic.com/#_about_this_book>)\nSo it seems it's not related to leiningen actually but how that Fulcro template is set up\nI am sorry, but I don\u2019t know.\nmaybe ask in <#C68M60S4F|fulcro> ^^!\nYeah! good idea, thanks Lennart :slightly_smiling_face:\n<#C09N0H1RB|aws> is a good place to ask this\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "994",
    "text": "yes, the core clojure project has cli-tools that are installable via your package manager (eg. homebrew on a mac)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "995",
    "text": "Hi. How can i use com.cognitect.aws/email to use email on AWS?\nThanks <@Jasmine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "996",
    "text": "Hi. I'm trying to use `compile` with a gen-class. I get a class not found exception when the constructor is defined taking a class from a lib I'm using. I can import that same class, and changing the type to eg String makes compile work. Any caveat about types for constructor args and class path etc?\nLooks like flyway uses slf4j bindings, so if you use logback, you should be able to set the flyway log level in your logback.xml (or whatever method you use). I haven\u2019t tried it myself though\nHm. This was with tools.deps - if I instead try with lein all is well.\nYep, realized this after testing it with lein.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "997",
    "text": "there's also the channel <#C6QH853H8|tools-deps> where you might have more luck than here :smile:\nThere\u2019s also juxt/tick\nSomeone should write a comparison for those!\nI've used tick before and found it worked well :+1:\nFinally I did `(.setLevel (org.slf4j.LoggerFactory/getLogger \"org.flywaydb\") Level/WARN)` but still I don\u2019t feel it :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "998",
    "text": "what would be closest and cleanest way to have \"cron jobs\" in Clojure. Something to run every some time from within web app. Like @Scheduled in Java Spring...\n<@Star> Java's ScheduledExecutorService works well but you can also write something custom with a core async go loop and timeout\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "999",
    "text": "quartz via clojurewerkz/quartzite is quite popular\nyeah, the scheduling part of tick is deprecated tho :disappointed:\nAlso I have logback because jdbc use it\nSo probably dependency from jdbc (logback) bind slf4j to logback\u2026 who knows how this hell works :slightly_smiling_face:\nI use timbre in my code\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1000",
    "text": "and `chime` and `at-at`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1001",
    "text": "Is there a better way to split a list of pairs into lists of the firsts and seconds than `[(map first pairs) (map second pairs)] `? Thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1002",
    "text": "I've used quartzite before, while it works great, it's a bit heavy with some learning curve as you kind of need to know how Quartz works.\nOh. Good to know. They advocate using tick over quartz in the readme...\n`(map (juxt first second) [[1 2 3] [4 5 6] [7 8 9]])`\nor `(map (partial take 2) [[1 2 3] [4 5 6] [7 8 9]])`\nah no, sorry you want it to have in different way\nthx but I want the opposite: `([1 2] [4 5] [7 8])` -&gt; `([1 4 7] [2 5 8])`\nPlan is to undeprecate later\nThere's one in cgrand's `xforms` library along with many other transducers:\n<https://github.com/cgrand/xforms/blob/master/src/net/cgrand/xforms.cljc#L491>\n\nRepo: <https://github.com/cgrand/xforms>\nI used `javapackager` for this (a long time ago though so not sure about JDK 11)\nIs \"Clojure Programming: Practical Lisp for the Java World\" still a relevant book to learn clojure?\nit looks like javapackager was removed from JDK 11 :confused:\nugh\nthat's being worked on for JDK 13\nyeah. just got done creating a simple app; seems good, still don't understand a lot\nnow I'm trying to figure it out how to distribute it to my coworkers who might not have JDK 11 :grimacing:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1003",
    "text": "Is there a stateful transducer like \"reductions\"?\ni'm trying to bundle a Clojure desktop app to be executed stand-alone on macOS &amp; Windows. anyone know of some resources on how best to do that with JDK 11?\nI want to supply my own JRE with the app\nI tried packr but I can't figure out how to use it with JDK 11 yet\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1004",
    "text": "hm. looks like I might be able to use a backported version\ni seem to recall a new-ish clojure lib for building UIs (not seesaw)\nanyone know the name of it?\nfn-fx?\ncljfx\nthat's the one, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1005",
    "text": "<@Antione> join <#CGHHJNENB|cljfx> :smiley_cat:\nhas anyone encountered any sort of linting / analysis tools that could detect whether a change on a clj codebase maintains some notion of backward compatibility?\nI think that's Rich Hickey's research project, when I asked a while ago, I was told it's not close to fruition yet.\nwill be very interested to see what he comes up with :slightly_smiling_face:\ncoincidentally, this question came up after thinking about the spec-ulation talk\nand thinking about how i want to do versioning in my clj projects\nMy little hobby app was macOS only. FWIW I used <https://github.com/Jorl17/jar2app> along with JavaAppLauncher built from <https://bitbucket.org/infinitekind/appbundler/>\nfrom a while ago. possible you could reach out to <@Charlyn>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1006",
    "text": "High level noob question: would using datomic ions for a normal page serving ring app (i.e. not an api or event triggered code etc) be a bad fit for some reason?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1007",
    "text": "ah!  thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1008",
    "text": "anyone know who runs the logging? seems broken\n<https://twitter.com/plexus/status/1110594418573230085>\n<@Antione> Most channels here are mirrored into Zulip via <@Silvana> (which you can invite to any channel it isn't already a member of). <https://clojurians.zulipchat.com/#narrow/stream/180378-slack-archive>\nthanks <@Becki> and <@Celestine>\nother question for ya: I remember alex miller saying something about some interesting business required to get constant-time dispatch in `case`. I've been reading over it, but wondered if anyone here knew the details well enough to give their take on what's going on here.\n\nthe deeper i dig, the more questions i have\n`max-switch-table-size`, `case-map`, `prep-ints`, `prep-hashes`, `max-mask-bits`, `maybe-min-hash`, etc. etc.\ncurious about why `case-map` builds a `sorted-map`, where the value for `max-mask-bits` comes from\nand other curious bits\nso as I understand it the big picture is constructing  a lookup table out of your case call at compile time (you probably know that part already)\nyeah, i might be misremembering, but i feel like there was some relation to the bytecode that's emitted maybe?\nright, case is a special form, that means it takes your form as input, and produces byte code as output\nand the job with case is to turn the whole call into one table lookup (which is why all dispatch must be compile time literals - you can't calculate the dispatch correctly otherwise)\nthe rest of what you find there is implementation of that concept (as I understand it)\nerr, is `case` a special? i didn't think it was\nit's a macro\noh, right, `case*` is the special\nahhhh, ok, i missed that earmuff\nyeah, I elided that distinction above as well\nso the `case` macro does a bunch of prep work with the input form, and produces data that's tied to the implementation details of the `case*` special form (bit-mask, hash implementations ...)\nthere are two constant time jvm dispatch instructions tableswitch and lookupswitch, and case ends up being one or the other\nlookupswitches need things ordered, which I guess is the purpose of the sorted map\n<@Antione> <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Compiler.java#L8754>\n<https://github.com/clojure/clojure/blob/2cc37bb56a9125a1829c73c505e32995e663059a/src/jvm/clojure/lang/Compiler.java#L8754> for anyone following along\njinx\n<@Rosaline> do you know offhand which one gets picked when?\nthat's a big class...\nno\ntableswitch is for a dense jump table\n(btw, none of this is necessarily important for me to know, but i love a good mystery)\nbasically you are dispatching contiguous numbers\nlookupswitch is for  sparse\nso a good deal of case's complexity is likely trying to massage things in to a dense table if it can, falling back to sparse\nthe jvm instructions are also all for numbers, so case has to decide on a strategy for turning things that aren't numbers in to numbers\ngotcha, have been banging on it trying the number of tests and variation in types to produce :sparse version\nbut have only been able to find :compact so far\n<@Rosaline> and <@Dann> thanks very much for the explanation\nactually I vaguely remember rhickey talking about min-hashing on irc around the time case was added now that I look at it\nprep-hashes and prep-ints only go sparse if the mask is 0\nmin-hashing is, I think, the technique for constructing a dense dispatch table\n<http://clojure-log.n01se.net/date/2009-10-28.html#15:54a>\ntaken it way back\nperfect minimum hashing, googling min-hashing gets you other interesting things\nwhat im struggling to do: find a situation where `(maybe-min-hash (map int tests))` or `(maybe-min-hash hashes)` produce `[anything 0]`\nah, there we go\n`(or (maybe-min-hash (range 8193)) [0 0])`\nmaybe-min-hash produces `nil`, and then we get a `0` mask, which causes `:sparse`, which gets us a `lookupswitch`\nthough i'll admit i still don't totally understand what scenario would cause prep-ints to get to the final branch \"; compact case ints, with shift-mask\". perhaps `tests` and `thens` which are massive?\ni've managed to kill my repl, so i'll leave it there :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1009",
    "text": "takin'*\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1010",
    "text": "Can someone explain in simple terms why errors are so cryptic in Clojure?\nWhich version of Clojure are you using? They're much improved in Clojure 1.10.\nBut it's also very subjective and it really depends on what languages you've used before you come to Clojure.\nMy background was C/C++/Java so Clojure was just \"regular stacktraces\" for me and it included a message and the filename / line number of each piece of the call stack so -- for me, based on past language experience -- it was easy to find the bits that referred to my code and therefore figure out what the error was.\nThere are some messages that seem odd at first but you quickly learn to translate from \"the error message you get\" to \"the mistake you made in your code\".\n<@Deann> Can you give some specific examples?\nI guess that is true as I am coming from writing Python Django which can have long stack traces. I am using 1.10, but I keep watching videos of clojure and people typically joke about the error messages.\nMany times the error message doesn\u2019t filter my error to the top, so I have to filter through the filename, line ref to find where my code is breaking.\n<@Deann> Yeah, the long stack traces have been a long-standing (bad) joke in Clojure...\nThere have always been lots of tools to \"improve\" the output but I think it was always a bit of an overblown joke :neutral_face:\nI\u2019d like to use `(case (type thing) ...)` and match on whether it\u2019s a string or a long, but I can\u2019t figure out how to indicate either.\nBecause Clojure mostly attracted more experienced developers in the early days, the stack traces weren't a big deal really... and they only became an issue as Clojure started to get more popular, IMO :slightly_smiling_face:\n<@Suanne> Try the instance? function.\n```\n(instance? String \"hello\")\ntrue\n```\nalso using `cond` here could be  better.\n```\n(cond\n    (instance? String var) \"a string\"\n    (instance? Long var) \"a long\"\n    :else \"no idea\")\n```\n<@Katherina> Thanks! Is there a way to avoid the deep nesting that happens when doing a bunch of if/else ifs, or is it unavoidable?\n\n```\n(defn get-port\n  [port]\n  (if (instance? String port)\n    \"it was a string\"\n    (if (instance? Long port)\n      \"it was a number\"\n      \"it was something else\")))\n```\n<@Katherina> Ah, you answered my question. Thank you!\n:smile:\nA bit confused how to output an error message and stop function execution when I\u2019m given some bad data since there is no early return ability.\n\n```\n  (let [port (get-port (first args))]\n    (if (= port nil) ; function returns nil if data bad\n      nil ; early return\n      (do (println (format \"Listening for connections on port %d.\" port))\n             (run-jetty handler {:port port}))))\n```\n\nI could do something like this but it seems pretty ugly. Especially if there was a bunch more data being validated.\nYou could throw an exception \nSo inside of `(get-port)` I could throw an exception for whatever kind of error took place (out of range, wrong data type, bad format), catch it inside the same function to output the relevant error message, and then throw another exception that the caller doesn\u2019t catch?\nIf you want to print a message and exit the function you could put a println and throw in a do block. It might help to see the full function here though. \nthe other alternative is monadic error handling with something like promenade or cats\nThanks for the suggestions, I will explore these recommendations tomorrow and might ask some more questions. Have a good night.\nbut monads can be scary\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1011",
    "text": "I was wondering if there was a reason that people joked about it. Like is it an unsolvable problem, or was it just a low priority in past versions?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1012",
    "text": "Also check out \u2018if-let\u2019. \n(and `when-let`, which is `if-let` with only the positive branch and a convenient do block inside ^^)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1013",
    "text": "You could also use clojure spec to define what you expect of your arguments and check them all at once (with e.g. spec/valid?) and output a message with spec/explain (though you might want to include the library Expound for more human-friendly errors)\nWhat is your use case? If it is a main function, just throw the exception, JVM will catch it and print. If it is to be called by others, why should you print an error? Just include it in the exception, throw it, and let the caller handle it in any way it likes.\nIf you want to check multiple errors, you could ```\n(cond\n  (nil? port) (ex-info \"Illegal argument: no port\" {:id :illegal-argument :arg :port :val :missing})\n  (not (int? port)) (ex-info \"Illegal argument: port must be an int\" {:id :illegal-argument :arg :port :val port})\n;; ...\n:else ; all checks passed, we can proceed\n(run-jetty ...))``` A little silly example but you get the point.\nNice! But it will break if there are too many elements, map isn't defined for any number of args\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1014",
    "text": "since `map` takes multiple collections, you can do:\n```(-&gt;&gt; [[1 2] [4 5] [7 8]]\n     (apply map vector))\n=&gt; ([1 4 7] [2 5 8])```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1015",
    "text": "hey everyone. has there been any work toward developing a debugger along the lines of the common lisp one? i don\u2019t know a lot about the jvm, so maybe this isn\u2019t even a possibility in clojure.\nfound this, gonna play around with it: <https://github.com/gfredericks/debug-repl>\n<@Cherise> there are tradeoffs to both approaches. AOT compilation can get faster load times.  You can AOT with an uberjar, or not, or with `clj` or not.  I don't recommend running `clj` but instead use `clojure` in Docker\n(clj == rlwrap clojure)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1016",
    "text": "Hi, is it recommended to run `clj -m myproject.core` in a Docker container in production? Or better to use an uberjar?\nI don\u2019t see that limitation\u2026 just ran it for a vector of 50000 pairs without issue\u2026\n`(apply map vector (partition-all 2 (range 100000)))`\nam I misunderstanding what you mean by too many elements?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1017",
    "text": "What\u2019s the meaning of the hash sign here?\n<https://github.com/juxt/yada/blob/master/ext/multipart/src/yada/multipart.clj#L37>\nBelow it is a function without it, just ^bytes\n`#^` is an old syntax for metadata\n```user=&gt; (meta #^:foo {})\n{:foo true}``` <@Clarine>\ncool, so it\u2019s optional now.\nI still find it jarring when I run across this now\nyeah, it's the same as `^` as far as I can tell\nit is the same\nthe syntax was simplified\nSomeone hinted that this issue <https://dev.clojure.org/jira/browse/CLJ-1472> would also be relevant for GraalVM native.\nI tested the patch but alas, I still could not compile code using spec with it.\nnote that there is a cycle between clojure depending on spec and spec depending on clojure, so verifying something like this is probably a little challenging\nor at least more challenging than it appears at first :)\nwhat I did was build the clojure git checkout with the patch applied. That yielded clojure 1.11.0-master-SNAPSHOT and I depended on that one in my other project.\ngotta go now\nyeah, you need to recompile spec based on that Clojure, then depend on both the modified Clojure and the modified spec.alpha\nspec.alpha is aot compiled so has bytecode emitted according to the old Clojure core\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1018",
    "text": "Does map take up to 50k arguments or am I missing something? Or does apply do something else than (map fn pair1... pair50000)?\nAh I see <https://stackoverflow.com/questions/2735600/why-is-there-a-limit-of-max-20-parameters-to-a-clojure-function>\n&gt; First of all, the limit only applies to required positional arguments; you can always use the variable arity case (&amp; more-args in the function's signature) to handle as many arguments as you want to\nThanks, today I learned 2 useful things!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1019",
    "text": "Thanks, I\u2019ll try when I get home \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1020",
    "text": "Hey, I\u2019m trying to write a simple `ring` application. In the REPL, when I execute `(run-jetty)`, the function takes over and is impossible to get out of. The only way is to kill the entire REPL process.\n<@Suanne> IIRC there\u2019s a `:join` setting you can set to false to keep it from taking over your repl\n`:join false` should help there\nAh yes I discovered that option. Now the problem I\u2019m facing is starting and stopping that function now that it\u2019s been executed.\nthe call should return an object you can access and ask it to shut down\nalso if you provide your handler function as a var, you can redefine the handler without restarting the server\nAlright so I\u2019m seeing that this object returned is a `org.eclipse.jetty.server.Server`. How do I determine how to interact with this? Do I look up the Java documentation? Or is this something Clojure specific?\nthe javadoc for that object should be useful, iirc it has a `.stop` method, anything clojure itself provides will start with `org.clojure...`\nAlso where was I supposed to find out that this returns an object other than just asking people who already know here? It\u2019s not obvious in the docs at all?\nThis should be covered in the clj-http docs somewhere. Perhaps in a non-obvious way...\n<@Suanne> <https://ring-clojure.github.io/ring/ring.adapter.jetty.html> - in general clojure functions return something useful, when in doubt I'd check :D\n```Adapters are used to convert Ring handlers into running web servers.``` - that might imply \"returns the server\"\nThat\u2019s the page I was looking at. Alright, well that\u2019s definitely not obvious at all to me. Thanks for pointing it out.\nI would be surprised to see something that has the job of \"creating an x\" that doesn't return it\n(not to say this doesn't exist, but it seems inconvenient and I'm not thinking of examples except maybe \"signal handler\" or \"default uncaught exception handler\")\nYeah agreed. I should have thought of it.\nalso good to remember if you implement a function meant to create something\nAs far as ring is concerned, would the `handler` passed to `run-jetty` be a reasonable place to implement a router that would pass control off to different functions based on the requested URI?\nthat's precisely where that belongs, yes\nthere are multiple routing libs (I like bidi and polaris myself, compojure is probably the most popular)\nAlright thanks! I\u2019m probably going to implement a simple one myself as a learning experience.\nif there's a way I'm sure it's not a public feature and would be liable to break in future releases - why not a wrapper macro for defn that passes in or otherwise exposes the var symbol?\nI could but I am already using a wrapper defn for certain things (i.e. APM tracing) and I'd need to throw more stuff into that. It seems like it'd be useful to get the name of the current function.\n```(ins)user=&gt; (defmacro ndefn [n &amp; all] `(let [~'var-name '~n] (defn ~n ~@all)))\n#'user/ndefn\n(ins)user=&gt; (ndefn foo [x] (println \"calling\" var-name) x)\n#'user/foo\n(ins)user=&gt; (foo 1)\ncalling foo\n1\n```\nit's useful, clojure doesn't provide it\nThis is interesting... <https://www.mail-archive.com/clojure@googlegroups.com/msg13017.html>\nI\u2019m trying to make a function that will kill the previous server if it is defined, but there\u2019s a problem in that the first time `server` isn\u2019t defined. Is there a way to change a symbol `'server` to an identifier at runtime?\n\n```\n(defn start-server\n  []\n  (if (resolve 'server)\n    (.stop server))\n  (def server (run-jetty handler {:port 8080 :join? false})))\n```\nyou could consider `(def server)` at the top level for clarity, then `alter-var-root` which can use the previous value of the var while redefining\nI want to write a spec-assert function that will have the function's name in the error message string. Obviously you can figure out function's name from the stack trace but it'd be nice to make it super obvious.\n```user=&gt; (defmacro fname [] `'~(-&gt; @clojure.lang.Compiler/METHOD .objx .name clojure.repl/demunge symbol name symbol))\n#'user/fname\nuser=&gt; (defn foo [] (fname))\n#'user/foo\nuser=&gt; (foo)\nfoo\n```\n<@Harris> that's fascinating - how likely would it be to work in the next clojure release?\nhasn't changed at least in the past 5 years\nbut it has lots of caveats :P\n```user=&gt; (defmacro fname [] `'~(-&gt; @clojure.lang.Compiler/METHOD .objx .name clojure.repl/demunge symbol name symbol))\n#'user/fname\nuser=&gt; (defn foo [s] (for [_ s] (fname)))\n#'user/foo\nuser=&gt; (foo [1])\n(foo/iter--157--161/fn--162/fn--163)\n```\nthe only safe way to use it is `(defn foo [..] (let [fname (fname)] ..))`\nahh because for creates nested fn instances\nFWIW it was not obvious to me at all either. I hunted around for examples until I found one that called `.stop` on it\nOk here is what I did and it works:\n\n```\n(def server nil)\n\n(defn start-server\n  ([port]\n   (if server\n     (.stop server))\n   (alter-var-root #'server (fn [&amp; args] (run-jetty handler {:port port :join? false}))))\n  ([]\n   (start-server 8080)))\n```\nmy though was more like `(def server nil) (defn start-server ([port] (alter-var-root #'server (fn [s] (when s (.stop s)) (run-jetty ...))) ([] ...))`\nbut effectively the same result\nyeah, that's the premise of alter-var-root, is insuring when you redefine you have access to the latest value\nThat\u2019s weird, I accidentally typed port 80 and it worked. And my browser was able to connect to it. Isn\u2019t that not supposed to work for security reasons (ports under a certain number)? As far as I am aware, I\u2019m not running the process with super user permissions. Although this is on macOS so perhaps I\u2019m not fully understanding how it gives processes permissions.\nNot really relevant to Clojure though.\n<@Jasmine> Tried your suggestion. Still getting that error. Full output here: <https://gist.github.com/borkdude/73634b2e2ea8e22a7d39c06dc7c628f0>\nIt seems that my REPL executes `(def server nil)` whenever my editor saves the source file, messing up the code since the server reference is lost. Is that expected behaviour?\n<@Suanne> oh yeah, ring's `wrap-reload` would do that, the easy workaround is to use `defonce` instead of `def`\nOk that worked. This is something that ring is doing?\nyeah, the wrap-reload middleware wraps your handler in a function that checks for changed files and reloads them when each request comes through\nOk interesting.\nPreviously you said if you \u201cprovide your handler function as a var, you can redefine the handler without restarting the server\u201d, can you explain a bit more about this?\n<@Suanne> If you use `#'handler` instead of just `handler`, you pass a `Var` so that introduces another level of indirection.\nI believe you can, just make sure you're compiling and running with the same version to be on the safe side. The best way to find out is to try it :slightly_smiling_face:\nThat allows you to redefine `handler` (in the REPL) and the wrapped `Var` will point to the updated function.\nThat is very useful. Thanks!\nI have to learn exactly what `#'variable` does.\nit's precisely what <@Celestine> said - it is a reader macro that instead of looking up the value in `variable` gets the var object that currently stores it\nwhen you run `def` and the var already exists, the var is reused and a new value is put into it\nand when you call a var, it is looked up and the contents are called\nI was looking for an article for a full explanation of this pattern... might find one\nThanks for the explanation.\nthis might help <https://clojuredocs.org/clojure.core/var>\nAre most people coming in to Clojure with a deep knowledge of Java? I know how to write software in Java but I\u2019m not fully familiar with the libraries and such.\nI'm trying, now, a safer path: leiningen + clojure 1.8\nhmm, that above article on `var` should also include passing a var to a long-running higher order function (I might fill that in today...)\nI learned java via Clojure, there's a benefit to at least learning how to read javadoc and convert to clojure interop\ninitially I was planing to use 1.9 and deps.clj\nbecause often using a java lib directly is better than a wrapper\n<@Suanne> People come to Clojure from a variety of backgrounds. There are certainly a lot of people coming to Clojure with next to no knowledge of Java.\n(and there are people coming in with _lots_ of knowledge of Java too)\nI saw Clojure as a fun way to learn more about the JVM/Java, since I had to deal with it at work :wink:\nI\u2019m just a bit confused about how much Java I should be learning in addition to Clojure. An example of my recent confusion is why a lot of ring stuff seems to end in documentation of Java classes. Is it software written in Java that has Clojure wrapper library making it more palatable for Clojure? But then you still have to drop out of Clojure here and then to do stuff (like stop a server for example).\n<@Suanne> Ring itself is a representation for requests and responses and functions dealing with those, in Clojure. But a webserver is usually not written in Clojure from scratch. That\u2019s where you\u2019ll see a adapter layer that translates back and forth from the Java world. E.g. ring-jetty-adapter.\nI just started Clojure/ClojureScript and I almost feel like its totally opposite to Java from what I've seen\nA lot more fun tho haha\n<@Suanne> How much Java interop you see in Clojure will depend on exactly what libraries you use. Re: stopping a server in a Ring application, the default Jetty adapter exposes a Java class in the Jetty library that you have to call `.stop` on, but if you use `http-kit` instead, calling `run-server` returns a handle on the running server and to stop it you just call the handle as a function, for example <https://github.com/framework-one/fw1-clj/blob/master/examples/usermanager/main.clj#L101-L123>\nI came to Clojure sort of via Java. I started doing Java back in 1997. Picked up Groovy in 2007, picked up Scala in 2009, and then Clojure in 2010 and I've been using it in production since 2011.\n(in among all that was CFML -- ColdFusion -- running on JVM for years, since I worked at Macromedia/Adobe for seven years!)\nPersonally, I haven't seen issues compiling a jar with an older jdk and running it with a newer version, but it's usually safer to not mix and match\nif you have feedback, put it on the jira. not something I'm working on right now.\ni'm seeing what seems like counterintuitive behavior with into, wondering if anyone has any insight. this returns a hash map (losing original order) instead of an array map\n```\n(into (array-map) (for [i (range 10)] [(keyword (str i)) i]))\n```\nI think that Clojure runs on the JVM is one of its benefits. The JVM is such a great platform\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1021",
    "text": "Is it possible to get the symbol of a `defn` in that `defn`'s body?\nEssentially:\n```\n(-&gt; (Throwable.)\n      (.getStackTrace)\n      (first)\n      (.getClassName))\n```\ncan you explain what you are trying to solve? Often a different approach can help. But there for sure are real necessities like this\n:upside_down_face:\ndon't use it for real\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1022",
    "text": "Ah I see, so I\u2019d have access to the original value of the var there.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1023",
    "text": "Much nicer!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1024",
    "text": "hello guys\nmay you help me...\nI need to compile a little library of mine to be used for an webapp that runs on JDK 7... can I use Clojure 1.9 and just set the Java path to that old version of JDK?\nThe relevant bit is probably this:\n```\nError: unbalanced monitors: mismatch at monitorexit, 96|LoadField#lockee__5436__auto__ != 3|LoadField#lockee__5436__auto__\nDetailed message:\nError: unbalanced monitors: mismatch at monitorexit, 96|LoadField#lockee__5436__auto__ != 3|LoadField#lockee__5436__auto__\nCall path from entry point to clojure.spec.gen.alpha$dynaload$fn__2628.invoke():\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1025",
    "text": "Alright thanks for the insights.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1026",
    "text": "<@Michael> Beyond a certain size, `conj`ing onto a map will cause it to become a hash map for perf reasons.\noh interesting\ndidn't know that could change the map type\n<@Michael> See last sentence of <https://clojure.org/reference/data_structures#ArrayMaps>\nthanks!\ni suppose i just want (apply array-map...)\nOr, perhaps a sorted map?\nThat would base things on the keys, instead of insertion order\nyeah i'm consuming data from another api and need to maintain the original order which is likely sorted but not something i really want to assume and rely on\n<@Michael> Something to consider: maintain two data structures -- a fast (unordered) hash map for lookup and a vector of the keys in the order you need them. That way you can produce the ordered set of key/value data whenever you need it, but you benefit from normal hash map ops when you don't.\nalso APIs that break if the keys in a map are in unexpected order shouldn't exist and are much more common than they should be\nwell its not that really, more just that the order coming back from the api is meaningful\nthis should be a map of less than like 10 items\nat some point I am going to write a test helper that deliberately reorders sets and maps\noh, I'm dealing with a JSON api right now where changing key order does break it\nbut the switch from array to hash happens between six and 10 items haha\nsounds fun\nthat's a good idea\n<@Michael> How exactly is the API returning the data? JSON?\nyeah\nI'm not sure how you're going to get from JSON to any Clojure data structure and retain the ordering from the JSON object :disappointed:\n(short of writing a custom JSON parser?)\nwell its a json array, i'm converting the json array to a lookup map for internal use and using the lookup map also as an ordering reference\nbasically i should probably do what you suggested\nYeah, I would keep the array for ordering and create a hash map for fast (unordered) lookup in that case.\n:thumbsup:\nprobably a good opportunity for some linting rules around that\nno judgement, to each their own, just curious if there's something specifically that keeps you using it beside your familiarity\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1027",
    "text": "<@Celestine> i puzzle a bit when I hear you're still rockin' the CFML. are you still actually using it? i surfed over to the 2018 release page and see features added like NEW: string literals and NEW: NULL support, which seems kind of crazy to me.\n<@Antione> We recently retired our primary CFML app at World Singles Networks, in favor of the React.js frontend / Clojure backend we've been working on for a few years (we starting migrating sites to the new platform ages ago but we had about 100 sites to migrate so it took a while :slightly_smiling_face: )\nWe still have two more CFML apps -- one internal only that is already partly rewritten in Clojure, and one small external app that is scheduled for a rewrite in Clojure \"soon\".\nWe've been slowly migrating from CFML to Clojure since 2011 :slightly_smiling_face:\nWe've used a free, open source CFML engine since 2009 BTW, not the Adobe implementation. And the FOSS engine had a lot of modern features long before Adobe added them too...\ngotcha. i messed with coldfusion in i wanna say 97? but i remember almost nothing about that experience.\nAh, back then it was all `&lt;TAG&gt;`-based and a proprietary C++ engine (interpreter). Since 2001 it's run on the JVM and evolved into quite a nice dynamic scripting engine with closures and metaprogramming etc.\ni was wondering if you'd pop in with: \"CFML is nice because ____________\"\nbut sounds like it's not nice enough to not port it\nBack in 2011, I created a library that allowed CFML engines to load Clojure code and call it seamlessly (`cfmljure` -- of course!) and that's how we've migrated away from CFML, from the bottom up.\nSo our CFML code can include stuff like ```\t\t\tvariables._fb = JavaJDBC.find_by_keys(\n\t\t\t\tcore.get_in(\n\t\t\t\t\tapplication.clojure_component,\n\t\t\t\t\tcore.vector(\n\t\t\t\t\t\tcore.keyword( \"database\" ), core.keyword( \"pooled-db\" )\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t\tcore.keyword( \"facebook_member\" ),\n\t\t\t\tcore.hash_map(\n\t\t\t\t\tcore.keyword( \"site_id\" ), this.getSiteId(),\n\t\t\t\t\tcore.keyword( \"member_id\" ), this.getId()\n\t\t\t\t)\n\t\t\t);\n``` :slightly_smiling_face:\nyeah, i've been aware of that, but didn't know if the idea was to keep it around instead of using it to slowly strangle the CFML out of it\n`(jdbc/find-by-keys (get-in app [:database :pooled-db]) :facebook_member {:site_id site-id :member_id id})`\nOn a previous job, we introduced Clojure in a similar fashion, we had a Java class with a main method, that would make RT calls to load namespaces and then invoke the entry point of the Clojure application.\n\nIt wasn't pretty, but it looked like a classic Java Maven app with a Clojure library :slightly_smiling_face:\nWe have about a dozen standalone Clojure apps now and a lot of the code in those apps started as \"library code\" called from our CFML code base, so it's been a very smooth migration from CFML to Clojure since we could rewrite everything piecemeal without any service impact for our customers.\nAnd being able to REPL into running CFML apps to apply patches occasionally has also been very useful :slightly_smiling_face:\nYES! They thought we were wizards, that application did eventually become a proper Clojure application, but the words \"functional programming\" and \"clojure\" triggered some people \u00af\\_(\u30c4)_/\u00af\nTrying to use `lein kibit` with a dependency that uses `.cljc` files, getting `No namespace: foo.bar.baz found` as an error. Does anyone know how to resolve this?\nI am tracing it back, `kibit` uses `org.clojure/tools.reader`, and `[clojure.tools.reader$read_namespaced_map invokeStatic \"reader.clj\" 760]` is where it is crashing, but I\u2019m not very familiar with this reader lib, and it is not clear to me that `cljc` support is provided\u2026\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1028",
    "text": "<@Meagan> <https://mail.openjdk.java.net/pipermail/openjfx-dev/2018-September/022500.html>\njavapackager distro for JDK 11\nDevious\nI like it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1029",
    "text": "Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1030",
    "text": "I've just run `jcmd &lt;pid&gt; <http://VM.info|VM.info>` in a docker container running our Clojure application on OpenJDK 11 (Ubuntu).\nIn the \"Internal exceptions\" section I've found a few instances of this exception:\n```\nEvent: 4103.838 Thread 0x00007f800400c800 Exception &lt;a 'java/lang/ClassCastException'{0x00000000c78ba0b0}: class clojure.lang.Keyword cannot be cast to class java.lang.CharSequence (clojure.lang.Keyword is in unnamed module of loader 'app'; java.lang.CharSequence is in module java.base of loader\n```\nI couldn't find any info about this one (or what exactly the \"Internal exceptions\" mean in this context) so I'm wondering if it's something I should worry about.\nI've just encountered a strange bug:\n`labels-probs (sort-by :score &gt;= (map #(do {:score %2 :label %1}) labels clean-probs))`\n\nThis was crashing for one of my inputs (`clean-probs` is a list of double) with a comparison not respecting contract error. Yet I checked the data, all the elements of the list are valid floats (just, some extremely small, goes to E-39 iirc).\nSo I figured I might as well do `(map #(if (&lt; % 0.001) 0 %)` to `clean-probs` and it worked, it doesn't crash anymore\nBut I don't understand why `&gt;=` was crashing and not `&lt;`.\n<@Jaimee> your stack trace would probably be useful :slightly_smiling_face:\nok I'll get it (it's not accessible anymore, but I can rollback to a commit that had this problem)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1031",
    "text": "sweet! :slightly_smiling_face:\nyour example shows a 9\u00d72 result table, not 3\u00d76?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1032",
    "text": "i've got a list of tables, and would like to \"merge\" them in a way such that the new table orders them by element order, i.e\nTable merging\nso my three 3x2 tables turn into one 9x2 merged by element. racking my brain on how to do this\noh yeah, i changed the result. it should be 9x2 like it is now\nso merging the nth vector in each table together in a new vector\n`(apply map concat list-of-tables)` should do it\nthe multi-arity versions of map and mapcat can come in useful in these situations\naaaah, damn. that's nice :slightly_smiling_face:\nFix was to use `{:foo.bar.baz/a 1}` instead\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1033",
    "text": "does anyone know why this might behave differently in prod (heroku) to local dev?\n```\n(defn fn-name\n  [f]\n  (as-&gt; (str f) $\n    (clojure.main/demunge $)\n    (or (re-find #\"(.+)--\\d+@\" $)\n        (re-find #\"(.+)@\" $))\n    (last $)))\n```\n(am using it to publish the name of a routing handler in monitoring)\nlocally it correctly knows the function name but in prod it seems to produce `:`\nthis means that some code is trying to do string operations on keywords (maybe you already know this)\nfrom your stack overflow thread:\n&gt; I suppose, neither your application nor the JDK code would ever deal with a clojure.lang.Keyword\nthis is wrong, of course, we use keywords all the time\n<@Lemuel> what's the use case for abbreviating? require with :as allows that for clojure namespaces, but there's no equivalent for java packages\n`(require '[clojure.string :as c.s])`\nThis is for logging.  I have fully qualified symbols for rule names, and I'm logging a table of fire counts.  With the full namespace, it pushes the counts off the screen.\nI've seen it in logging excpetions before...  I guess it wasn't in the new pretty errors, huh?\n<@Lemuel> I know there are libraries that change default stack trace printing, and I'm sure each logging library has some way to alter how it prints packages\n<@Lemuel> that's default type behavior with logback setups. We have that here.\n```\n(filter vampire?\n           (map get-details ids))\n```\n`filter` forces the first lazy seq created by `map` to be realized\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1034",
    "text": "Turns out, this is because I was using `#foo.bar.baz{:a 1}`, and I don\u2019t think the reader knows how to handle it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1035",
    "text": "Since it seems to be a pure function, it must be getting a different input param in production. I suggest printing the input param in production, and then you can use that value to reproduce it locally and debug it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1036",
    "text": "Is there a function available somewhere to abbreviate namespace/package names?  e.g.  net.eraserhead.foo.bar -&gt; n.e.foo.bar?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1037",
    "text": "I\u2019m having a bit of trouble understanding why this code continues to realize the sequence:\n\n<https://pastebin.com/raw/XSsdrLqS>\n\nYou can see a REPL session and clarifying question at the bottom.\nIIRC how it works\nyou'll need to use transducers if you want to chain them without realizing the whole seq\nOk, I do not know what a transducer is at this point.\ntransducers are a way of composing operations on lazy sequences like `map` `filter` etc.\n<@Suanne> See also \u201cchunking\u201d: <http://www.tianxiangxiong.com/2016/11/05/chunking-and-laziness-in-clojure.html>\n<@Evonne> Ah ok I think I see some chunking happening. Because if I give a very large range it only seems to realize the first 32 elements.\n<https://github.com/natetech333/algorithms/blob/master/README.md>\nfeel free to comment on the github and improve it\nhas anyone ever ran `codox` from the command line, or otherwise in the absence of `boot` or `lein`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1038",
    "text": "check this out\u2026 I wrote the Fibonacci Sequence in 3 different langs\u2026\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1039",
    "text": "Are there any good clojure.tools.deps parallel test runners out there? Can\u2019t seem to find any with a google search.\n<https://github.com/clojure/tools.deps.alpha/wiki/Tools> collects a bunch of stuff\nThanks! I\u2019d looked in there but neither of the options for clojure supported running tests in parallel unfortunately.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1040",
    "text": "How can I implement a protocol on a value (map with many keys) and retain the ability to update the map without losing the protocol?\nthis is what defrecord is for\nThe keys are namespaced, and optional, and numerous, the type of thing you would spec\nOr are you suggesting (defrecord [m] \u2026)\nwhy would defrecord care about that?\nwhat I mean, is you use defrecord to define a new map type which extends the protocols / interfaces you are targetting\nit doesn't need to define any of those keys in its declaration - you are free to add any key you like\n```user=&gt; (defrecord Foo [x] Object (toString [this] (str \"foo with x:\" x)))\nuser.Foo\nuser=&gt; (map-&gt;Foo {:x 42 :bar/y 4 :z 22})\n#user.Foo{:x 42, :bar/y 4, :z 22}\nuser=&gt; (str *1)\n\"foo with x:42\"\n\n``` (fixed to include a namespaced key)\nThanks, you are right\n(assoc *1 ::bar 43)\n=&gt; #user.Foo{:x 42, :y 4, :z 22, :user/bar 43}\n\nI did not expect this to work\nif you dissoc x, it downgrades to a hash-map, last I checked\nYeah, so (defrecord [mandatory-id]\u2026) and then we good\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1041",
    "text": "When I start <#C03RZMDSH|datomic> -ions + <#C6N245JGG|shadow-cljs> in the same repl, my JVM just freezes.\nHow can I debug this? I think that I'm running out of threads\nIt's a jvm11@linux. I'm using a i7 so there is 8vcpu.\nWhen jvm freeze, it keep at \"0%\" of cpu usage.\nWhen I query first, the start shadow, it keep compiling forever (web UI works, but do nothing about stop/start builds )\nWhen I start shadow first, then query, the query freezes / lock my repl\ncan you be a bit more detailed and tell me what code exactly you execute?\nI have basically never seen a JVM freeze so that sounds very weird to me\nbut in general: why are you running shadow-cljs as part of a datomic ion? that makes little sense to me?\nIt's just my dev setup. I like to keep everything in one repl.\nAt home I will try to make something reproducible\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1042",
    "text": "I'm using eftest\nLibraries don't need to explicitly support tools.deps, they just need to be a clojure library\n<https://github.com/weavejester/eftest/pull/51> might help you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1043",
    "text": "which platform does that run on? JVM can take quite a few threads so its unlikely you are running out?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1044",
    "text": "I could use a little help designing an algorithm. How would you go about transforming between the two formats? ```{:logger {:name :logger\n          :deps [:render]}\n :render {:name :render\n          :deps [:store]}\n :store {:name :store\n         :deps [:router]}\n :router {:name :router\n          :deps []}}\n\n;; Would like to format as:\n\n[[:router []]\n [:store  [:router]]\n [:render [:store]]\n [:logger [:render]]]\n```\nI implemented a gross solution in JS by first transforming the input into `{:router {:store {:render {:logger {}}}}}` then walking it again to build a list like the bottom. However, I feel like I\u2019m making it messier\\more complicated than it needs to be.\nI am using the <https://github.com/metosin/compojure-api/wiki/Component-integration#using-closures> but how does this work in development env? In the case of `defroutes` it is a var and evaling(c-x c-e) changes just works. In the case of closure, I have to keep restarting the server.\n```\n(reduce-kv (fn [res k v] (conj res [k (:deps v)])) [] input-map)\n```\n```\n(mapv (fn [[k v]] [k (:deps v)]) input-map)\n```\n```\n(mapv (juxt first (comp :deps second)) input-map)\n```\nthis doesn't give the right order <@Fatima>\nAhh, order matters?\nI guess so, but can't speak for the OP\nthe problem being solved here is topological sorting\nthere's generic solutions e.g in loom <https://cljdoc.org/d/aysylu/loom/1.0.2/api/loom.alg#topsort>\nAhhh, I thought it was simply transforming data format to another, which is quite trivial though. It\u2019s likely that I didn\u2019t get the point from the example. :slightly_smiling_face:\nBut yeah, now looking at it it makes sense. I\u2019d maybe look how integrant or component does that.\nthe algorithm is not very complex so it's not rare too see ad-hoc implementations in libraries having to do some kind of dependency resolution\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1045",
    "text": "<@Guy> Component out-of-the-box needs a little setup to have it work well in a hot-reloading environment. I'm assuming you're using CIDER + Emacs, my setup defines reloading functionality for component called user/reset in dev/user.clj. Then I have key chord C-x C-r setup to call user/reset, which refreshes component. It works perfectly. For example, I could define some new functionality for a closure, test it with C-x C-e, and then hit C-x C-r to see the changes appear.\n<@Guy> This isn't my own idea it's based off the article: <http://thinkrelevance.com/blog/2013/06/04/clojure-workflow-reloaded>. Though the article won't get you all the way, if you follow through it and tinker with your emacs config for a bit, you'll be able to find a good solution. If you want to check out my .emacs config file I can send it over in a private message.\n<@Tonya> Thanks for the link\nI doing the same thing. I though there could be a better way since I have to keep firing (reset) all the time.\n<@Guy> yeah I hoped as well, if you find one message me about it. Though I think it's unsolvable due to components use of protocols.\nHere's my elisp code for resetting component.\nOops sorry for not being clear but yes, order does matter.\nThanks for the help, finding out the name of the algo for it is a ton of help!\n<@Tonya> <https://github.com/clojure-emacs/cider/blob/master/doc/miscellaneous_features.md#reloading-code>\n<https://lambdaisland.com/blog/2018-02-09-reloading-woes>\nThank you for the link.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1046",
    "text": "None\nworked\n<@Guy> so this will save and refresh component every time you reset buffer?\nAlso what happens when there are errors in the saved buffer?\n<@Tonya> you can turn the logger on `*cider-ns-refresh-log*`\nnow I change my code, do C-M-r, that does the magic.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1047",
    "text": "Is it possible to compose aliases in deps.edn? For example, if my `~/.clojure/deps.edn` contains a test alias (adding test directory to the path) and a cider alias (adding some cider libs), can I create a dev alias in my main project deps.edn which says, \"switch on the test and cider aliases when dev is used\"?\nI don\u2019t believe so\nyou can add them both in the args. e.g. `-A:test:cider`\nbut you can\u2019t create aggregates\nthat would combine them by name like `-A:test-cider` like you\u2019re saying\nOk, thanks. What I was really trying to do here was to configure cider to start with the dev alias by setting `cider-clojure-cli-global-options` to `-A:dev` and then configure the dev profile on a per project basis. I suppose I can either just put all of the config in the project dev alias (little duplication, but nothing too worry too much about), or get into `.dir-locals.el` stuff, though emacs seems to complain about setting this the `cider-clojure-cli-global-options` variable in dir locals. Apparently it \"may not be safe\", but I am not sure exactly what determines that. Probably simpler to do the first thing I suppose.\nyeah. it\u2019s super annoying to set those options right now in CIDER\nwe should open up a ticket\nI hate that message that pops up everytime I open a new file :anguished:\nIt does seem to give me an option to say, \"Mark this variable as safe in the future\", but I am not sure I understand _why_ it is unsafe. Something makes me anxious about overriding a message like this without fully understanding it :slightly_smiling_face:\none of the things I\u2019ve noticed is sometimes those settings bleed between projects\nAhhh... yeah, that would be a little unsafe I guess :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1048",
    "text": "If you cider jack in with a prefix argument you can edit the actual startup form. Makes it easy to tweak those without knowing which config to set\nI just want to `SPC m '` and not think about it :upside_down_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1049",
    "text": "Hello. I want to present you yet another nobody needed Clojure gebugging library :slightly_smiling_face: Which channel would be right for it?\nmaybe, I'm not sure. thanks, I'l post it there\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1050",
    "text": "<#C06MAR553|announcements> ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1051",
    "text": "quil looks neat - reminds me of SDL - is there anyone out there combining openjfx + quil in some way? (maybe with the new cljfx lib?)\nit is the style rich prefers, any in some places other slightly different formatted code has been patched in, and in general rich doesn't like patches that just fiddle with formatting\nI forget the name of the style\nit is vaguely similar to <https://en.wikipedia.org/wiki/Indentation_style#GNU_style>\neven gnu style has some indentation\nthat is why I said vaguely similar, I forget if it is exactly one of the named styles, or just an idiosyncratic style rich picked up\nmaybe more like whitesmith's above it\nit's weird\nofcourse it should looks fine to the author\nit is not a modern style, sure\nalthough, I guess what people usually use these days is basically k&amp;r style which would hardly be called a \"modern\" style\nyeah but i never saw a style with no indentation. it just drive the programmer crazy i guess\nCompiler.java is way worse on that front, because of patches with slightly different styles, and sometimes rich will put a block (like an if condition) around some code without re-indenting it, which I guess maybe makes diffs easier to read? I dunno\nI think maybe the compiler even mixes tabs and spaces due to patches\nhmmm i'm kinda disappointed, i expected much more from clojure in this regard\nit is there, it works well\nyeah , but it discourage other people to contribute or even read the code, and honestly clojure is not doing well in documentation so for some stuff you have to look at the code\nthen go write some docs\nyeah i know, but as far as i talked with people, clojure is not welcoming in regard to documentation specially in source code level\nyou are upset that someone did work and made it available to you for free, and you don't like the internals of it?\nno i'm upset because clojure contribution policy is not friendly enough to people who willing to help\nthat is complicated\nrich has different priorities from other people, and it is his party, so other people are unhappy about his decisions\ni'm reading the code anyway for my own sake, why not to fix it as i go along and even right some comments in the source code for the next guy ( which i common ) but yet ....\nyou know, i'm wondering how other programming languages handle this situation  ?\nbasically, you say \"willing to help\" but rich disgrees that help is needed or wanted in that direction (or that he wants to spend time managing the \"help\"), and that is taken as being hostile to contribution\nand at the end of the day it is simple, a guy like me make some patches and you as the author merge it if you like it and ask for change if you don't like it\nthere is a third option there of course\njust ignore you because I have other things to do\nboth of your options make a demand on the time of the author\nyeah unfortunately that's the current situation\nto merge your work, or engage in dialog with you about it\nbut that's how free/open source software works\nthat is complicated\nit is easy to see why you (or I) might prefer one of those two options, but it requires the maintainer of the project to pour even more time in to their project, and be managing contributions instead of developing their project\ni can see your point, but it's not a new problem\nof course not\nthere are bigger projects that have the same problem.\nlinux kernel for example\nit's massive but they handle it much better that clojure\ni guess clojure core team can do a similar thing\nafter all contribution can lead to good things\nthe linux kernel actually has companies that employee people entirely to work on it\nyeah but they way they handle contribution is good\nbecause they have the resources to devote to it\nclojure is many orders of magnitude smaller, and has, I think no full time resources whatsoever\nmaybe one person\nbut it isn't rich's job\nhmmm, it isn't rich's job, but at the same time he is the one that has the final saying on it\nyou can see the problem , right ?\nbut you also see how it isn't a problem for rich, right?\nyeah\nthat's why i'm saying what linux does make sense here\nit doesn't\norganizational structure isn't free\nit does friend. in linux, Linus has the final saying, but there is subsystem who has several leaders who are responsible for managing the contributions and patches\nclojure can do the same\nlinus for example says he trusts most of the subsystem maintainers because he has been working with them for 5-15 years, clojure is 11 years old at this point\nlinus also spends most of time still managing those contributions\nyeah but even now there are people around rich who at least i know they are very involved with clojure\nand linus is, as far as I know, paid to work on that fulltime\nyeah he is\nit would be great if rich could work on clojure fulltime\nhe did spend maybe one or two years at the start(before it was made public?) working on it fulltime living off of his savings\nwhich, in my experience, feels terrible. so I completely understand reluctance to be in a similar situation again.\ni can understand every thing you said\nbut at the end of the day I'm pretty sure community will be helpful here, if he let them.\nbut it isn't that simple\n\"the community\" wants a bigger stake in it, and wants rich to do more work, but the community hasn't bothered to figure out how it is going to pay him\ni agree\njust figure out the latter part, the former part is nothing, as you say there are plenty of examples, etc to follow there\nhmm i'm not sure what you meant by \"but the community hasn't bothered to figure out how it is going to pay him\"\nuntil then, it doesn't surprise me that when people charge in demanding change at the center nothing happens, but when people go out and build what they want without trying to make it some official project, good things happen (clojuredocs, this slack)\nI mean this is an exchange right? you are demanding an awful lot without figuring out first what you are willing to exchang to get it\nhmmm i don't know about that\nyou want something right?\nI'm not demanding anything, I'm offering\nbut you are not happy when your offer isn't taken?\nthe source code has a problem, or somebody else has a good idea to add to clojure,\nit's not a demand though\nbut rich disagrees that it is a problem or that it is a good idea, or doesn't have the time to review it so ignores it\nwhat  could be  the reason  for  httpkit to throw timeout  exception  on  a perfectly healthy request?\ncurl works just fine\npeople basically don't make offers like a queue though\nif you offer to a queue, it either takes it or it doesn't\npeople make an \"offer\" and it is a demand on the attention of the person the offer is being made to\nand people get offended when their \"offer\" is summarily rejected\nso when people make an \"offer\" it is clearly more of a \"demand\"\nand then their \"offer\" is summarily rejected, they want the process to change in some way\nhmmm, it doesn't seem right\nbasically what it comes down to is you want the process to change, rich is comfortable with the current process, and you won't offer him anything to induce him to change it\nfor example, i can read the code, after some struggles to understand it, i can just do my thing and forget about it\n:100: :point_up:to everything <@Rosaline> said\n&gt; It\u2019s complicated\n<@Rosaline> also brings up another good point <@Valrie> -&gt; if you see a certain benefit to changing the indentation / docs, why not make a separate project that will auto-indent Clojure core (ala `gofmt`)? That way, anybody interested can use your new tool, while it in no way breaks existing JIRA patches, etc. and doesn\u2019t take up mental/time bandwidth of people who are not concerned about the indentation.\nI can ignore it but i can spend some time on it  ( for free and without any demand ) and make offer some improvements.\nI think some kind of annotated source for clojure would be really great, I have a branch on my fork of the clojure repo on github where I started something like that, many years ago, but just didn't have the time/attention/whatever to finish it and keep it up\nimprovements from your point of view\nyes, but i'm not going to merge it you  know, like many other open sources projects, people can review it\nit's so simple\nclojure is not a special case or anything, it's not the first FOSS project facing this problem nor the last one\nbut there is a point to learn from history of other projects\nhow they handled this case ?\nthat is your perspective on it though, you see it has some kind of natural progression of a project\n<@Marcia> you have a point, but it doesn't summarized only in indentation\nor keep an up to date branch with lots of comments that is so valuable that everyone references it all the time\nyeah i don't think me adding code to my own fork without review would be valuable for others to refer to\nbut you are willing to ask rich to maintain your comments\nno,\nthat is what your pr would be\nanyone who knows about clojure or an specific subject can review them\nLet me make it really easy. This is not something that Rich or I want to spend time on, including spending time to explain or debate why we don\u2019t want to spend time on it. We realize this probably makes some people unhappy. \nthanks\ngood use of \"end of discussion\" :laughing: (joking)\nFeel free to discuss all you like :)\nwe can keep discussing it, because, for example, this slack isn't run by rich or alex\nsomeone in the clojure community thought it would be neat and made it\nyeah but there is no point discussing it\ncontribution is something that people in charge have to care about it to begin with\nus talking, wouldn't change anything\nin charge of what?\nsource code and clojure in general\nclojuredocs, for example was started and run for a long time without any connection with rich or \"the people in charge\"\n(it may still be, I am not sure)\nhmmm what can i say, clojure \"project\" is not in any way special in compare to other FOSS projects. I'm pretty sure other projects faced the same issue. We ( i don't think i can say we anymore ) can either learn from them and open the door to other people who wants to help or can keep going like this and hope for the best.\nI hope that I'm wrong and the current workflow is the best way to do it\nNo project starts that way, so the question is, at what point did all the projects you are suggesting as examples change to allow for more delegation, and I would be shocked if that doesn't coincide with the fortunes of the original creator becoming more secure (via sponsorship, or patronage)\ni feel out of place with  my  down to  earth  questions, but  here\u2019s another one: anybody had this problem when  &lt;!! while blocked would prevent the shell  from responding to os sugnals, like ^C?\ni don't know what to say anymore friend. you're putting a question mark on top of lots of FOSS software out there\nno, I am just suggesting that if you want to see change the thing to work on is some way to pay rich and others to work on clojure fulltime, not lobbying them to change their process without offering anything in return\n<@Leticia> the behavior will depend a lot on the repl you are using\nfor example nrepl repls are typically split in to client and server jvms, where you code is actually execute on the server jvm\nok so you're saying that i should spend my time improving the code base, and pay the core members to consider my contribution ?\nso ^C on the client jvm may not do what you want\nit\u2019s lein repl in a shell on macos\npretty  default setup i think\n<@Valrie> again, improving in your point of view\nyou've already made the judgment that your changes are good, so if they are not considered or not well received something is wrong\nno, i didn't say that\nas i mentioned before \"reviewing the changes\" is really important\nyou have used the word improve or improvement over and over again\nhmmmm i don't know any other word to use in this context\nyou are have a set of changes you would like someone to spend time reviewing and determining if they represent an improvement, and if the improvement covers the cost of maintenance\nthat is review is valuable work, for example it is part of the job I am paid to do\nhmmm you're missing the point of FOSS\nis the point of foss that when you do work for free you get to demand that other people do work for free?\ndid i as for money ?\nI didn't say you did\nor did anybody asked anything in return ?\nI said you did work for free (your set of changes) and you are demanding that others do work for free (review those changes)\nspeaking of code improvements and reviewing - linus had stopped looking at other people\u2019s code directly  long time ago, he would only  pull updates from few trusted top-level maintainers. there\u2019s just too many \u201cimprovements\u201d everybody would like to suggest and only  24 hours in a day.\nI would suggest you are missing the point of f/oss, in that the entire point is to give your the source to empower you to make the changes you want, it says nothing about forcing upstream to take in your changes\nto quote the fsf's definition \"\u201cFree software\u201d means software that respects users' freedom and community. Roughly, it means that the users have the freedom to run, copy, distribute, study, change and improve the software.\"\nhmmm we have a different perspective then\nif your perspective is at odds with the fsf's view on the definition of free software then I wonder where it comes from\nLein repl uses nREPl, so that should be interruptible \ni believe in free software and everything in fact i'm a gnu contributor. but the way clojure source code is going forward is far from community base development. you're saying rich's time is important and other people have to pay him to review their changes which are made out of the desire to help\nI am not say they have to, I am saying your perspective is completely ignoring the fact that he is a finite person and needs to work to live, and you are make demands on his time without in turn offering anything to him\ni'm aware of that, what i'm saying is \"it's not have to be like it\"\nand I am saying that change is also something that takes review and work to achieve, and you are asking for it without providing any inducements\n(changes to code, and changes to organization)\neveryone wants to suggest changes, no one wants to provide a means to support those changes\nwhat type of support ? financial ?\nbasically, yes\nthat's where we are different\nIf i had a company that uses clojure , I wouldn't hesitate to sponsor clojure\nin some degree\nbut you shouldn't expect people to pay money to the author in return for considering some patches\nwhy not though?\nbecause the fact that i spend my free time working on clojure to help it grow ( even if i'm the only one thinking like this ) is enough. I have to live as well.\ni want to help others by any mean.\nrich has already, as discussed, spent years of doing that fulltime, and continues to do that (but I guess not fulltime)\nif every FOSS project start charging thier contributors there would not be any FOSS project left anymore\nso why can you demand he give more of his free time to review your change?\nwhat i'm saying is that like other project the author can trust some people and let them deal with these kind of stuff. or even\nlike many other projects a third person can review the change first and leave his review\nit's not have to be just one person\nwhat I am saying is you are doing the same thing again, just at another level removed\ne.g. from the code level to the social/org level\nanyway, we were discussing something that is not going to change.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1052",
    "text": "This is great. Thank you.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1053",
    "text": "hey folks, just out of curiosity, why the indentation on clojure source code is so weird ? for example <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Ref.java>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1054",
    "text": "I think it is to some degree very telling, that none of the proposals are like \"hey, rich laid a gold egg in clojure, how do we get him nice and happy and continuing to give us more eggs\" and are all like \"that goose that laid the golden egg is in the way of me doing what I want, how do we change the process so I can do what I want\"\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1055",
    "text": "like, it is easy to say, \"hey linux has this structure, we shuld copy it\"  but no one has said \"hey, the X key figures in linux development are supported in ways Z, W, and Y, how can we do that for the X key clojure figures so clojure can have a process like linux's\"\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1056",
    "text": "hey, does Clojure have a big boring web framework yet? something like Django or Rails\nas far as i know luminus is the closest to what you're asking for\nthanks, I'll check it out :)\nCoast is a new thing like that\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1057",
    "text": "is there an equivalent in clojure for elixir's IO.inspect? <https://hexdocs.pm/elixir/IO.html#inspect/2>\nsomething that prints the representation of a value and then also returns that value, so you can inject it in chains of calls to inspect values\nI wrote my own but I figured there might be some way that already exists\n```(defn- inspect\n  ([v]\n   (println v)\n   v)\n  ([message v]\n   (println message v)\n   v))\n```\ni wish :upside_down_face:\nI guess we're always cursed to miss things from other languages\nI write it in almost every project.\nI wish that\u2019s what `tap&gt;` did\norganization-wise, do you keep like a util namespace in your projects for this sort of thing?\nthere are a bunch of simple useful things like this that I find myself adding\ni usually just define it kind of ad-hoc since I usually only need it while debugging\nin one of my projects I have it in a common `test.utils` ns because the test runner rarely prints helpful things, so I use it for finer-grained debugging in my tests\nahhh ok\nthanks\nthat sounds reasonable\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1058",
    "text": "<https://github.com/clojure/tools.trace>\nIs that what you are looking for ^^?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1059",
    "text": "Can someone help me understand if I have found an error in Brave Clojure?\n\nIt gives an implementation of `partial`:\n\n```\n(defn my-partial\n  [partialized-fn &amp; args]\n  (fn [&amp; more-args]\n    (apply partialized-fn (into args more-args))))\n```\n\nI wrote this function to use with it:\n\n```\n(defn print-args\n  [&amp; args]\n  (loop [index 0]\n    (println (format \"arg #%d: %s\" index (nth args index)))\n    (if (&lt; index (dec (count args)))\n      (recur (inc index)))))\n```\n\nBut it doesn\u2019t seem to behave like the built-in `partial` and gives arguments out of order:\n\n```\n=&gt; ((my-partial print-args \"Today\" \"was\" \"a\") \"good\" \"day\")\narg #0: day\narg #1: good\narg #2: Today\narg #3: was\narg #4: a\nnil\n```\n\nAs opposed to:\n\n```\n=&gt; ((partial print-args \"Today\" \"was\" \"a\") \"good\" \"day\")\narg #0: Today\narg #1: was\narg #2: a\narg #3: good\narg #4: day\nnil\n```\n\nI don\u2019t understand why this happens because the implementation of `my-partial` seems correct to me. I don\u2019t understand why the arguments are given out of order. The relevant line is `(into args more-args)`.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1060",
    "text": "`into` uses the semantics of whatever collection it\u2019s collecting into. `&amp; args` is a seq\n<@Meagan> And seqs have stuff pushed onto them?\nso when elements are added to the `args` seq, it adds them to the head\nyeah\n<@Meagan> Hmm. So the implementation in the book is actually wrong?\ncould be\n<@Meagan> Here is the usage example in the book:\n\n```\n(def add20 (my-partial + 20))\n(add20 3) \n; =&gt; 23\n```\n\nThis example works because addition is commutative, right? So either the author flubbed it or purposefully didn\u2019t complicate the implementation and purposefully used a simple example where order didn\u2019t matter.\nalso they\u2019re not using many args\nbut yeah, pretty much\nI\u2019m guessing it\u2019s a mistake\nYeah I would hope so because I\u2019ve sank way too much time into trying to understand why I don\u2019t get it. It\u2019s probably a mistake.\nI think the easiest fix is to change `into` -&gt; `concat`\nYes, that does the trick!\nThanks for the help.\n<@Meagan> I was about to submit a message to the repository of the book but it has dozens of issues and pull requests that haven\u2019t been addressed in years, doesn\u2019t seem worth the time. Now I\u2019m starting to doubt the quality of this resource. But it\u2019s been helpful so far so I guess I\u2019ll stick with it a bit longer.\nmaybe you can repeat your question in the ghost town that is the <#C0FM7N1SM|quil> channel .\n<@Suanne> it's a good resource, stick with it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1061",
    "text": "I\u2019m trying to use `print-stack-trace` with GraalVM, but that doesn\u2019t work since it has reflection issues (which can be resolved using type hints)\nI\u2019ll post a JIRA\n<https://dev.clojure.org/jira/browse/CLJ-2502>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1062",
    "text": "Does anybody know what is the motivation for having single-argument `=` arity in Clojure which always returns `true`? Is this a technical detail or is there a mathematical reason for it?\nHowever, you still have to handle 0-element case explicitly, so I don't know if the victory is huge here.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1063",
    "text": "how to spec a hashmap, whose keys are not specs themselves? say I need to provide spec for a hashmap whose keys are string literals and not keywords?  should I be using something other than spec/keys?\nI am using a multimethod that dispatches based on deriving the spec of an incoming message.\nshould I just roll my own spec (with contains?) or is there something in the std library or a simple way of working with spec/keys that i am not aware of?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1064",
    "text": "I suppose it's so you can do things like `(apply = coll)` to mean \"are all elements in `coll` equal?\" without having to treat the trivial 1-element case differently\nyeah, I was about to say that \"mathematically\" it makes sense to have a 0-argument arity that always returns true also\nI'm not sure it is obvious what 0 or 1-argument `=` should return.\nbut it might be problematic to have `=` not be the complement of `not=`\n`not=` is derivative from `=`, it just follows suit\nI think of `=` as saying \"are my arguments all equal?\"\nHowever, `(not= 1) =&gt; false` makes even less sense to me.\n&gt; I think of `=` as saying \"are my arguments all equal?\"\nAre equal to what?\nto each other\nWhat if there is no other?\nthen it's trivially true\nsame reason why `&lt;` has a 1-argument arity\nwhich should make even less sense unless you think of it as saying \"are my arguments all in ascending order?\"\nWhat you describe is actually different, it's \"Doesn't the collection contain distinct elements?\"\nThere is a place for a function that behaves like that, but it's a stretch to link that and `=`\n&gt; are my arguments all in ascending order?\nThat interpretation of &lt; makes sense, so I don't question it.\nwell, the alternative would be to throw an exception, which makes things harder to reason about\nI think it's also convention among other lisps to define `=` in this way\nIn contrast, it would catch mistakes like `(= value #_missing-comparison)`.\n&gt; I think it's also convention among other lisps to define `=` in this way\nYeah, that is a valid argument.\nHowever, all from eq/eql/equal variety expect exactly 2 arguments.\nYou could use s/conformer to keywordize, then use s/keys\nRight now, we don\u2019t have anything to specifically support keys as strings\nthx\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1065",
    "text": "```\n&gt; (-&gt; '[^int? ^some? a] first meta)\n{:tag int?}\n```\n\nIs `^some?` swallowed (lost) here?\n\n(I realise it is not expected to pass functions as metadata, but I'm developing a little sth)\nwell, `^foo bar` is the same as `^{:tag 'foo} bar`, and `^foo bar baz` is the same as `^{:tag 'foo} ^{:tag 'bar} baz`, which is semantically `(with-meta (with-meta baz {:tag 'bar}) {:tag 'foo})`\nso it's not \"lost\", you're overriding it\n(same as doing `(assoc (assoc {} :foo 1) :foo 2)`)\nI think the tools.logging library has a functions like that called `spy` and `spyf`. <@Malik>\nGreat expl! Thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1066",
    "text": "<@Valrie> Maybe the author was traumatized by OOP, and in order to repress the painful memories, indents the code as if the `class` line does not exist.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1067",
    "text": "If you wanted to start a repository that was a fork of the Clojure source code, retaining its original license, and added comments and reformatted code, and added documentation, you may be able to find others interested in answering questions or providing review comments, or even contributing to such a repository.  It seems unlikely that Rich Hickey would be one of the people willing to spend time on that project, though.\nThere are other people besides Rich who know at least parts of that implementation quite well.\nYeah i wanted to do that but kinda think that the problem is in people's view of the whole thing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1068",
    "text": "ahhh cool, very similar to what I want\nI\u2019m trying to pass a custom deftype over a core.async channel, and it seems to coming out of the other side as a seq, losing its type information and structure.\nIs this a known thing, or is there something I\u2019m missing?\ndoesn't ring a bell\nlooks fine to me with a simple test\nYeah, I think I\u2019ve worked it out\nthis particular deftype implements ISeq\nThat seems to be enough for it to treated as one \u2014 if I remove that implementation it makes it through intact\nI think I know what's going on\ncan you give me a small repro for this?\nhold on\n<https://gist.github.com/clarkema/48da41fb5cf720f7f5bbba2428d5299a>\ntry that as is, and then comment out the iseq implementation\nty\nyeah so this is not what it appears to be ;)\n```user=&gt; (-&gt;Segment 0 :foo [1 2 3])\n(1 2 3)\nuser=&gt; (class (-&gt;Segment 0 :foo [1 2 3]))\nuser.Segment```\nnothing at all with `core.async`\nit's just that print-dup gives priority to `ISeq` over `IType`\nso the object is printed as if it was a seq\nprint-dup or whatever is responsible for printing here, I can never remember what does what\none of those multimethods anyway\nhmm\nwhich is weird because I thought there were appropriate prefer-methods\nlet me check\nthis actually cropped up because I\u2019m trying to match on it (using core.match) on the other side of the channel\nlooks like the prefer-methods is just for records, not types\nprinting what you took out of the channel can make it look like types are being lost\nbut they're not\nyeah, it does still have the correct type\nso something else is being weird\nwell you've told clojure that Segment is a seq so it's printing it using the seq printer\narguably not the best behavior but that's how it works now\nif the type is definitely getting lost maybe you have something that tries to pr-str/read-string the value?\nit\u2019s possible that it\u2019s actually to do with the match treating it as a seq\nlikely\nyou should probably make that type seqable instead of a seq directly if you can\nI think I can live without it being a seq; it was mostly for completness\nKind of a weird interaction though\nthanks\nif you use `Control-\\` or use jstack you can trigger a dump of the stack traces of all running threads. My hunch is that something is running and not getting expected input.\nIf it helps, this is very close to being an adjacency-list / tree transform, which is well studied and well documented. And loom itself has code that turns a tree into an adjacency list and visa versa (every tree can be converted to an adjacency list, an adjacency list can only be converted to a tree if its graph is non-cyclical, directed, and each node has only one incoming link)\nyes, the general advice is to make types ISeqable instead of ISeq, when you care about them being more than simple seqs\nwhich doesn't really make the type less powerful since most collections operate on seqables instead of just on seqs\nThanks <@Dann>. Learning the term helped me find a section about it in an algorithms text book I impulsively bought but never used. After reading that section then watching a youtube talk on topological sorting I was able to implement a depth-first-search topological sort for directed-acyclic-graphs on my own :smile:\nnice\nadjacency-lists are especially useful in a language with immutable data structures, as they allow cycles and complex nested updates without doing a tree worth of mutations\nAh that makes sense, the book\u2019s solution used an AdjacencyList but it also used a mutable list to track what was visited. I\u2019m not quite sure how to handle that part in an immutable language without something like an atom.\nActually I take that back. The recursive function would need to return the updated sorted list and the updated visited list is all.\nprecisely - we can use normal updating / recursion tricks, and it's simplified since it's flattened\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1069",
    "text": "```user=&gt; (require '[clojure.core.async :as a])\nnil\nuser=&gt; (deftype Foo [x])\nuser.Foo\nuser=&gt; (def c (a/chan 1))\n#'user/c\nuser=&gt; (a/&gt;!! c (-&gt;Foo 1))\ntrue\nuser=&gt; (def c2 (a/&lt;!! c))\n#'user/c2\nuser=&gt; (class c2)\nuser.Foo\nuser=&gt; (ancestors (class c2))\n#{clojure.lang.IType java.lang.Object}\nuser=&gt; (.-x c2)\n1\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1070",
    "text": "I guess that explains why a lot of things implement a \u201cto seq\u201d style rather than directly implement seq \nI remember a comment in core match about destructing problems since the types implemented both seq and assoc protocols\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1071",
    "text": "Did anyone ever have a problem that JVM doesn't flush SoftReferences even when the heap is 99% occupied, and everything is spinning in FullGC most of the time? I'm using hot Java recompilation heavily which inflates DynamicClassLoader's `classCache`, and it never clears.\nNope, they are not. Explicitly triggering OutOfMemoryError clears them out.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1072",
    "text": "the simplest explanation is your soft refs are being held strongly somewhere\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1073",
    "text": "well DCL only clears cache when you define a new class\ndue to Java recomp are you never defining new classes?\nand thus never triggering a clear?\n&gt; due to Java recomp are you never defining new classes?\nIt's the opposite, I define new classes all the time with `defineClass`.\nI'm using Virgil, here's how a class gets defined there: <https://github.com/ztellman/virgil/blob/master/src/virgil/compile.clj#L129>\nIn fact it might not even be related to Virgil/Java compilation as I'm using tools.namespace too, and the main contributors to inflated heap seem to be some big data objects that are referenced by Clojure function classes, which are in turn kept around by `classCache`.\nI took a heap dump of the application, and MAT couldn't find any live paths to GC roots from those big objects. FullGC was doing nothing. However, as soon as manually triggered OOM, those softrefs successfully disappeared.\nwhen you say \"explicitly triggering an outofmemoryerror\" what mechanism are you using to do that?\n<@Jasmine> Interestingly enough, right now the `DynamicClassLoader.rq` is empty, but those SoftReferences are still there.\n<@Rosaline> `(long-array 5e8)`\nand on what thread are you raising that exception, and what happens if you raise a different exception on that thread?\nJust the REPL thread. Other exceptions won't do anything.\nI learned that trick here: <https://stackoverflow.com/questions/3785713/how-to-make-the-java-system-release-soft-references/3810234#3810234>\nit sounds like you are allocating small enough amounts of memory that the full gc recovers a very small amount about that seems to be enough so refs aren't cleared, and then you allocate again, so full gc runs again, etc\neither increase or decrease your heap size\nYep, it looks exactly like what is happening.\n(or fiddle with gc tuning params)\nI doubt changing the heap size would work here, it's currently set to 7g for devtime, and the leak manifests itself very slowly, it takes hundreds of reloads before the heap becomes occupied enough to cause lags and hangups. And it never goes past it, I was at 100% OldGen util, and it still refused to give up those SoftRefs.\n&gt; (or fiddle with GC tuning params)\nThat one could possibly work, yet it is still strange to me that such behavior could be the default. Maybe switching a GC would help, but I don't want to move away from ParGC during development.\nif it is what I described the issue is in the relationship between the gc cycles and the mutator cycles, it isn't an issue of heap size per se, but changing the heap size will change the gc cycle and hopefully break the relationship\nyou may want to try g1\nI prefer a predictable GC in development, but this is subjective and another story. Thanks for the help, anyway.\nas of java 9 g1 is the default collector\nin general though, I'd say this is a level of gc tuning that I am aware of, but not an expert in :)\nInteresting, I didn't link this problem to class unloading. They could indeed be related. I gonna study the GC logs, see if there's a mention of it there.\nOn a different note, I had a huge success running Clojure with ShenandoahGC, hope to write about it someday.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1074",
    "text": "in java 12, I know the new ZGC actually has support for parallel class unloading, which might be helpful for you\nwould love to read that\nwould make a great conj talk ;)\nSo, this:\n```\n        labels-probs (sort-by :score &gt;=\n                              (map #(do {:score %2 :label %1})\n                                   labels clean-probs))\n```\n\ngives me a\n```\njava.lang.IllegalArgumentException: Comparison method violates its general contract!\n        at java.util.TimSort.mergeHi(TimSort.java:899)\n        at java.util.TimSort.mergeAt(TimSort.java:516)\n        at java.util.TimSort.mergeCollapse(TimSort.java:439)\n        at java.util.TimSort.sort(TimSort.java:245)\n        at java.util.Arrays.sort(Arrays.java:1438)\n        at clojure.core$sort.invokeStatic(core.clj:3115)\n        at clojure.core$sort_by.invokeStatic(core.clj:3119)\n        at clojure.core$sort_by.invoke(core.clj:3119)\n        at closs.stages.classifiers$parse_results_threshold.invokeStatic(classifiers.clj:26)\n```\n\nerror, but clean-probs is entirely made of floats, I'm confused...\n<@Jaimee> There must be a NaN somewhere in the values.\nNaN's cannot be compared, so the sorting algorithm freaks out.\n```\nuser=&gt; [(= ##NaN ##NaN) (&gt; ##NaN ##NaN) (&lt; ##NaN ##NaN)]\n[false false false]\n```\nOk I will try using Double/isNaN to filter them out\nthank you\n<@Margit> can an underflow error lead to this also ?\nBecause even if I filter the NaN out, it still crashes, I printed the vector I have no NaN in my vector, but `8.690312E-37` (among other)\nI don't know if underflow can cause this, but this doesn't look like an underflow to me. This number is within float range it seems.\n```\nuser=&gt; Float/MIN_VALUE\n1.4E-45\n```\nCould you post your vector?\n```\n(0.0 0.0 0.0 0.0 0.0 3.6712243E-31 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 3.2708435E-36 0.0 0.0 0.0 0.0 1.6565916E-12 0.0 1.0 0.0 8.690312E-37 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)\n(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 1.0 0.0 5.2775614E-29 1.0 6.7907166E-7 0.0 0.0 0.0 0.0 3.689431E-32 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)\n```\nCan it be that `println` replaces values randomly ?\nCould as well exclude that possibility, try `pr` instead of `println`\nTry sorting `(take 10 ...)` of your sequence, will it still fail?\nNo\nI would do a poor man's binary search here to try to figure out who's to blame. Something like `(-&gt;&gt; (partition-all 10 values) (map #(do (println \"Sorting %\") (sort %)))`.\nI will try that, thank you for the help\nYou are welcome, will be interesting to know what was the problem in the end\nYeah I think I won't have a choice than diving in because the problem is not even determinist it seems\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1075",
    "text": "Hot damn the cognitect-aws API is good! Never before had done any AWS API work (I barely even know how AWS works), and I managed to cobble together a working Route53 utlity namespace in about an hour. Love it!\nThere was a project years back where someone did such a thing, and in particular they were trying to create a \"literate programming\" version of the Clojure source code.  They made some progress, and their work is probably still available in the public somewhere, but it is likely for a version of Clojure that is not the most recent, e.g. maybe the part that was done is up to date for Clojure 1.4 or so.  I may be misunderstanding what your goal is, but realize that detailed documentation of such a code base is many, many person-months of effort.  Not everyone may share your desire to spend such time on it.\nHere is a link to the one I have heard about, last updated in 2012: <https://github.com/daly/literateclojure>   You can search for Tim Daly's name on the Clojure Google group for messages from around that time for some discussion of it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1076",
    "text": "Thanks man. But it is not going to work. The vision of people is wrong about FOSS that's why it is not going to work.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1077",
    "text": "You may want to check for Float/isNaN, too.  I think maybe Double/isNaN only checks for NaN's of type Double, so will not find any Float NaN values, if you have any in your data.\nNever mind, some experiments I just ran at the REPL indicate that Double/isNaN returns true regardless of whether you give it a NaN of type Double or Float.\nThis StackOverflow answer mentions that someone encountered this exception when sorting float and/or double values, but that seems odd to me that the floating point values are not given a total order by the default comparator: <https://stackoverflow.com/a/33971198>\nDo you perhaps have a mix of some Float and some Double values in your data?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1078",
    "text": "Does anyone have experience logging to Stackdriver using clojure.tools/logging?\nUsing the standard appender does not do anything\n\nDependencies:\n```\n                 [ch.qos.logback/logback-classic \"1.2.3\" :exclusions [org.slf4j/slf4j-api]]\n                 [org.slf4j/slf4j-api \"1.7.26\"]\n                 [org.slf4j/jul-to-slf4j \"1.7.25\"]\n                 [org.slf4j/jcl-over-slf4j \"1.7.25\"]\n                 [org.slf4j/log4j-over-slf4j \"1.7.26\"]\n                 [org.clojure/tools.logging \"0.4.1\"]\n\n                 ;; Stackdriver\n                 [com.google.cloud/google-cloud-logging-logback \"0.87.0-alpha\"]]\n```\n\nLogback.xml:\n```\n&lt;!-- <https://cloud.google.com/logging/docs/setup/java> --&gt;\n&lt;appender name=\"STACKDRIVER\" class=\"com.google.cloud.logging.logback.LoggingAppender\"&gt;\n  &lt;!-- Optional : filter logs at or above a level --&gt;\n  &lt;filter class=\"ch.qos.logback.classic.filter.ThresholdFilter\"&gt;\n    &lt;level&gt;INFO&lt;/level&gt;\n  &lt;/filter&gt;\n  &lt;!-- Batched logging requests get immediately flushed for logs at or above this level --&gt;\n  &lt;flushLevel&gt;WARN&lt;/flushLevel&gt;\n&lt;/appender&gt;\n```\nNevermind they do show up, but in another log\nThe default \u201cjava.log\u201d\nThanks!\nIf it is convenient to determine the distribution of types of values in the collection you are sorting, I would be curious to see the output of `(frequencies (map type c1))`, where `c1` is your collection of values.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1079",
    "text": "<@Latonya> so I tried something:\n```\n  (let [clean-probs (into [] (aget result-array 0))\n        labels-probs (try (sort-by\n                           :score &gt;=\n                           (keep identity\n                                 (map #(when (&gt;= %2 0.0001)\n                                         {:score %2 :label %1})\n                                      labels clean-probs)))\n                          (catch Exception e\n                            (println e)))\n```\nthis somehow works with no error\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1080",
    "text": "Quick question, if I\u2019m looking to build a somewhat simple event queue or pipeline for processing changes to app state, is it worth using core.async? \nIf it\u2019s just a series of fns, probably not\nIf you want queuing and possibly stage concurrency, maybe so\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1081",
    "text": "cool, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1082",
    "text": "```(def nested-map {:a {:b 1}})\n(defn my-func [m]\n  ;; some magic\n  )\n(my-func nested-map)\n;; =&gt; 1\n```\nhow to achieve the `;; some magic` part?\n`(:b (:a m))` is the simplest\nright...ok\nalso `(get-in m [:a :b])`\nWondering if people have stories of using the STM in 'real world' code. I have used atoms a lot but have yet to see a use for the STM. I see some old Java code where it looks like it could be useful, if I could ever port it, but I'd need a way to coordinate the in-memory var changes with an external commit to a DB. Some online examples of STM show \"bank accounts\", but with no way to connect the transaction to external storage, I don't see how that would really work past a simple demo.\n`(comp :a :b)`\nI usually rely on a handler being called after the DB trx commits. Your memory changes could still fail though but the assumption is that the DB holds the Truth anyways \nIe. It\u2019s not a proper 2 phase commit \n<@Shayla> don't forget `(-&gt; m :a :b)` too :)\nha I thought of it but didn't post! glad you did\nmacroexpands to `(:b (:a m))` but reads left to right. prob faster than `get-in`.\noh wow, really?\nI didn't know that!\nnot a difference that would likely matter, but last time I checked, yeah\nyou're basically adding another var deref/invoke so kind of has to be\nI think either -&gt; or get-in read the best, and I think that trumps other considerations\n(:b (:a m)) has to be read inside-out, and comp is imo always the worst thing to read\nA digression from `-&gt;` but I saw this recently and was laughing at the names of the macros. The diamond wand, the trystero furcula, etc., ...  <https://github.com/rplevy/swiss-arrows>\nAgreed. Reading comp feels very awkward\nmany have died on the hill of arrow fetishization - this is but one of many\nas the greeks said, moderation in all things\nless is more, etc\nHaha. :slightly_smiling_face: Yup. I found the first few (similar to `as-&gt;`) useful at least.\nI draw the line at understanding the word \"furcula\"\n^^ The last arrow macro you'll need :rolling_on_the_floor_laughing:\n<https://github.com/randomcorp/thread-first-thread-last-backwards-question-mark-as-arrow-cond-arrow-bang>\nnow that one makes sense\nwe're going to add that to core\nIf you relax your eyes, it becomes a 3D diagram of the data flow, like those magic eye stereograms.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1083",
    "text": "i needed a quick snappy creation of a function...what do u guys prefer?\n```#(-&gt; % :a :b)\n(comp :a :b)\n```\nthose are different, which is the issue\nto match, the second should be `(comp :b :a)`\nsure, but which do you prefer to read?\n`(map (juxt :total (comp :login :author)))`\nthat looks readable\nis that better than: `(map (juxt :total #(-&gt; % :author :login)`\nI prefer everything to `comp` :)\n:arrow_right:  thx guys! :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1084",
    "text": "Hi! I need to merge a bunch of maps but the merge fn depends on the key. I couldn't find a shorter, simpler, easier to understand solution than copying `merge-with` to `merge-with-kvv`  that invokes the merge fn as `(f key val1 val2)` instead of just with the two values. Or is there a better way?\nThe arrow I've probably heard requested most frequently is a version of `cond-&gt;` that threads the value through the tests too\n<@Kacy> <https://github.com/worldsingles/commons/blob/master/src/ws/clojure/extensions.clj> (pulled out of our code base at work) `[worldsingles/ws-commons \"0.1.1\"]`\n<@Celestine> oh nice, I like that one\nthanks\nInteresting! And it looks like they are making good progress on the one they are going to release officially. Until then I am getting by fine using my JDK 8 javapackager pointed at a current OpenJDK distro to build my Mac app, and one of my kind Windows users has set up an sftp server that uses a third-party tool to create a nice MSI installer.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1085",
    "text": "And heavily production-tested :slightly_smiling_face:\n<@Suanne> Have you asked in <#C099W16KZ|emacs> ?\n(It's been too long since I used Emacs to be able to remember, I'm afraid)\n<@Celestine> No I have not, will do. How can I discover what channels exist on this workspace? Also, what editor are you using for Clojure if you don\u2019t mind me asking?\nDepending on the Slack client, there should be a label on the left `Channels` which you can click to browse all the hundreds of channels...\n<@Celestine> Ah ok I just found that, thanks!\n...but it's a fair rule of thumb to assume \"There's a channel for that!\" and just use the switcher (control-k) and start typing :slightly_smiling_face:\n(and there's <#C04V84U7G|slack-help> if you need to ask more detailed questions about how-to-slack :slightly_smiling_face: )\nI switched from Emacs to Atom (+ ProtoREPL) after using Emacs for years... and at the end of last year I switched to Atom + Chlorine.\nI talk a bit about that journey here <http://corfield.org/blog/2018/12/19/atom-chlorine/>\n<@Celestine> Ok, I\u2019ve been using VS Code which has decent integration with Clojure and the REPL. Why did you switch? I find Emacs might be so complicated that I\u2019m spending too much time configuring it and not enough time learning.\n<@Celestine> I\u2019ll check that out.\nYup. That. :slightly_smiling_face:\nI've tried VSCode several times. Calva is coming along nicely. But I just prefer Atom.\n(I have an Insider build of VS Code which I dip into from time to time)\nMy workflow these days is to fire up Cognitect's REBL with a Socket REPL and then connect Atom/Chlorine to it and run them side-by-side, so I can \"inspect\" values directly into REBL, and take advantage of `tap&gt;` for debugging.\nI\u2019ll check these things out. I tried out Atom before. VS Code seems very similar to me. I don\u2019t mind either of them.\nPart of what I love about Chlorine is that it's written in ClojureScript and I can hack on it live while I'm editing my work projects :slightly_smiling_face:\nThat\u2019s the beauty of this stack. I\u2019m still a bit of a beginner, haven\u2019t tried ClojureScript yet.\nWe tried cljs at work about four years ago and it was a pretty rough experience back then so we decided to move forward with JS and React.js on our front end for the time being. But things have changed a lot and cljs is much, much more mature these days so we might look at it again for some projects in future.\n(we've been doing Clojure in production since 2011)\nWhat specific industry is that?\nOnline dating. World Singles Networks.\nWe have dozens of dating websites, all powered by Clojure on the back end and React.js on the front end.\nOver 80k lines of Clojure.\nThat seems very complicated... What's with the start/end markers? Aren't you just going to return the original sequence up to the first item that you've already seen?\nyeah, seems like I'm missing something very simple here :sweat_smile:\n`(reduce (fn [[seen coll] x] (if (seen x) (reduced coll) [(conj seen x) (conj coll x)])) [#{} []] coll)`\nIt's not lazy but...\nyeah, for my purposes I need it to be lazy\ni.e. the iterator might be infinite but if it does ever cycle back to a repeated value I want it to terminate\nHmm... interesting... So you'd have to track a potentially near-infinite set of \"seen\" values?\nI guess so, but practically I'm only using the first couple of elements off the seq\nso for performance reasons I also don't want the whole thing to be realized\nIn which case, why do you care whether it's lazy or eager?\nOh, gotcha.\nOr this `lazy-seq`-based version with a helper: ```user=&gt; (defn ld [coll seen] (cond (empty? coll) [] (seen (first coll)) [] :else (lazy-seq (cons (first coll) (ld (rest coll) (conj seen (first coll)))))))\n#'user/ld\nuser=&gt; (defn lazy-distinct [coll] (ld coll #{}))\n#'user/lazy-distinct```\nI think tools.does.alpha has a helper like that\n`sequence` of a transducing function is a good approach (but a bit more code that a simple lazy seq).\nOne day all processes will be made that way (transducers) :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1086",
    "text": "Is there a better way of writing this function?\n```\n(defn lazy-distinct\n  \"return a lazy sequence of coll that terminates\n  when a repeated value is encountered\"\n  [coll]\n  (-&gt;&gt; coll\n    (reductions (fn [[seen _] x]\n                  (if (contains? seen x)\n                    (reduced :end)\n                    [(conj seen x) x]))\n      [#{} :start])\n    ;; drop :start and :end markers\n    (drop 1)\n    (drop-last 1)\n    (map second)))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1087",
    "text": "You can use clojure.core\u2019s distinct transducer, except return a reduced value when a repeated value is encountered.\n```\n(defn take-unique []\n  (fn [rf]\n    (let [seen (volatile! #{})]\n      (fn\n        ([] (rf))\n        ([result] (rf result))\n        ([result input]\n         (if (contains? @seen input)\n           (rf (reduced input))\n           (do (vswap! seen conj input)\n               (rf result input))))))))\n\n(sequence (take-unique) coll)\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1088",
    "text": "Thanks for both those approaches! I learnt a bit more about transducers from this :slightly_smiling_face:\nI'm still finding it hard to gain intuition about what transducers are \"doing\" under the hood\nor rather what mental model to use when thinking about them - even though I can follow the logic it's still seems like this magical passing around of higher-order-functions\n`comp` of transducers behaving in a \"backwards\" manner being one of the more confusing things\nYeah, they definitely take some getting used to. Especially since it's very hard to exercise all _three_ arities.\n<@Loria> I found it useful to watch the *Transducers* talk Rich gave at Strange Loop a couple of times.\nI also found it helpful to understand `IReduceInit` first, then move on to transducers.\nI can't shake off the feeling that its confusing design to use  different arities for different lifecycle moments\nI understand that its the most efficient way to work with the jvm and is thefore a good pragmatic choice\nbut transducers would be easier-to-grasp if they were defined using a record\n`(defrecord Transducer [init-val iterate-fn wrapup-fn])`\nIMHO\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1089",
    "text": "can anyone tell me how to learn clojure openscad. Thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1090",
    "text": "Hi there!\nI solving \"Sum of the first nth term of Series\" from <http://codewars.com|codewars.com> on clojure, and when I write solution I recived like \"time out execution error\".\nI solve the same problem on haskell and take execute time, it's about 0.166972266s on 25000 value of nth series.\nThis is a clojure and haskell code that does the same thing.\n```clojure\n(defn series-sum [n]\n  (-&gt;&gt; (map #(/ 1 %) (range 1 (java.lang.Integer/MAX_VALUE) 3))\n    (take n)\n    (reduce +)\n    double\n    (format \"%.2f\")))\n```\n```haskell\nimport Text.Printf\n\nseries :: [Double]\nseries = map (1/) [1, 4 ..]\n\nseriesSum :: Integer -&gt; String\nseriesSum n = printf \"%.2f\" $ sum $ take (fromInteger n) series\n```\nCan anyone tell me, who I can solve this problem on clojure faster? Thank you in advance.\nAs example on clojure with 3000 of nth series execute time is 7971.811645 msecs versus 0.002140344s on haskell\ndoes it help if you change it to `#(/ 1.0 %)`?\ncurrently it's doing rational arithmetic instead of floating-point\nI can confirm that it's 3ms-ish this way.\nYes. It helped.\nI guess I do not know something. :hushed:\nI'd be interested how Haskell compares with its Rational implementation\nRational arithmetic being the default for division in Clojure has bitten a lot of people, you are not the first one, unfortunately.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1091",
    "text": "Just curious. Did the answers match?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1092",
    "text": "``` \n(defn series-sum\n  [n]\n  (-&gt;&gt; (range 1 (java.lang.Integer/MAX_VALUE) 3)\n       (transduce (comp (map #(/ 1.0 %)) (take n))\n                  +\n                  0.0)\n       (format \"%.2f\")))\n```\n^ should be slightly faster\nafter warmup it clocks at 1.2 ms on my laptop for 25k vs 3.6 for the slightly modified version of yours\nnow it is time to test `loop` variant :slightly_smiling_face:\nIf run enough times, first solution is 0.4ms vs 0.1ms for <@Min> solution.\nunrolling the whole mess in loop for sure is faster, but too much stuff to type :stuck_out_tongue:\ntransduce version is close enough to the haskell version in terms of syntax\nof course. but how said one haskeller - better way do make an unefficient programs is to write code on lazy languages as on the strict ones and do the opposit way :slightly_smiling_face:\nanyway naive recursion in haskell in this task will be slower an take a HUGE amount of ram )\nwon't ghc optimize away the lazy parts since the return value will force computation?\nit depends on compiler O option )\nby default - not )\nI thought this is where its type system could help with :slightly_smiling_face:\ngot it\nbut you can always add strict evaluation thru $! or any else, but it is needed to remember )\nFor those interested, this compiles pretty much to identical Java code, and takes ~20us.\n```\n(defn series-sum [n]\n  (loop [i 1, j 1, acc 0.0]\n    (if (&lt; i n)\n      (recur (unchecked-inc-int i) (unchecked-add-int j 3) (unchecked-add acc (/ 1.0 j)))\n      (format \"%.2f\" acc))))\n```\nyeah, I tend to prefer explicitness in these cases. Too much magic kills the magic\n20ms? that's way too much no? error in unit?\n```\n(decompile\n(defn series-sum [n]\n  (loop [i 1, j 1, acc 0.0]\n    (if (&lt; i n)\n      (recur (unchecked-inc i) (unchecked-add j 3) (unchecked-add acc (/ 1.0 j)))\n      (format \"%.2f\" acc)))))\n```\n\n```\n    public static Object invokeStatic(final Object n) {\n        long i = 1L;\n        long j = 1L;\n        double acc = 0.0;\n        while (<http://Numbers.lt|Numbers.lt>(i, n)) {\n            final long n2 = i + 1L;\n            final long n3 = j + 3L;\n            acc += Numbers.divide(1.0, j);\n            j = n3;\n            i = n2;\n        }\n        return ((IFn)const__8.getRawRoot()).invoke((Object)\"%.2f\", (Object)acc);\n    }\n```\nYes, sorry, 20us\nnice\nloop wins as usual :grin:\nand about haskell you can uncomment and compare time and memory peak :wink:\n<https://rextester.com/KONQV13764>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1093",
    "text": "The API Docs link at the bottom of of spec-alpha2 README is broken. Is this a known bug? <https://github.com/clojure/spec-alpha2>\nyeah, I've never got around to building it\ntypically it builds off releases and we haven't done one\n<@Colette> I generated it, waiting on github to publish, but should eventually show up at <https://clojure.github.io/spec-alpha2/>\nThanks <@Jasmine>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1094",
    "text": "Looks like `<https://clojurians-log.clojureverse.org>` archives are down, showing a Null Pointer Exception\nPerhaps only certain routes <https://clojurians-log.clojureverse.org/datomic/2017-09-19> for example\n<@Charlyn> you are maintaining that right?\nHe is not in this channel, but I think through the magic of ambigous slack options I have maybe summoned him :\u2019). Some parts of clojurians slack log appears to be down.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1095",
    "text": "This was raised in <#C04V84U7G|slack-help> and I tagged him there as well.\nThanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1096",
    "text": "when do I need `requiring-resolve`? I am loading some namespaces lazily (for performance, I don\u2019t need them every instance of the program).\nare there likely to be multiple threads doing same ns at the same time?\n~I thought it was a convenience for the lazy-loaded require/resolve pattern~\nit is ^^\nnice - but now I see the thread safety thing too, which is nice\nit has the added benefit of using the (private) `serialized-require`\nwhich is a temporary crutch until we can better fix `require`\neventually, `serialized-require` should just revert to `require`\nmultiple threads? at the moment, no\nthen, just `require`\nno need to\nhmm, I think this lazy require approach isn\u2019t working at all with GraalVM since it needs eval basically right. so I\u2019ll scratch that idea\nyeah, I was wondering how that worked :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1097",
    "text": "I\u2019m hitting the locking issue with GraalVM again when using requiring-resolve, which can be patched, but if I don\u2019t have to :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1098",
    "text": "can you use the var method via interop?\nYou're gonna want to make sure Graal sees the classes so that it can compile them all\nby preloading them\nahh right, which means the whole \"last minute lazy require\" thing is pointless anyway, I think\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1099",
    "text": "I'm late to the party, but I heavily use something I called `rcomp` which is simply reverse + comp. That way things read left-to-right, just like with OOP dot notation\n\n...and specifically, things keep flowing left-to-right in -&gt; and -&gt;&gt; chains\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1100",
    "text": "Is it possible to get ParEdit working in the Clojure REPL (the one invoked with `lein repl`)?\n<@Suanne> Which editor are you using? I can turn on paredit-mode in the REPL in Emacs.\n<@Deb> I\u2019m not using an editor, I\u2019m using a terminal.\nOh, okay. Without an editor wrapping the terminal/repl, then I don't know the answer.\n<@Deb> I\u2019ve also got it working in the CIDER REPL with ParEdit in Emacs, but I\u2019m trying to transition away from Emacs in favor of VS Code, which I run a regular terminal inside of with the REPL. I\u2019ve got pretty much everything working for my own workflow as it would be in Emacs with CIDER, but I can\u2019t figure out this one minor thing.\n<@Suanne> I think rebel-readline does paredit.\n<@Suanne> I wanted to try that too (VS Code). Do you have key combos to quickly eval/reload things in the REPL, without having to cut-n-paste? In Emacs, commands like `cider-eval-defun-at-point`, `cider-eval-sexp-at-point`, `cider-load-buffer`.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1101",
    "text": "I have a little golfing challenge if anyone's feeling bored on a Thursday afternoon:  <https://gist.github.com/clarkema/61464cb52ba107047c28cdff0539d030>\nI'm looking for the absolute _fastest_ way to loop over an index from 1 to n\nloop should be fastest\nyou're ruining  it with the boxed constant prob\nup-to\n```(time (loop [i 1]\n        (inc i)\n        (if (&lt; i 100000000)\n          (recur (inc i)))))```\nis like 45ms\nalternately, this should have similar effect:\n```(def ^long ^:const up-to 100000000)```\nmight help the other timings too\n```user=&gt; (set! *unchecked-math* :warn-on-boxed)\n:warn-on-boxed```\n```user=&gt; (time (loop [i 1]\n        (inc i)\n        (if (&lt; i up-to)\n          (recur (inc i)))))\nBoxed math warning, NO_SOURCE_PATH:3:13 - call: public static boolean <http://clojure.lang.Numbers.lt|clojure.lang.Numbers.lt>(long,java.lang.Object).```\n<@Jasmine> That's really interesting, thanks!\nwith unchecked math and avoiding boxing, more like 32 ms\nshould basically be emitted as essentially the same bytecode you'd get from a tight java numeric loop on a long counter (although more natural in Java to use ints)\nI'll have a go with that in the real example (up-to in real life is actually the result of .size on a java.util.ArrayList\nyou can type-hint it or coerce it at point-of-use too - result of .size is an int, and a coercion to primitive long will be required somewhere. best to do it explicitly once, then every time through the loop if possible.\nyup, that's shaved a pretty nice chunk off\nthanks :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1102",
    "text": "and actually the inc i would be even faster if using unchecked math. you can turn that on as the default AND get warnings about boxed usage like this:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1103",
    "text": "I need to add a content-type/application-json header to a luminus swagger endpoint that looks like\n```[\"/json\" {:get (constantly (ok (json/write-str {:foo \"bar\"})))}]```\nany thoughts?\nI'm getting\n  ```\"content-type\": \"application/octet-stream\",```\ninstead.\nthe new luminus/swagger uses reitit so I think things may be different than before.\ncan you call defmacro within defmacro?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1104",
    "text": "I would not :stuck_out_tongue: what\u2019s the use case?\nYou can do it though, might be a little tricky.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1105",
    "text": "do you mean emit or call?\ndefmacro-emitting macros are definitely possible and useful. also quite painful to write.\nYes I believe those are all available.\nstill looking for more experience reports feedback on the Clojure 1.10.1-beta2 changes in error reporting if anyone has the opportunity to live with it for a bit. See <https://www.reddit.com/r/Clojure/comments/bc264v/clojure_1101beta2_is_now_available/ekn9qr3/> for an example.\nI just updated our code base to use Beta 2 and all tests pass (of course) -- the next failure that I hit will make me appreciate CLJ-2497 being fixed :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1106",
    "text": "<@Noemi> if you have a content-negotiation middleware in the mw chain, it should do the formatting for you, there is a example here: <https://github.com/metosin/reitit/blob/master/examples/ring-spec-swagger/src/example/server.clj#L82>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1107",
    "text": "Anyone fancy a 4clojure type exercise? A function that takes a vector and an item in that vector and shifts the item right or left by one.\nitems in the vector are distinct?\nie, `(shift :left :a [:x :x :a :x :a :x])` returns what?\nYep, distinct\n`(shift :left 1 [1 2 3 4 5])` -&gt; `[5 2 3 4 1]`\n`(shift :left 3 [1 2 3 4 5])` -&gt; `[1 3 2 4 5]`\nCheck out the Calva package for VS Code.\ncycle, drop x, take n handles that (computing x appropriately for right/left)\noh, shifts single item not the whole thing\ni was looking at `split-with #(not= e %)` and then recombining based on left or right\n`(let [[before [_ &amp; after]] (split-with #(not= e %) coll)` and  play from there\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1108",
    "text": "```\n(defn shift [direction i coll]\n  (let [[before [_ &amp; after]] (split-with #(not= i %) coll)]\n    (if (= direction :left)\n      (if (butlast before)\n        (vec (concat (butlast before) [i] (take-last 1 before) after))\n        (vec (concat (take-last 1 before) after [i])))\n      (if (empty? (rest after))\n        (vec (flatten (concat [i] before)))\n        (vec (flatten (concat before [(first after)] [i] [(rest after)])))))))\n```\nPretty ugly but it works\nCan tidy it up a bit\nif this was 4clojure I would make [[1] [2] [3]] an input (to rule out using flatten)\nI think it still works, because i flatten after splitting\nit would return the wrong output\nFlatten just lets me make everything a seq so that concat doesnt blow up\nthere are solutions that don't force you to destroy the structure of your input\nYou're right, it breaks when using flatten\ni.e. `:right`\nI'm sure there are, what i have is very inelegant\nI'd get rid of :right / :left and use  +/- in index\nis i an index? or is that a value to match?\nI guess value, so nvm. I totally misunderstood (twice now) what this is doing. :)\nYes, bad naming, sorry\n`x` would be more idiomatic?\nwell, `i` was confusing :)\n`el` `elt` or `needle` might be good\n`cheese` (\"who moved my cheese?\")\nI'll have to try again tomorrow, brain is tired. :sleeping_accommodation:\nCan I use a bit of java interop?\n```\n(defn shift [direction item coll]\n  (let [f (case direction :left dec :right inc)\n        pos (.indexOf coll item)]\n    (when (not (neg-int? pos))\n      (let [target-pos (mod (f pos) (count coll))\n            overlay {target-pos item, pos (nth coll target-pos)}]\n        (reduce (fn [coll [position new-value]] (assoc coll position new-value)) coll overlay)))))\n```\nSure, I asked in the <#C03S1KBA2|clojure> channel after all. Too bad i'm wanting it for clojurescript, oops :man-facepalming:\nLooks like it can translate fairly easily\n`(.indexOf (make-array coll) item)` :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1109",
    "text": "<@Dulcie> doesn't that when ensure that you return nil if ~you step past the index~ the item isn't found?\nIt does\nI wasn't sure what the requirement was for that\n\u00af\\_(\u30c4)_/\u00af\n`:else` is traditional\nall keywords are logically true\noh! today I learned\nso you could also just say `:catch-all` if you wanted :)\n`:else` is the convention then.\nit is\non occasion, I add a bit of whimsy\nI just kinda assumed `:else` was something `cond` understood\nI like the word `:otherwise`, so I\u2019ll probably go with that.\nbut \u2026 ofcourse not\nthere are linters that accept :else but not :otherwise\nalways make code the least surprising right :slightly_smiling_face:\nOk, you\u2019ve convinced me.\ni like a convention in `cond-&gt;` to use `:always`\nEven apostrophes in keywords, you madman\nthat said, I wouldn't recommend it :)\n(and UTF-8 just adds a whole newer layer of fun on top of all this!)\n```user=&gt; (let [\ud83d\udca9 42] (* \ud83d\udca9 \ud83d\udca9))\n1764```\n`-&gt;` is \"thread first\" so it threads the value (initially `1`) into each of the expressions for which the test expression is truthy.\nSo it ends up being `(-&gt; 1 inc inc inc inc)` (because all those keywords are truthy) which is `(inc (inc (inc (inc 1))))`\n<https://clojure.org/guides/threading_macros>\nalthough that page probably needs some better examples\nYeah, especially around the use of `as-&gt;` since it doesn't show it nested inside `-&gt;` :disappointed:\n`(-&gt; 42 inc (as-&gt; x (* x x)) dec)`\nWell that makes more sense in non Latin scripts ^^. I kinda wonder whether there are many people using bindings with non-Latin names\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1110",
    "text": "Is there a more semantic way to do a catch all in a `cond`?\nAhh interesting, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1111",
    "text": "```user=&gt; (cond-&gt; 1\n:please inc\n:don't  inc\n:do     inc\n:this   inc)\n5\nuser=&gt; \n``` (runs away)\n`:&lt;&gt;&lt;` :slightly_smiling_face:\n```user=&gt; :&lt;&gt;:&lt;&gt;:&lt;&gt;\n:&lt;&gt;:&lt;&gt;:&lt;&gt;\nuser=&gt;``` (I was a bit surprised multiple `:` were accepted!)\n\"A symbol can contain one or more non-repeating ':'s\" and \"Keywords are like symbols\"\nAh, thank you. I'm sometimes not quite sure whether something is intentionally accepted (and documented) or not when it comes to literal keywords :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1112",
    "text": "I forgot what the -&gt; does\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1113",
    "text": "is there any way to combine regexes, other than combining strings and then using re-pattern?\nI already have regexes and i need to concatenate them to find a larger pattern\n<@Gonzalo> this is the full API - I think making strings, combining, then making a new pattern is the most direct thing <https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html>\nThanks <@Dann>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1114",
    "text": "I have a curious situation where attempting to evaluate any expressions (even something as simple as `1`) inside of a Clojail sandbox on an app running inside a Docker container trips an exception:\n```\nException in thread \"async-dispatch-8\" java.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/var/log/yetibot/yetibot.log\" \"read\")\n```\nthe app is completely crippled after this point (any sort of IO will fail), even outside of the sandbox.\n\nthis *only* happens when running the Docker container on Digital Ocean.\nI run the same image on an internal VM at work and it works fine. it also works locally (outside of Docker).\n\nideas? :thinking_face:\ncode is really basic <https://github.com/yetibot/yetibot/blob/b71d354d6868942bb860b3e6772a18601daf39d9/src/yetibot/commands/clojure.clj#L15-L16>\nI assume it is tripping up trying to write the log file...?\n(although it says \"read\")\nyes, though writing logs should happen outside of the sandbox, and normally works fine\nit's only when i try invoking the sandbox that it starts happening.\nand once it happens, any http request also trips the same exception\nonly way to recover is to restart the docker container as far as i know\ni also put a very permissive java policy file inside the docker image. i don't know much about java policy though.\nthis is what it looks like when attempting to make an http request after it's been crippled:\n\n```\njava.security.AccessControlException: access denied (\"java.net.NetPermission\" \"getProxySelector\")\n        at java.base/java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n        at java.base/java.security.AccessController.checkPermission(AccessController.java:895)\n        at java.base/java.lang.SecurityManager.checkPermission(SecurityManager.java:322)\n        at java.base/java.net.ProxySelector.getDefault(ProxySelector.java:96)\n        at clj_http.core$get_route_planner.invokeStatic(core.clj:227)\n```\nthe very mysterious part is why the same docker image works on one VM but not on a DigitalOcean VM.\nI'd be tempted to follow a Digital Ocean support path at that point I think... \u00af\\_(\u30c4)_/\u00af\nyeah. i might try that. i'm pretty baffled\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1115",
    "text": "Best way to get the butlast element of a seq?\n```\n(first (take-last 2 coll))\n```\n?\n```(first (rest (reverse coll)))``` maybe?\nand ```(first (rest (rseq coll)))``` for a vector I think\n`reverse` is not lazy, so I think that would be worse than take-last\nlast + drop last is going to walk through the collection twice I think\n<@Clarine> There's `take-last`\nyeah, see above :slightly_smiling_face:\nGot stung by `sort-by` today :disappointed:\nI don\u2019t understand the `(sort -)`, that\u2019s not proper comparator. Do you want `(sort &gt;)` perhaps?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1116",
    "text": "`(last (drop-last col))` ?. also linear though i\u2019m not sure you can prevent that\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1117",
    "text": "am I doing something unidiomatic if I end up with a channel inside a channel?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1118",
    "text": "I don't know about unidiomatic but I think I'd struggle to understand what was going on of I came across something like that\nIf you're doing request-reply over channels, putting a reply-to channel along with the request is a reasonable way to do it I think.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1119",
    "text": "It has two arities, one with, and one without a comparator:\n<https://clojuredocs.org/clojure.core/sort-by>\nWhat stung me is that the one without the comparator, uses `compare` which returns -1, 0, 1 (as one would expect) as a comparator, whereas the arity with a user-supplied comparator expects a comparator which returns a boolean value.\nHmm, reading through the implementation, this seems even stranger, that indicates that I\u2019m wrong :disappointed:\nOk, so the problem isn\u2019t there it\u2019s that I had big numbers :confused:\n```\nuser=&gt; (sort - [23413461236412630 10000000000000000 1 0 -1])\n(-1 0 1 23413461236412630 10000000000000000)\nuser=&gt;\n```\nYeah,\nI guess I was thinking in terms of the result of running a comparator on two things, and not on a thing that implemented `Comparator` in java.\n(as the doc clearly stated, my bad)\na (untyped) comparator is a binary operation that returns -1, 0, 1\nAlright :) `-`  just happens to work, a function of two numbers returning an int\u2026\nI guess a comparator is a `(whatever, whatever) -&gt; negative, 0, positive`\nI think that\u2019s the standard way of doing sorting chars  in C. Just subtract the chars from each other and you\u2019re good.\nWhat\u2019s funny is that `-` seems to work as a comparator for numbers that are integers, but not for longs\u2026\npretty much, Java already comes with that, Clojure builds on top. `(sort #(compare %2 %1) [\\a \\b \\c])`\n```\nuser=&gt; (sort - [1, 2 -3, 0, 5, 10, 100, -1000])\n(-1000 -3 0 1 2 5 10 100)\nuser=&gt;\n```\nthat\u2019s likely integer truncation in action, you can see with `(map (memfn intValue) [23413461236412630 10000000000000000 1 0 -1])`\n`sort` seems to bottom out with this `let` here:\n```\n     (let [a (to-array coll)]\n       (. java.util.Arrays (sort a comp))\n       (with-meta (seq a) (meta coll)))\n```\nAnd I guess I\u2019m not able to parse ` (. java.util.Arrays (sort a comp))`\nwhich `sort` is the `sort` in ` (. java.util.Arrays (sort a comp))` referring to?\nIt should be referring to this:\n<https://docs.oracle.com/javase/7/docs/api/java/util/Arrays.html#sort(T[],%20java.util.Comparator)>\nThe plot thickens :slightly_smiling_face:\n`public abstract class AFunction extends AFn implements IObj, Comparator, Fn, Serializable `\nand becomes even thicker:\n```\npublic int compare(Object o1, Object o2){\n        Object o = invoke(o1, o2);\n\n        if(o instanceof Boolean)\n                {\n                if(RT.booleanCast(o))\n                        return -1;\n                return RT.booleanCast(invoke(o2,o1))? 1 : 0;\n                }\n\n        Number n = (Number) o;\n        return n.intValue();\n}\n```\nwhich probably means that sorting by a function which can return numbers which are bigger than `Integers` may or may not work. I guess.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1120",
    "text": "any good clojure wrappers for lmdb-java?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1121",
    "text": "<https://github.com/shriphani/clj-lmdb>\n\n<https://github.com/hiteshjasani/clj-lmdbj>\n\nI found these\nJust tried the latter one\nthanks!\nanyone have any good recommendations for a library to help doing benchmarks of external binaries?\n(I don't want to benchmark things that are written in clojure/java, so basically will be using `java.shell` to run the programs but like to use clojure for setup/timing/teardown)\n<@Epifania> you mean record the time of external processes?\n<https://github.com/clj-commons/conch> is convenient for scripting\n<@Clarine> was looking for a framework-like tool to help me structure the tests themselves, but thinking about it, wouldn't be hard to do myself. Conch looks very helpful for other things, so thanks for sharing that\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1122",
    "text": "anyone uses cloudfoundry?\nthanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1123",
    "text": "For those interested in writing fast scripts in Clojure this might be interesting <https://github.com/jeroenvandijk/clojure-scripting>\nHey all, learn-awesome is an open-source, community effort towards collecting links to awesome learning resources categorized by topics, formats, &amp; difficulty. The idea is to build humanity's universal skills graph. The page about Clojure could use some work though. Would appreciate people here sending pull requests :slightly_smiling_face: <https://github.com/learn-awesome/learn-awesome/blob/master/programming-languages/clojure.md>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1124",
    "text": "Anyone tried to use <https://www.testcontainers.org/> for their integration tests but for Clojure?\nI only found a java library (which we can use i guess)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1125",
    "text": "not sure if this would be better in beginners, but it looks like my repl in cider is actively running some computation and blocking others. is there any way to tell what\u2019s going on, or do i need to profile the jvm activity?\nThat is very unlikely\nwell, I guess it depends on how you read your statement\nyou can get all the stacktraces in a vm without a profiler\nI read it has \"nrepl is blocking other threads from doing things\"\nno, not quite\nif you mean \"I sent something to nrepl and it is still running, and I can send anything else to nrepl until it is done, what do I do?\"\njust the repl is unresponsive, presumably because it\u2019s doing something else\nwith jstack, or even sending the process a signal, you can get the stack traces, and it should be pretty straightforward to see which one would be blocking io for the repl thread\na lot of it is going to highly specific to the nrepl client, and any middleware you are using\nbut you can also get the impression it's blocked because of unclosed parens or strings\nso you might be better off asking in <#C0617A8PQ|cider>\nalso, nrepl itself is a threaded implementation of a network protocol, you can disconnect or reconnect, no matter what the active IO is doing in one client\ngah, ok. it looks like my panacea of mashing c-c has reached its end-of-life. thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1126",
    "text": "[ANN] Cognitect Labs' aws-api 0.8.292 <https://groups.google.com/forum/#!topic/clojure/uvOzyfBrbyc>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1127",
    "text": "I\u2019m running this code on Java source code from OpenJDK in a Java 11 environment:\n```\n$ clj\nClojure 1.10.0\nuser=&gt; (import '[javax.tools ToolProvider DocumentationTool])\njavax.tools.DocumentationTool\n(let [dt (ToolProvider/getSystemDocumentationTool)]\n    (.run dt nil nil nil\n          (into-array [\"-public\"\n                       \"--source-path\" \"/Users/Borkdude/git/openjdk-jdk11/src/java.base/share/classes\"\n                       \"java.lang\"])))\n/Users/Borkdude/git/openjdk-jdk11/src/java.base/share/classes/module-info.java:307: error: ';' expected\n        <http://jdk.crypto.ec|jdk.crypto.ec>\n                     ^\n/Users/Borkdude/git/openjdk-jdk11/src/java.base/share/classes/module-info.java:309: error: ';' expected\n        <http://jdk.crypto.ec|jdk.crypto.ec>\n                     ^\n2 errors\n1\n```\nWhat\u2019s wrong here?\nmodule-info.java is not actually java source, if I recall\nI would expect that java tools could cope with this?\nor should I blacklist these files somehow\nit may depend on if the tools version you are using understands modules\nsuch that their addition was guaranteed not to collide with existing source files\nwhat should I do with this?\n```\nWARNING: An illegal reflective access operation has occurred\nWARNING: Illegal reflective access by clojure.lang.InjectedInvoker/0x0000000800232040 (file:/Users/Borkdude/.m2/repository/org/clojure/clojure/1.10.0/clojure-1.10.0.jar) to method com.sun.tools.javac.file.JavacFileManager.getJavaFileObjects(java.io.File[])\n```\nthe code looks like this inside a  `let`:\n```\ndt (ToolProvider/getSystemDocumentationTool)\nfm (.getStandardFileManager dt nil nil nil)\nfiles (.getJavaFileObjects fm (into-array java.io.File [f]))\n```\n<https://clojure.org/guides/faq#illegal_access>\n`--illegal-access=debug` will give you a trace\nmaking it non-reflective is prob your best bet\n^\n`(.getJavaFileObjects fm (into-array java.io.File [f]))` is reflective\ntype hint fm to the generic interface and you're probably  good\nfm  is probably typed as the concrete actual type\n`(.getJavaFileObjects ^javax.tools.StandardJavaFileManager fm (into-array java.io.File [f]))`\nwell, the warning from warn-on-reflection says:\n```\nReflection warning, clj_kondo/Doclet.clj:62:15 - call to method getJavaFileObjects on javax.tools.StandardJavaFileManager can't be resolved (argument types: unknown)\n```\nit\u2019s this method: <https://docs.oracle.com/javase/9/docs/api/javax/tools/StandardJavaFileManager.html#getJavaFileObjects-java.io.File...->\nwhich has File[], Path[], and String[] overrides\nit does seem like it should know enough to work there but maybe the reflection stuff isn't matching componentype?\nactually this works too:\n```\nfiles (.getJavaFileObjectsFromFiles fm [f])\n```\nwithout a warning\nI'd have to look more deeply to understand why\ncould maybe hint `^\"[Ljava.io.File;\"`\ni have an api being served with a series of middlewares, but i\u2019m not sure where in this stack the problem actually is\nlooks like a deadlock here: <https://github.com/ring-clojure/ring/blob/master/ring-devel/src/ring/middleware/reload.clj#L11>\nhmm. so perhaps i tried to reload code too many times?\nif that is actually a deadlock there should be another thread in the stacktrace in the critical section and not leaving it for some reason\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1128",
    "text": "module-info and package-info are intentionally invalid java source filenames\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1129",
    "text": "could you guys help me decipher what is going on here? i got this from a thread dump, and i feel like i may have my jetty server configured incorrectly\n```\n\"qtp247078080-91\" #91 prio=5 os_prio=31 tid=0x00007fd0b02d1800 nid=0xea03 waiting for monitor entry [0x0000700012c87000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n        at ring.middleware.reload$reloader$fn__5707.invoke(reload.clj:10)\n        - waiting to lock &lt;0x0000000789c20aa0&gt; (a java.util.concurrent.LinkedBlockingQueue)\n        at ring.middleware.reload$wrap_reload$fn__5718.invoke(reload.clj:38)\n        at common.server$wrap_exception_handling$fn__6898.invoke(server.clj:35)\n        at ring.middleware.ratelimit$wrap_ratelimit$fn__5858.invoke(ratelimit.clj:50)\n        at ring.middleware.json$wrap_json_response$fn__5126.invoke(json.clj:87)\n        at ring.middleware.json$wrap_json_body$fn__5101.invoke(json.clj:44)\n        at ring.middleware.content_type$wrap_content_type$fn__5078.invoke(content_type.clj:34)\n        at ring.middleware.not_modified$wrap_not_modified$fn__5178.invoke(not_modified.clj:53)\n        at ring.middleware.keyword_params$wrap_keyword_params$fn__5158.invoke(keyword_params.clj:36)\n        at ring.middleware.params$wrap_params$fn__5196.invoke(params.clj:67)\n        at ring.middleware.cors$handle_cors.invokeStatic(cors.clj:171)\n        at ring.middleware.cors$handle_cors.invoke(cors.clj:160)\n        at ring.middleware.cors$wrap_cors$fn__8210.invoke(cors.clj:185)\n        at ring.middleware.session$wrap_session$fn__6847.invoke(session.clj:108)\n        at ring.adapter.jetty$proxy_handler$fn__5043.invoke(jetty.clj:25)\n        at ring.adapter.jetty.proxy$org.eclipse.jetty.server.handler.AbstractHandler$ff19274a.handle(Unknown Source)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n        at org.eclipse.jetty.server.Server.handle(Server.java:499)\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:311)\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:258)\n        at org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:544)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n        at java.lang.Thread.run(Thread.java:748)\n```\nit seems like this middleware shouldn\u2019t be in production. is that correct?\nyes\ncool.\nyeah there\u2019s one other mention of it in the dump\nbut if you got a single dump that is just where the threads where at that time\nit isn't an indication of anything\ni took it again and it showed the same thing; in addition the application isn\u2019t responding anymore\nforgot to mention that\nI would expect to see a lot more threads stuck then, I think the jetty default threadpool might be 50? every single one would stop in the same place\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1130",
    "text": "I just learned that Clojure and Scala are both using tries for their list data types (persistent/immutable). But Elixir uses linked lists which can be spread all over the RAM (inefficient). Could this contribute to Clojure/Scala being better at data crunching? And Elixir is more for horizontal scaling because it doesn\u2019t share memory.\nNo\nWhat's the \":-\"\nIs it part of spec?\nIt seems it's some kind of type hinting?\nE.g. (s/defn make-consumer :- FranzConsumer \n...)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1131",
    "text": "I made a mistake. Actually, Elixir can do vertical and horizontal scaling. It\u2019s just not made for sharing memory (number crunching) like Clojure can do?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1132",
    "text": "What is the difference between using `require` and `:require`?\n\nThis code using `require` returns an error:\n\n```\n(ns hello-world.core\n  (require [clojure.set :as set])\n  (:gen-class))\n```\n\nThe error message is \u201csyntax error macroexpanding clojure.core/ns\u201d.\n\nBut this code using `:require` compiles just fine:\n\n```\n(ns hello-world.core\n  (:require [clojure.set :as set])\n  (:gen-class))\n```\n<@Suanne> the first is invalid inside of ns, it used to work by coincidence, now it doesn't.\n<@Sixta> And which is conventional to use, `:require` inside of `ns` or `require` outside of it?\nInside of ns is conventional\nIt's a type hint in the library schema\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1133",
    "text": "Is it safe to assume that Clojure aliases dominate over Java class imports?\n```\n(ns foo (:import [java.lang Thread]) (:require [clojure.core :as Thread]))\n(Thread/+ 1 2 3) ;;=&gt; 6\n```\nThey seem to integrate \u201cnicely\u201d <@Clarine> but wouldn\u2019t put that in my code. Do you have an use case in mind?\n```\n(ns foo (:require [clojure.core :as Thread]))\n(Thread/+ 1 1) ;; 2\n(Thread. \"Hello\") ;; java.lang.Thread 0x49872d67\n```\n(BTW No need to import Thread)\nwell, it clashes when you call a static method on Thread\nI have no use case, but when analyzing code it\u2019s good to know what to expect\nyeah, just tried. So no nice integration.\nI think Clojure requires/aliases are prioritized, so I\u2019ll assume that for now\nevidence seems to confirm that\nso I\u2019m thinking of doing a dirty thing and making some breaking changes to a library I maintain\nmainly re-naming some functions. I\u2019m curious if anyone\u2019s ever done work on creating syntax transforms for Clojure that can be run on projects to help with migrations like this.\n<@Meagan> perhaps something like this: <https://github.com/boot-clj/boot/blob/master/boot/core/src/boot/core.clj#L343-L351>\nyou can see it in use on line 357 of that file, for example\nI have :slightly_smiling_face: these functions are really a part of a set of idioms and naming conventions that I want to change for users of my library\nI\u2019d prefer to rename them and then give my consumers a utility to convert their code from the old naming contention to the new naming convention\nI think even with deprecation, it would still be cool to have utilities that could help refactor code when API migrations occur. it sounds like this hasn\u2019t been something people have done in Clojure\nhah, and then I recalled <https://github.com/xsc/rewrite-clj> :smile:\nYeah, a migration utility could well be a good idea, depending on how much code out there depends on your library.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1134",
    "text": "I believe the mainstream opinion is, don't break consumers. Have you considered deprecating instead of breaking?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1135",
    "text": "I think it\u2019s a deadlock too. After reviewing some videos on C concurrency\u2026 I can see the monitoring thread in the error. I am curious though\u2026 I thought Clojure tries to avoid using synchronization locking concurrency? Is the Clojure code using some Java locking code?\nI would strongly recommend introducing a new namespace with the new API and announcing to your users that the original API namespace is deprecated and encourage them to switch to the new namespace.\nBut then keep the old API namespace around for a long time (just don't maintain it).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1136",
    "text": "does it make sense to use leiningen and tools.deps side-by-side?\nlike with lein-tool-deps. I am asking because tool.deps has nice git integration\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1137",
    "text": "Based on my experience writing and using `boot-tools-deps` -- Boot + `deps.edn` -- I would say that, ultimately, you'd be better off just switching to `clj` completely.\nThese integrations tend to have limits. Basic stuff works well. More complex stuff tends to have weird behaviors.\nBoot and Leiningen might be different enough that the limitations I hit with Boot don't impact you in Leiningen in the same way... If I were you, I'd chat with Rick about any known limitations (when he's around).\nright, thanks! I must admit that I spent as little time as possible dealing with _configuring_ tooling, but I start to see that not having Git deps is starting to be a nuisance\nAt work, we started with Leiningen back in 2011, switched to Boot at the end of 2015, and then introduced `deps.edn` last year, via `boot-tools-deps`, at first, but then switched completely to `clj`. We've been very happy with the switch.\nyeah at my work all of our projects use lein, but\u2026 to be quite honest, I don\u2019t know why. I\u2019ll investigate some more\nmaybe switching whole makes more sense!\nChat to Rich when he's around, and see what limitations he's aware of with the `lein` integration.\nAs the author of `boot-tools-deps`, I wouldn't recommend the hybrid approach with Boot, except as a bridge to migrating from Boot to `clj`. Some of that is to do with how Boot deals with dependencies, the classpath, pods, and so on.\n<@Loria> Yes, both `zipmap` and `map` call `seq` on their argument -- and `seq` returns the same ordering on repeated calls for the same object (collection).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1138",
    "text": "<@Meagan> although slightly hacky, I think one also can do that sort of thing with <https://github.com/clojure-emacs/refactor-nrepl/#find-symbol>. I've used both tools (refactor-nrepl + rewrite-clj) and the latter can be a bit low-level.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1139",
    "text": "Anyone have experience with enums in lacinia?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1140",
    "text": "Is this guaranteed to match up elements in a set `s` with their mapped ones?\n`(zipmap s (map f s))`\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1141",
    "text": "Thanks Dominicm!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1142",
    "text": "The following probably happens because of something in `with-in-str`. What would be the best workaround?\n```\n(with-in-str (str (char 13))\n  (.read *in*))\n; =&gt; 10\n```\nGot it by binding `*in*` to a StringReader manually.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1143",
    "text": "what are the implications of using clojure values as keys in a `java.util.WeakHashMap`?\nactually, think i just answered my own question - guess they will be GC\u2019d as usual, with no particular guarantees\nthere are couple other viable options:\n- <https://github.com/cljfx/cljfx>\n- <https://github.com/fn-fx/fn-fx>\nbut I haven\u2019t done any Clojure GUI work, so can\u2019t compare\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1144",
    "text": "In general, Clojure values are just Java objects, so nothing special. One possible exception are keywords, which are interned and shared across the runtime\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1145",
    "text": "what is the current recommended way to do desktop GUI in clojure? Still seeaw? I would like to avoid the clojurescript/electron route as much as possible. Also, are there any GUI designer tools that work with either seesaw/whatever is more recommended now?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1146",
    "text": "hey there :slightly_smiling_face: Anyone know a small real-world code snippet that demonstrates why Clojure can't be statically analysed? (e.g. something `def`ing things based on a data file or similar)\nThere is a library that generates defs from files with sql queries, don't remember what's it's name\nyesql!\noh right, that's a good one\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1147",
    "text": "is it expensive to convert a vector to a sequence?\nit seems like (hashmap|vector|set) -&gt; sequence happens *a lot* and I don't have a sense for how expensive that is\nand not sure how to get a sense of that\n```\n\tpublic Seq(IPersistentVector v, int i){\n\t\tthis.v = v;\n\t\tthis.i = i;\n\t}\n```\nseems to be about it\ntwo pointer assignments\nI'm not sure if a conversion takes place. IIUC, 'sequence' is an abstraction that collections implement. So certain functions will treat it sequentially\nso first and rest and next just index into the vector?\nWell, it's a trie underneath, so there's a sort of conversion for any operation (depending on the size)\nBut, yeah, IMO it's not like a \"conversion\" to an different thing... Moreso a particular view over it.\nThe docs say that the vector is contiguous\u2026 does that mean they are placed side by side in memory?\nah, ok\nI was hoping it was something like that\nI couldn't imagine how expensive it would be without that being the case\n<@Faustino> persistent collections are rich collections of 32 element arrays\nis 32 element the same as 32 bits?\nSo it's more likely the elements with one of those arrays are contiguous in mem, than in other parts\nNo, in java and js, those arrays are not typed\nIt says the sequence is based on the ISeq, IPersistentList\nPerhaps I'm wrong and there is a significant cost to using a collection as a sequence. But I didn't think it was any heavier than than its most efficient ability to iterate across the collection.\nMy guess is you are correct. Because I\u2019d guess that the sequence is just the edge nodes of the trie data tree structure in memory\nLike, a seq is printed as a list, but that's not to say the vector is being converted into a list first.\n1 notable different though in the docs\u2026 conj adds to the front of a sequence. but adds to the end of a vector\nI am highly interested in this\u2026 let\u2019s thread the conversation\nI am reading the docs. How lists and vectors are FIFO or LIFO\n<https://purelyfunctional.tv/guide/clojure-collections/#fifo>\nSeqs on vectors are just views into the vector and are highly efficient\n<@Jasmine> so the sequence just walks down the edge of the trie?\nEffectively, yes. I mean you can read the code, it\u2019s pretty straightforward I think\nAye\nNormally seqs have some overhead in caching the resulting sequence (effectively a linked or chunked linked list)\nVectors seq is more efficient as it just piggybacks the vector\nbut Clojure doesn\u2019t use any linked lists underneath? Right?\nClojure lists are linked lists\nwow\u2026 I thought they were array based\nSequences are usually linked lists\nChunked seqs are links of arrays\n32?\nSo more memory efficient\nYes\nahhh ok. I must be reading conflicting info from the web\nbecause some docs said that Clojure lists were array based, next to each other in memory, touching\nAre Java or js arrays really guaranteed to be contiguous in physical memory?\nJava arrays are\nwait a second\u2026 why don\u2019t I see any middle insertion methods on the Clojure ISeq (lists) if they are linked lists?\nthere is only conj, adding at begining and end\u2026 which would point to using an array structure\nIn general Clojure provides only \u201cefficient\u201d operations\nThe efficient place to add elements to a linked list is at the head\nI thought a linked list can have insertion done at any point, in constant time?\nbecause it just looks up the memory address\nif you have a linked list you have a node and a pointer to the rest\nso to insert in the middle you have to start following the links\nI can\u2019t just insert based on the nth term?\nsure. but first ya gotta get there\na linked list is really just a node pointing to another node\nso I have to walk the linked list to find the nth term?\nyup\nyep!\nits like a scavenger hunt\nwow. I was really confused about that.\nits a tree without branching :wink:\nIt's a vine ;)\nI am coining \u201cunary tree\u201d\nwhy would anyone want to use one?\nif the insertion writes are linear complexity\u2026 makes no sense to me\nFor function application ;)\nahh, so you use them to chain functions together?\nReally, vectors are almost always preferred\nNo, I just mean that because Clojure is a lisp we always use lists to apply functions, with the function in the operator position of the list\nwell unless you want to prepend, thats `O(n)` in an vec and `O(1)` in a list. The moral of the story, different datastructures have different trade offs\nI must have read some erroroneus docs\u2026 that said Clojure uses arrays, contiguous, for sequences\u2026 when I was comparing it to Elixir\n<https://clojure.org/reference/sequences> read up on sequences here.\nI think Lennart was the one who pointed out linked lists don\u2019t do well on the CPU l1, l2 cache\n<http://insideclojure.org/2015/01/02/sequences/> and <http://insideclojure.org/2016/03/16/collections/> are some longer things I\u2019ve written that you might find useful\nbecause they can be spread all over RAM and can\u2019t be loaded in 1 step like arrays can, contigous\nI did not, but I have read it sometimes\nAnd some of the faq entries <https://clojure.org/guides/faq>\nthat's true. and Clojure does some tricks mentioned earlier (chunking) to bridge this gap. The gain you get is that lazy sequences can be used interchangeably with standard collection types when this interface is pervasive.\nif you care about cache misses, you are fairly deep into optimising tho, first write code, then make it fast :wink:\nElixir uses linked lists as their basic type, for lists\u2026 and because the CPU can\u2019t grab the data in 1 step\u2026 it makes threading less efficient\u2026 when the CPU has to lock memory\u2026 and do several steps to get the linked lists from all over RAM\nI think this is a reason why Clojure is faster and has lower level threading models\n<@Tammera> but you posted that info on Java Fibers\u2026 Which is like Actors\u2026 but it sounds lower level too. If clojure takes advantage of Fibers\u2026 I think that will be fantastic\n<@Rosalia> no shared memory\nthe only way to share is off-site\nor through message passing\nthis is a big reason I love clojure. We can thread stuff with shared memory\u2026 and we can also setup the actor model\nThis is the reason Clojure is better at number crunching\u2026 But can also handle horizontal scaling with Actors. And Fibers can be a game changer for us.\nAye, I don't think elixir is designed for high performance, local number crunching\ncorrect. Elixir is setup for distributed computing\nI am not knocking it. It\u2019s great for its purpose. But I do think Clojure is more robust for number crunching, and horitzontal and vertical scale\nya, it could make Clojure scale horizontally from day 1, without extra setup\u2026 just like Elixir\ni remember tim baldridge recently laying out why Clojure is not great for number crunching. I think it was on a reddit post about game design in Clojure?\n<@Becki> Clojure isn\u2019t good for number crunching?\ni'm looking for his post\nread the discussion here: <https://www.reddit.com/r/Clojure/comments/b7zymd/sean_murray_at_gdc_2019_a_new_perspective/>  tim's username is halgari\ni've never done heavy number crunching in clojure. so i like to listen to arguments and experiences from people much smarter than me :slightly_smiling_face:\n<@Becki> he is talking about game programming (C, C++)\nGames can\u2019t handle the pauses in Garbage Collectors\n:sideeye:\nI agree with <@Meagan>\nClojure uses tricks though\u2026 like lazy-seq\nGames aren't unique in realtime programming. Any allocation strategy is going to fail if you abuse it.\nI think pauses in the garbage collector is ok for non user facing stuff, e.g. machine learning\nI\u2019d glady make the trade off if it means I don\u2019t code it in C\nI benchmarked a small test. Clojure lazy seq is as fast as C.\nYeah, despite being super flexible, Clojure is pretty fast\ni don't believe you. (re: lazy seq is as fast as C)\n<https://github.com/starchild33/algorithms>\ni'm assuming your terminal printing was the same speed in a C program as with clojure :slightly_smiling_face:\nmy clojure lazy seq on the nth term of fibonacci was as fast as C\naround 1 second to find the 40th nth term\nwell, I did use cython, from python recursion script\nI didn\u2019t write it in raw C\nalso, comparisons of language A is as fast as language B usually highly depends on your implementations in A &amp; B. I can write number crunching Python thats faster than C if I butcher the C impl.\ni heard PyPy is faster than cython\n(implementations matter)\ni don't see any C in there\nI am going to write it in Raw C. then compare it to clojure.\nthe python version is the naive recursive solution\nyea\nbut Clojure optimizes recursion with a lazy-seq. So I cheated a little.\nI wonder if/how clojure's concurrency abstractions will fit with loom/fibers\nlet me write some more today\u2026 and try a naive recurssion in Clojure compared to C. I am sure C is faster in that case though\nit's a totally different algo. you did the count up version in clojure and the naive exponential version in python\nya, it\u2019s not accurate enough. I cheated.\nlol. well lets not claim Clojure is as fast as C if there is 1) no C and 2) different algos used in the python versus clojure verions :slightly_smiling_face:\nbut i like your enthusiasm and willingness to actually benchmark\nI think I should restate it as\u2026 Clojure can use tricks to speed up to C level performance\nI\u2019ll rewrite it today, with a more accurate comparison\u2026 and share it\ni look forward to it.\nI am biased towards Clojure\u2026 you can see my bias\ni am too :slightly_smiling_face:\nLike, could a fiber backed atom be as simple as a cljs atom? Or does interruptibility on the jvm complicate that?\nIn general, Clojure should be approximately as fast as Java. jit optimized Java is generally fast enough for the majority of programming uses. Where it\u2019s not, there are options to use faster libs as a consumer. \n99% of users never need that though\nThe main issue I ran into when using `lein-tools-deps` was that the dependency resolution for `lein` is similar, but not the same as `tools.deps`. So, even with the same dependencies, the resolutions might be different if you use (for example) `lein uberjar` you could potentially get different versions of some libraries than if you ran the `clojure` script. I would second <@Celestine> in recommending that a hybrid approach only be used during transition.\nomg. I mis-spoke. Clojure Binet Formula is as fast as C recursion\n<@Becki> hahahaha this is an interesting comparison.. working on it now\nyou were using 40 earlier i think.\nOr if you were trying simulate a universe of stars that don't fit in memory all at once\nit's not going to pay off except in time correctness\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1148",
    "text": "Does Elixir have shared memory between processes?\nWhich is fine\nFibers / project loom will be interesting\nimmutable data structures will always be at a disadvantage when it comes to raw efficiency\nWell, the flexibility of persistent data structures is never going to be as fast as typed arrays\nWhat lilactown said\nsure, obviously batch processing is just a race to the finish line.\nMy very sloppy Clojure use is 80-99% as fast as Java. Once in a while I tune it up with just a tiny bit of effort. Mostly it is sufficient.\nha. can you find the point where clojure's single computation is faster than c's recursion?\nThere may be certain kinds of problems where persistent data structures are already the most performant abstraction. Like an editor that can edit files larger than what's in memory. I think have to implement some shared structure thing anyway.\npersistent data structures are a convenience for programmers to ensure certain types of design correctness\nthat convenience is overhead\ntime to correctness\nUnless the problem itself looks embarrassingly like a persistent data structure problem\nthere are lower overhead ways of ensuring correctness but they cost developers more at design/review time\nwhat is a persistent data structure problem?\nIt doesn't have to be only about correctness. the shared structure of persistent data structures allows for efficiencies that are harder to achieve without that shared structure.\nEspecially over infinite data sets for instance\na \"convenience for programmers\" - doesn't this describe every single tool?\nharder how? in developer effort? that's what i've been saying.\nmg: as in the opposite of fundamental to computation\ncompilers are \"convenience for programmers\", you should be writing assembler yourself\nok, no\nthat's asinine\nHarder to reason about, sure. But in terms of polynomial difficulty,\npersistent data structures may be the minimal polynomial complexity for certain kinds of problems that have shared structure\nCan you be little more concrete about that?\nwell I think the premise of the question fundamentally kind of silly\nPolynomial complexity as I usually hear it refers to computational complexity\nNavigating a procedurally generated universe of stars that don't fit in memory\nthat sounds like an application not a computation problem\nHmm, perhaps\nThere's this YouTube video of a guy that built an editor using persistent data structures implemented in c++. They call them postmodern data structures lol\nIt'd be pretty interesting to see that implemented in clojure\ncool\nDef check out that video sometime! It's worth a watch\nThis might be it <https://youtu.be/sPhpelUfu8Q>\nanother efficiency perk of Clojure's persistent data structures: snapshots. So if you have some problem that needs a consistent view of snapshots of data across some threads, mid-computation, then persistent data structures already solved the problem for you. People rarely use the snapshot capability though AFAIAA\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1149",
    "text": "Why would a function have a `*` at the end of its name? My guess is that it\u2019s a convention indicating that the function generates a lazy sequence. For example `evens*`.\nIt's often used to indicate an \"implementation\" function. You'll often see it as the name of a function behind a macro.\nYou'll also see it for the implementation of some special forms in Clojure itself. Both `fn` and `let` are technically \"Special Forms\" but they are implemented as macros that expand to \"calls\" to `fn*` and `let*` respectively (which are implemented directly in the compiler).\nWhere I've also seen it used a lot is for functions that implement a cache: if `foo` is the cached version of the function, it will often be implemented in terms of `foo*` which will be the uncached version of the function.\nDoes that help <@Suanne> ?\n<@Celestine> Hmm. I think I understand. In other languages I would expose the modules function with a friendly name and then have another function behind the scenes that does the actual work (because it needs extra parameters for example). So this is a convention for that sort of pattern?\nYes, it's a fairly common pattern for implementation detail functions.\n<@Celestine> In JavaScript I would usually pre- or post-fix an `_` for this same purpose.\nYeah, I've seen that convention in C/C++ as well.\nSide note, something I love about Lisps is using a dash as-a-separator for names. It\u2019s by far the most natural way to do this in my view and it\u2019s a shame most other languages don\u2019t do the same.\nI beleive you\u2019re missing a closing parens or 2\nI am not missing parens. I just omitted some middleware. get-app-routes looks like this for now:\n```\n(defn get-app-routes [handler]\n  (defroutes app-routes\n    (GET \"/\" [] \"Hello\")))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1150",
    "text": "Any idea how I can achieve this in Compojure:\n```\n(def app\n  (-&gt; (wrap-defaults (get-app-routes handler) site-defaults)\n```\nI want to define the routes based on the hostname. The problem of course is `handler` above is not defined.\nbut other than that, what is get-app-routes?\nyou don\u2019t seem to use the handler, do you need to do something odd and dynamic?\nThe idea is to return different `app-routes` based on the hostname that I can get from the handler request object\naaaaahh.. I see..\nI can\u2019t think of any clear solution for this since I don\u2019t understand the case very well.\nMy last bit of advice is you might be able to get away with just using routes instead of defroutes because it doesn\u2019t seem like you\u2019ll use app-routes directly anyway.\nmaybe middleware might be the way, maybe just a conditional in the routes themselves. :sweat_smile:  sorry I can\u2019t be more useful, hope someone else can help.\nThanks, I guess I'll keep trying.\nI finished my results of comparing Clojure, C, Python/Jython/Cython, Ruby/Jruby for the nth term of Fibonacci.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1151",
    "text": "<https://github.com/starchild33/algorithms/blob/master/README.md>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1152",
    "text": "Hi, I have a simple TTL cache built around an `(atom {})` the logic that gets a value either finds an entry or gets a new one if the entry was missing or already expired (the loading of the entry involves a short Redis IO op). Dead simple.\nNow, I want to improve it and make it thread-safe. It is not _not entirely_ thread safe because 2 threads can find a missing/expired entry and trigger a load (redis call) simultaneously.\nHow would you recommend locking the IO per key?\n1. `(locking cache-key ...)` comes to mind but is not so the Clojure way (also, I\u2019ll have to maintain an additional map of locks)\n2. maintaining a map of entry as \u2018loading\u2019 `ref`s where every load from DB is a transaction on the corresponding ref. This also sounds overly complex.\nAny more inspirations?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1153",
    "text": "Hello guys, is it possible to overwrite the functionality of default protected java method from clojure?\nI was checking farmhand but it's a bit buggy\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1154",
    "text": "Hi guys, what do you use for queuing? Ideally redis-based?\n<@Holly> out of process queuing?\n<@Frederick> yep\nif you are looking at redis libraries i would recommend carmine\nclojure.lang.PersistentQueue/EMPTY\nthat\u2019s in-process ^\n<@Frederick> carmine looks great, but I would need some kind of ui to check the data, as well as retries and such\nI'm looking for something like sidekiq\n```(defmacro defmany \n  [definitions]\n  `(do ~@(for [[k v] definitions]\n           `(def ~(symbol (name k)) ~v))))```\nsomething like that maybe ?\n`for` returns a list of forms, e.g. `((def a 1) (def b 2))`, so using `~@` splices the outer set of parens away\n```(macroexpand-1 '(defmany {:a 1 :b 1}))\n=&gt; (do (def a 1) (def b 1))```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1155",
    "text": "core.cache has composable caches and the ability to define a custom cache. I wonder if you implemented a custom cache that uses redis to back it and then composed it with the built-in ttl cache if that would give what you want <https://github.com/clojure/core.cache/wiki/Extending>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1156",
    "text": "is there a nicer way to write this:\n\n```(defmacro define-multiple [things]\n  (into []\n        (for [[k v] things]\n          `(def ~(symbol (name k)) ~v))))\n\n(define-multiple {:a 3 :b 2})\n```\nI don't think that's doing what you want\nusually if you're emitting multiple top-level things, it's best to wrap it in a `do`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1157",
    "text": "Is there a way in a Ring web app to get the hostname *before* defining Ring's handler?\nif the result of `(clojure.java.shell/sh \"hostname\")` is correct, that would be one way to get it\nyou could also ensure that it's set in the environment or passed as an arg to -main\nthe server-name that you get in a ring request is from the value of the client sent Host header, and not your hostname\nYeah, I want to determine the subdomain the request is coming from before creating Ring's handler\nbasically \"this is who the client thinks you are\"\nso without a client, you can't have that\nIt's for a SaaS system using subdomain but the company offers multiple products. For that reason, I need to set a different set of routes based on the subdomain.\nI thought I could get it to work like this: `(as-&gt; handler x (wrap-defaults (get-routes x) site-defaults)` but it turned out the routes are parsed on the startup only.\nIt doesn't matter what it is for though, right? You are asking to get the value of the host header,  which is sent by clients each request, and can vary, before a request has been sent, which is impossible\nWhat routing library are you using? Most of them can route base on the host header\nI tried Compojure and bidi\nbidi has subdomain facilities but they need to be hardcoded\nYou will have to hard code them\nThere are hundred if not thousands of them\nI will need to ping the DB to see which app to use for the provided subdomain before creating the routes\nYou'll need you create a handler, which takes a request, hits the DB, looks up base on the host header, then generates the routes and applies them to the request\nBasically stop def'ing routes as global(which is terrible any way), because you need to parameterize them\nDef'ing routes as a global value (as seen in lots of docs and tutorials) means 1. Parameterizing your routes doesn't work 2. Your handlers have to globals too\nWhen can I define them if not globally? That's all I saw in the docs like you mentioned.\nAny bits of code I can refer to?\nUse routes instead of defroutes\nOk, I will give that a try. Thanks.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1158",
    "text": "when should I use `partial` rather than the `#(func arg1 arg2 %)` syntax?\nmaybe when it's `#(func % arg1 arg2)`?\nerr don't use partial for that\nrather\nthat's the thing, I use the `#()` syntax all the time, and I'm not sure where I should use partial instead\nI think people prefer to read the anonymous function version rather than the partial. but partial isn't out of place i don't think\n`#()` looks cleaner to me\nI tend to just use `#()` all the time, too\nthere is no should. I think someone mentioned that had the anonymous version been around earlier in Clojure's life `partial` might not have been made\n`partial` is nice cuz it very plainly says, \"i'm returning a function that is just waiting on final input\"\n`#()` to me says, \"this is an anonymous function\" and requires a different kind of parsing\n`partial` feels like clojure's version of currying\nMy advice would be, don't use `partial`\noh? well, okay then!\nwhich is not to say that people don't, and it's fine that they do, but `#()` is imo the Clojure way to do this\njust my own opinion and it's ok for others to have their own preferences :)\nWhat feels more \"Clojure\" to you about `#()`?\none thing a partial obscures the remaining calling convention whereas `#(func %1 :foo %2)` is clear that it expects two more args. Also, if you refactor the signature of the function `partial` might no longer be up to the task leading to needless churn in a diff. For instance, `(defn foo [a b c])` you can use `(partial foo a b)` but if you change the signature to `(defn foo [a c b])` you can no longer partial this application and you would have to switch to `#(foo a % b)` instead of just changing the position of the `%` and the `b`\nI got it to work based on the tips you provided. Thanks :slightly_smiling_face:\nAlso `#(func 1 2 %)` compiles to a function directly whereas `(partial func 1 2)` compiles to a call (to `partial`) that returns a function. The performance difference is tiny -- I'm mentioning this more to highlight there is a runtime element to `partial` whereas the anonymous function is a compile-time expression.\n(I'm one of those folks who still tends to use `partial` but I admit that I'm moving away from it...)\nit has an elegance to me sometimes but i'm moving away from it as well.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1159",
    "text": "`partial` also captures the var value instead of the var, so it can lead to surprising behavior when using dynamic vars for example\na poll: should you ever use a macro if you can use a function?\n```user=&gt; (def ^:dynamic *a*)\n#'user/*a*\nuser=&gt; (def f (partial + *a*))\n#'user/f\nuser=&gt; (def g #(+ *a* %))\n#'user/g\nuser=&gt; (binding [*a* 1] (g 1))\n2\nuser=&gt; (binding [*a* 1] (f 1))\nExecution error (ClassCastException) at user$eval164/invokeStatic (REPL:1).\nclojure.lang.Var$Unbound cannot be cast to java.lang.Number\n```\n<@Onita> if it's convinent, yes, but you should also have the function version for when you want to use it in a higher-order context, or when the value needs to be resolved at runtime\nwhat's the best reaction for \"that's a good point i hadn't considered. thanks\"\ne.g. clojure has `with-binding` and `with-binding*`\none is a macro on top of the function\nsometimes you need to use the function version when the binding map is built at runtime\nbut often it's not and the macro version is just less verbose to use\nto add on this, `partial` also causes the stacktrace to point at `partial$fn&lt;whatever&gt;` instead of making acustom class, which can make debugging way harder\nhmm, ok\nInteresting points in favor of `#()`. Normally I favor `partial` because `#(% ...)` looks like someone swearing in a comic book\n\nBut yeah looks like I should switch\nif I have a lazy `repeat` in clojure, can I turn it into a lazy vector I can use with `assoc`?\nwhat are you trying to achieve. often its best to take a step back and figure out if there's a better way\nI'm trying to create a brainf**k interpreter, as an exercise. This is for the tape.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1160",
    "text": "vectors are not lazy -- they have a fixed length\nis there an equivalent of assoc that can be done on a lazy seq?\nyou could use `map-indexed` and something like\n```\n(let [index 3]\n (map-indexed (fn [i x]\n                (if (= i index) :replaced-value x))\n              (range 6)))\n(0 1 2 :replaced-value 4 5)\n```\nuse a map\na map is a better model for the tape\nif you can drop your lazy requirement, which you probably can?\nthe lazy requirement is nonsensical\nI don't really see how a map makes a better tape model than a vector when the tape is a sequence?\nyour current woe would be solved\na map allows for a sparse representation\nthe lazy thing was because I thought doing a lazy tape was elegent and solves the bf interpreter problem of running out of tape\ne.g. with a map you can assoc a value in for 1e3 without needing a value in the map for everything between 0 and that\nthat actually makes more sense\nthanks\nso with evens-v1, when you call it returns a lazy seq, and when you call first or rest on it, the body of the lazy-seq call is executed and cached, and first or rest is called on it\nwith even-v2 when you call it, it cons's n on to the unforced lazy seq constructed by lazy-seq and returns that\nthe type of a lazy seq doesn't change, regardless of if it has been forced or not\nOk, so the difference is basically negligible but version 1 is truly lazy since v2 starts creating that sequence (albeit a single element of it) when you call it even before it is realized.\ncorrect, the difference in this case is negligible, but it can be larger, it depends on the amount of computing required to construct that initial element\nI am not sure I have come across a case where it mattered a lot, but in general I try and hoist lazy-seq calls up as high as possible so they wrap as much of the function body as possible\nThat makes sense.\ncan someone help me with a bit complex regex/replace problem.\nI need anything that matches to be wrapped one way, anything that doesn\u2019t match the other way, e.g.: if given string like:\n\u201cDonec vitae dolor color or sotamayor\u201d I want to highlight everything that matches \u201cor\u201d, basically I want it to become something like:\n\n```\n[:span \"Donec vitae dol\"\n [:span.h \"or\"] [:span \"col\"] [:span.h \"or\"] [:span \" \"] [:span.h \"or\"] [:span \"sotamay\"] [:span.h \"or\"]\n```\nmatching part is relatively easy\u2026 but I can\u2019t figure out how to replace things that do not match\n<@Kayce> I'd be inclined to use the `.find` `.end` methods, each returns a numeric index you can use with subs\ntake string, call `.find` get a start index, call `.end` get end index, cons two strings, then self-call\nhmm\u2026 but why can\u2019t it be two pass string/replace?\n<https://github.com/ztellman/automat> could be useful\nstring/replace could be possible, but I think the self-call cons approach is easier to think about\nso like if I want for example wrap anything that doesn\u2019t match \u201cor\u201d and place it between \u201c^\u201d and \u201c$\u201d\u2026 :\n```\n(clojure.string/replace\n \"Donec vitae dolor color sotamayor\"\n #\"(?!or)\"\n #(str \"^\" %1 \"$\"))\n```\nexcept it\u2019s not working as I would like it to ;(\nI am not sure regex syntax is flexible enough for what you want\nbut a regex is a kind of finite state automata, and automat is a more flexible way to construct those\nI am no regex wiz, but I think your issue is, regex is a character by character scan, and you are trying to say, chunk things in to groups that are not this two character sequence\nbut a regex would only match the character sequence at a time, so even if it did work, you would get lots of two character slices\nwhich is actually almost what you get with your ^$ example\nimperfect, but it's a start\nI need it to work in Clojurescript (preferably)\nuse automat\nin js you'd want `.search` (returns index of start of match) and `.lastIndex`\nand you'd use a RegExp instead of matcher (I assume in cljs #\"\" is already a RegExp)\nsorry guys\u2026 I got dragged into fixing an issue in an RC. Thank you all for your suggestions, I will try them!\n:spock-hand: <@Dann> <@Rosaline> <@Becki>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1161",
    "text": "Can you help me understand the difference between these two forms of generating a lazy sequence?\n\n```\n(defn evens-v1\n  ([]\n   (evens-v1 2))\n  ([n]\n   (lazy-seq (cons n (evens-v1 (+ n 2))))))\n```\n\n```\n(defn evens-v2\n  ([]\n   (evens-v2 2))\n  ([n]\n   (cons n (lazy-seq (evens-v2 (+ n 2))))))\n```\n\nAs far as I can tell, these both behave identically. Their return types are `LazySeq`.\nthe boundary of laziness is lazy-seq, so you would say evens-v1 is slightly more lazy and evens-v2 is slightly more eager\nThanks for the explanation!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1162",
    "text": "and then use cons and recursive calls (maybe with lazy-seq even)\n```\n(let [states {\\o {:string :o}\n              \\O {:string :o}\n              \\r {:o :or}\n              \\R {:o :or}}]\n  (reduce (fn [[acc [state buffer or-buffer]] c]\n            (let [new-state (get-in states [c state] :string)]\n              (case new-state\n                :string [acc [:string (str buffer or-buffer c) \"\"]]\n                :o      [acc [:o buffer (str c)]]\n                :or     [(conj acc buffer (str or-buffer c)) [:string \"\" \"\"]])))\n          [[] [:string \"\"]]\n          \"Donec vitae dolor color or sotamayor\"))\n\n[[\"Donec vitae dol\" \"or\" \" col\" \"or\" \" \" \"or\" \" sotamay\" \"or\"]\n [:string \"\" \"\"]]\n```\n```egret.run=&gt; (re-split-seq \"Donec vitae dolor color or sotamayor\" #\"or\" (fn [x] [:span.h x]) (fn [x] [:span x]))\n([:span \"Donec vitae dol\"] [:span.h \"or\"] [:span \" col\"] [:span.h \"or\"] [:span \" \"] [:span.h \"or\"] [:span \" sotamay\"] [:span.h \"or\"] [:span \"\"])\n```\n```(defn re-split-seq\n  ([s re marked unmarked]\n   (let [matcher (re-matcher re s)]\n     (re-split-seq s re marked unmarked matcher 0)))\n  ([s re marked unmarked matcher unmatched]\n   (let [found? (.find matcher)\n         start (when found? (.start matcher))\n         end (when found? (.end matcher))]\n     (if found?\n       (cons (unmarked  (subs s unmatched start))\n             (cons (marked (subs s start end))\n                   (re-split-seq s re marked unmarked matcher end)))\n       (list (unmarked (subs s unmatched)))))))```\n(or use java.util.Scanner)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1163",
    "text": "Looking for Clojure-scriptable 3D/physics environments. Know about Arcadia and <#C0FM7N1SM|quil> but want to know what else is out there. Big plus if a world/system can be created entirely in code, ideally all Clojure/script.\nHi <@Leisa> .  I don't have the answer but wonder if Zulip would be a good place to ask.  (Do I remember that you used to to ABM modeling in Clojure?  I've been working on a little library to make it easier to use MASON in Clojure.)\nWould someone be willing to post a pointer to instructions for deploying to Clojars with Leiningen without signing?  I'm sure the info is there somewhere, but the `lein` help on this is not very clear to me give what I don't know, and the docs on the web seem to focus on signing.  I may be overlooking the crucial bit ....\n<@Wesley> You'll need something like ```:repositories {\"clojars\" {:url \"<https://repo.clojars.org>\" :sign-releases false}}``` in your `project.clj` file.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1164",
    "text": "why is clojure's destructuring of maps so weird? ```user=&gt; (def artist-map {:painter :monet :novelist :austen})\n#'user/artist-map\nuser=&gt; (let [{painter :painter writer :novelist} artist-map] (println \"The painter is\" painter) (println \"The novelist is\" writer))\nThe painter is :monet\nThe novelist is :austen```\nin elixir/erlang and other languages it's more like: ```iex(4)&gt; %{:painter =&gt; painter, :novelist =&gt; writer} = %{:painter =&gt; :monet, :novelist =&gt; :austen}\n%{novelist: :austen, painter: :monet}\niex(5)&gt; painter\n:monet\niex(6)&gt; writer\n:austen```\nbut clojure goes `{symbol keyword}` instead of `{keyword symbol}`\n(or your `~/.lein/profiles.clj` file)\njavascript works the same way as elixir/erlang, apparently\nI'm used to things being done differently but usually they make some kind of sense to me. this really doesn't\n<@Malik> you can do `(let [{:keys [painter novelist]} artist-map] ...)`\nsay what now?\nYou only need the form you showed if you want to rename the matches (as you did with `writer`)\noh, found it in the docs\nthat's cool and all, but I'm still stumped as to why it's in the form `{symbol keyword}`\nI pretty much always use the `:keys` form -- I just the other day used the long form because I was renaming a substructure match.\nit's so counterintuitive to me\nBecause you normal bind `symbol` to `expression`.\nSo destructuring binds `symbol`s to `keyword` selections from the right hand side expression.\nohhhhhh\nbecause you can call `(:keyword artist-map)`\n<@Vita> I wonder where are you aiming at. The core.cache implementation does not ensure that a fetch for a single key is called once. on the contrary:\n```(defn get-data [key]\n  (cache/lookup (swap! cache-store\n                       #(if (cache/has? % key)\n                          (cache/hit % key)\n                          (cache/miss % key (retrieve-data key))))\n                key))```\nassumes that `retrieve-data` can be called multiple times since if multiple threads race on the missing key branch than the `atom` implementation will trigger a retry for the \u2018loosing\u2019 thread. Since the eviction policy I implemented is very naive (and that is quite okay for me), what I am looking for is just to ensure that `retrieve-data` is ensured to be called once per TTL expiry and not more. This is since I want to protect my DB against a flood of requests once the TTL of many object expires. <@Celestine> maybe you have some ideas?\n<@Frederick> Check through the open issues on the repo: there's discussion of exactly that issue and an example of how to ensure `retrieve-data` is only called exactly once.\n<@Celestine> no issues on that github page: <https://github.com/clojure/core.cache>\nwhat m i  missing?\n<@Celestine> great--thanks much.  I wasn't even sure what config file I should be looking at.\n<@Celestine> no issues on that github page: <https://github.com/clojure/core.cache>\nwhat m i  missing?\nI think that the issues are not open. is there an open jira sute for those?\n<@Celestine> I think I found it here: <https://dev.clojure.org/jira/browse/CCACHE-50>\nRight. I have a notebook with ideas about how to make higher-level usage of the caches easier. There are some gotchas with TTL as well because `lookup` can cause cache expiry so the simple, obvious usage can return `nil` -- which `cache.memoize` has to deal with.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1165",
    "text": "what\u2019s idiomatic way to deduplicate messages from one channel into another within some window of X messages?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1166",
    "text": "Would anybody know why I'm getting this error message getting the Client for Datomic cloud ```Unable to resolve entry point, make sure you have the correct version of com.datomic/client on your classpath```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1167",
    "text": "<@Wesley> Just looked into Zulip but not sure how to get started and find where you're suggesting I ask about this. Pointers? Clojure-scripted MASON might indeed be useful for me, especially if it could really all be done from Clojure.\nIf anyone else has pointers to Clojure/script-scriptable environments for 3D simulations/physics, beyond Arcadia and <#C0FM7N1SM|quil>, I'd love to hear about them!\nHave you looked at <https://github.com/oakes/play-cljc> ?\n(Successor to <https://github.com/oakes/play-clj>)\n<@Leisa> searching on Zulip yields results from streams you're subscribed to. Searching for 'quil' yields results from the following streams for me: *clojure-stl* (<https://clojurians.zulipchat.com/#narrow/stream/152255-clojure-stl>), *data-science* (<https://clojurians.zulipchat.com/#narrow/stream/151924-data-science>) and the *slack-archive* (<https://clojurians.zulipchat.com/#narrow/stream/180378-slack-archive>)\nThanks <@Ciara>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1168",
    "text": "try <#C03RZMDSH|datomic> channel?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1169",
    "text": "Hello! Any tips how to stop symbol included inside ` from being fully qualified? See ``` (let [s 'hello] `(defn ~s [] nil))``` produces `(defn myns.core/hello [] nil) ` Thank you!\n````(defn ~'hello [] nil)```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1170",
    "text": "Are the macro characters processed from left to right/outer to inner?\nwhat do you mean by \u201cmacro characters\u201d?\nsorry, didn't want to say symbols, I mean the tilde and apostrophe and others\nstill not sure I completely understand the question, but syntax quotes and other symbols operate the same as any other clojure form\ne.g. ` will syntax quote the following _form_ and everything inside it\nanother way of thinking about it: `'(foo bar)` is the same thing as `(quote (foo bar))`\n` and ~ operate the same\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1171",
    "text": "All of them operate on the next read form\n<@Leisa>, well there are a bunch of data science people hanging out on Zulip lately, mostly in the data science section, but posting elsewhere.  What you're asking about isn't data science per se, I suppose, but there may be some overlap, and if nothing else, the data science people are interested in graphical representations such as quil.  Yes, you can do everything in MASON from Clojure, although there have to be parts that smell of Java.  More soon.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1172",
    "text": "another reason is that the destructuring form is a hash-map, and you can't have a hash map that uses the same key multiple times\n\nthere are valid reasons to destructure on the same key twice in one destructure\nAlso, I haven't done anything with 3D MASON.  It's possible that my library has some 2D bias, but I don't think so.  If so, I'll fix it.\nAh, I see, eval2020 responded usefully.\nSpec question: Say that I have a graph of _nodes_ and _edges_ modelled as a map with those keys. Now lets say that I want to spec that all nodes are connected. I can write a predicate `is-connected?` that takes the entire graph, and says whether it is connected yes or no. But for large graphs, that will be hard to track down. Is there a way to _also_ be able to spec it in such a way that I can also explain which node was not connected?\nExample: `{:nodes [:a :b :c :d] :edges [[:c :d]]}` is invalid because `:a` and `:b` are non-connected\nWhat about `{:nodes [:a :b :c :d] :edges [[:c :d] [:a :b]]}`?\nWhat I mean is that you might need a more precise definition of connected.\nRight, in reality I am interested in their degree, I am however struggling with writing a spec that is evaluated for each node with the graph as \u201ccontext\u201d. There is no way to determine the degree of a node without knowing to which other nodes it is connected to.\nyou are really just in the land of writing a function I think\nspec is not going to help you with this problem much\nthere is not currently a way for predicates to give a more precise answer than valid/invalid\nYes, you should write a predicate that test whether the graph is connected and use it in your spec for the whole graph. If it is not you can write another functions that will return the potential \"culprits\".\nexplain can potentially tell you a more detailed reason why\nor a set of \"problems\"\nI can attach a custom explanation, right? Because saying that it failed `is-connected?` is the thing that I am trying to avoid\nor\u2026 I want to be more specific than that\nBut you don't have to do this inside spec. You can detect that the graph is not connected by applying your spec and in a second time call a function that will identify the subgraphs.\nI'm not sure that spec is giving you any value in what you're describing over just writing functions\nright, yeah I just wanted to add it to the other things being checked with specs, but maybe I indeed shouldn\u2019t. Such that checking with `s/valid?` gives you the \u201centire\u201d picture. I\u2019ll hammock over that, thanks as always!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1173",
    "text": "Has anyone had issues using `scroll` from clojurewerkz/elastisch API pointing to ES version 6.4.2? This method works fine for ES 5.x.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1174",
    "text": "@jp are you trying to do infinite scroll?\nare you implementing infinite scroll?\nI wrote those from scratch in JS. Saving the position on the page and loading it\u2026. is a deal breaker in terms of UX. I don\u2019t like infinite scroll for that reason.\nInfinite scroll does not add value to UX\u2026 You could just write an ajax pagination if you want a better user experience. If you are just trying to save the user from needing to refresh a web page/\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1175",
    "text": "<https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html>\nI have in coming datastructures for requests like this\n```\n[{(ucv.ui.root.signon/login {:email \"<mailto:admin@foobar.com|admin@foobar.com>\", :password \"letmein\"})\n  [:session-key :logged-in? :user-id :firm-id :pos/id :user/id :firm/id]} :com.wsscode.pathom/trace]\n```\nAnd I want to log them, but omit any whitelisted keys (like `:password`), but otherwise log the datastructure completely as is (don\u2019t want to change vectors to lists or anything). What the recommended way of doing that?\nI tried `clojure.walk/poswalk` but even with `identity` that changes the datastructure\noh wait no, i forgot to prevent the list from being treated as code\nso, seems like postwalk can work, is that the recommended approach for something like this?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1176",
    "text": "what do you want to log them to? plaintext?\nWhy can\u2019t you just query the search page by page\u2026 instead of setting a scroll timeout parameter?\nSolr/ElasticSearch should be able to paginate your search\nit sounds like scroll is for clients that cannot keep track of the same search url\njust logging with timbre\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1177",
    "text": "yeah to remove the :password field in an arbitrarily nested structure postwalk is your best bet\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1178",
    "text": "`postwalk` should do well. If you want to preserve the datastructure though (i.e, not everything should be coerced to seqs which print as lists) check out the library `specter`. Code for things like this also ends up being faster and less ceremonious.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1179",
    "text": "I want to write a clojure function in java, and that function may throw an exception that is unknown at compile time.\n\nin clojure I can throw anything, anywhere :\n```\n(fn [error] (throw error))\n```\nSo clearly the JVM bytecode allows this and it does the expected thing at runtime. But if I try to do that in java, `javac` gives the finger :\n```\nnew AFn() {\n            public Object invoke(Object error) {\n                throw (Throwable) error;\n            }\n        };\n```\n`unreported exception java.lang.Throwable; must be caught or declared to be thrown`\n\nis there a compiler or language trick to make `javac` happy there ?\nfound my answer <https://stackoverflow.com/questions/4519557/is-there-a-way-to-throw-an-exception-without-adding-the-throws-declaration>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1180",
    "text": "With clojure.tools.reader, how do I set the \u201ccurrent ns\u201d when reading auto-namespaced keywords?\n```\n(binding [r/*alias-map* {? 'foo}] (read-expressions \"(ns foo) #::{:b 1}\"))\n```\nor do I set `*ns*` to `'foo`?\nthat works:\n```\n(binding [*ns* (create-ns 'foo)\n            r/*alias-map* {'foo 'foo}] (read-expressions \"(ns foo) #::{:b 1}\"))\n```\nbut I\u2019ve no idea if that\u2019s how it should work\n`read-expressions` can't really work consistently in clojure jvm\nconsider `\"(ns foo (:use bar)) (foo)  #::{:b 1}\"` with `(ns bar) (defn foo [] (in-ns 'bar))`\nif you accept this limitaion, then yes, bind `*ns*` manually\nno need for alias-map\nbut the model of clojure is read-eval-loop\nnot read-loop\nread-expressions is my own function, which should emulate the read-eval loop\nso I\u2019m going to mess with `*ns*` there\nthen if you eval the `ns` form before reading the map it should `set! *ns*` automatically\nand there should be no need to bind it\nI\u2019m not going to eval anything, just static code analysis\nok, that's what I'm saying\nit cannot work in the general case in clojure\nbecause clojure is not static like clojurescript\nand the read/eval phases are not split\nbecause there can be non-top-level in-ns expressions you mean?\nsame reason why you can't macroexpand a full file w/o step by step evaluation\nthis can work in clojurescript, not in clojure\nit can work in clojure for the 90% of the real world code, but by convention\nyeah, I guess I\u2019m going to have to live with that\nright, then yes, `(binding [*ns* (create-ns ..)] ..)` is the best you can do\nmodulo doing some crazy analysis but I don't think you want to go there\nyes\n90% is good for now\nI'm just inventing that % btw :)\nI think you\u2019re not far off :wink:\nbeing able to do this stuff is why CL has `eval-when` and racket has defined phases\nclojure has nothing equivalent\nit's not the easiest language to build tooling/analysis for\nbut often it doesn't really matter to be fair\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1181",
    "text": "Hello guys\nwhat is the best way to override protected java method ?\nfor example:\nNone\ni would like to write this piece of java in clojure\nIn theory with gen-class I think, in practice writing it in java feels cleaner/faster\nthere was also once a discussion about this on jira, but it's gathering dust: <https://dev.clojure.org/jira/browse/CLJ-1255>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1182",
    "text": "Well aware of it, hoping to consider for 1.11 when we get there\nYou can find various utilities Clojure uses for this in clojure.lang.Util, like the sneakyThrow() method.\nexcellent\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1183",
    "text": "exactly what I need, thanks !\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1184",
    "text": ":+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1185",
    "text": "how useful are code reloading libraries like Component, Mount or Integrant? I worry that I'm diving into using a workflow I don't really need.\nYou could start with just an atom holding your database connection pool - then go with one of those libraries when you need a second atom and dependencies between them. \nas soon as you have resources that need to be initialized and restarted (database connection pools, HTTP server, job scheduler etc), it starts to make sense to use this pattern. I found Component to have too much bureaucracy and mount to be too \u201cmagical\u201d, so these days I feel that integrant is a very good middle way\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1186",
    "text": "<@Faustino> thanks for your response! I am not trying to implement anything UX related- I simply want to retrieve all the data from a given index which is too much data to fetch at once (more than 10K records). I can definitely look into pagination instead. `clojurewerks.elasticsch` did a good job with `scroll-seq` in that it was very simple to retrieve all data with one call so I was hoping to use it in in a newer ES version.\nJust throwing this out there as a GUI alternative. I'm slow, still learning Clojure, time-constrained  but I think a productive exercise is to translate  the guiserver.lsp file written in newlisp to clojure. The actual GUI part is written in Java and spun up separately from a jar and the guiserver.lsp talks to it over a socket. I think it would be a very nice addition as a clojure librsry. If you play with it first in newlisp, you'll find its plenty responsive and complete enough.\nhmm. thinking. When I worked with Solr Lucene, I remember just iterating through the pages by page number in the get url portion.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1187",
    "text": "They're not very useful to be honest\nDon't use them until you feel a need for it\nEspecially if.you have this worry, it probably means you don't need them.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1188",
    "text": "Anyone know of something like `clojure.core/eduction` except where the *input* is itself a reducible?\nAnother way to say it would maybe be \u201csomething that could wrap a given reducible with a transducer xform\u201d\nthat is what eduction does\nmy mistake, actually eduction doesn't call seq when printed either\nit's the print mechanism that calls seq on it\noh, yes it does\nI think I logged a bug on this\nyeah, print-sequential\n<https://dev.clojure.org/jira/browse/CLJ-1747>\n```\n(defn less-promises-eduction [xform coll]\n  (reify clojure.lang.IReduceInit\n   (reduce [_ f init]\n     ;; NB (completing f) isolates completion of inner rf from outer rf\n      (transduce xform (completing f) init coll)))\n```\n<@Rosaline> Heh, how about that. I assumed from the docstring it needed a coll, and I saw that error when trying it at the repl :slightly_smiling_face:\nThanks very much\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1189",
    "text": "I have a function that returns a lazy sequence, and I want to lazily concat invocations of this function. So I wanted to use `concat`, but I heard that it has performance issues and that each concatenation deepens the call stack. Is there some other way I can achieve this?\nFor instance if you had a function `(get-page n)` and it returns 10 items or nil, and you wanted to return a sequence of items that lazily calls `get-page` in the background as needed, what would you do?\nand each call has a cost so you don't want to chunked-seq 32 calls at a time\n<https://dev.clojure.org/jira/browse/CLJ-1906> is a longer exploration of this problem\nthere are kind of 2 things there: 1. paginated api calls 2. concat\nfor concat I wouldn't worry\nI heard a couple of people complain about that\nthe problem with concat occurs when you use it in particular ways, but for example `(apply concat (get-pages ...))` is generally safe\nAnd it's not `(concat ...seqs...)` it's really `(concat page 1 (lazy-seq (concat page2 (lazy-seq (concat page-3...`\nA sequence of concats on 2 args\nyeah, don't do it that way\nbuild a seq of seqs, then apply concat\nbut I don't know in advance how many subsequences I need to fetch\nthat is fine\nI'm not going to load all pages then apply\napply won't load all the pages\nthat defeats the purpose altogether\n`(apply concat s)` forces the first two elements of s (the first two pages) and then the rest will be forced as you walk the seq\nbut in general, lazy-seqs are not the best abstraction for io, which is why in my initial proposal on CLJ-1906 linked above I suggested something that just implements IReduceInit\nexactly how and when pages are forced if you use lazy-seqs will also depend a lot on where/if you put the `(lazy-seq ...)` inside get-page (assuming it has one)\nyeah I am aware of that\nI think I'll read the discussion in that ticket\n<https://ce2144dc-f7c9-4f54-8fb6-7321a4c318db.s3.amazonaws.com/reducers.html> is a thing I wrote a while ago about using reduce for this kind of thing, it talks about reducers which are kind of old news these days, clojure has grown even more reduce related features since then (transducers, the interfaces Reduce and ReduceInit)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1190",
    "text": "i seem to recall that there was a way to inspect or print out the intermediate values of the threading macros...  like an audit or something...  does that ring a bell for anyone?\n`(-&gt; foo (f) (doto println) (g))` is one pattern for a quick hack\n```user=&gt; (-&gt; 42 (+ 10) (doto println) (* 2))\n52\n104```\nHow do I add metadata, this doesn't work:\n```\n(-&gt; (map (fn [x] ^{:a 1} x) [1 2 3])\n    first\n    meta)\n;; ==&gt; nil\n```\nnumbers don't accept metadata, you need a type which supports it\nthe metadata is implemented as a field on the object that has it, if the object doesn't define the field there's nowhere for metadata to go\nit might be more straightforward to use `(fn [x] {:a 1 :val x})` and then use `(map :val)` at the last step, rather than putting the metadata on the thing, you mix the thing in with the metadata\nthe biggest gotcha I can think of is an indefinite lazy-seq where you hold onto a reference to the head\nbut also it's normal for the jvm gc to let your app usage ramp up indefinitely until some limit is hit - you can test this by specifying a lower max usage\nOK, that's normal jvm behavior, it's batching some things for perf reasons\na normal run of a well-behaved app will look like a sawtooth, where garbage slowly accumulates then all goes down at once\ncool. thanks\nso i wonder if i need to keep my maximum steady-state usage to less than the vertical offset of this sawtooth\nor if it\u2019ll clean up before pushing me over the edge\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1191",
    "text": "hey everyone. i noticed that my heap usage according to visualvm has been increasing monotonically since i launched my application in the repl. is there anything going on under the hood that could be contributing to this outside of my application, or do i definitely have a leak somewhere?\nabout 1mb every two seconds or so\noh, weird. it just dropped to about half and started increasing again\ninteresting\nso this isn\u2019t indicative of a problem?\nyeah, that\u2019s exactly what it looks like\ndepends a lot on your app. how much resident memory does the app actually need? how fast does it produce garbage objects? etc. there are a few hundred knobs to turn for GC.\nhmm, ok. are there any resources you could point me to in learning to formulate the right questions to ask here?\nit's a big topic, probably worth doing some googling. I don't have a canonical resource to point you to.\n<@Onita> Folks who are new to the JVM are often shocked by how much memory it takes up but it's a highly tuned platform and its ability to transparently use and release memory is part of what gives it the power it has... In production, we run processes with between 1GB and 4GB max heap typically -- mostly toward the low end of that -- and those are pretty high traffic processes.\n(we have multiple, small services in Clojure now -- previously we had a monolithic web app in a different tech on the JVM and it needed 10-15GB of heap to stay high performance)\ncool, much appreciated\nohhh interesting \nthanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1192",
    "text": "The default GC for the JVM are optimized for performance, not for memory\nEvery GC run, that is, having to loop over objects, identify garbage, and clean it up, takes CPU away from your app\nAnd also will hit your CPU caches and all. Making them cold again for your own computations\nThus what it generally does is wait until absolutely necessary before cleaning up\nSo it'll just let garbage accumulate until you run out of memory\nThat's a typical server workload style. Where it assumes your process is the main thing your OS is running, and thus it's better to maximise all your memory use and trade it for better performance\n<@Onita> This is a good overview of the GC options: <https://dzone.com/articles/choosing-the-right-gc>\nIt's a bit old, so it's leaving out a new GC coming in Java 11 (<https://www.opsian.com/blog/javas-new-zgc-is-very-exciting/>)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1193",
    "text": "What kind of tech did you have on the JVM to run the monolith? A web framework? I am just wondering which stack takes 15 GB to run.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1194",
    "text": "Is there any concept of inheritance ala common lisp CLOS defclass extending another class and fulfilling its type checks of the parent (particularly for multi method dispatch)?  Like, if I have a defrecord Person, and want multi dispatched on class. And want an Employee to extend person defrecord without redundant list of field names in arg vector,  and would like a defmethod foo Person to work on an Employee instance\nno\nCFML. It would run in a lot less, but the best performance was when we cranked the heap up to 15GB, so the GC had plenty of leeway to do its work (we we using the G1 collector so we could minimize pauses and have reliable throughput).\nwhat you are describe is a typical oop type/class hierarchy, which to some degree clojure rejects(while still having to interop with that kind of thing on the java side) as a good way to organize data.\n<https://clojure.org/about/rationale#_object_orientation_is_overrated>\nClojure rejects concrete inheritance\nwhy someone would be inheriting concrete is another question entirely\nwow, Cold Fusion. I remember that framework. It was just before Rails started gaining traction.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1195",
    "text": "These days CFML has both a commercial implementation (Adobe) and an open source implementation (Lucee). It evolved into a JS-like scripting language that compiles-on-demand to JVM bytecode (like Clojure), with a traditional OO model (unlike JS's prototype stuff), and it supports some metaprogramming, closures, map/filter/reduce etc. And it changed from Cold Fusion to ColdFusion some time in the 90's :slightly_smiling_face: I first encountered it when I worked at Macromedia and they bought Allaire (who created it in '95).\nWe migrated piecemeal to Clojure -- I wrote a small CFML library that did some classpath \"magic\" and used Clojure's Java API to `require` and call into arbitrary Clojure code: ```;; Clojure code\n(some.namespace/func arg1 arg2)\n\n// CFML code\nclj.some.namespace.func( arg1, arg2 );``` :slightly_smiling_face:\nThen we rewrote our code from the bottom up, until we had enough built to start spinning off individual Ring/Compojure apps.\nI even have an adapter, written in CFML, that can call Ring handlers written in Clojure, and bridges cookies and session management across the two, so we can rewrite our remaining app one controller method at a time :slightly_smiling_face:\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1196",
    "text": "I know that companies will hire you on the spot for Cold Fusion\u2026 because the talent pool is so tiny.\nThat's how I got hired into my current company -- where I introduced Clojure to replace CFML :slightly_smiling_face:\nis it a good strategy as one grows in their career? Opposed to working for startups just doing full stack dev?\nI'm server side only and I don't like startup / Silicon Valley culture :upside_down_face:\nFront end stuff is just too annoying for an old dog like me to want to put up with!\nohhh believe me too\u2026 JS fatigue is hitting me too. I think JS is driving tons of people nuts.\n<https://dmitripavlutin.com/6-ways-to-declare-javascript-functions/>\n6 ways\u2026 omg wow\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1197",
    "text": "If the lib you need requires concrete inheritance, then you have to do it anyway.  In a specialized domain, you may not have a choice.  And the Java programmers who wrote it are just doing what makes sense in that world.  I personally would rather Clojure was a little more accommodating of this situation, but I accept that this is probably unlikely to change.  (I have fought the `gen-class` and contained it.)\nAh, got it.  Too tired.  Feet stuck in it.\nI like the fact that I can use a class from defrecord as an early guard against invalid inputs to calls I want to make on it, for instance:\n```\n         (defmulti alive? class)\n         (defmethod alive? UnitModel [{:keys [hp]}]\n           (&gt; hp 0))\n```\nBut, if there was any CL CLOS like facility, it would be even nicer if I could have a more specialized call like:\n```\n(defmethod alive? UndeadModel [{:keys [hp]}]\n  (&lt; hp 1))\n```\nto me, its nicer to read a very small specialized/dispatching function, rather than a big case/cond within a defn that has to hold all current and future logic\n`(defn alive? [{:keys [hp]}] (&lt; hp 1))`\nin general, using defrecords purely as data containers is kind of gross, use a map\nI want flip flopped alive logic - if the unit is normal, hp &gt; 0, if its undead, hp less than 1.  If its some future type, like \"plant\", maybe its alive or dead based on which season of the year it is\nI mean I could just use a 'type' key in a map and a case to choose which fn to dispatch to\njust seems odd there is no built in facility to handle it\nyou could do that, and you can use the hierarchy facility to do whatever\n<https://clojure.org/reference/multimethods>\nbut using it is kind of gross and weird, it is very rare to come across\nStarted with a plain map, was attempting to refactor for cleaner code\nbasically, a combo of defrecord / spec and a custom factory fn (`make`) so I can ensure I always have valid state units in game\nI was just hoping to branch it out into MobModel and PlayerModel actually, so I could keep AI logic separate from player specific functionality - in current iteration it is just plain maps and mobs become mob by having the :mob key added to their map\njust seems kind of fast and loose and future error prone (when I have to backtrack through 100 function calls in the future and identify all fields a unit should have)\nspec works much nicer with plain maps vs records\nI am not sure what you mean about back tracking through 100 function calls, if you have a spec that says what should be in a map, you have a spec\nsorry that was under the current iteration where I didn't really bother with it\nyou can insert validation where you want it\nor leave it out, or only validate when running tests, or whatever\nI'm so out of touch -- I know only two ways in JS! :rolling_on_the_floor_laughing:\nA defrecord is simpler than spec if you don't need spec for other reasons.\nThe error is:\n         Execution error (ExceptionInfo) at expound.paths/in-with-kps (paths.cljc:183).\n         Cannot convert path. This can be caused by using conformers to transform values, which is not supported in Expound\nI'm assuming my args have to be wrapped in s/cat or something\nYeah I think you\u2019re correct - you need an \u2018s/cat\u2019 for args \nSo, even with s/cat it works now, with good input\nbut bad map, it just throws that error\nAlso it is better to use namespaces keys\nvs letting me know a bad instrumentation\nnamespaced keys is a lot of work when its user inbound json populating the keys though\nwell, maybe there is a wrapper for namespace keys to/from json\nArticles like that are why I detest JavaScript :upside_down_face: (but I now know a lot more about JS than I did before I read that!).\ni remember looking and flat maps, not terrible, nested ones, bad\nI dunno about the expound stuff, I think I am using it somewhere to get some nicer spec errors in one place, but otherwise I am not familiar with it\nHm, that might be a bug in Expound then related to errors on \u2018fspec\u2019 if this is happening on latest expound. \nafaik, i'm not explicitly calling it explicitly anywhere, unless cider (Emacs) is injecting some call - I am on clojure 1.10\nPerhaps a dependency is using it?\n`(alive? {:hp 30 :name \"Bob\"})` - that call is fine, works alright.  This one: `(alive? {:xhp 30 :name \"Bob\"})` error\n(I saw something similar with return values for fspec, that are keys, so I think it might be expound bug). Feel free to file a bug and I\u2019ll look into it. \nSomething is pulling expound for you, and overwriting specs error reporting with it\nIt\u2019d be best to find what is doing that (maybe look at deps tree to start) but in a pinch you could reset the default printer. I\u2019m on my phone but something like \u2018set! s/*explain-out* s/explain-printer\u2019\nI spent half the day looking for a Javascript function in the codebase\u2026 only to find out that some weird function definition was used\u2026 so ya\u2026 JS is a pain in that regard. I think that\u2019s why so many people love TypeScript.\nty\nI guess that's what I get for running code I didn't fully read yet :slightly_smiling_face: (luminus lein template)\n`(alter-var-root #'s/*explain-out* (constantly expound/printer))`\nAh, yeah, that\u2019ll do it :)\nI was feeling older today too. But a girl cheered me up. She said that us seniors are actually very valuable. The reason we feel like a small group is that the industry is on a 30% growth rate. So you and I started out when the entire workforce was smaller. She pointed out there\u2019s a huge population size skew. My dad always felt like his age was against him. But it\u2019s simply not true. Experience matters a ton in this field. Looking back, I\u2019ve made so many mistakes that only a senior version of me could understand now. For starters\u2026 jumping on a technology too soon only to end up using it for six months. Mostly JS tech stuff that keeps changing.\n<@Donetta> do you have expound 7.2 as a dep?\nI looked closer at that code and now I\u2019m not so sure why you\u2019re getting that error. Just curious if you happen to have an earlier version. \nIt was 7.1, a definite PEBKAC error (I altered the templated clojure version from 1.9 to 1.10 and nothing else) :disappointed: 7.2 does seem to fix it, thanks again!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1198",
    "text": "What am I screwing up on the spec here?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1199",
    "text": "can't you do that with hierarchies?\nFor dispatching, you may have fun with polymethods and dispatching off of `s/valid?` or whatever <https://github.com/johnmn3/dispacio#spec-validation-dispatch>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1200",
    "text": "just roll your own version of component, it's very easy, focusing just on getting a minimal system map. i've found it useful in all my projects. it helps things not to get out of hand, and makes testing simpler\nbut as with anything, try it out, and see if it helps you\nyou probably can't just rely on people's opinions, because like this thread, some people will say don't use them, others will swear by them. :slightly_smiling_face:\nat the moment I'm defining `start` and `stop` functions in a top level namespace, and putting stuff like my http server into atoms using `defonce`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1201",
    "text": "it seems to work\nIf I have a clj-time date-time (which is UTC), say `(date-time 2019 4 18 12 0 0)`, but I want it to become the same date in Europe/Amsterdam, ie, it should be:\n`2019-04-18T12:00:00.000+02:00`, how do I do that\nie. i don\u2019t want it to shift hours, ie. I _don\u2019t_ want to end up with `2019-04-18T14:00:00.000+02:00`\n<https://www.joda.org/joda-time/userguide.html#Changing_TimeZone>\naah no it\u2019s this: `(.withZoneRetainFields input-date (DateTimeZone/forID \"Europe/Amsterdam\"))`\nthanks <@Jolanda>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1202",
    "text": "but I guess you have to start and stop them in a particular order, right?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1203",
    "text": "I suppose so. Isn't that built into the order I evaluate the start functions?\nI can see where there'd be a tipping point in system size, and it's just simpler to define integrant keys\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1204",
    "text": "Who here uses <https://github.com/cognitect-labs/transcriptor> in anger?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1205",
    "text": "```(meta ((fn [x] ^{:k 9} x) {:a 1})) ;; ==&gt; nil \n(meta ^{:k 9} {:a 1})              ;; ==&gt; {:k 9} \n(-&gt; {:a 1} ^{:k 9} meta)           ;; ==&gt; nil\n```\nthe `^` syntax is applied *at read time* to the next read form\n`(-&gt; {:a 1} ^{:k 9})` will throw a read error meaning you are putting it on the meta form\nso in the first line, it's applied to the symbol x, which is not going to be ignored when compiling the fn.\nin the second line, it's  applied to the literal map `{:a 1}`\nin the third line, it's applied to the symbol `meta`, where it won't do anything\nif you want to apply metadata to things at runtime, it's better to use `with-meta`\n```(meta ((fn [x] (with-meta x {:k 9})) {:a 1}))  ;; ==&gt; {:k 9}\n(meta (with-meta {:a 1} {:k 9}))               ;; ==&gt; {:k 9}\n(-&gt; {:a 1} (with-meta {:k 9}) meta)            ;; ==&gt; {:k 9}```\nthis throws a read error because there is no \"next\" form to apply it to\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1206",
    "text": "okay...thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1207",
    "text": "Are there any weird gotchas I need to know if I'm combining `clojure.core.async` code with promises?\ndon't\nare you talking about clojurescript and js promises?\nNo, JVM clojure and Java Promises\nI want to combine async code with http-kit because I had problems with Java blocking IO hanging\nwell, java doesn't have promises (at least not in the jdk)\nif you are having trouble with blocking io, switch to non-blocking is only going to make your io problem harder to debug\nThe information I've found seems to imply that the trouble with blocking IO is inherent to blocking IO, an unreliability in linux's blocking select call, and that async IO will react to that unreliability better\n<@Yuri> a Clojure promise is just a container that starts empty and can only have a value assigned once - it's hypothetically useful to communicate between async operations, but has very few features\nand really a channel is a better fit if using core.async\nclojure's promise is built around blocking (it blocks execution when deref'ed) so while combining it with core.async is possible (and core.async uses them under the hood here and there), in general you pickup core.async because you don't want threads to hang around blocked which is at odds with promises\nwaiting on a promise can introduce the kind of deadlock core.async is designed to eliminate\nYeah, so no derefing in a go block\nGot it\na go block using channels is a much nicer alternative to js promise chaining, with the same semantics (each channel read or write in a go block is conceptually equivalent to a `.then` invocation)\nYeah, but the pure core.async HTTP client implementations are a tad barebones? Maybe a little immature\nyou might want to look at aleph, which is dedicated to nonblocking IO with an abstraction that's very similar to core.async channels\n<https://github.com/ztellman/aleph>\nOh, cool\naleph uses manifold, which integrates directly with core.async as well\nNice, that works perfectly\nI ran into it when looking at web servers, but glossed over that it integrates with core.async\ncognitect's aws-api library make's use of cognitect http client library which seems to have a core.async interface which I haven't been able to find the source for, but seems to be get'able from maven, and appears to be apache licensed\n<https://mvnrepository.com/artifact/com.cognitect/http-client/0.1.87> <https://github.com/cognitect-labs/aws-api/blob/master/src/cognitect/aws/client/api.clj#L9>\nI think it is closed source\nI think this was mentioned in the talk\nah, I haven't seen the talk\nwhat <@Rosaline> said is true\nit is not closed source\nso if you felt adventurous you could grab that library and make some wild guesses at how to use it\nThat sounds very interesting, but somewhat fraught\nthere are a few limitations of the cognitect http-client (streaming support being the largest one)\nwe're thinking about whether/how to support that for aws-api\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1208",
    "text": "Very nice, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1209",
    "text": "i thought java defaulted strings beginning with a zero to base 8 when parsing? ie, `(Integer/parseInt \"09\")` should throw?\nis that cljs or am i just confused?\nthat's for literals in source code, not parsing\nyes just remembered that's a read-string and literal issue. thanks <@Dann>\nthe `Integer/decode` method can do  this\nalso since clojure defaults to longs, I almost always use Long/parseLong for such use cases\nwas about to ask a question :slightly_smiling_face:\njust making sure parseInt wasn't a footgun with radix\nyeah, that one assumes you know the radix\n```=&gt; (Long/parseLong \"100\" 32)\n1024\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1210",
    "text": "for those that use `clojurewerkz.elastisch`, my team recently moved from elasticsearch `5.6` to `6.4` and a majority of the functions broke, but were fixed by passing in `{:content-type :json}` when calling `clojurewerkz.elastisch.rest.connect` i.e. ```(esr/connect host {:content-type :json})```\nApparently `clojurewerkz.elastisch.rest.document.scroll-seq` had a similar issue but i eventually fixed it by actually just copying the `scroll` and `scroll-seq` function from their github and just pasting it into the same .clj file\nSince `scroll-seq` returns a lazy sequence i think there's some weirdness with *fully* evaluating the rest calls which causes the `content-type` to be lost since the exception i was getting indicated a json parser error\ni verify this by doing a `(take 5 (esd/scroll-seq ...`\nfigure i share in case some else out in the clojure community is also using the `clojurewerkz.elastisch` library and `scroll-seq`\n<@Malik> I know of Daniel Compton's at <https://www.therepl.net/> and Eric Normand's at <https://purelyfunctional.tv/newsletter/>\nthose are the two I know of as well\nI should have mentioned that bit\nthanks for sharing them, though\nI post every week at <https://insideclojure.org> \noh, cool\noh, cool, I own both of your books\nI haven't _read_ both of your books, but I did buy them, and intend to\nI setup an IFTTT to email me when there are updates. thanks!\nI only ask that you buy them :)\nha!\nI actually bought programming clojure twice. once on pragprog and once on the kindle (you have to buy it as a kindle book to get syncing between devices)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1211",
    "text": "does anyone know of a good clojure newsletter? like elixir weekly, ruby weekly, golang weekly (I'm noticing a pattern here)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1212",
    "text": "I have all three editions of Programming Clojure :slightly_smiling_face: And Clojure Applied and Getting Clojure, both editions of Clojure In Action and both of The Joy Of Clojure, also Clojure Cookbook and Clojure Programming. All in PDF, sync'd to every device I own via Dropbox. And in OneDrive I have three Clojure books from Packt (not a very good publisher, IMO) and Zach Tellman's Elements Of Clojure. And I'm _still_ missing some!\nCarin Meier's Living Clojure is noticeably absent. What else?\nProfessional Clojure is absent, although don't know about \"notably\"\nAh, who publishes that?\nWrox\nAh... not a publisher I look at very often... isn't it part of O'Reilly these days?\n(mind you, Packt is _also_ part of O'Reilly now I think?)\nI have no idea\nOh. You're one of the authors! 'grats! Writing a book is a major achievement! (I've started three and never got past the outline)\nThanks! I would have never finished, except it went down like, \"hey want to write about Datomic in our Clojure book?\" \"Great, I'm in!\" \"Ok you have a month\"\nHahaha... yeah, writing schedules are why I've never gotten further than the outline and those early discussions with publishers...\nIt was fun to write. Although everything else was misery\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1213",
    "text": "i don't know about in anger, but i've tried it a bit.  i think <@Andrea> has too: <https://oli.me.uk/2017/10/06/an-introduction-to-transcriptor/>\n<@Celestine> how was the Elements of Clojure for you?\nYep, not in anger though either :blush: I wrote a lein plugin for it and found it interesting. I think a regular test suite still does it for me but it might suit others better!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1214",
    "text": "I'm using ```(defn foo\n  [y z]\n  (let [x (some-long-operation y)] (map #(+ x %) z)))``` as a way to force eval the `some-long-operation` function. Are there any other ways of forcing the evaluation of the form inside the # macro?\nIn order to keep the structure something like this ```(defn foo\n  [y z]\n  (map #(+ x (some-long-operation y)) z))```\n```\n(defn foo\n  [y z]\n  (map (partial + (some-long-operation y)) z))\n```\n<@Setsuko> That was my understanding. The partial should do that for you. But your first piece of code works as well.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1215",
    "text": "`(doall (some-long-operation  y))` will force evaluation of the lazy-seq, your original version doesn't actually force anything\n```=&gt; (let [foo (map println (range))] nil)\nnil\n```\ngot it, thanks for the suggestions!\nand by force I guess I meant executes only once :slightly_smiling_face:\nI'm not sure, but one suspicion I have here is the usage of spec. My vague understanding is that it's not optimized for performance, and the intended usage is to use it during development / testing and turn it off for production code.\nI think you could write a much more efficient data validator by hand (or use a less featureful and more performance oriented validation library)\nAlso, core.async is great for coordinating tasks, but I don't think it's the most performant option here either. If the goal is parallelization rather than coordination, you'll get much better throughput with ExecutorService or a wrapper like claypoole.\n<https://github.com/TheClimateCorporation/claypoole>\nI'm looking for a `proxy [java.io.Writer]` that I can bind to `*out*`, such that concurrent threads `println`ing to it won't cause jumbled output\n\n...might be super easy to implement, but who knows, maybe an existing solution covers some edge cases, has unit tests etc ^^\nThanks for the feedback\nor just use a real logging library\nI cannot mutate arbitrary libraries to use my logging library. They use `println`\nI'll see if swapping out claypoole for parallelization helps\nlife is too short for bad dependencies\nI have used claypoole successfully in a handful of projs. Here's a self-contained example of how I tend to use it (eagerly partition the work to match cores + distribute the workload evenly)\n\n<https://github.com/clojure-emacs/refactor-nrepl/pull/247/files>\nalso, if throughput is bottlenecked by IO rather than CPU (which is very possible here), limiting by cores is probably a mistake\nI am not sure that is solvable by binding *out*\nYeah I guess if IO is the bottleneck it will slow down both implementations\nyou might try making a /dev/null variant for both - that might give a better idea of the language perf difference if IO dominates the task\nor perhaps the message here is \"if IO dominates the task time, just pick any language you like\"\ngood point\na binding of *out* can only see when `.write` is called on itself, which doesn't tell it when a logical unit of output is complete from one thread\nI'll give it a think. Given this stub:\n\n```\n(proxy [java.io.Writer] []\n    (append [&amp; _])\n    (close [])\n    (flush [])\n    (write [&amp; _]))\n```\n\n...`close` cleanly delimits the end of a message. And `(Thread/currentThread)` delimits the concurrent parts\nscratch that\nyeah, no one every calls .close on `*out*`\nMaybe `flush` then. And I'd manually bind `*flush-on-newline* true` to ensure flush is invoked at the end of a message\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1216",
    "text": "oh, in clojure I've only heard \"force\" mean making sure a lazy seq is realized at a specific code boundary, I've never seen it used as a synonym for cache or reuse\nI really like it -- because it tackles topics that a lot of books don't cover. Some of it was \"old news\" but it was deep and thought-provoking, for the most part.\nxpost from <#C053AK3F9|beginners> for a broader audience: I tried a simple ETL pipeline in Clojure and Python to get a sense of pros/cons of implementing in both languages. I was surprised that Clojure wasn't much faster and only marginally shorter. Any thoughts why? <https://github.com/andharris/pipeline>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1217",
    "text": "The I/O possibility occurred to me too, but I notice that in the original Grammarly post they show all 4 cores maxed out, so I figured it probably wasn't that.\nI hadn't noticed the use of spec (I only looked at the Grammarly version) but that seems like a real possibility too. I'd definitely be curious to see whether swapping the `spec/valid` calls for a simple hand-written validator would make a big difference (and that could be one place where type hints would make a difference).\nOr just comment out the `filter` line and see how much difference that makes.\norder of magnitude difference for a simple case ```(cmd)user=&gt; (s/def ::foo int)\n:user/foo\n(ins)user=&gt; (time (dotimes [_ 1000000] (int? 1)))\n\"Elapsed time: 11.172124 msecs\"\nnil\n(ins)user=&gt; (time (dotimes [_ 1000000] (s/valid? ::foo 1)))\n\"Elapsed time: 123.692794 msecs\"\nnil\n```\nto be fair, that int? check might be friendlier to inlining by hotspot than the actual code checking your data format\nI want to do aot but there's one function call that I'd like to not run during the aot compilation. Without skipping aot on the whole class, can I use some variable to know if clojure is compiling?\n```user=&gt; (doc *compile-files*)\n-------------------------\nclojure.core/*compile-files*\n  Set to true when compiling files, false otherwise.\nnil\n```\nit's good practice to put nothing with side effects on the top level of your code\n(delay can be helpful for this - you can create a delay globally but only evaluate it once it's forced)\n~that's idiomatic~ -- it's actually not, that's my mistake\nah good point, yes, it's a graal app that I'm working on, and it needs to start making native calls, but the pointers must be created at runtime\nworks! thanks <@Dann> :slightly_smiling_face:\n```(ins)user=&gt; (s/def ::foo int?)\n:user/foo\n(cmd)user=&gt; (time (dotimes [_ 1000000] (s/valid? ::foo 1)))\n\"Elapsed time: 88.051523 msecs\"\nnil\n```\nyou can always not aot compile too\nThe interesting thing to me is that I use a pretty heavy handed approach to schema validation in the python implementation too. I'm surprised spec adds this much overhead, but I must have a misunderstanding of it's intended use. I was assuming this was the exact use case for spec\njust because spec is 8 times slower doesn't mean it's a bottleneck in this case - it's a good idea to profile for stuff like this\nand I could be wrong about it's intended use case, I'm not a spec expert, I've heard the truism \"don't use it in hot loops, only use it at boundaries\" but really this code is both a hot loop and a boundary\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1218",
    "text": "the s/def uses int instead of int?\noh, graal, meh\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1219",
    "text": "Tested without validation and it doesn't have a material impact, so not the bottleneck. Time for me to learn how to profile a Clojure program.\n&gt; doesn't have a material impact\nmaybe that's not fair. it has an impact but doesn't seem to be a primary bottleneck. Really just seems like it will need some profiling to really understand\nyou can use a standard java profiler, visualvm (sometimes known as jvisualvm) is free, yourkit gives full licenses for use on open source projects\nthere's an art to translating from the vm level stuff (designed to map more or less directly to java classes) when profiling clojure (classes made via weird generated bytecode from a handwritten compiler)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1220",
    "text": "pmap doesn't do any parallelization below 512 elements, is that right?\nstarting to doubt that but remember something cares about 512\nreducers\nthanks so much! that was bothering me :slightly_smiling_face:\npmap is parallel over 2+# processors\n[ANN] Cognitect Labs' aws-api 0.8.301 <https://groups.google.com/forum/#!topic/clojure/TXxEx-2OV2s>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1221",
    "text": "Sotnikov's Web Development with Clojure. I think it is a great 1.5th or 2nd Clojure book to get people to \"hello http\"\nQuick Clojure is a good one for when I've spent some time away from the language and I need a reminder.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1222",
    "text": "Is there such a thing as a \"lazy set\" collection in Clojure?\nI'm imagining something with constant-time `contains?` lookup for items that have already been realized, but which lazily defers additional elements which are not yet needed\n```\n(def primes\n  (lazy-set (filter prime? (range 10000))))\n\n;; Only computes as many elements as needed until a match is found\n(contains? all-primes 7) ;; =&gt; true\n\n;; constant-time, because `3` has already been found in the set\n(contains? all-primes 3) ;; =&gt; true\n\n;; Forces evaluation of the entire collection to ensure an item does *not* exist in the set\n(contains? all-primes 6) ;; =&gt; false\n```\n<@Loria> ```\n(defn make-lazy-predicate\n  [coll]\n  (let [state (atom {:mem #{} :unknown coll})\n        update-state (fn [{:keys [mem unknown] :as state} item]\n                       (let [[just-checked remainder]\n                             (split-with #(&lt;= % item) unknown)]\n                         (if (seq just-checked)\n                           (-&gt; state\n                               (assoc :mem (apply conj mem just-checked))\n                               (assoc :unknown remainder))\n                           state)))]\n    (fn [item]\n      (let [next-value (first (:unknown @state))]\n        (get-in (if (or (nil? next-value)\n                        (&lt; item next-value))\n                  @state\n                  (swap! state update-state item))\n                [:mem item])))))\n\n(def lazy-even? (make-lazy-predicate \n                  (filter (fn [n] \n                            (Thread/sleep 100) \n                            (even? n)) \n                          (iterate inc 0))))\n```\nHowever, if coll\\\\seq is not infinite, predicate returns false when value is out of range.\nCan be modified to throw exception on `(nil? next-value)` if you need that.\nWow, thanks! I'll study that code and see if it can be modified for my needs :slightly_smiling_face: Creating a lexically bound atom in a closure like that is definitely something new to me\nFWIW I recently did a bunch of profiling and discovered some unexpected changes in the free Java tools.\n- jvisualvm was changed to jmc (Java Mission Control) as of Java 8\n- jmc is also available in Java 9\n- in Java 10 to 12 there is no jmc in the jdk\n\njmc was spun out by Oracle as an open source project as of Java 10 but has not been released yet. They're trying to get jmc 7 done but it's not there yet. You can build it from sources, and I did that and it seems to work. But the simpler thing is to use Java 8/9 for profiling until jmc 7 is released.\n\nIt doesn't work to use the Java 8/9 jmc on JFR files generated by later releases of Java, the format is incompatible.\ngood luck :i_love_you_hand_sign:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1223",
    "text": "Hello! Using `clojure.xml`, how do I output XML with double quotes, not single ones? (e.g. `&lt;foo bar=\"123\"&gt;&lt;/foo&gt;` not `&lt;foo bar='123'&gt;&lt;/foo&gt;`)?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1224",
    "text": "Hello. Can you give me some examples of clean functions, that can be tail or non-tail recursive and made stackoverflow and/or calculated long time (better both of these) without memoization? I wanna test something.\nwith arguments on which it occurs\n<@Nieves> it's e.g. ```user=&gt; (defn boom1 [] (loop [] (recur)))\n#'user/boom1\nuser=&gt; (boom1)\n```\nbut what do you mean \"clean\" functions?\nwhat about without jokes?\nsomething like\n```\n(defn coin-change [s coins]\n  (cond (= s 0) 1\n        (or (&lt; s 0) (empty? coins)) 0\n        :else (+\n                  (coin-change s (rest coins))\n                  (coin-change (- s (first coins)) coins))))\n(coin-change 10000  '(1 5 10 25 50))\n```\n<@Nieves> w/o jokes, I clearly remember one first videos on `core.typed` has given example of functions which give StackOverflow. Only I can't find that video now :disappointed:\nah, here it is: <https://youtu.be/a0gT0syAXsY?t=15>\nthanks, I'l see\nit seems that video explains an example of SO cause of error in code, but not correct function with limited Java stack, like my example above\n<@Nieves> Fibonacci is a good example of that. It can be written recursively with or without tail recursion.\nWithout tail recursion:\n\n```\n(defn fib [n]\n (if (&lt;= n 1)\n  n\n  (+\n   (fib (- n 1))\n   (fib (- n 2)))))\n```\n\nWith tail recursion:\n\n```\n(defn fib [n]\n (loop [n n a 0 b 1]\n  (cond\n   (= n 0)\n   a\n   (= n 1)\n   b\n   :else\n   (recur\n    (- n 1)\n    b\n    (+ a b)))))   \n```\n\n<@Nieves>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1225",
    "text": "I have a Clojure process that's not exiting despite me calling `shutdown-agents` \u2014 what else might I be missing here?\n<@Cira> check what threads are running on it by calling jstack on the pid. You might have another naughty thread that isn't the agent executors\nThere are programmatic ways of enumerating the running threads, too\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1226",
    "text": "so maybe there is another Cllojure messenger where I can ask my question? can anyone suggest?\nis there a built in function/macro that takes a set of symbols and returns a map with keys that mirror the symbol and value being the value behind the symbol. for example `(let [a 1 b 2] (toMap a b))` -&gt; `{:a 1 :b 2}`\nno\nthere was a clojureverse discussion on this which included at least one implementation\ni think its a great idea by the way\n<https://clojureverse.org/t/shortand-clojure-syntax-for-properties-on-hashmaps/1918/24>\nit's one of the few things I like in JS lol\nis it save to use persistent vector reference from which transient one was created?\nYes, `(transient my-var)` creates a transient version of the original var without changing the original one\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1227",
    "text": "<@Madeleine> thanks. But even exponential recursive Fibonacci can not fall in SO, cause universe is died before :slightly_smiling_face: And iterative one is a simply tail-recursive.\nI wanna test my SO-problem solver I write in Clojure. I just want more test cases, for make me sure. Cause all tests I can create are passed :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1228",
    "text": "Hello All!\nI'm using clj-jade to render a Jade template, passing an array as parameter: `(jade/render \"index.jade\" {\"param1\" [1 2 3]})`\nMy friend is using Pug.js, and can do `param1.length` to get the size of the array, but it doesn't work when using clj-jade.\nHow can I extent `clojure.lang.PersistentVector` to add a static field `length` that will be initialized when the vector is created?\nYou should not want to do this\nVectors implement Java Collection which has a size method and Clojure collections which have a count function.\n<@Jasmine> Yes, size method works fine in clj-jade.\nHum, I'm not sure what you mean then. Just remove the loop/recur and instead call the function back and the tail recursive one will SO.\n```\n(defn fib [n a b]\n (cond\n  (= n 0)\n  a\n  (= n 1)\n  b\n  :else\n  (fib\n   (- n 1\n   b\n   (+ a b)))))\n```\n```\n(fib 100 0 1)\n```\n\nThat will SO\nOk. I write a function, that evaluates any function on any arguments without SO and I want to test it. You write a trivial example, that evaluates also. But it can be evaluated also with recur or trampoline, in opposite with my example above. I hoped in more complex examples &amp; cases to test\nOh I see. So you're trying to implement real tail call optimization?\nAs far as I know, there's nothing that can't be done with loop/recur and trampoline.\nNo :slightly_smiling_face: Real TCO is a trivial task on trampolines. I implement ANY CO, not only tail. See again my example - it is not tail call\nAnd if you think that any can be evaluated with trampolines, can you show it on my example coin-change?\nHum... You mean for algorithms that actually need a stack? You convert them so they don't SO?\nYes\nAh I see, cool\nSo you re-write them so their stack is allocated on the heap?\nYes. With an optional memoization and by adding of only some chars in function code&amp;\nYou know that you can use the `-Xss` jvm option to increase the stack size limit in Java?\nJust mentioning it, I still think what you're doing sound cool.\nI think reversing a list is a good example\nYes. I played with it, but max Xss more less than heap\nTrue, a function stack contains a lot of additional data that arn't necessarily relevant to the algorithm, so using the fn stack is always more memory hungry\nAnd increase default thread stack in Java is not a good idea - a lot of threads will break the heap\nreversing list is also a tco )\nin realization with accumulator I mean\nbut you are right - it can be non tail call implementation\nYa, but I often see it done without tco\nAnd the non tco is much more readable and logical in my opinion.\n```\n(defn bar [n] (if (= 0 n) 0 (+ n (bar (- n 1)))))\n.......\n(time (eval-cs bar 100000))\n\"Elapsed time: 675.22869 msecs\"\n5000050000\n```\nsuch trivial examples works fine, as I mentioned\nYa, sorry, I very rarely implemented an algorithm that absolutely needed a stack. So I can't think of anything right now.\nThanks anyway! I just slightly glad about my rezult and want to test and tell about it for anybody )\nYa, if you make it open source, I'll definitely keep it in mind, if one day I have this problem. Its not a problem I have often, but I'm sure if I did, I would love to find a library like the one you're making.\nThanks. I have to make it slightly pretty-organized, and then I'l open it. But to be honest I'm disappointed a little, that it did not interested anyone exept you )\nGooooood point - I'l try Akkermann now\nI believe it's theoretically proven that it cannot be reduced to a form which doesn't involve the stack\nYes, it is not a primitive recursion. Give me some minutes to test )\nthere you go :slightly_smiling_face:\n```\n(defn ack [m n]\n  (cond\n    (zero? m) (inc n)\n    (zero? n) (ack (dec m) 1)\n    :else     (ack (dec m) (ack m (dec n)))))\n```\nOk, thanks for sharing )\nLooks like it not working by directly using my method. But I'l try to modify it! Thanks again :slightly_smiling_face:\nI think QuickSort might be another one where you can't get rid of the stack.\nYeah it\u2019s about seqs, but a seq will always be bound to a var?..\nCan you show the exact code example for source?\nNaive QuickSort I mean. Or it like not real QS as Haskell examples everywhere? )\n:stuck_out_tongue_closed_eyes: I'm afraid I'm not smart enough at this moment to put it together.\nThanks again. I'l say the results about Ack and QS in a time.\nPeople, I have two questions:\nIt works :slightly_smiling_face:\n```\n(time (eval-cs ack 3 14))\n\"Elapsed time: 1991.828241 msecs\"\n131069\n(time (eval-cs ack 4 1))\n\"Elapsed time: 853.480078 msecs\"\n65533\n```\nBut I was needed to slightly tweak an algorythm\nNow I'l try to find QS code your mean\n:thumbsup:\n<@Jerome> seq are collections which support the `first`, `next`, and `more` fns. While collections only support `count` and `empty` and `=`.\nSee: <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/ISeq.java> and <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/IPersistentCollection.java>\nAlso more relevant to Clojure, functions that work over seq takes the seq as the last argument, while those that work over coll (that aren't seq) take it as the first argument.\n<http://insideclojure.org/2015/01/02/sequences/>\n<http://insideclojure.org/2016/03/16/collections/>\n^^ those might be helpful\n\"QS\" also works w/o SO, but very (!) unefficient :slightly_smiling_face:\n```\n(defn qs [l]\n  (if (empty? l)\n    []\n    (let [[p &amp; xs] l]\n      (concat\n       (qs (filter #(&lt; % p) xs))\n       (list p)\n       (qs (filter #(&gt;= % p) xs))))))\n.............\n(time (eval-cs qs (-&gt;&gt; 10000 range reverse)))\n\"Elapsed time: 51633.130523 msecs\"\n[0 1 2 3 4 5 6 7 8 9 10 11 ..........\n```\nSure, but in the context of transients they\u2019re used identically? Just `(transient ...)` to create a transient version\nAnd that\u2019s the same for seqs and collections\n*treated vs. used\nI\u2019ve also just gotten into the colloquial habit of referring to a lot of things as seqs even if they aren\u2019t technically...\nWhich is maybe worth breaking\n<@Jerome> see, transient wants implementation of IEditableCollection interface as its input, only few collections implement that interface\n<https://gyazo.com/23105ead02ad141f14e8243c3e17ea17.png>\n<https://gyazo.com/dac646e544a72b82a5f02dd45289a832.png>\nanyway i found the answer in Emerick's book\nYeah, you\u2019re right. I\u2019ve gotten in the bad habit of just referring to anything I can call `seq` on as a seq, which is incorrect \nBut my original answer is correct I believe\nanswer to my question was, 'yes'\nIf you pass a collection to `transient`, you can still safely use the original reference\nRight\nright\n:smiley:\n:+1:\nThat would be terrible if you couldn\u2019t!\nyeah, transients is a bit tricky to understand at first\nbut thanks to awesome clojure design it's all uniform\n<https://gyazo.com/8c6e5901537e02c95073ef290956eb64.png>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1229",
    "text": "What about non primitive-recursive functions like the Ackermann function?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1230",
    "text": "<@Jerome> but transient is not about vars :smiley:\nLooks like generally its optimized by putting it on the heap and doing it iteratively.\nits about collections\nHow is a collection different from a seq?\nsequence is abstraction\nSure\nSo anyway I have to made a research with Akkermann\nwell collection too, nvm\nhowever they are different entities in terms of implementation\nGood luck 1\n!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1231",
    "text": "- who is using the Clojure client, for Kubernetes?\n- which ZeroMQ bindings are used?\nso two questions, the scopes of those are unrelated to each other\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1232",
    "text": "People of Clojure, I have a question. I read somewhere that it's possible to connect Clojure REPL to java app in debug mode. Did Anybody try that? Could you please share your experience/links here ? I saw one repo in GitHub, but it's more than 5 years old. It would be nice to have a modern way of doing that.\nIs there a way to force *use-context-classloader* false for an Uberjar?\naxiom-dom.jar won't load because it expects to classload /META-INFO/axiom.xml\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1233",
    "text": "is there a way to get the \"next\" item of an item in a sorted map?\n<@Roberto> what kind of items do you store in the sorted map?\na record type\nbut I have found another way to implement what I want\nessentially I need to keep an index which  will allow traversing the collection one at a time\nand I just found out .indexOf is implemented for vectors, therefore I can use a vector instead of a sorted map and just play with the index\n<@Roberto> drop over seq of map doesn't work for you?\nthe use case is following: the keys are strings (the filename), the values are record types, and I need to iterate over the sortedmap (either by keeping the index, but this does not exist in a map, or by keeping the key)\ni'm not an expert, i think we can split sequence by take-while \\\\ drop-while so effectively next item will be the first element of drop-while sequence\n<@Roberto> ```\n(def my-map (sorted-map \"e\" 5 \"d\" 4 \"c\" 3 \"b\" 2 \"a\" 1))\n\n(defn create-iterator\n  [coll]\n  (let [state (atom (seq coll))\n        update-state (fn [state] (swap! state rest))]\n    (fn []\n      (let [item (first @state)]\n        (update-state state)\n        item))))\n\n\n(def my-iterator (create-iterator my-map))\n\n;;=&gt; #'junk.core/my-map\n;;=&gt; #'junk.core/create-iterator\n;;=&gt; #'junk.core/my-iterator\n;;(my-iterator)\n;;=&gt; [\"a\" 1]\n;;(my-iterator)\n;;=&gt; [\"b\" 2]\n;;(my-iterator)\n;;=&gt; [\"c\" 3]\n;;(my-iterator)\n;;=&gt; [\"d\" 4]\n;;(my-iterator)\n;;=&gt; [\"e\" 5]\n;;(my-iterator)\n;;=&gt; nil\n```\nmust be thread safe\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1234",
    "text": "I wonder if it's possible to implement the functions \"loeb\" and \"moeb\" in Clojure? <https://github.com/quchen/articles/blob/master/loeb-moeb.md>\njust out of curiosity, I tried playing around with `lazy-seq` and memoization but couldn't get it to behave lazy enough to actually evaluate\nhere's a (non-working) translation of the Haskell code\n```\n(defn loeb [fs]\n  (lazy-seq\n    (map (fn [f]\n           (f (loeb fs)))\n      fs)))\n\n(loeb\n  [(constantly 1)\n   #(inc (second %))\n   #(inc (first %))])\n;; should=&gt; (1 3 2)\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1235",
    "text": "Hi, does anyone have good solution to a fast reset-able timeout. I'm already using core.async, but I'm thinking about a classical problem of making a action _foo_ depending on the last time action _bar_ was called, but action _bar_ could be called dozen or hundred times a second and so performance matters a bit.\nare you saying you only want the reaction to be run once every x interval, even if the trigger is fired n number of times within the interval?\n<@Meagan> think of it a bit like idle counter, last time there was an interaction then fire the action once (screen saver for example)\nI'm thinking now of timeout in an atom and close! it every time there's an action (and replace it with a new timeout)\nI can't tell if you're saying no, my interpretation is wrong, or yes, my interpretation is right\nI _think_ you're talking about debouncing\n:slightly_smiling_face: that could be\nin which case there's this simple CLJS example:\n<https://gist.github.com/swannodette/5888989>\nthere's probably a simpler way, without core.async\nthanks, exactly what I need!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1236",
    "text": "How can I \"subclass\" a lazy sequence to extend a custom protocol?\nsimilar to `defrecord` for maps\nie. I don't want all `clojure.lang.Sequential` or such to support the protocol, but only a custom type which should still remain compatible with all library functions\nIf you want to see a sources, I just published a link on github in announcements\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1237",
    "text": "<@Roselia> thanks, but I need to go both ways, forward and backward (it's essentially scrolling though a file list). it needs to be fast. i started with a sorted map, because I wanted to also have fast access by filename. i am now using a vector instead, which works, but does not have fast access by filename\na combination of sorted-map with vector would probably work, I was just trying to use only sorted-map, but I guess I need something like LinkedHashMap\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1238",
    "text": "you could perhaps extend a particular sequence to your custom protocols via metadata\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1239",
    "text": "There is <https://github.com/frankiesardo/linked> although I haven't tried it.\n\nI would probably maintain both a vector and a hash map, if both types of access must be extremely fast and the list is largish.\n\nAnother approach is to just use a vector in name order, and do a binary search within the vector when doing a name lookup.\nOh! I didn't know you could extend protocols using metadata, looks like a new thing in 1.10\n<@Otelia> just checked it, doesnt allow for previous\\next node navigation\nA vector seems like the best choice, if binary search is fast enough for you.\nIf you're using Clojure on the JVM you can use Java's binary search:\n```\n(java.util.Collections/binarySearch [\"a\" \"b\" \"c\"] \"b\")\n=&gt; 1\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1240",
    "text": "i'm trying to calculate a per-frame movement factor for a cursor i'm drawing  For example I have\n```(defn next-pointer\n  \"Moves the pointer, taking to account speed\"\n  [{:keys [x y direction speed active] :as pointer} frame fps]\n  (let [[dx dy] direction\n        norm-time (mod frame fps)\n        d-pixels (if (zero? norm-time)\n                   speed\n                   0)]\n    (assoc pointer\n           :x (+ x (* dx d-pixels))\n           :y (+ y (* dy d-pixels)))))\n```\nIn this example, there's a speed of the format `pixels/second`.  I want to determine at each frame by what factor I should increase x.  My first approach was to determine the position of x at an origin, but due to adding to the x, it became more of an acceleration.  In this case, I kind of lazily just get the next speed only when I'm at a \"second\" which is hardly smooth.  The missing piece is the other part of that if.  I've tried making `norm-time (/ (rem frame fps) fps)` to see if that would help, but it gives me kind of a stepping movement.  I'm always bad at factoring time in my drawing apps, is there a missing link I'm not seeing\ndirection is simply a unit vector so it's either 0 1 or -1 for any element in the vector\nhere's some more code for context <https://github.com/dantheobserver/drawing-experiments/blob/master/src/experiments/12_pixel_paintbrush.clj>\nI guess I need to keep track of dt\nthat seemd to be it, I just had to pass in dt, and keep it updated each frame\n```(defn next-pointer\n  \"Moves the pointer, taking to account speed\"\n  [{:keys [x y direction speed active] :as pointer} dt]\n  (let [[dx dy] direction\n        d-pixels (* speed dt)\n        next-x (+ x (* dx d-pixels))\n        next-y (+ y (* dy d-pixels))]\n    (assoc pointer\n           :x next-x\n           :y next-y)))\n```\nHaha, dedication is actually something I found in a tweet for pico8, I wanted to disect it and replicate it in clojure2d, to little success.  Need to find the tweet to show it.\nI try to translate as much to something \"relatable\" so I don't have to do guesswork or adding magic numbers to get movevement down.  But most of it I'm trying to work my way into understanding without looking at formal graphics programming info.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1241",
    "text": "Thanks got posting this. I was dozing off in front of an Elixir tutorial when I saw this and it woke me up.\n\nDownloaded your experiments and went through them, getting acquainted with clojure2d. I'll certainly have to show 07_dedication.clj to a cat (actual feline) I know.\n\nIt seems like some complexity with this speed thing can be removed. In my doodles, I typically express the speed in the number of pixels x/y it will change each frame. Then the distance it will travel each second is dependent on the frame rate, which is actually an effect I'd want as if I was changing the speed of a projector.\nYa. I have speed and direction combined.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1242",
    "text": "I have a question, `iterator-seq` returns a lazy seq or not? I need to work with a possible infinite iterable class in Java.\nSince iterators are lazy I think the answer has to be yes.\nOr a better way to say it is that if the iterator is lazy, the sequence will be lazy.\nthanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1243",
    "text": "Hi, folks. Can I give a name to a test case with `clojure.test/are`?\nOr how can I know which case failed in the report?\n```\n(are [input expected] (testing input\n                          (= expected\n                             (system-under-stest input)))\n  x y\n  a b)\n```\ni.e., add `testing` with a dynamically-built string\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1244",
    "text": "Some comments on this would be much appreciated: <https://stackoverflow.com/questions/55797382/idiomatic-rest-wrappers-in-clojure>\nSounds good. I might translate some of your experiments into Quil\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1245",
    "text": "You may study a generic Swagger client, Martian (<https://skillsmatter.com/meetups/8426-clojure-bytes>); and also consider the Cognitect AWS client wrapper as a more sprawling example.\n\nBy the way, maybe \"Java 11\" will eventually solve this, but here is a severe case of complecting.  The two API wrappers you mentioned, and Martian, are coupled to Apache's HTTP Client; while Cognitect's AWS API wrapper apparently delegates to some Jetty thing.  For \"something special\", I would like to mix and match:  use any API wrapper with any HTTP library.  If I have a biggish app that already has a way of managing HTTP connections, retries, pooling, throttling, etc.... with Netty, say...  the API wrappers should participate in that!\nfeel free, many of them are unfinished, or simply ideas that I took to a point that I was satisfied with, but may not make much sense now.  It's my sketchpad really.\nI'm finally getting productive with clojure, but now I'm finding out that sizable (read: useful) projects take forever to load a repl (I use cider/emacs)... we're talking a couple minutes per bounce... what am I doing wrong?\njdk 1.8u202+, 11.0.2, 12,  etc\nsee <https://dev.clojure.org/jira/browse/CLJ-2484> - we are testing a workaround in 1.10.1-beta2\nyou could try downgrading your java version or upgrading Clojure to 1.10.1-beta2 to see if that helps\n<@Noemi> As a sanity check, I just timed my REPL startup time -- via `clj` with a profile that contains every single dependency our 80,000+ line Clojure project uses, which also starts a Socket REPL and starts up Cognitect's REBL tool. A cold start to a live REPL with REBL open takes just under 12 seconds on my Mac.\nok, so it's something wrong with my setup, for sure.\nand that's crazy fast, btw.\nPer Alex, it could be the JVM regression if you're on either of those versions...\nI think 12 seconds is _slow_ :slightly_smiling_face:\njava version \"1.8.0_92\"\nJava(TM) SE Runtime Environment (build 1.8.0_92-b14)\nJava HotSpot(TM) 64-Bit Server VM (build 25.92-b14, mixed mode)\n(without REBL and the Socket REPL, starting a plain REPL takes about 8 seconds for comparison)\nOK, so on that version of Java/JVM it's unlikely to be the regression Alex mentioned.\nit's very likely something wrong with my code, right?\nI mean, that can affect things, I'm guessing.\nMaybe ask in <#C0617A8PQ|cider> and/or <#C099W16KZ|emacs> and see if they can suggest ways to optimize startup?\nsounds like a plan.\nI could generate a new project and see how long that takes.\nAlso, I'm starting a REPL into the `user` namespace which means it doesn't need to load my main namespace.\nlein repl on a project generated with ```lein new app test``` took about 11 seconds.\nI usually just lein repl at the root of the project... how would I specify a namespace?\nIt depends what's in your `project.clj` -- when the REPL starts, is it in `user` or some project-specific ns?\naha ok\nI'll look.\nuser\nso it's not that.\nit is a big luminus rest service type thing, so it's a larger project.\nwell, you've given me a few things to look at in the morning.\n```(! 780)-&gt; lein new app timing\nGenerating a project called timing based on the 'app' template.\n(! 781)-&gt; cd timing\n(! 782)-&gt; time lein repl &lt; /dev/null\nnREPL server started on port 57337 on host 127.0.0.1 ...\ntiming.core=&gt; Bye for now!\n\nreal\t0m7.290s\nuser\t0m5.564s\nsys\t0m0.490s\n(! 783)-&gt; time lein repl &lt; /dev/null\nnREPL server started on port 57351 on host 127.0.0.1 ...\ntiming.core=&gt; Bye for now!\n\nreal\t0m6.634s\nuser\t0m5.467s\nsys\t0m0.486s\n(! 784)-&gt; \n``` 6.6 vs your 11.\nok, both are close enough for me :wink:\nprobably is something to do with cider/emacs and all that, per what you were saying.\nLeiningen adds a lot of overhead, compared to the CLI/`deps.edn` stuff, just FYI: ```(! 787)-&gt; clj -A:new app timing.core\nGenerating a project called timing.core based on the 'app' template.\n(! 788)-&gt; cd timing.core/\n(! 789)-&gt; time clj &lt; /dev/null\nClojure 1.10.1-beta2\nuser=&gt; \n\nreal\t0m4.462s\nuser\t0m11.724s\nsys\t0m0.563s\n(! 790)-&gt; time clj &lt; /dev/null\nClojure 1.10.1-beta2\nuser=&gt; \n\nreal\t0m1.385s\nuser\t0m2.742s\nsys\t0m0.194s\n(! 791)-&gt; \n``` 6.6 goes down to 1.4 :slightly_smiling_face:\nthanks for all the help!\nI'll also look at the CLI/deps.edn stuff, which I know nothing about.\nWe love it. We switched from Boot to CLI last year (after switching from Leiningen to Boot just over three years ago).\nthe luminus setup usually has a user.clj file and loads (and compiles) a large set of your project and dependent files on startup. I would look more carefully and see if  you're doing something at the top level somewhere in addition to that too.\nlike def'ing something that loads from a database, et c\nyou can often use  a `delay` to avoid doing that too eagerly\nTo spec a macro\ngenerally, I find it's best to spec inputs to macros  using the regex ops\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1246",
    "text": "if you're using user.clj and a very recent JDK version, you might have stumbled into a Java performance regression\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1247",
    "text": "Any way to spec something as a list or a cons? Is there a pred for that? Basically, I want a pred for clojure code\nHum, looks like seq? could do\nso, `cat`, `*`, etc\nI have `(s/+ seq?)`\nWhere it takes one or more s-exprs\nWould you do something different?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1248",
    "text": "I've also found (and it was a  long time ago) that luminus-based projects have quite a long startup time; and it was a very simple service actually. It's perhaps because of many depedencies it introduces...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1249",
    "text": "whats the difference between fn and fn*? Can't find a declaration of latter.\n`fn` is technically a \"special form\" but it is implemented as a macro that calls `fn*` which is part of the compiler\nLike `let` is a special form too, but it is also implemented as a macro that uses `let*`...\n<@Celestine> great, thank you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1250",
    "text": "I am writing some cljc code and realizing that there must be something about JVM-clojure and namespaced type hints that I don\u2019t understand. If I have a type/record, I seem to be able to use its name as a type hint within its own namespace, but not from another namespace? example: <https://gist.github.com/mhuebert/3269ac0b5bebebb93de9c497a33a694f>\nNone\nNone\n<@Elayne> in jvm clojure MyType will be a generated class, you'd need to import it\n<@Coralie> ah, ok, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1251",
    "text": "you don't necessarily need to import it, you simply need to refer to it as a class rather than as a Var\n`n/T` is not valid syntax for classes in clojure/jvm\nit needs to be `n.T` (namespace aliases are not valid either,`n` must be fully qualified)\nit's unfortunate that clojure script diverged for deftypes\nso I guess it needs to be `^hints.my_type.MyType` - also munging the `-` to `_`\nyes -- import would just allow shorter naming, `MyType` (closer to `t/MyType` from the example)\nso `(:import hints.my_type.MyType)`\nThere are a lot of valid Clojure forms that are not seqs\nand then I suppose I would refer `MyType` in the cljs version, so that a plain `^MyType` annotation works for both\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1252",
    "text": "I would prob do `(s/+ any?)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1253",
    "text": "yep\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1254",
    "text": "does subvec allows for garbage collecting of unused nodes\nsay if we want [1 2 3] -&gt; [2 3] what is my options aside from vec -&gt; seq -&gt; vec\nideally, don't use a vector in the first place if you need to remove elements any place but the end\nsubvec will keep the original vector in memory so will not be gc'ed\nalex, thanks for everything you are doing for us btw, i'm a fan :smiley:\n:thumbsup:\nusually not worth it in macro args\nhow are you starting clojure?\n<@Jasmine> java -jar [uberjar] args\n`intern` <http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/intern>\nuser.clj is loaded pretty early in the RT - you could try adding one that sets `*use-context-classloader*`\nNICE!\nthx\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1255",
    "text": "Thanks, I'll have a look at it again. I guess I'm not sure why I ever tried to restrict it in the first place.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1256",
    "text": "is there a way to set *use-context-classloader* false before clojure starts?\nthis code runs when i 'lein run' it but some jars fail their static initializers that try to classload XML expecting to get the system classloader (AFAIK)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1257",
    "text": "How do i create a var in a another namespace?\nI know that it is not common, but I'm doing a DSL that \"compiles\" to <#C08TC9JCS|clara>, and clara use vars in namespaces...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1258",
    "text": "Hey all, we\u2019ve written a post on the Amperity Eng blog on Greenlight (our Clojure integration testing library). <https://eng.amperity.com/posts/2019/04/greenlight>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1259",
    "text": "Oh wow that is seriously cool. I\u2019ve seen the project before but never got the value proposition. Are you aware of <https://github.com/caioaao/kaocha-greenlight> ? I\u2019m using kaocha for running other tests. \nSilly question, can all the clojure.test compatible assertions be used? \nHey <@Aubrey> thanks we have seen that. I think the answer to your question is yes they should work. Feel free to file an issue if you find out this isn\u2019t the case\nAh, my Java's a bit rusty - package private methods cannot be overridden from another package at all. And the corresponding bug in Common's JIRA says: \"Fixed, will be in 2.7, whenever that comes.\" Oh well.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1260",
    "text": "Hello.\nI'm trying to use `org.apache.commons.io.input.ObservableInputStream` to make sure that I remove the file that I just streamed.\nFor that I need to extend the abstract class `org.apache.commons.io.input.ObservableInputStream$Observer` and override some of its methods. I tried using `proxy` but the overridden methods are not called.\nIs this because they're not public and have the default visibility instead?\nMy next step is to use `gen-class`. Is there anything simpler for this task?\nNew question - is there any way to use Java files in a Clojure project while keeping the working REPL? I don't want to reload Java files, I just want them to work. Right now I just keep getting `ClassNotFoundException`.\ndo you mean (import)?\nWell yeah. Only the java file is within my project source files.\nIt seems that Leiningen allows you to specify `:java-source-paths`. The thing is, I don't use Leiningen and Boot - I just use `clj`.\n<@My> Looks good! Am I right to observe that the step idea has some overlap with ideas from Cucumber? Or is that just accidental?\n<@Enola> from <https://clojuredocs.org/clojure.core/import>\n```\n;; For cases when 'import' does not do it for you, i.e. \"live-coding\"\n;; You can use the DynamicClassLoader, ClassReader and the Resolver.\n;; <https://github.com/clojure/clojure>\n\n(def dcl (clojure.lang.DynamicClassLoader.))\n\n(defn dynamically-load-class! \n  [class-loader class-name]\n  (let [class-reader (clojure.asm.ClassReader. class-name)]\n    (when class-reader\n      (let [bytes (.-b class-reader)]\n        (.defineClass class-loader \n                      class-name \n                      bytes\n                      \"\")))))\n\n(dynamically-load-class! dcl \"java.lang.Long\")\n(dynamically-load-class! dcl 'org.joda.time.DateTime)\n\n;; From that point the dynamically loaded class can be\n;; used by the Reflector to invoke constructors, methods and to get fields. \n```\nBut it requires a corresponding `.class` file, doesn't' it? I'm getting `Execution error (IOException) at clojure.asm.ClassReader/readStream (ClassReader.java:300).\nClass not found` with it.\nthats all i found, tbh i'm interested myself\nyeah seems like\nfound <https://github.com/ztellman/virgil> for lein and boot\nYep, I could use <https://github.com/tailrecursion/javastar> that it mentions to just `slurp` that java file. :smile:\nFound this: <https://www.mail-archive.com/clojure@googlegroups.com/msg103900.html>\nMore than half a year old but is probably still true.\n```\nclj is not a build tool, only a pure Clojure runner, so without something \nadditional to do Java compilation, you can\u2019t use it in a mixed source project.\n```\nAny suggestions/reads/libs on how to stub an external RESTAPI service in my tests? So far I am thinking of <https://github.com/myfreeweb/clj-http-fake>\nI'm curious too. I think Clojure is missing a library like this <https://github.com/lostisland/faraday>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1261",
    "text": "the one I mentioned above is the Clojure adaptation of <https://github.com/chrisk/fakeweb>. Have you heard of that?\nNo I haven't heard of it (but doesn't say much actually)\nAlso saw this <https://github.com/johanhaleby/stub-http>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1262",
    "text": "what's the best way to modify a macro that expects a literal Seq to evaluate functions/symbols passed to it?\n```(defmacro old-printy\n  [print-this]\n  (if (seq print-this)\n    `(print ~print-this)))```\nPassing `'[a b c]` works, but `(def print-these '[a b c])`/`(old-printy print-these)` throws exception.\n\nSo far I have this\n```(defmacro new-printy \n  [print-this]\n  (let [evaluated-print-this (cond \n                               (fn? print-this) `(~print-this) \n                               (seqable? print-this) `(seq ~print-this)\n                               (symbol? print-this) `(into [] ~print-this)\n                               :else print-this)]\n    `(print ~evaluated-print-this)))```\nI forgot the `(if (seq evaluated-print-this))` in the second one :face_with_rolling_eyes:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1263",
    "text": "i'm just starting with core async, if i want some transformations on a channel data is that a proper way to do it?\n```\n(defn filter\n  ([c] (filter (chan) c))\n  ([c' c]\n   (go (while true \n         (&gt;! c' (&lt;! c)))) ;; logic here\n   c'))\n```\nno, channels can take a transducer\nalright ill look into it, is above pattern useful for something?\n`(chan 10 (filter odd?))`\nthat's a channel, buffer size 10, that you can put numbers into and only odds will come out\nalso, fyi there's <#C05423W6H|core-async> for more in-depth questions\nyeah, noted its just seems completely silent\njust waiting for you :)\nhaha\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1264",
    "text": "How do I organize a deps.edn project with java source files?\nI have something like this:\n```\nsrc/\n   -  clj/\n        - my-namespace/...\n   -  java/ \n        - my-namespace/...\n```\nBut when I import my java classes, clojure is unable to find them\n<@Augusta>: `tools.deps` is not a build tool, so you can\u2019t do that without compiling those java classes \u2014 and for that you need to look into build tools\n<https://github.com/clojure/tools.deps.alpha/wiki/Tools>\nor just use leiningen\nwhich will do that\nOk, migrated to leiningen, but having the same error\ndid you set <https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L306> ?\noh\nIt\u2019s not Clojure, but this is close: <https://github.com/yayoc/swagger-to-mock>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1265",
    "text": "I certainly don\u2019t know anything about it, but can ask internally from contributers\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1266",
    "text": "Hi, is there something like <https://github.com/metosin/ring-swagger> but which does the reverse? So it transforms a swagger spec (or open api spec) into a working mock API endpoint?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1267",
    "text": "There is some \"style guide\" for project's layout?\n<https://github.com/onyx-platform/onyx/issues/887>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1268",
    "text": "those of you that use Schema for data spec, there is any way to validate some data against a schema without returning an exception, only true or false ?\n<@Rosanne> if you find something like that, let me know, i'm using swagger too\n~you can replace `s/check` with `s/valid?`~\noh, schema not spec, - plumatic/schema also has a function that you can use s/check\nit appears schema and spec us valid vs. check in opposite ways(?)\ni'll try\ncheck returns nil if  data matches the schema\nhow weird\ns/validate throws an exception, so i have to handle it in order to not break my entire app. and i don't want to handle it\nbecause there's often only one way to be correct, and many ways to be wrong\nguess i'll have to make a wrapper fn to handle it\nand make it return true or false\nor i can use s/check with `nil?`\nwhich i think it's very weird to read\n<@Leda> `(complement s/check)` - returns a function which returns true or false in the way you want\noohh, how smart\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1269",
    "text": "Hello everyone :wave:. I just created an account here so it would be nice to introduce myself :slightly_smiling_face: My name is Radek, I'm from Poland. Not yet a clojure dev yet aiming to become one in some time. Currently working as a PHP/JS dev (w/ +10 years of experience). Proud owner of ErgoDox, VIM maniac. Currently watching season 2 of One Punch Man :stuck_out_tongue:\nBe sure to check out the wide range of channels here -- you'll find <#C053AK3F9|beginners> very helpful for early questions as you're learning the language (folks in there have opted in to helping new folks!). Pretty much every library in common use has a channel here somewhere -- and if you have questions about Slack itself (or this Slack in particular), there's <#C04V84U7G|slack-help>\nawesome, thanks for quick introduction :slightly_smiling_face:\nPoland Strong! :flag-pl: Greetings from Russia! :flag-ru:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1270",
    "text": "```(defmacro old-printy\n  [print-this]\n  `(if (seq ~print-this)\n     (print ~print-this)))```\nIs the rest API has swagger, you could maybe use one of the java generated servers <https://github.com/swagger-api/swagger-codegen/wiki/Server-stub-generator-HOWTO> to bad clojure is no option.\nNot sure if this handles all of the intended cases, <@Zona>:```\n(defmacro new-printy\n  [print-this]\n  `(let [evaluated-print-this#  (cond \n                                  (fn? ~print-this) (~print-this)\n                                  (seqable? ~print-this) (seq ~print-this)\n                                  (symbol? ~print-this) (into [] ~print-this)\n                                  :else ~print-this)]\n   (print evaluated-print-this#)))\n```\nI guess Slack's thread function doesn't like wide code.\nSeason 2 of One Punch Man is great!\n<@Emile> IKR ? Awesome stress reliever :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1271",
    "text": "I missed out keyword and probably a few more, but it seems overly laborious to have to cond based on type. I wonder if there's a better method?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1272",
    "text": "Thanks, I\u2019ll take a look at it!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1273",
    "text": "Hello everyone :slightly_smiling_face: My name is Jean, I\u2019m from France :flag-cp:. I\u2019m a Clojure(Script) developer.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1274",
    "text": "Hi there, is there a way to load a jar into a running repl? So that I can then `require` \"the contents\" of the jar?\n<@Mira> tools.deps has an add-lib that would work for you, and also pomegranate has something too\n<@Sixta> thanks! can't seem to find it though, am I looking at a wrong thing: <https://github.com/clojure/tools.deps.alpha/search?q=add-lib&amp;type=Code> ? the whole `repl` ns seems to be missing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1275",
    "text": "if you have a list \u2019(1 2 3), what\u2019s the most efficient way of adding something to the front AND the end?\nI don\u2019t care what the resulting data structure is, as long as it\u2019s seqable\nI think if you have a list there's no efficient way to append to the end\nright. would `(concat the-list '[the element])` make sense?\nDoes to me, yeah :)\nI believe it's only on a branch\ncool, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1276",
    "text": "what exactly is `Clojure contrib`?\nA set of Clojure libraries, all with the same license and requirement that contributors sign the Clojure CA (Contribution Agreement), so that the code can be relicensed later if desired.\nI believe this is a complete list of them: <https://dev.clojure.org/jira/secure/BrowseProjects.jspa#all>  If not, they are all under the <https://github.com/clojure> Github organization\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1277",
    "text": "<https://clojure.org/community/contrib_libs>\nDon't nest defs like that\nDef is always global\nnote that you can call functions created by defn that use `is` / `testing` from within deftest, because clojure.test works via dynamic scope\nthose defs can exist outside the deftest, and the \"ok\" deftest can be a defn called from inside the test\nof course the contents of \"OK\" can just be expanded to be the body of create-sales-batch and that probably makes more sense here\nanyone who uses Swagger, there is any tool that helps with API testing using Swagger OAS 3.0 + Clojure with Ring?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1278",
    "text": "hey everyone, Im writing some tests to use with luminus\n\n```\n(deftest create-sales-batch\n  (def req-opts {:headers {:authorization (:api-secret env)}})\n  (def sales-batch [{:created-at     \"2019-04-24T02:25:00+00:00\"\n                     :tag-id         \"tagid\"\n                     :value-in-cents 1500\n                     :external-id    \"e2336ed3-d03f-484e-b034-8b7540cc05c1\"\n                     :employee       {:name \"Antonio Carlos Jobim\" :document \"0000000000\"}\n                     :products       [{:name \"3x_skol_lata\" :value-in-cents 1500}]}\n                    ])\n  (deftest ok\n    (testing \"create recharge batch without any failed items\"\n      (let [response (http/POST app \"/api/sales\" sales-batch req-opts)]\n        (is (= 200 (:status response)))\n        (is (= {:failed-items []} (:body response))))))\n```\n\nmy main problem here is that `(:api-secret env)` needs to be available, and `mount/start` lives in the `:each` fixture, so I wrapped everything iniside another test.. but `eastwood` is complaining\n`def-in-def: There is a def of req-opts nested inside def create-sales-batch`\n\nI dont want to repeat `(def req-opts {:headers {:authorization (:api-secret env)}})` in every test what should I do?\nwhat stops you from using plain `let` for the bindings, and a plain `defn` for DRY?\ndef is inevitable\nlet my that\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1279",
    "text": "you are also nesting deftests, which is equally \u201cbad\u201d, since it\u2019s basically defining a global var with a function in it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1280",
    "text": "Luminus + Reitit?\ni saw it, unfortunately i don't use Luminus\nbut no problem, i think i'll build something like that on my own\nAFAIK reitit and spec-tools allows you to easily produce a swagger spec for a service from Clojure code, but doesn't go the other way\nI think you can pick the desired middlewares individually, checkout the reitit repo for examples, they are not bounded to luminus\nwhat is the best way to remove this warning? `WARNING: any? already refers to: #'clojure.core/any? in namespace: monger.collection, being replaced by: #'monger.collection/any?`\n`(:refer-clojure :exclude [any?])` in everyfile that requires `monger.collection`?\nthe consumer namespaces aren't shadowing `any?` form core, monger itself is\nis there a solution besides forking monger?\nIf I were using that lib, I would probably use a `:rename` in my require, I don't like shadowing core functions\nits too late at that point\nI'll search about :rename, shadowing core functions sounds fishy to me\nah, the warning is coming from within the lib?\nyes. when you load that code, a namespace is shadowing `any?` from core. it doesn't matter what someone else calls it\nIf only there were somebody working on a tool to help find these types of problems\u2026\ngotcha, makes sense\nit appears that this has been fixed: <https://github.com/michaelklishin/monger/blob/master/src/clojure/monger/collection.clj#L53>\nso there is nopthing to do about it?\nIll try to update monger\nthx <@Becki>, that fixed the issue :slightly_smiling_face: but im curious, if they hadnt fix this there is no workaround it?\nas far as i understand it yes. that code will cause a warning. the only way to fix it is to change the code\nalthough I have no idea if it catches deftest inside of deftest\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1281",
    "text": "Like eastwood? :slightly_smiling_face:\n(and it is only a warning -- it's not necessarily an actual problem)\nThe OP wrote:\n\n&gt; but `eastwood` is complaining\nright, hence my smiley :slightly_smiling_face:\nhmm, clj-kondo does:\n<https://www.dropbox.com/s/shdjhtomuiuc9o2/Screenshot%202019-04-25%2020.06.41.png?dl=0>\nright that\u2019s the tool I was thinking of! :simple_smile: \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1282",
    "text": "Guys, anyone know of any library to do JWT authentication with Clojure?\n<@Valerie> <https://www.bradcypert.com/using-json-web-tokens-with-clojure/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1283",
    "text": "Is there a data structure which is suited to:\n- Updating a singular entry by key\n- Looping over / sorting items in arbitrary different ways at different times\nsounds like you want a hash-map plus N sorting functions?\n<@Sixta> i guess you can store it as hash-map and use sort-by to get a sorted sequence\n<@Dann> Sorta, I want to store like `{id {:extra \"info\"}}` but then do something like `shuffle` on that and have a sensible way to refer to all that.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1284",
    "text": "You could keep a map of key-to-index kvs. Then add an ILookup to a vector thing that defers to the map for the key-index-value lookup. You'd have to update the key-to-index map though when the vector order changes\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1285",
    "text": "what's the best data structure for expressing a bijective map? `A &lt;-&gt; B` where the elements within A and B are unique but could overlap\nI could maintain two separate hashmaps `A -&gt; B` and `B -&gt;A` which are inverse of each other, but that seems expensive and error prone.\n<https://clojuredocs.org/clojure.set/map-invert>\nI\u2019m having some issue with the use of `pprint/cl-format` throwing an exception when run from an uberjar: `ClassCastException clojure.pprint.pfroxy$java.io.Writer$IDeref$PrettyFlush$4923d848 cannot be cast to clojure.pprint.PrettyFlush`; anyone run into this and know how to resolve? (pprint require\u2019d via `(:require [clojure.pprint :as pprint])`)\nuberjar is built with juxt/pack.alpha via deps.edn\nconstantly calling `map-invert` on a large map doesn't sound good, I'm concerned about the performance because I'll be using both forward and backwards mappings in a tight inner loop\nLooks vaguely familiar, likely something reloading causing Pretty Flush to be redefined, so it is a new different class that doesn't match the proxy class\nIt needs to be frequently updated in an inner loop, so I can't be constantly regenerating the inverse mapping, and  some sort of persistent data sharing would be good\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1286",
    "text": "you can try `#(into % (map (juxt val key)) %)`\nBut if you need to access you data from many ways, may be a good idea use <#C07V8N22C|datascript>\nThanks! A full database is perhaps too heavy for my needs, I'm just trying to express a bijective mapping / isomorphism between two sets\n\"Full database is too heavy\"\ndatascript subtitle:\n`What if creating a database would be as cheap as creating a Hashmap?`\n:stuck_out_tongue_closed_eyes:\nis there any library that when i add deps in lein project.clj and it auto reload it so that i needn\u2019t restart the repl?\noops! Will have to look more into it then - I've hardly dealt with databases before\n<https://gist.github.com/semperos/3835417>\nJust found this implementation based on two synchronized maps :slightly_smiling_face:\nyou can use Pomegranate to hotload dependencies at the REPL\nnot sure if there's any tool to pick them up automatically from the project.clj\nare there any cool clients built around datafy and nav yet? (besides rebl)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1287",
    "text": "Seems it was related to some timestamp issue in uberjars; updating to a more recent `juxt/pack.alpha` seems to have fixed it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1288",
    "text": "I ran into a similar problem with `depstar` until I fixed in my fork. The obvious default way of building JAR files is wrong. Who knew? :disappointed:\n<@Luke> Boot lets you add dependencies to the REPL while you're working (using Pomegranate under the hood I think). The Clojure CLI is built on `tools.deps` and there's a branch of that which supports an `add-lib` function to add new dependencies dynamically. I have an alias for that in my `deps.edn` file.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1289",
    "text": "Is there a way to start a program, like using `lein run`, but also start nrepl in the background?\nSomething like <https://github.com/jimbru/lein-repl-run> does, but without a plugin.\n<@Nisha> `lein run myns.dev`\nwhere `src/myns/dev.clj` contains something like\n```\n(ns myns.dev\n  (:require [nrepl.server :as nrepl]\n            [myns.core :as core]))\n\n(defn -main\n  [&amp; args]\n  (nrepl/start-server 3333)\n  (apply core/-main args))\n```\n\"Functions and data compose better then plugins and middleware\"\n<@Elaine> Thanks! This is what I\u2019m currently doing. Just curious if there\u2019s a better way.\nI spent quite some time learning what `lein run` and `lein repl` do before getting anything done. :sweat_smile:\n<@Nisha> my `myns.dev` from the current project do:\n- start a <#C0K65B20P|pedestal> server (main app)\n- start a <#C17JYSA3H|nrepl> server\n- run \"yarn install\"\n- start a <#C6N245JGG|shadow-cljs> server\n- start ~3 builds in shadow-cljs server\n- run a \"yarn watch\" command \"forever\"\nI don\u2019t see your code, but that\u2019s a lot  lol\nthat about: you will need to start/stop things, maybe in some order, and you dont need to develop a plugin to do it :slightly_smiling_face:\nlike if you don\u2019t have a plugin, you just manually do it, right?\nNow I have a simple TUI app, and I just added a nrepl server to it. Maybe later I\u2019ll have to add a repl too.\nI'm more about:If I can call `(lib/start)` I dont need to search a `lein-lib` plugin\n<#C6QH853H8|tools-deps>, the new `cli` to start clojure, it does not even have a plugin system\nSo you prefer clj over lein?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1290",
    "text": "I\u2019m trying to use grpc and protobufs with `lein-protoc` and I do get the simplest hello world thing working.\nI don\u2019t understand how to include dependencies tho - our company protobufs use `com.google.api.grpc/google-apis-common-protos` for example and I can\u2019t seem to include them for `lein-proto`\nThere\u2019s a <https://github.com/LiaisonTechnologies/lein-protoc#usage> `:proto-source-deps` vector but I don\u2019t get how I point it to a jar\nI\u2019m going through some clojure homework that is proving beyond me, would anybody be able to assist?\nlooks like it tries to find the relevant jar among the classpath, for each of the given source-deps\nso I'd try to make sure your jar is in the classpath first (e.g. as an ordinary dep), then name it in source-deps\n<@Keeley> why don't you just ask an actual question about clojure so we can brainstorm it together?\nSounds good\nThis is in a Koans form\ngiven\u2026\n```(defn empty-set\n  \"takes any input element and returns nil\"\n  [_] nil)\n\n(defn singleton-set\n  \"takes an element and returns a fun-set containing\n   just that element\"\n  [el1]\n  (fn [el2]\n    (when (= el2 el1) el2)))\n```\ncomplete the following\u2026\n```(defn union\n  \"takes two fun-sets and returns a set that is the set\n   of all elements in either set1 or set2.\"\n  [f-set1 f-set2]\n  ;;TODO\n  )```\nso first create two sets\n```(def f-set1 (singleton-set :happy))```\n```(def f-set2 (singleton-set :sad))```\nI tried ```(def u-set (singleton-set f-set1 f-set2))``` just to see what would happen\ngot wrong number of arguments as expected\nyes\nsee above\n<@Keeley> if i understand it correctly, singleton set can be described as `a = singleton set of a`\nThat sounds correct\nthen implementation should be\n```(defn singleton-set\n  [x]\n  (fn [] x))```\nIf I interpret the function in the sample correctly, it will re-assign a new value but keep the original value if identical, which sounds unnecessary\nchecking\n<@Keeley> well we describing singleton set, not a pair right?\nNo, the \u201cfun set\u201d idea is a function that returns a truthy value for elements that are members of the set.\nso the union of two singleton sets should be a function that returns a truthy value if the given element is either a member of the first singleton set, or a member of the second.\n<@Keeley> You\u2019re going to need to write a `defn` that returns an `fn`. The `fn` needs to take one element and return `nil` if the element is not a member of either singleton set, or the element itself as a \u201ctruthy\u201d result, if it is in either set.\nThat sounds like verification of contents in multiple sets,  But not the combining of two sets into a single set\n```\"takes two fun-sets and returns a set that is the set\n   of all elements in either set1 or set2.\"```\nSo here is a contains for a single fun set\n```(defn f-contains?\n  \"takes an fun set and el and returns true only if that\n   elements exists in the fun set else false\"\n  [f-set el]\n    (= (nil? (f-set el)) false)\n  )```\nlike that i guess\nthe definition of a singleton set in this exercise is a membership function. In this exercise a set is merely a function that recognizes membership\n<@Jada> close\nneed to pass false not false nil\nin test\nso separate nil and false\n```FAIL in (union-test) (core_test.clj:44)\ntrue false sets\nexpected: (= false (u-set1 false))\n  actual: (not (= false nil))```\nSo that answer, using or, is there a book or site that goes over this kind of topic?  It doesn\u2019t feel intuitive to me.\nI\u2019d be happy to go over a reading assignment before the quiz.\nOr can\u2019t work here\nyeah\nIt prevents sets from having the value false in them\n```\n(defn union\n  [x y]\n  (fn [target]\n    (when (or (some? (x target))\n              (some? (y target)))\n      target)))\n```\nhow can we do it better?\n<@Keeley> Ironically, I became familiar with this style of \u201cset\u201d programming by taking the \u201cFunctional Programming in Scala\u201d course at Coursera.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1291",
    "text": "you implemented singleton-set function?\nam i right?\npair must be \u03bbabf.fab\noh\n```\n(defn empty-set\n  \"takes any input element and returns nil\"\n  [_] nil)\n\n(defn singleton-set\n  \"takes an element and returns a fun-set containing\n   just that element\"\n  [element]\n  (fn [target]\n    (when (= element target)\n      target)))\n\n(defn union\n  \"takes two fun-sets and returns a set that is the set\n   of all elements in either set1 or set2.\"\n  [x y]\n  (fn [target]\n    (or (x target)\n        (y target))))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1292",
    "text": "what am i missing then\n```\n(defn union\n  [x y]\n  (fn [target]\n    (if (and (nil? (x target))\n             (nil? (y target)))\n      nil target)))\n```\ni'm out of options\n`when not and` also\n```\n(defn union\n  [set1 set2]\n  (fn [element]\n    (if-some (set1 element)\n      element\n      (set2 element))))\n```\nis how i would do it\nwasn't aware of if-some great to know\ni used it incorrectly though\nits a binding one. so just use `(if (some? ..))`\nmy only thinking is if nil is an explicit case make it very clear\nIf `set1` is a function (as opposed to being a clojure set), you don\u2019t need `some?`. Just call the function.\nneed to watch for the case when the set contains `false`\nwhich was the original failure\nAh, I was just re-reading the test, that\u2019s right\nThe test results, that is\ndon't put logical false values in sets ;)\nlol\n`(if-not (nil? (set1 value)) ...`\nunit test is tricksy, my precious\u2026\nActually, `some?` is the better choice here. I keep thinking `some?` iterates over a collection, but it\u2019s really just \u201cnot nil\u201d.\nbut i think if-not nil? is more describing, for a person who doesn't know some?\nCheck those, though, I think you just want `(set2 x)` where you have `x (set2 x)`\nwait, no I\u2019m reading that wrong\n<@Chas> Yeah, that should work just fine\nThe trick is that each of your \u201cfun-sets\u201d should return nil if the target element is not in the set. So what happens if your set is a singleton set consisting of the value `false`?\nIn that case, it should return `false` if you pass it `false`, meaning \u201cThe element `false` *IS* a member of this set.\u201d\nwhich is confusing, because we naturally assume `false` means it\u2019s _not_ a member.\nyeah now i get it\nfunny thing, like an optical illusion :smiley:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1293",
    "text": "```\n(defn union\n  [set1 set2]\n  (fn [x]\n    (if (some? (set1 x))\n      x (set2 x))))\n\n(defn union\n  [set1 set2]\n  (fn [x]\n    (if-not (nil? (set1 x))\n      x (set2 x))))\n\n(defn union\n  [set1 set2]\n  (fn [x]\n    (when (or (some? (set1 x))\n              (some? (set2 x)))\n      x)))\n```\nall three for history\nyeah we have two sets\n```(defn union [set1 set2] \n  (fn [v] \n    (if (nil? (set1 v))\n      (set2 v) \n      v)))```\ndoes that work?\never since I quit drinking coffee, I swear\u2026 :face_with_rolling_eyes:\nnow i'm confused about (set2 v) being first form in if\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1294",
    "text": "You don't need to prefer\nBoth have one optimal use-case\nI deliver a product that my client require that `java -jar app.jar` will work, it's way easier to do with lein\nBut what I'm saying is that you dont need plugins.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1295",
    "text": "I think all these things comes from wide repeated suggestion in internet not to use `contains?`, cause it exists espesially  for such cases\nIs anyone able to explain this:\n\n```\n(defprotocol P\n  (foo [this a]\n       [this a b]))\n\n(deftype T []\n  P\n  (foo [this a]\n    (println \"foo a\"))\n  P\n  (foo [this a b]\n    (println \"foo a b\")))\n\n;; the-ns=&gt; (foo (T.) 1 2)                                                     \n;; foo a b\n;; nil\n;; the-ns=&gt; (foo (T.) 1)                                                       \n;; Execution error (AbstractMethodError) at kw-get/eval6029 (REPL:1).          \n;; kw_get.T.foo(Ljava/lang/Object;)Ljava/lang/Object;\n```\nwhy are are you extending P twice instead of doing it once?\n```(deftype T []\n  P\n  (foo [this a]\n    (println \"foo a\"))\n  (foo [this a b]\n    (println \"foo a b\")))```\nI think only the second of those was taking effect the way you had it written\n... :facepalm: thanks <@Jasmine>\nMisunderstood the syntax\nso presumably `deftype` stays on a given protocol until a new one is supplied?\nI mistakenly thought it was 1 pair of Protocol to method\nyou can specify any number of methods under the protocol\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1296",
    "text": "I'm developing an application in which I need the user to provide mathematical formulae... I need to parse these formulae so they can be evaluated. Are there any libs doing something like that? So, I'd like to read some edn-string like:\n```\n{:vars [x y]\n :result (* x 5 (Math/sin (/ y 7)))}\n```\n(it can be infix notation as well, but just being able to read this in clojure would certainly be fine as well. I could use something like `eval`, but that's not very save :stuck_out_tongue:.\n'parsing' it, would result in something like `(fn [{:keys [x y]}] (* x 5 (Math/sin (/ y 7))))`\nAre there any existing 'math parsing' libraries?\nseems like you have valid Clojure there - no need to \"parse\", just read\nyou could then write an \"evaluator\" that took a list and recursively applied the first op to the latter ops, but of course that's all eval is doing\nif you want a whitelist, you could use a table ```\n`{+ ~+ sin ~#(Math/sin %)...}``` and only accept symbol inputs with substitutions in the table\n(edit - Math/sin isn't first class)\nanother way to go would be to rely on eval, but put your time into whitelisting\njinx\nok, let me try and see if I get somewhere. (Couldn't make it work now, but I might have done something wrong/weird :slightly_smiling_face: )\nyou could eval after the whitelisting, or even run the substitutions as an interpreter\n<@Dann> what d'you mean with _run the substitutions as an interpreter_\nwalk the input, look up the thing in function position, call it with the args once all are simplified\nie, duplicate eval :)\nand bail if you hit anything that isn't a number literal and isn't whitelisted\nfair\n:slightly_smiling_face:\n<https://github.com/rm-hull/infix/> check this out, if you're looking for external libs\nyeah, saw that one, was about to start trying it, but having infix wasn't the main goal :stuck_out_tongue:\nperhaps the most elegant thing is read the whole thing into lists of symbols/numbers, then tree walk and replace symbols / validate, then eval\nthe tree walk could just throw if it sees functions or vars that aren't allowed\nor if you are OK with users hosing / abusing the machine (eg. it is their own machine) just eval :D\nlol, well, the whole point was to avoid eval :slightly_smiling_face:\nis there a way to run a fixture before ALL tests (not the one in current namespace) after ALL tests?\nI need to spin up a few docker containers before the tests and shut them down afterwards, maybe I should use lein for it?\nor write a clojure program that defines a middleware around clojure.test/run-tests\nthe amusing thing, is if we map from symbol to safe math op, it looks like we have single quote strings ```(def math-ops\n  {'+ +'\n   '- -'\n   '* *'\n   '/ /})```\n(edit: /' doesn't exist)\nyou are inherently writing an expression evaluator. it's ok to use eval for that, this is like what a lisp is good for. :)\n```(cmd)user=&gt; (load-file \"/tmp/mather.clj\")\n#'user/run-math\n(ins)user=&gt; (run-math \"(+ 1 1)\")\n2\n(ins)user=&gt; (run-math \"(+ (sin 1) 1)\")\n1.8414709848078965\n(ins)user=&gt; (run-math \"(+ (System/exit 1) 1)\")\nExecution error (AssertionError) at user/whitelist (mather.clj:15).\nAssert failed: the System/exit operation is not allowed\nop\n```\n```(require '[clojure.edn :as edn]\n         '[clojure.walk :as walk])\n\n(def math-ops\n  {'+ +'\n   '- -'\n   '* *'\n   '/ /\n   'sin #(Math/sin %)})\n\n(defn whitelist\n  [tree]\n  (if (symbol? tree)\n    (let [op (find math-ops tree)]\n      (assert op (format \"the %s operation is not allowed\"\n                         tree))\n      (val op))\n    tree))\n\n(defn run-math\n  [s]\n  (-&gt; s\n      (edn/read-string)\n      (-&gt;&gt; (walk/postwalk whitelist))\n      (eval)))\n```\nhere's one that doesn't rely on eval:\n```\n(defn eval-math [env expr]\n  (let [oops (fn [msg x] (throw (IllegalArgumentException. (str msg x))))]\n    (cond\n      (list? expr)   (apply (or (math-ops (first expr))\n                                (oops \"Function not in whitelist: \" (first expr)))\n                       (map #(eval-math env %) (rest expr)))\n      (symbol? expr) (or (env expr)\n                         (oops \"Undefined symbol: \" expr))\n      (number? expr) expr\n      :else          (oops \"Illegal value: \" expr))))\n\n(eval-math '{x 1 y 2}\n  '(* x 5 (sin (/ y 7))))\n;; =&gt; 1.4092142606110496\n\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1297",
    "text": "something like this?\n```\n\n\n(defn calc\n      [form vars]\n      (let [ops-whitelist `{+ ~+ sin ~#(Math/sin %)}]\n           (walk/postwalk\n             (fn [calc]\n                 (if (sequential? calc)\n                   (if-let [f (ops-whitelist (first calc))]\n                           (apply f (map #(get vars % %) (rest calc)))\n                           (throw (new Exception (str  \"Cannot perform operation: \" (first calc)))))\n                   calc))\n             form)))\n```\nrunning\n```\n(calc `(+ \"val1\" 7 (sin 0.5)) {\"val1\" 5})\n``` seems to work fine :stuck_out_tongue:\nouch, naming, not really pretty (twice `calc`)\nI think the eval version is fine - the postwalk ensures the safety I think(?)\nim trying to put the current timestamp in a uberjar name, assuming I can run arbitrary clojure code inside project.clj (not sure its possible)\n\n```\n{:uberjar       {:omit-source    true\n                   :aot            :all\n                   :uberjar-name   (str \"cohmeia_api_local_\"\n                                     (.format (java.text.SimpleDateFormat. \"yyyy_MM_dd'_'HH_mm_ss\")\n                                       (.getTime (java.util.Calendar/getInstance))) \".jar\")\n                   :source-paths   [\"env/prod/clj\"]\n                   :resource-paths [\"env/prod/resources\"]}\n```\nfails with `java.lang.ClassCastException: clojure.lang.PersistentList cannot be cast to java.lang.String`\n\nIts possible to do this and am missing something or there is no way?\nyeah... not sure how I would've done the eval thingy.\nIn `project.clj` you can escape code with `~` to have it evaluated.\nso ```:uberjar-name ~(str \"cohmeia...\" ...)```\nthanks :slightly_smiling_face:\nSo is it to better to do :use or to :require? Is use akin to :refer all?\n`:require`, don\u2019t use `:use`\nYou can find other useful recomms here <https://stuartsierra.com/2016/clojure-how-to-ns.html>\nOk, <@Mariela> will bookmark that site.\nThat Stuart is a well of knowledge\n<@Angelita> if you haven't done so already, perhaps you will find grepping the clojure source for sierra useful some time :slightly_smiling_face:\n<@Fernande> well, just checked GitHub. Man I really should pay more attention.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1298",
    "text": "one advantage(?) of the eval version is that you get hash-maps and vectors as functions, it would be good to get confirmation that whitelisting symbols is enough to make using eval safe here\nI posted a working example with eval / whitelisted symbols in the other thread (the one under you saying you wanted to avoid eval...)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1299",
    "text": "oh, cool, thx, I'll have a look!\nthx all, I have a few versions now :stuck_out_tongue:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1300",
    "text": "Its better to use :refer :all mostly for conssistency\nAnd as a way to encourage not refering :all to begin with. But instead explicitly listing what to refer, and even better, not refering anything, just aliasing instead.\nBut use still works. Its just that since require can now do everything and more that what use used to do, use is no longer needed.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1301",
    "text": ":+1:\n@here help me out , which is the best framework for web development in Clojure\n<@Yasmine> I think ring is a typical starting point\n<https://github.com/ring-clojure/ring>\n<@Yasmine> if you are looking for framework, re-frame, om next, luminus, fulcro, pedestal for server side?\nThank you guys \n<@Yasmine> just remember there is no BEST in programming, everything has its strong and weak sides, you just need to choose the one that fits your task better.\n<@Roselia> that\u2019s true \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1302",
    "text": "Hello. I started a project using a Leiningen template. The template has since been updated. Is there a way to incorporate template changes into an existing project?\n`partial` or `#(... %)`? Is there a clear preference in the community for one or the other?\nI kind of prefer `partial` (since `#(..)` don't nest and it is fewer weird characters) but it is much longer to type and anon. fn. is more flexible as the `%` can be placed anywhere, not just at the end. I believe people use `#(..)` much more, is that a correct observation?\nAs a haskeller in past, I was surprised how indirect is carryng in Clojure - in Haskell you can simply drop argumenst for this. But the same question about arguments order also exists (more `flip`-s is about it). And absence of `(* 10)` syntax also make code more verbose. I think you can use such hack for shorten type: `def p- partial` or use common reader macroses like `#(... % ...)`\nEither or really\nI perfer `partial` over `#(...))` whenever possible. Less weird characters and less ambiguity. I would only use `#(...)` over it if I need to be more succinct in # of characters.\nI really wish one day #() could nest\nIts one of those small quirks\nI wonder why it can't nest actually\nIf you\u2019re nesting anon functions it sounds like you should be calling `fn` (with a name! like `(fn my-fn-instead-of-partial [a b] (+ a b))` )\nWhy with name\nI often don't need it named\nThat's the issue of fn\nSo that when going through a stack trace its not a gensym\u2019ed name. It may seem verbose with 1 or 2 levels of nesting but i\u2019ve seen those partials be passed around for DI (Not a pattern I like\u2026) and its next to impossible to understand what function was *actually* called via the stacktrace if you don\u2019t have a name.\nHum, ya I guess for staxktrace maybe. But sometimes I'd for sure take the convenience over it\nAbout nested `#(...%...)` - you must have an ability to use argument of external function into internal - but with `%` or `%1` syntax it can not be realized\nHow you would rewrite `(fn [x] (fn [y] (+ x y)))` ?\nHum... Is that the only logic? I guess sometimes you need to close over the parent, but shadowing would be okay a lot of the time\nI guess actually, I'm more hoping for a new form. It's a but embarrassing that I find Java's syntax better `(x -&gt; y -&gt; (+ x y))`\nI mean\u2026 you can write a macro for that exact syntax if you really want it.\nMagic and power of Clojure macroses allows you to write any syntax you want I hope :slightly_smiling_face:\nIts not that I really want it. Its that I find #() is a little quirky. And I wouldn't mind a core improvement on it\nOh, I type very slow - I follow answer above :slightly_smiling_face:\nI always have to explain #()\nIt has both implicit args, which is quirky, it has the issue that it always wrap the inside in a parenthesis so you can't do #(\"10\") and it can't be nested\nThat's a lot of quirks\nI mean, minor quirks\nAs I know, `#` is a prefix of non-expandable reader macroses\nBut still\nI don't know what would necessarily be better though.\nMaybe just `#(x y (+ x y))` and have it be nestable\nBasically, #() would assume the last expression is the fn body and everything before are the symbol args\n:slightly_smiling_face: how deside it is one 2-arg lambda or 2 one arged?\nFor two one arg you'd do `#(x #(y (+ x y))`\nx can be binded global symbol :slightly_smiling_face:\nYa, but so can it for `(fn[x] ...)`, so in this case it just shadows the global symbol\nNot of course\nin lambda calculus it called free or binded args\nI guess I'm not following. How is it any different to `(fn[x] (fn[y] (+ x y))`\neverything in vector after `fn` is binded\n`(def x partial) (apply #(x #(y (+ x y)) 33)`\nand it must be as a (partial #(+ % ???) 33)\nHey that's neat !\nSo, the problem is how to strong set symbols as an arguments of lambda, but not as an external symbols\nBut. I would literally just have it be a macro that expands to `(fn[x] (fn[y] (+ x y))`\nYou can write such macro. But it will reduce your capabilities for using external symbols\nI don't think so, since the user picks the symbol names, they are in control, if they don't want to shadow, they just use another name\nOn the other hand, you will know it as a feature, not a bug :slightly_smiling_face:\nI mean, you could expand it into gensymed symbols as well\nThen you wouldn't be able to shsdow\nshadow\nStay on strong semantic, not weak conventions\nThough I would find that surprising, since I'd expect it to shadow\nSo why doesn't fn has the same problem, I'm still not following?\ncause fn have only way and ability to create a new local-meaning (how it say?) symbols\n`let` in Clojure is a spec form, but semantically it is a macro on lambda (and in Scheme it really is!)\n`(let [a 1 b 2 c 3] (+ a b c))` -&gt; `((fn [a b c] (+ a b c)) 1 2 3)`\nso, semantically speaking, only lambda-abstraction can insert new named args in combinators\nand of course, you can shadow external symbol in `fn`\nbut it is well controlled and known\nWhat about `(let [a 1 b 2] (fn [a b] (+ a b)))`\nit is a trivial shadowing I mentioned before :slightly_smiling_face:\nRight, so I'm just saying I'd like some syntax sugar over fn :yum:\nwhat I wanna say - you can wrap `fn` in a macro\nBut!\n`(let [a 1 b 2] #(a b (+ a b)))`\nAre you saying the evaluation order would be wrong with non reader macros, because let special form won't expect it?\nmaybe haskell way would be better  `(\\ x y =&gt; (+ x y))` :slightly_smiling_face:\n`\\` - is a real macro!\n`#` already used by reader special cases\nYa, it's too late for #. But I wish it worked as I wrote it. Maybe adding #f(x y (+ x y))\nOr even #fn(x y (+ x y))\nHaskell way isn't bad either, just doesn't seem as consistent with the rest of Clojure's syntax\nand now it is time to main question - is it so far from current `fn` syntax?\n:slightly_smiling_face:\n`#fn(x y (+ x y))` or `(fn [x y] (+ x y))`\n```\n(fn [x y] (+ x y))\n#fn(x y (+ x y))\n```\n:drooling_face:\n(not every time I type slower :joy:)\nGuess not\n:slightly_smiling_face:\nThough I do find it visually less distracting\nBut ya, ideally it would have been how `#` worked\nI think you could still do it\nYou could have it that when there is no % or %n inside #, it assumes to be #(params form)\nBut then there is magic.\nand syntax.\nI guess this would be an issue: `#(+ 1 2)`\nAnd every time I would look at an anonymous fn I\u2019d have to remember and think about if the magic is happening there or not.\nbut now `#(+ 1 2)` is a normal non-arged lambda\nYou think? Okay, let's say I create #f and these are example usage:\n\n```\n#f(a b (+ a b))\n#f(+ 1 %)\n#f(+ %1 %2)\n```\n\nYou'd find that confusing?\n```\n(#(+ 1 2))\n=&gt; 3\n```\nYa, extending # wouldn't work, we'd break lambda of no args\n<@Madeleine> can I suggest a little tweak? :slightly_smiling_face: `#f(a b (+ a b))` -&gt; `(\\ a b (+ a b))`\ndestruction will breaking, but other will work :slightly_smiling_face:\n```\n#f(a b (+ a b)) =&gt; (fn [a b] (+ a b)) ;; cost: is wrapping a and b in a vector\n#f(+ 1 %) =&gt; #(+ 1 %) ;; cost: an extra character\n#f(+ %1 %2) =&gt; #(+ %1 %2) ;; cost: an extra character.\n```\nYa, I guess that could work as well.\nSo the cost I see isn't how many chars to type\nBut how visually non distracting it could be\nand as I already mentioned - do not forget about magic distraction syntax in `fn` - macro :slightly_smiling_face:\nNow that I think about it though, it seems what I'm really asking for is named arguments inside # and thus the ability to nest it.\nMaybe just `#(+ %a %b)`\nLooks like so\nYa. That would satisfy my use case, would be even better, since now it's actually 50% shorter as well\nand this is exactly the same i talked about several types above - strong splitting internal args from external symbols\nOh, that's what you meant?\nand you still can write a macro and your dsl syntax for it\nyes\nI mean, someone could do `(let [%1 1 %2 2] #(+ %1 %2))` no? Though unlikely\n`%` prefix with number suffix now used for it in `#` - style lambdas\nyou can choose another convention - but you have to choose any one\nWonder if Rich Hickey would approve a patch to add support for `#(+ %a %b)` hehe. Probably not\nI dont think so optimistic :slightly_smiling_face:\nBut!\nYour can write your own .clj code preprocessor!\nHaha, ya. I'll probably just live with (fn[a b] ...) for now :yum:\nLets go back to classic :joy:\nI think the only time I really need this is when I do a map in a map\nAnd I feel, maybe there's just a whole better way to do what I'm trying to do\nI often was needed nested `#` lambdas\nand I had to choose which lambda make `#` external or internal :slightly_smiling_face:\nfor ex - update map value by function with nested map or filter\nYup\nThere's definitely many time where you need to nest, at least one level\nbut distructing syntax in `fn` macro makes choice easier :slightly_smiling_face:\nYa, maybe I should just stop using #(), and only use fn. Then I'm never accidentally nesting it and wondering why it throws exception\nGood that this exception throws at compile time!\nNot at runtime )\n<@Nieves> is that you who was asking a question about tail call recursion on fp discord?\nyes, that was me, and I have same nickname on all messengers/forums.\nyeah i thought so, just sent you an answer, if its still relevant\nthanks, but I already had a constructive discussion about it here\ngreat, np\nand I think I'l be rare visitor of discord and other channels - I have a limited amount of day time (only 24 hours :slightly_smiling_face: ) and multiple messengers wants more than this :slightly_smiling_face:\nyeah, i would like to delete slack, but this community is too important for me\n<@Johnathon> right, functions is just a jvm object, you can store and invoke it, unless you  create many function instances in a loop.\nIn fact there is no difference between anonymous function and named function.\nIf i understand it correctly.\n`(def fn-name (fn [x] x))`\nequals to\n`(defn fn-name [x] x)`\nI also wondered this recently :slightly_smiling_face:\n\n<https://github.com/clojure-goes-fast/clj-java-decompiler> answered, e.g. Clojure is smart enough make `fn`s once, in advance, rather than many, on-the-fly\n<@Mariela> in which case tho, in a loop?\n(do\n  (println (fn [x] x))\n  (println (fn [x] x)))\ncreates two different objects obviously\nyou must store function instance returned by `fn` somewhere, be it local binding or Var or even java reference type\nhere's the decompilation of\n\n```\n(defn sample []\n  (do\n    (println (fn [x] x))\n    (println (fn [x] x))))\n```\n\n-&gt; <https://gist.github.com/vemv/bcd6bb57861531b1b6b9995744d27776>\n<@Mariela> how you decompiled sample function, i can't make it work for some reason\ni mean how you called clj-java-decompiler exactly\n<@Mariela> its still created two classes for each function, instantiated and called both of them, no optimization there\n```\n    public static Object invokeStatic() {\n        ((IFn)const__0.getRawRoot()).invoke(new endpoint$sample$fn__528376());\n        return ((IFn)const__0.getRawRoot()).invoke(new endpoint$sample$fn__528378());\n}\n```\n&gt; its still created two classes for each function,\n\nyeah, I don't expect Clojure to try comparing different `fn`s searching for equality\n\n&gt; instantiated\n\nobject creation and short-lived GC are extremely cheap AFAICT\n\nthe _classes_ are created once, statically, that was my point. Perhaps a naive compiler would create the classes in runtime\n&gt; i mean how you called clj-java-decompiler exactly\n\nplain usage, wrapped in `(with-out-str)`, using 0.2.1\nhmm\n```\n(defn my-identity [x] x)\n=&gt; #'playsync.core/my-identity\n(with-out-str (decompile (my-identity 5)))\n=&gt;\n\"\n // Decompiling class: cjd__init\n import clojure.lang.*;\n \n public class cjd__init\n```\nit outputs cjd__init class\nor\n```\n(with-out-str (decompile (fn [] (my-identity 5))))\n=&gt;\n\"\n // Decompiling class: playsync/core$fn__13171\n package playsync;\n \n import clojure.lang.*;\n \n public final class core$fn__13171 extends AFunction\n```\nbut your version produced\nendpoint$sample class\nwhere sample is a named function i guess\ni'm missing something here\nwrap the `defn` call with `decompile`\ngreat ty\nah got it `fn.invoke(null, null, vector.invoke(), null)` the two first null's are probably the meta and optinal name.\n<@Nieves> <@Roselia> anonymous functions in loops was the reason i was asking. thanks for the clarification. :slightly_smiling_face:\n<@Johnathon> just create fn outside of a loop and you are set\nyup, that's where i ended up. i was just curious from a lazy programmer's perspective.\nthanks <@Mariela>. just saw this thread. that's what i thought!\nanonymous functions do not equal true when compared (of course), however they're reused under the hood\n<@Johnathon> no, two different(unequal) functions will be used independently\nor we don't understand each-other :smiley:\nhmm. i'm trying out `clj-java-decompiler` but i get the following when i run `decompile`\n```\nExecution error (ClassNotFoundException) at jdk.internal.loader.BuiltinClassLoader/loadClass (BuiltinClassLoader.java:582).\nsun.misc.URLClassPath\n```\n<@Johnathon> try jdk8\nokay i'll get around to installing jdk8 when i have some downtime :slightly_smiling_face: just reread the conversation between you and vemv and i understand now. separate objects but cheaply created and GC'ed? i'm happy to def functions when used often. i was just curious how it all worked underneath.\nthanks for explaining\nyeah separate classes for each, but one instance per function\nNow that Clojure 1.10 supports extending protocols via metadata, is there any reason to prefer attaching metadata to generic maps instead of creating new records for sets of keys corresponding to a domain object?\nI can imagine the latter is still more performant?\n```\n(let [fx (fn [x] x)\n      fy (fn [y] y)]\n             (println (fx 5))\n             (println (fx 5))\n             (println (fy 10))\n             (println (fy 10))\n             (while nil\n               (println (fy 10)))\n```\n```\n public static Object invokeStatic() {\n        final Object fx = new core$fn__14873$fx__14874();\n        final Object fy = new core$fn__14873$fy__14876();\n        ((IFn)const__0.getRawRoot()).invoke(((IFn)fx).invoke(const__1));\n        ((IFn)const__0.getRawRoot()).invoke(((IFn)fx).invoke(const__1));\n        ((IFn)const__0.getRawRoot()).invoke(((IFn)fy).invoke(const__2));\n        ((IFn)const__0.getRawRoot()).invoke(((IFn)fy).invoke(const__2));\n        while (true) {\n            final Boolean true = Boolean.TRUE;\n            if (true == null) {\n                break;\n            }\n            if (true == Boolean.FALSE) {\n                break;\n            }\n            ((IFn)const__0.getRawRoot()).invoke(((IFn)fy).invoke(const__2));\n        }\n        return null;\n    }\n```\nas you can see only two objects are created one per function\nI assume it is, haven't done any benchmarks\n<https://github.com/puredanger/bench-proto>\nI'm wondering what are the use-cases for extending via metadata? Is it more for one-off uses where you want to glue things together without setting up records?\noh right, metadata can be attached to lists and vectors as well, can't use records for those\nvery convenient for datafy and navable\n<http://vijaykiran.com/2019/04/defn-48-david-miller/>\nyeah, that episode rocked.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1303",
    "text": "Thank you I will try that!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1304",
    "text": "i remember reading somewhere that anonymous functions end up being stored/cached in such a way that keeps them efficient when used more than once, say as an anonymous comparator. is that right?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1305",
    "text": "It does not need to guess - just use `macroexpand` :slightly_smiling_face:\n```\n(macroexpand '(defn fn-name [x] x))\n=&gt; (def fn-name (clojure.core/fn ([x] x)))\n```\nand outside the loops each `fn` call seems to create a separate object, as shown in thread above and in another little example\n```\n(defn f [x] x)\n(defn g [x] x)\n(def h f)\n[(= f g) (= f identity) (= f h)]\n=&gt; #'user/f\n#'user/g\n#'user/h\n[false false true]\n```\nit seems that Clojure does not do optimization in this case, cause 1-st order objects may used as a different items\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1306",
    "text": "I'm trying to use the clojure java api (for a ticket on java app, used by java users)\n```\nIFn fn = Clojure.var(\"clojure.core\", \"fn\");\nIFn vector = Clojure.var(\"clojure.core\", \"vector\");\nfn.invoke(vector.invoke(), null);\n```\nbut I get\n```\nAn exception occured while executing the Java class. Parameter declaration missing\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1307",
    "text": "hi, so I have this collection. for each element, I map it with a function that produces a vec. I'd like to map every element of the coll then flatten/combine all the vecs together\nI tried `(transduce (map mapping-fn) concat coll)` at first, but that gave me StackOverflowError for some reason. So now i have `(transduce (map mapping-fn) (completing (fn [acc next] (into acc next))) [] coll)`. is there a prettier way?\nSounds like you want `cat`?\nwhy produce a vectors to then concat them? `(vec (mapcat .....))` does not work?\noh nice, mapcat is what I want. it's a transducer too\n<@Stacee> like this ```(into [] (comp (map mapping-fn) cat) coll)```\nthanks!\nYeah, `mapcat` as a transducer will work for this case. `cat` is useful if you have a more complex pipeline -- or the `cat`ting doesn't come after a `map`ping :slightly_smiling_face:\n```(into [] (mapcat mapping-fn) coll)```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1308",
    "text": "Has anyone run across an error in core.async where it mysteriously tries to close a boolean?\n```\nException in thread \"async-dispatch-49\" java.lang.IllegalArgumentException: No implementation of method: :close! of protocol: #'clojure.core.async.impl.protocols/Channel found for class: java.lang.Boolean\n```\nI think something weird is going on, as I\u2019m just opening a pipe between two channels I\u2019ve created myself.\nOne of the channels has been added to a pub.\nThis seems to be enough to blow everything up.\nManually piping it with a go-loop works. Interesting, and bizarre\u2026\nstop the repl, clean cache dirs, drink a coffee and try again?\nOkay, this is just crazy. Copying the source code of pipe works, but calling it as a function doesn\u2019t.\nGood idea :slightly_smiling_face:\nStopping the REPL and cleaning the cache solved the problem. Thanks for the reminder :slightly_smiling_face:\nLooks like it was just one of those weird bugs that crop up from time to time. Restarting the REPL and cleaning the cache fixed it.\nI wouldn\u2019t trust the decompiler, look at the actual bytecode. Clojure adds bytecode that clears the passed args to prevent head-holding. This is not representable in Java so the decompilation will typically look weird.\nClojure 1.9 depends on spec.alpha so shouldn\u2019t need future spec\nYou should get that automatically though with lein, etc\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1309",
    "text": "I'm thinking if I've stumbled upon a bug, I've been having GC problems with Java-JNA, which seem to be because clojure hash-map assignments assign the original variable to a null.\nAs can be seen in this short screencast I did <https://www.youtube.com/watch?v=A81I9fwV8AY> it seems that by looking at the decompiled clojure class\n```\n    public static Object invokeStatic() {\n        Object csnd = ((IFn)const__0.getRawRoot()).invoke();\n        Object thread = ((IFn)const__1.getRawRoot()).invoke(null);\n        ((IFn)const__2.getRawRoot()).invoke((Object)new bug$spawn_csound_client$fn__8111(csnd), (Object)const__3);\n        ((IFn)const__4.getRawRoot()).invoke(csnd);\n        ((IFn)const__5.getRawRoot()).invoke(csnd, (Object)new bug$spawn_csound_client$fn__8113());\n        Object[] arrobject = new Object[10];\n        arrobject[0] = const__6;\n        arrobject[1] = csnd;\n        arrobject[2] = const__7;\n        Object object = thread;\n        thread = null;\n        arrobject[3] = new bug$spawn_csound_client$fn__8115(csnd, object);\n        arrobject[4] = const__8;\n        arrobject[5] = new bug$spawn_csound_client$fn__8120(csnd);\n        arrobject[6] = const__9;\n        arrobject[7] = new bug$spawn_csound_client$fn__8123(csnd);\n        arrobject[8] = const__10;\n        Object object2 = csnd;\n        csnd = null;\n        arrobject[9] = new bug$spawn_csound_client$fn__8125(object2);\n        return RT.mapUniqueKeys((Object[])arrobject);\n    }\n```\nthat this `csnd = null;` defenitely shouldn't be there?\nNow knowing this, I can prevent this, but it's one of those annoying bugs :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1310",
    "text": "trying to upgrade an older app from clojure 1.8.0 to 1.9.0, but running into missing dependencies on what I believe is `spec.alpha` and `core.specs.alpha`. basically `:cause Could not locate clojure/spec__init.class or clojure/spec.clj on classpath.` on build\ni do have several versions of both in my local repo\n<@Bart> some dependency from your project need to be upgraded too.\nclojure.spec.alpha was first released(as alpha) as `clojure.spec` then renamed to `clojure.spec.alpha`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1311",
    "text": "probably `clojure.future.spec`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1312",
    "text": "Morning Clojurists. I am wondering if it is possible to retrieve the value of a let bound symbol using its string name?\n```(let [e :a] (some-fn \"e\"))```\nthat would be an unusual thing to do\nlol ya\npossible via macro invocation, but why?\nUrg I am afraid its a long story involving a vector of keywords and symbols used with core match and some code I am trying to write tests for.\nAs I used VisualVM, I was able to track down this GC error, it comes from the body.\n```\n(set-message-callback csnd (fn [attr msg] (print msg)))\n```\nrefering to\n```\n(defn set-message-callback [^Csound instance callback]\n  (let [msg-cb ^MessageCallback\n        (reify MessageCallback\n          (invoke [this inst\n                   attr msg]\n            (callback attr msg)))]\n    (.setMessageCallback instance msg-cb)))\n```\nSo nothing to do with this line that I commented in the video :slightly_smiling_face:\nIs suppose what I don't quite understand is where your symbols are defined when you use a let, and if there is a way to enumerate whats available in your context. I see ns-publics but that doesn't include let defined stuff.\n<@Donita> maybe you want to represent your data differently, maybe (let [e {:value :a :from \"e\"}]) or something\nAnd here is a macro to get local bindings:\n```\n(defmacro local-context []\n  (let [symbols (keys &amp;env)]\n    (zipmap (map (fn [sym] `(quote ~sym)) symbols) symbols)))\n\n(let [[a b &amp; rest] [1 2 3 4]]\n  (local-context))\n=&gt; {vec__97005 [1 2 3 4]\n    seq__97006 (3 4)\n    first__97007 2\n    a 1\n    b 2\n    rest (3 4)}\n```\noh awesome <@Roslyn>\n(keys in a map are symbols, not keywords in this case)\nso &amp;env  is a map that contains the symbols from a let - but available from within a macro\nthats perfect for me\nI used it to 'mock' a notification server (actually the mock worked better than the .not real version :))\nthank you @vlaad, <@Jasmine> and <@Liliana> for taking time to answer my question - your help is much appreciated :wink:\nit contains all available local bindings, not only from `let`, but also from `loop`, `fn` etc.\n```\n((fn [a]\n   (loop [b 1]\n     (let [c 3]\n       (local-context)))) 0)\n=&gt; {a 0, b 1, c 3}\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1313",
    "text": "very good tip <@Stephen> thank you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1314",
    "text": ":slightly_smiling_face: great, will give it a try. It is a swagger API so should do!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1315",
    "text": "are records a popular feature?\nI keep seeing \"clojure just uses lists/vectors, maps, and sets and skips using types\" but records seem like something more?\nmaybe that's a better question for the beginners channel\nThey're helpful as wrappers for stateful connections for isolating interfaces. An example would be a DB connection pool, wrapped in a record with a single field, implementing a high-level DB API in the form of a Protocol.\n\nI use maps for regular and domain data, and write specs for those.\nI think the biggest thing is protocols are quite a bit faster than a map lookup\nso for paths that are hot, but still need the kind of dynamicity of maps, records can help optimize those paths without losing semantics of a map\nI think I remember someone saying on here that they were first introduced when exploring implementing the Clojure compiler in Clojure\nThis is still fairly good advice <https://cemerick.com/2011/07/05/flowchart-for-choosing-the-right-clojure-type-definition-form/>\n<@Malik> Bottom line: use maps unless you have a good reason to use records :slightly_smiling_face:\nI\u2019m a fan of records because of the readability, generated code (e.g., creation fns), and protocol support. I use them all over, including for domain data. I use maps for intermediate or ad-hoc data. But you\u2019re right in noticing that records have been de-emphasized and that\u2019s only continuing\nAlex (Miller) has commented (several times, in several forums) that his book, Clojure Applied, used records a lot more heavily than he would do these days -- so, yes, definitely a de-emphasis over time. Part of the issue is that records don't support namespace-qualified keys and therefore don't really play nice with `clojure.spec`.\nAnother issue that I've run into is that if you accidentally `dissoc` one of the record basis fields, it changes type to a map silently which can cause all sorts of weird, hard-to-debug breakage. So you have some fields you can `dissoc` and some that you can only `assoc` to `nil` instead.\nyeah I use maps for everything unless I need speed\new, didn\u2019t know about the `dissoc`ing of a record field\nesp. now that you can extend-via-metadata, it's essentially a tradeoff of: namespaced keywords vs. speed\nSometimes I want to have a criteria for splitting some values by type. It can be done by regular maps with special `:type` keys (bad solution), maps with metadata (better, but have some issues, but I choose this way often) and records - I think is it a good solution to add any type/meta labels to data\nMy two uses of records are: where I need something map-like to participate in a protocol or where I need something map-like and speed is really important -- and I don't need namespace-qualified keys :slightly_smiling_face:\nwait, so `extend-via-metadata` ~does~ requires runtime dispatch I guess?\nyeah\ngross\nit has to lookup metadata, then lookup the symbol in the metadata\nThat's why it is opt in -- protocols have to declare that they can be extended to arbitrary objects via metadata.\n`datafy`/`nav` in Clojure 1.10 rely heavily on that.\n<@Nieves> i try really hard to namespace my keywords and let them quack appropriately :duck: by the time I want to add a `:type` key I start looking for a different way of modeling the information\nI noticed that the Component library also got an update recently to opt in to extension via metadata, which is really nice.\n<@Meagan> yes, and types/records seems to be a good way of such different way of modeling I think\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1316",
    "text": "if I dynamically load a clojure file, possibly reloading slightly changed versions of that file, is there going to be a multi-threading issue?\n(specifically, I'm planning on having the file implement a defmulti function... and I will have multiple files with different implementations)\nDefmulti extension is thread safe\nwatch out - defmulti is a no-op when reloading, unless you make an effort to clear out the old def\nand you lose all defmethods for the the defmulti if you do that\nEach extension drops the cache too, so better to do loads at the beginning if possible\nyeah, not possible :disappointed:\nif i have a \"base\" namespace that i never reload &amp; and that defines defmulti, then if i have defmethod in my reloadable namespace, that case is OK?\nOr maybe that's what you mean by extension (\"defmethod\")\nAnd by the way if there's a better way to resolve the function than to use \"defmulti\" let me know. Maybe I simply need to know what namespace is being loaded, and then expect it to have loaded a particularly named function? (a \"main\" so to speak)\nthere is resolve\n```\nuser=&gt; (doc resolve)\n-------------------------\nclojure.core/resolve\n([sym] [env sym])\n  same as (ns-resolve *ns* symbol) or (ns-resolve *ns* &amp;env symbol)\nnil\nuser=&gt; (doc ns-resolve)\n-------------------------\nclojure.core/ns-resolve\n([ns sym] [ns env sym])\n  Returns the var or Class to which a symbol will be resolved in the\n  namespace (unless found in the environment), else nil.  Note that\n  if the symbol is fully qualified, the var/Class to which it resolves\n  need not be present in the namespace.\nnil\nuser=&gt;\n```\nOK, that would avoid any defmulti drawback i suppose. thx\n<@Jenni> If you're on Clojure 1.10, there's `requiring-resolve` that will also `require` the namespace if needed, in a thread safe manner.\nI\u2019m needing an embedded scripting language (with Clojure syntax) for Clojure program, something like when you use lua or scheme to script c++ programs, but I didn\u2019t find many useful libs for this, except <http://github.com/benzap/eden|github.com/benzap/eden>, which however has its own lua-ish syntax.\nI guess that\u2019s not how you do things in Clojure?\nSo how would you do embedded scripting in Clojure?\nThe answer tends to depend on your security constraints. Who is providing this scripting data?\nMyself.\nSo no security constraints.\n<@Sixta> And what should I use to have at least some isolation?\nClojail / security manager might be good\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1317",
    "text": "what cache?\nthere is a cache of dispatch value to method impl\nwhen you add a new method extension, that invalidates all of those prior selections so cache is dumped\nif you're doing that a lot for some reason, you'll have worse performance for calls\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1318",
    "text": "Are you constantly loading different files to redefine how the defmulti dispatches for the same value?\nLate to the party comments about a conversation several hours ago: Maybe I'm weird, but I like records.  I have nothing against maps, and I used them like crazy, but if I have something that I think of as a fixed data structure, it's clearer if it's a record.  I love that Clojure has such natural support for records.  It's one of the great things about Clojure.  In addition, for certain kinds of interop, Java thinks records are Java classes (because they are), and the Java code you're working on can throw them around and so on, while you get the convenience of working with the records in Clojure.\nThanks <@Celestine> for mentioning <https://cemerick.com/2011/07/05/flowchart-for-choosing-the-right-clojure-type-definition-form> .  I had lost my links to it and was coming up blank in web searches.  My feeling is that this chart is a good heuristic.  Emerick knows a heck of a lot more than I do, but I think that the ins and outs of Clojure data structures for interop are just too difficult to summarize in a simple flowchart.  I have found that I had to ignore some of the advice in that chart.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1319",
    "text": "`eval ` is probably okay for you then? :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1320",
    "text": "is there a way to know if i'm running in a repl or in a production environment?\nprobably a lot of ways depending on how your dev env differs from prod env. maybe have a look at `(System/getProperty \"user.dir\")`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1321",
    "text": "I just use `eval` with some macros that set up a nice context for the code, and make certain values available as locals if they are mentioned in the code. I use RSyntaxtTextArea to give users a syntax-coloring editor (Swing) widget for the code, and offer HTML documentation of the semantics and values available for the type of code they are editing. It has worked out well, people are using it in big shows. <https://github.com/Deep-Symmetry/beat-link-trigger#beat-link-trigger>\nHere\u2019s the section of the user guide that shows the expression editor I am talking about: <https://deepsymmetry.org/beatlink/trigger/guide/beat-link-trigger/Expressions.html#editing-expressions>\nThe ability to do that was what made the whole project make sense. It\u2019s the core super power that a Lisp gives me. :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1322",
    "text": "Why does Clojure give back a double when you combine a BigDecimal and a double, like `(+ 2M 3.0)` is not `5M`, but `5.0`?\ndoubles are the cheaper thing to store, and no result could be more precise than a double\n<@Dann>Not sure I follow what you mean by \"no result could be more precise than a double\". See example below.\n2.0 isn't precise, if you mean something more precise than a double, use a more precise type\nRight. I understand.\noh, you mean, which one wins...\nI guess that's down to jvm method dispatch, and the intutive thing is for the method to be called on the first arg\nI think this <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Numbers.java#L661> vs. this <https://github.com/clojure/clojure/blob/master/src/jvm/clojure/lang/Numbers.java#L983> is the question here\nI think it's lines 645 and 952 that are most relevant\nwhen a bigdecimal and a double is used together, doubleops are used for the math\npresumably because math can only be as precise as the least precise number you're using\n~<@Nella> but if the first arg is a bigdecimal, the bigdecimal method is used~\n```user=&gt; (+ 2M 3.0)\n5.0\nuser=&gt; (+ 2.0 3M)\n5.0```\nlike a million years ago I was writing a core.logic program that took akind of database of facts about numeric types, and operations on those types, and would generate a bunch of static methods, with the idea that you could use it to generate a replacement for clojure.lang.Numbers\nand whoe floating point (both single and double precision) was represented, to get something that matched clojure.lang.Numbers is as a contagion\nnow I see that I misread the example, thanks\nif you have an operation with inexact floating point numbers you get inexact floating point numbers back\n<https://github.com/hiredman/Archimedes/blob/master/src/Archimedes/bar.clj#L37-L40>\ngreat name for the project\n<@Rosaline> that is a really cool program \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1323",
    "text": "<@Rosaline> should be knighted, IMHO.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1324",
    "text": "It worked perfectly thanks again :smiley:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1325",
    "text": "Hi guys I hope you like to give minor style suggestions. What is clojure idiomatic to denote a slightly updated value? In Haskell, you usually use apostroph eg\n```\nlet foo = [1, 2, 3]\n     foo' = 0 : foo\n```\nbut in clojure `'` is used to quote forms. What is a more idiomatic name for `updated-foo` here?\n```\n(let [foo '(1 2 3)\n       updated-foo (conj foo 0)]\n  updated-foo)\n```\nfirst that comes to mind is \\* (as in let - let\\*) but people use that for macro-wrapped functions so might be confusing\nYou mean `let*`? Yes I've seen it some places but people do indeed find it confusing, also as `*foo*` is the convention for dynamic variables\nyou can use `'` i guess?\n```\n(let [foo 12\n      foo' (+ foo 1)]\n  foo')\n=&gt; 13\n```\nThats true\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1326",
    "text": "for cases like this i think it is common/idiomatic to use shadowing -- just reuse foo instead of foo'\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1327",
    "text": "suffixing with `'` is idiomatic\nI've seen both, it's a thing various house styles disagree about in my experience\nthe go block compiles to a field on the channel itself, if the channel goes out of scope the go block is freed too\nif you hold onto the channel, whatever go block is parking on it is probably kept around\nit sounds weird but it works out, if the channel is not visible in any live code, the go block can never wake up again, so it makes sense that it can be freed\nThe channel never goes out of scope\nso that explains it\nyou can let the go block fall through, or let it park on something that will go out of scope...\nwhat do you mean by letting it fall through?\nexiting from the end of the block without parking or looping\nIs there way I can have it stop listening or drop the block ?\nthere's idioms for this - eg. close the channel and write the go block such that if it gets a nil (channel closed) it exits\nbut there's no clean way to force the block to exit if it wasn't written to do so\nIs it possible to open up the channel again? Or do I have to make another call to chan?\nchannels can only be closed once\nif you want to keep the channel, but tell a consumer to close, you could check for a special token like `::close`\nthat sounds like its exactly what I need\nThanks <@Dann> :thumbsup:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1328",
    "text": "If I have a React element that sets up a `go` block, with a `loop` that listens on a channel, in my `will-mount` life cycle method; when that component is unmounted... does the go block still live in memory listening on that channel?\nIt seems that, that is the case... But I am not so sure..\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1329",
    "text": "anyone know what dep to include if I want to use clojure.jdbc with mysql?\n<@Meagan> do you mean `clojure.java.jdbc`?\nwell, I actually mean your `next.jdbc` lib :slightly_smiling_face:\n<@Dann> can you explain semantics of ::keyword\nhere's what I'm trying to do:\n```\n$ clojure -A:rebl:rebel -Sdeps '{mysql/mysql-connector-java {:mvn/version \"5.1.6\"}}'\n[Rebel readline] Type :repl/help for online help info\nuser=&gt; (require '[next.jdbc :as jdbc])\nnil\nuser=&gt; (def db {:dbtype \"mysql\" :dbname \"content_service\"})\n#'user/db\nuser=&gt; (def ds (jdbc/get-datasource db))\n#'user/ds\nuser=&gt; (jdbc/execute! ds \"show tables\")\nExecution error (SQLException) at java.sql.DriverManager/getConnection (DriverManager.java:702).\nNo suitable driver found for jdbc:<mysql://127.0.0.1:3306/content_service>\n```\n:: means \"keyword, autoresolved in the current namespace context\"\nit expands to a namespaced keyword in the current namespace\nthanks\nty\nHmm, I would have expected that to work, but that's a pretty old MySQL driver.\nIt's been tested against `mysql/mysql-connector-java {:mvn/version \"5.1.41\"}`\noh, my `-Sdeps` isn't right\nYeah, just noticed\nMissing `:deps`\nworks great :slightly_smiling_face: thanks!\nBest place to ask questions about `next.jdbc` -- or `clojure.java.jdbc` or databases in general -- is <#C1Q164V29|sql>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1330",
    "text": "<@Roselia> fwiw, i have found the following page quite handy: <https://clojure.org/guides/weird_characters#autoresolved_keys>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1331",
    "text": "How to include a git repo in deps.edn which have java source. I am trying like this ```{:deps\n {org.clojure/data.csv {:git/url \"<https://github.com/clojure/data.csv.git>\"\n                        :sha \"e5beccad0bafdb8e78f19cba481d4ecef5fabf36\"}}}``` but I am getting `ClassNotFoundException` for Java files. Any pointers or help is appreciated.\n<@Jennie> Java has to be compiled first. You can't just pull in source files, unlike Clojure.\nSo it means I can't include Java in the same package/repo?\n<@Jennie> That repo does not have Java code in it so I'm not sure what you're asking/trying to do here.\nNvm, the above is just an example. Here is the repo <https://github.com/gdrte/suricatta>\nthe error is `Syntax error (ClassNotFoundException) compiling reify* at (impl.clj:106:3). suricatta.impl.IParam`\n```  gdrte/suricatta {:git/url \"<https://github.com/gdrte/suricatta.git>\"\n     :sha \"9cc71345e79b72e3504c1c94a9ba76c2925be74f\"}\n```\nRight, you can't use Java source files with `clj`/`deps.edn`. They need to be compiled (via `javac`) first.\nSo, I can't do it one go, hmmmm.\nYou would need to compile, build, and publish your Java code as a JAR somewhere, and depend on that.\naah... actually I forked that project, and upgraded clojure and some other libs. I didn't tried to send a PR to original author. I thought clojure git deps will work for me without messing the artifactory id.\nThanks for the reply Sir.\nFor some situations, you can actually hack around this by shelling out and running a `javac ...` command line.\nyeah, I will build it locally and include the jar\nYou can add a JAR to the classpath as a `:local/root` dep.\nI just did that. It worked. Thanks again.\nIt's really a good incentive to try to do everything in Clojure :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1332",
    "text": "every week I get an email from the Rust team called \"This Week in Rust\", it's an update on news, jobs, calls for participation in open source projects, events and so on\n\nis there an equivalent for Clojure?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1333",
    "text": "Cherished Clojure weeklies are: Daniel Compton\u2019s The REPL newsletter <https://www.therepl.net/Newsletters/> and Eric Normand\u2019s <http://PurelyFunctional.tv|PurelyFunctional.tv> Newsletter <https://purelyfunctional.tv/newsletter/> \nI also really like Alex Miller\u2019s weekly update blog: <http://insideclojure.org/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1334",
    "text": "What\u2019s up with this?\n\n```\n  (= 40.4 (float 40.4)) ;; =&gt; false\n  (= 47.5 (float 47.5)) ;; =&gt; true\n```\nFor me, it's the otherway round. Comparing precision on floats on the JVM, using the equals method, I suspect is the same issue when comparing floats on Java on the JVM. You're not sure on the precision that the JVM uses per call.\nThere's lots of results on google on comparing floats (on Java, but equality valid to Clojure)\n<https://dev.clojure.org/jira/browse/CLJ-1036>\n```\nRich Hickey added a comment - 05/Sep/13 8:27 AM\n\nIt is out of scope for Clojure to fix this for Java types Float/Double/BigInteger\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1335",
    "text": "I have a `com.cognitect.aws/glacier` question; I want to run `list-vaults` but when I run\n```(aws/invoke dev/gl {:op :ListVaults\n                    :request {:accountId \"099465141348\"\n                              :apiVersion \"2012-06-01\"\n                              }})```\nI get\n```=&gt;\n{:code \"MissingParameterValueException\",\n :message \"Required parameter missing: API version\",\n :type \"Client\",\n :cognitect.anomalies/category :cognitect.anomalies/incorrect}```\nwhat is the secret sauce for getting the `apiVersion` accepted?\n(I tried putting into ```(aws/client {:api :com.cognitect.aws/glacier\n                     :version \"2012-06-01\"\n                     :region :eu-west-1\n...)``` but that didn't help either\n<@Danna> turn on request validation\njust with `(aws/validate-requests gl true)` you mean?\nsame error message ..?\nAlso, `(aws/doc client :ListVaults)`\nMake sure the keywords you're providing are correct\nUsually they are capitalized\nyeah that doc does not talk about API versions at all\nHave you tried omitting the arguments\nJust empty map\nyes so I get a helpful error message if I leave out the required `:accountId`\nI've never seen an API that makes you send in the version\nOk\nI think there might be a regression for the AWS glacier API floating around; but I'm not quite sure\nthese are all JSON apis at the AWS end of things aren't they\nthere's a ```x-amz-glacier-version: 2012-06-01``` header in some of the docs\n<https://docs.aws.amazon.com/amazonglacier/latest/dev/api-error-responses.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1336",
    "text": "does turning tuples into a map destroy information about order?\n<@Jeannette> Yes, maps do not guarantee order. If you need a sorted map I suggest looking at: <http://clojuredocs.org/clojure.core/sorted-map>\nAnd <http://clojuredocs.org/clojure.core/sorted-map-by>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1337",
    "text": "Is this a bug?\n```user=&gt; :0\n:0\nuser=&gt; ::0\n:user/0\nuser=&gt; (ns foo)\nnil\nfoo=&gt; (ns user)\nnil\nuser=&gt; (require '[foo])\nnil\nuser=&gt; ::foo/0\nSyntax error reading source at (REPL:2:0).\nInvalid token: ::foo/0\n```\nthat is actually a very complicated question connected to many mailing list posts, irc and slack discussions\n`:foo/0` instead of `::foo/0` ? (already namespaced)\nat one point `:0` was made not to work, and then that change was reverted\nbecause leading numbers are invalid identifiers?\nwhich you might interpret as positive intent that `:0` is intended to work\nit's more that the autoresolving is the only one that doesn't work\nbut my advice would be to behave as if `:0` doesn't work\n<@Emmy> :0 was never designed to work, a version of clojure existed where it worked anyway, it was kept that way. ::foo/0 never worked because the issue was understood before ::foo/bar existed\nok cool thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1338",
    "text": ":0 isn't meant to work, but happens to\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1339",
    "text": "Could someone remind me, I think I remember seeing a fn named something like `requiring-resolve`. Where would I find this :thinking_face:\nclojure versions 1.10+\nOkay, I\u2019m on 1.10.0-alpha7. Is it in a specific ns? Intellisense is failing me\u2026\nwhy use a 1.10 alpha?\nit's in clojure.core, I'm not sure if it was present in the 1.10 alphas or not, but it is present in the 1.10 release\nI see. Just haven\u2019t gotten around to changing that version string quite yet. Thank you!\n~oh, I might be wrong, it might be a 1.11 thing...~ - nope, definitely here in 1.10 ```$ clj\nClojure 1.10.0\n(ins)user=&gt; (requiring-resolve 'clojure.set/union)\n#'clojure.set/union\n```\nAh okay, that would at least explain why I can\u2019t find it any of the usual channels\nYep, there it is. Thank you.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1340",
    "text": "It was added till very late in the release cycle \nlets vote what to read next joy of clojure 2nd or programming clojure 3rd ed?\nI voted for JoC, assuming you haven't read earlier editions of either.\nright, i didn't\nJoC 1ed was my first Clojure book (but I had Lisp/FP background). Clojure in Action 1ed was my second Clojure book.\ni have java(2 years) and common lisp(3 months + PCL book), 4 months of clojure background\nBack then, there weren't too many options :slightly_smiling_face: I loved Clojure Programming when that came out. Since then I've bought almost everything except Living Clojure and a bunch of the somewhat random Packt Publishing Clojure books (variable quality!).\nYou'll love JoC then!\nAnd then maybe Clojure Applied? Or Programming Clojure 3ed.\nor both :hugging_face:\nGetting Clojure is an interesting read to.\nClojure Cookbook too, although it's getting a bit long in the tooth (maybe there's a 2ed planned/in the works?).\nno idea\nOh, apparently I _do_ have Living Clojure. It just isn't inside a folder like all my other O'Reilly books...\nyou sort by publisher?\ni prefer by language \\ field\nSeveral publisher auto-sync to Dropbox, so those are by publisher. That way I can read the PDFs on any device.\nSo I have 82 tech books by Pragmatic, O'Reilly, and Manning. And then maybe another 50 or so ebooks from other publishers.\n(My OneDrive a/c has 127 PDFs but that includes technical papers, book previews, reference cards, and a variety of other non-tech-book things so it's hard to be sure)\nhere we go\n<https://gyazo.com/c9649268a0ca6ae308f692ce57935160.png>\nthats so cool, i dont have that much money yet :smiley: nor time\nMostly time. I've been accruing tech books for decades.\nSeveral publishers let you \"register\" your physical copy of a paper book and then you can d/l the ebook for it. But I still have a pretty massive paper library from early decades. Including classics like \"A Microprogrammed Implementation of APL\" and \"Programming the 6502\" :slightly_smiling_face:\nthats really smart move\n<@Celestine> how fast do you read technical books? Like about something new.\nI'm a speed reader so, very fast...\nI mean it takes me few days per chapter including practice, exaples and side sources like articles on the topic.\nIf I'm practicing alongside, that slows me down a bit. I think I got through Seven Languages in Seven Weeks, including all the exercises in less than 30 hours total. Maybe even close to half that? Can't remember.\nSo yeah, i'm about 5 times slower than that.\nOn average, I read about a page a minute. Seven Languages is just over 300 pages. Yeah, I must have gotten through that in a lot less than 30 hours, even with exercises :neutral_face: It's kind of a weird \"skill\". I was tested in kindergarten and they figured out I have some sort of semi-eidetic memory which means I don't read linearly -- I sort of \"snapshot\" blocks of text etc and then my brain somehow decodes them asynchronously.\nor it's a magic and you are a wizard\nalright thank you Sean, time to enjoy the joy of clojure\ncya\n<@Julianne> That's how `s/or` works.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1341",
    "text": "I think it was in one of the final Beta versions?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1342",
    "text": "Hi all, I am hitting a weird issue with core.spec when trying to add extra assertions to a `s/keys` spec using `s/and`.\n\nI have been able to make a minimal example of the problem.\n\n```\n(s/def ::bar (s/or :string string?\n                   :int int?))\n(s/def ::foo (s/and (s/keys :req-un [::bar])\n                    (fn [x]\n                      (prn x)\n                      true)))\n\n(s/explain ::foo {:bar \"bar\"})\n;;=&gt; {:bar [:string \"bar\"]}\n;;=&gt; Success!\n\n(s/explain ::foo {:bar 1})\n;;=&gt; {:bar [:int 1]}\n;;=&gt; Success!\n```\n\nYou can see that the predicate after the `s/keys` spec now has the `:bar` value transformed to a pair by the `::bar` `s/or` spec. This is not what I expected.\nIt conforms the value into a data structure that shows _how_ it matched the spec.\nthanks <@Celestine> I sort of understood that, I didn\u2019t realise it got conformed and passed the conformed value through each predicate in the `s/and`.\n```user=&gt; (require '[clojure.spec.alpha :as s])\nnil\nuser=&gt; (s/def ::bar (s/or :string string? :int int?))\n:user/bar\nuser=&gt; (s/conform ::bar 42)\n[:int 42]\nuser=&gt; (s/conform ::bar \"42\")\n[:string \"42\"]\nuser=&gt;                  ```\nYes, `s/and` flows values through so if something conforms a value, that is what's passed on to the next predicate.\nahhh, ok thanks I didn\u2019t understand that part. Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1343",
    "text": "hi, i can't see how read-string can possibly execute code without using the eval. (read-string \"(+ 1 1)\") evals to a list (+ 1 1). \"(+ 1 1)\" is the user input.\n(read-string \"#=(+ 2 3)\") =&gt; 5\ncould someone explain how this gets evaluated?\n<@Eufemia> I\u2019m not sure I fully understand the question, but \u201c#=\u201d is the read-eval literal and calls `eval` here: <https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj#L588> more notes, <https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj#L866>\n<@Elayne> thanks. read-string is called at runtime parse the this string and return a reader macro expresion. But arent macros expanded at compile time? I dont get how that parsed expression gets run\n<@Eufemia> reader macros aren\u2019t the same as macros, they are handled at read-time\nhow many phases does the 'runtime' compile executable have then? read-time + eval-time?\nwell, if you have `eval` then you have all the phases, no?\nmaybe some of the info on this page will help  <https://stackoverflow.com/questions/5669933/is-clojure-compiled-or-interpreted#5670203>\n&gt; the dynamic and interactive nature of Clojure that means you can invoke the compiler at run-time if you want to. This is all part of the Lisp \u201ccode is data\u201d tradition.\nthank you <@Elayne> i think i figured it out my doubt\nls\nis there a way to use a leiningen profile in a macro?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1344",
    "text": "is there some doall + map macro? Similar to run!, but the return the collection?\nWhat are you trying to do?\n`(doall (map #(..) col))`\nif i didn't need the result, i could do `(run! #(...) col))` which is nicer\nim looking if there is something similar\nOne way is to use `mapv` instead of map. It\u2019s eager. Another is to use transducer version `(into [] (map #(...)) coll)`\nThird would be to use `reduce` instead of `map`.\nlast time someone asked a similar question, I think the most Clojure-y answer was to use a transducer\nHeh, tried this out of curiosity and it works. You can use normal function composition.\n```\nuser&gt; (def doall-map (comp doall map))\n#'user/doall-map\nuser&gt; (doall-map #(or (println %) %) [1 2 3])\n1\n2\n3\n(1 2 3)\n```\nThis might have some serious caveats though, I\u2019m not sure. Personally I like the transducer version most.\nDepending on the situation of course.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1345",
    "text": "cool\n:slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1346",
    "text": "Hello, I\u2019m used to the `cond` from Scheme, does the `cond` in Clojure support the `=&gt;` syntax?\n<@Klara> I'm not familiar enough with Scheme to know what that syntax means -- could you explain?\nlike, in Scheme:\n`(cond ((re-match ...) =&gt; (lambda (match) ...)))`\n`if-let` feels a bit like it, but it only allow one test\nAh, take a look at `condp` and see if that's closer to what you're looking for...\nI found <https://github.com/Engelberg/better-cond>, but I don\u2019t wanna take on a library\nyeah, i was looking at `condp`, but it doesn\u2019t seem to capture the result from the test\nare you sure? `its result-fn, which must be a unary function, is called with the result of the predicate as its argument`\noh hmm\nlet me try\ni want to access the result in the consequent part\n```(condp = 4\n  2 :&gt;&gt; #(println '2 %)\n  4 :&gt;&gt; #(println '4 %))``` prints `4 true`\noh oh\nBTW, it's better not to post the same question in multiple channels -- so folks in one channel don't have to spend time answering something that was already answered elsewhere.\n<@Klara> Did `condp` solve your needs?\ni\u2019m gonna give it a try, thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1347",
    "text": "I just wanna say, I\u2019m really happy that `clojure.pprint/cl-format` exists, it\u2019s a cool piece of work!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1348",
    "text": "Cool, didn't know that such a thing exists.\nBut be aware of <https://dev.clojure.org/jira/browse/CLJ-1950>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1349",
    "text": "hello,i am reading a spark book,and i am trying it with Clojure,everything is simple so far,i also saw the sparkling library,the question i have is this\ni can wrap select of spark to make the use more simple like this\n(defn select [dataset &amp; col-names]\n  (.select ^Dataset dataset (into-array (map (fn [c] (if (string? c)\n                                                       (functions/col c)\n                                                       c))\n                                             col-names))))\nbut when i use it,catalyst knows what my select function is? or i loss the optimizations?\nin general i was wondering if using spark from Clojure is simple or problems will occur ,but so far it seems simple to use spark from Clojure\ni found that the plans are exactly the same,so spark i guess has the way to find what my function will do to the dataframe thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1350",
    "text": "Yeah it's just a declarative specification either way, regardless of what intermediate functions you call to get there. Catalyst is pretty smart.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1351",
    "text": "(not trolling, geniune question) Is there a useable GADT (like subset of ocaml, subset of rust) type system for use in Clojure yet, or is Racket the closest to \"scheme with gadt\" ?\n<@Felix> I'm not sure what GADT would even look like in Clojure.\nI'd settle for just sum + union types\nto be able to declare things like\n\n(struct Cat (:name String) (:age int) (:lives_left int))\n(struct Dog (:name String) (:age int) (:can-defend bool))\n(enum Animal [Cat, Dog])\nmainly I want to be able to look at a var and know valid fields on the var (rather than explore it in a REPL)\nHave you looked at `clojure.spec`?\nYes, spec is not what I want.\nClojure is a dynamically typed language. What you're asking for doesn't really fit in.\nDoesn't Gadt not make any sense in a dynamically typed environment?\nSpecs provides guarantee of \"these invariants seem to hold on these randomized tests\", whereas I'm looking for \"the compiler will not allow these invaraints to be broken\"\n`clojure.spec`, multi-methods. Those are Clojure's tools for solving that sort of problem.\nOr records and protocols.\nthere was some work <https://typedclojure.org/>\n<@Felix> Have you looked at \"Typed Clojure\" -- yeah, was just about to suggest that...\nAre you saying you want a DSL within Clojure which has static type guarantees of the kind that also supports GADT?\n<@Madeleine>: DSL or host language -- I'm okay with either. I'm looking for a practical scheme that supports sum + union types.\n<@Celestine>: is typed.clojure used in practice? I thought it was still experimental\n<@Felix> Typed Clojure is an ongoing experiment that Ambrose has been working on for years. We looked at using it at work years ago but it was difficult to use -- and Ambrose has done a lot of work on making it more gradual and easier to use.\nThis is the closest I've seen: <https://github.com/lambdaisland/uniontypes>\nNot quite GADTs though\nWe tried Schema and Typed Clojure several times, and went back and forth between them, and gave up on both in the end. We _are_ heavy users of `clojure.spec` at work tho'...\nI don't care about compile time vs runtime errors. The salient part is I catch the errors \"before it leaves my laptop\".  spec + test.check give me that\nIndeed.\nOtherwise, there's very little apart from core.typed for static type checking in Clojure. That said, all types are union and sum of everything all the time. So you can still model things that way easily. You just don't get compiler checks.\nIt's like going to an Italian restaurant and asking for gluten free...  Gotta embrace the fact that Clojure is a dynamic language\nIf you want real typed lisp, I'd look at either carp.lang or typed racket or shen\nHahaha I always forget about Cali <@Celestine> \n<@Marlyn> I think it's more like walking into a Mac store and asking \"do you have windows emu support yet\" ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1352",
    "text": "Hey, in California, you can get gluten free in Italian restaurants! :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1353",
    "text": "I think the thing is, Lisp don't work very well with strong static types. Because fundamentally, they're about interactive inside out development.\nFor example, appart for carp.lang, I don't think I ever saw a static typed lisp, whose static typing wasn't gradual or optional.\nKeep an eye on <https://github.com/arohner/spectrum>\n\nMeanwhile you can use sth like <https://github.com/jeaye/orchestra> . If you spec _code_ (as opposed to data*), useful errors will pop up far more frequently than with generative testing alone\n\nBasically it's like Clojure's :pre and :post\n\n*non exclusive approaches\ni'm going through Programming Languages Application and Interpretation and its in a typed lisp. They exist\nthere's also shen i think?\nRacket was a cited example above\nRacket and Shen are both optionally/gradually typed only.\nThe thing is, the static types restrict what you can do. And Lisps want to do things that don't bode well with static types. Most of core.typed was issues with trying to figure out ways to type existing core functions. Similarly, the syntax doesn't work very well with types either. Where do you add the type defs in the sexpr?\nYeah, when we used `core.typed`, one of the biggest problems I had was getting it to accept code that was idiomatic but hard to infer types from -- so I found myself refactoring to much less idiomatic structure in order to successfully type check the code.\nThere's very simple examples (and maybe someone with better type theoretic knowledge can correct me), but for example, I have a function that takes a keyword followed by one or more values until another keyword is reached which can also be followed by one or more values. What type is that?\n`[:add 10 23 45 66 83 :remove 23 98 34]`\nFor example\nYou could say it's a vector of either keywords or ints\n`clojure.spec` can specify that. I suspect dependent types (like in Coq etc) can as well?\nBut its not really what it is. So that would be pretty loose, and almost worthless for correctness. Since bugs would be things like using the wrong keyword, or having the order of the keywords wrong.\n<@Celestine> Ya exactly, that's where I was getting at with my example. Spec is much better. Because I can spec those highest level constraints, like that :add should come before :remove for example.\nMaybe dependent typed could as well. But it's my in impression they still require too much effort from the programmer for widespread adoption. Not a lot of people are willing to take the productivity hit from using them\nYeah. Types get you some of the way but no matter how much effort you put in, they can't specify as much as `clojure.spec` in some areas -- and the same is true in the other direction. Types give you an upfront safety net that certain incorrect code won't compile, which can save time (but of course, certain _correct_ code won't compile either).\nFor sure. I just feel overall, the things people like about Lisps are the things that are hard to impossible to type, starting with heterogeneous lists of variable length. You can cons anything on them, and that's amazing. If you constrain what you can cons on it... well, such a Lisp is slowly becoming less of a Lisp and more of just Haskell\nSo you reach a point where there is no point in having strong static typed Lisp. And you realize if that's what you want, just use Haskell or OCaml or Java even\nAye, I've used everything from assembly up to Haskell and I'm one of those devs who just gets frustrated with type systems. I think programmers are inherently either \"statically typed people\" or \"dynamically typed people\".\nWhen doing a defrecord or type while implemening a protocol, does it matter if your implemented function use the \"this\" binding or the bound variables in the protocol definition?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1354",
    "text": "Type systems are becoming more expressive:\n<https://youtu.be/4i7KrG1Afbk>\n\nDependent types allow for support of contract-like constraints.\n\nThe use case of sub-selection for `spec` schemas can already be handled by structural types and row polymorphism, as in Typescript and Elm.\n\nIf you\u2019re comfortable with using `spec` for that particular use case, then you\u2019d be comfortable using static types in Clojure.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1355",
    "text": "I often see them omitted as `(some-protocol-fn [_ some-other-args] ..)`\nI guess using this would give you the whole entity, for assoc or update.\ndoes anyone here use some kind of coroutine library with clojure? I'm used to using M:N threading with things like Elixir and Go and the idea of possibly starving out OS threads by blocking actions concerns me\nit might be a remote concern, but still a concern\ncore.async implements CSP with a thread pool\nbut you can still block the thread pool by doing blocking IO on a channel\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1356",
    "text": "Can you talk about this more? What you mean by sub-selection? What is the use case for it, can you give an example?\nCore async would work without a thread pool. It could be tuned to a single thread.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1357",
    "text": "Cross-posting the underlying question from <#C0744GXCJ|cursive>.\nI have a code that calls function with some not null arguments, but one of the arguments becomes null in the function's body.\nHere's a piece of code of interest, it's from `cognitect.transit`:\n```(defn write\n  \"Writes a value to a transit writer.\"\n  [^Writer writer o]\n  (.write ^com.cognitect.transit.Writer (.w writer) o))```\nDuring debugging, when the current line is the very first one, `writer` is not null. But as soon as I step into , it becomes null for no apparent reason.\n\nHow can such thing possibly happen?\nNevermind that - I got confused by the inconsistently highlighted stacktrace, and the reported null value is not null in reality.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1358",
    "text": "Hi! Is there a readline lib that I can use to build completion and history function on terminal input?\nSomething similar to <https://github.com/chzyer/readline>\n<@Sixta> No Clj lib available ?\nI found `bhauman/rebel-readline`, but couldn\u2019t find a simple example of how to use it for my use case. It\u2019s mostly documented for REPL use.\n<@Nisha> none I've encountered\n<@Nisha> You shouldn't hesitate to use Java libs from Clojure. It's part of the power that Clojure brings to make that easy and possible. Rebel-readline uses JLine itself.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1359",
    "text": "Jline probably\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1360",
    "text": "how are people using `tap&gt;` in practice?\n<@Meagan> For debugging, instead of \"println\" debugging.\nWhen I'm debugging, I add `tap&gt;` calls (instead of `prn`/`println`), and eval the top-level block (to redef the function I just changed), and then run whatever scenario I need and see what crops up in REBL.\nI know you use rebl right. Wondering if other people do the same but just wire it to prn \nSlow typer on my iPad :stuck_out_tongue_winking_eye:\nBefore using REBL, I used to connect an additional Socket REPL and telnet into it and add a tap watcher that `prn`'s stuff.\nThat way tap output goes to a separate terminal from my regular stdout.\nDo you leave in tap after you commit?\nNot generally.\nWhile it's safe to leave it in, I don't see much point in having `tap&gt;` calls in production code.\nIf you need tap-debugging in production, you can always connect to the process, eval in new function definitions with `tap&gt;`, do the debugging, and then eval in the original version again.\n(mind you, if you're running with direct linking enabled, that workflow doesn't always work, unless you re-eval further up the call chain).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1361",
    "text": "Is there a way to pretty-print the output of `macroexpand-1` to make it more readable than 1 long line? Thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1362",
    "text": "are you looking for `clojure.pprint/pprint`?\nI just looked for a user named \u201ctodo\u201d. smh\nI thought there was haha\noh man, so that wasn\u2019t just a sprinkling of Spanish?\nNo :yum:\nanyway, happy to provide pointers to any type-related info. I\u2019ve been a long-time Clojure user and espouser of dynamic types. over past few years my opinion on types has changed based on experiences working on large Clojure and Python projects\nI still use Clojure daily for work and hobbies, but starting to switch over to Haskell for some things\nIf you were talking to me then, I was talking about full strictly static type systems. Not optional. Where every single construct needs to be typed. I still feel that doesn't work well with Lisps. Dependent types add a huge annotation burden which would defeat the Lisp dynamic interactive live programming flow, and make the sexpr syntax even more of an eye sore I feel. Hindley Milner typed can't type all of Lisps constructs, and if you changed Lisps so it could, it's no longer Lisp, but a weird sexpr like syntax for Haskell. The only types I think could work are simple systems like Java's type system. Common Lisp has support for those optionally for example and that works fine.\nyeah, I agree with most of that and especially the optional portion. That\u2019s the direction I wish Clojure was headed, optional/gradual typing\nI wasn't so much talking about being pro static or dynamic, but more that this holy grail everyone wants, which would be the dynamism of Lisp and the compiler checks of Haskell I think is a pipe dream, at least for now, because they literally oppose each other. What is great of Lisp is dynamism, which invariably means you can't have strong static guarantees. So you need to choose which one you prefer.\nI don't think optional typing work honestly\nThat seem to have been an issue with core.type adoption\nit\u2019s kind of frustrating to see `spec` continue as a runtime-only checker when other languages can statically check the structural types that seem to be the main motivation behind `spec`\nThey can't though\nNot without limiting the expressivity of the language\nI think optional typing can work, I agree that core.typed didn\u2019t get there\nYou don't feel optional typing is a Jack of all trade master of none?\nmm, so you can have specs that act as contracts. where one can use arbitrary predicates, and I agree those can\u2019t be expressed in most type systems\nWhat good is it that X is typed, if the Y it calls or the G that calls it aren't\nbut look at Rich\u2019s talk, and the specs he uses as examples can be statically checked. proof being Typescript, Elm, and OCaml\nthose borders are then checked via tests like spec does now\nbut regions of code that are fully annotated (or inferred) can be checked statically\nHum... I don't remember the details, but his whole spiel was that Haskell and other strongly typed system did it wrong, and so did he with spec 1\nyeah, he used a strawman where Maybe types were used to represent optional fields\nIt was more of a criticism of being forced to define things where they aren't in the domain I felt.\nIf you define an ADT, you need to specify all that could be in it.\nHaskell does have the ability to express structural types, but it is a little bit hacky. The languages I already mentioned: Typescript, Elm, and OCaml; are statically typed and _do_ have solid support for structural types and handle the issue Rich brought up\nProblem is, different time or states have different requirements of what could be in it.\nyep, exactly\nHow? I don't have experience with those\nLet's say I had a Customer with a Name and Credit Card\nBoth are mandatory for some functions, but required for others?\nHow you model that?\nso the keywords to search for are \u201crow polymorphism\u201d and \u201cstructural types\u201d, but as for how they work, it\u2019s similar to what\u2019s coming in spec2. You have some type schema/definition, and for a function that only requires a subset of the fields defined in the schema, the type/spec for the function parameter is defined as a subset of the schema\nOk I see.\nYa, I guess that was his insight. And Haskell doesn't support them first class, which was his criticism\nBut doesn't both of these suffer if safety?\nFor static systems\nHow do they handle type equality or mismatch?\nin Haskell, the closest reasonable solution is probably lenses. but that isn\u2019t really row polymorphism. if you ask Haskell folks for three or so top issues to fix in the language, records/row types will be one of them\nhow do you mean?\n<https://v1.realworldocaml.org/v1/en/html/objects.html>\nthere\u2019s some info on row polymorphism in OCaml. maybe that helps? as to what the type checker is doing, I don\u2019t know\nSo, say you have a record of [:a :b :c]. And there's a function that needs [:a :c] and its given [:a :c :x :y] as input. And say it returns [:a :b :c], how does it know these are all compatible types?\nbecause you only need [:a :c], and any additional fields are ignored\nnote that :a and :c will have types too, so the matching is based on field-type pairs\nOkay, the link you sent me mentions the limitations I'm talking about.\nIn the \"Subtyping Versus Row Polymorphism\" section.\nThey talk how each approach has trade offs, and neither can perfectly give us the behaviour we want, but that's the compromise of static type systems often time, you adapt to the way the type checker works in order to rake its benefits\n\"For example, lists of heterogeneous elements cannot be created using row polymorphism\"\nLike that's a pretty big blocker for Clojure and most Lisps. Since they're most primitive construct are heterogeneous lists\nthat\u2019s also an implementation detail of the type checker for a specific language\nHum... are you sure? They don't make it sound like it. It seems to be a limitation of row polymorphism. Subtyping can do it, but then things can't be type inferred and needs to be explicitly casted it seems.\nI honestly don\u2019t know enough about OCaml to discuss it. =/ Let me do some reading and see if there\u2019s an example of a type system without that limitation\nI need to look more into both of them for sure. Seems interesting\nThanks for pointing it out\nthanks for discussing it, I wish that happened more here! it\u2019s good to run into the limitations\nYa, thanks to you too. I like both static and dynamic languages. For different reasons. I prefer using certain dynamic langs, but not all. Only Lisps really, otherwise I prefer statically typed languages. I'm more experienced with C++, Java, C#. But have learned Haskell amateurishly. In general though, I find every static system is restrictive in one or another way. That's inherent from the problem. How do you teach a computer to understand and reason about code in a way that it can catch the bugs in it, when you couldn't. Nobody would say no to that, if it didn't come with trade offs. And even between strategies for achieving this there are many trade offs. So I tend to be skeptic of the static type advocates that don't start with talking about limitations and sacrifices of their approach :yum:\nThat doesn't mean sometimes the trade isn't worth it. But you need to accept that you will model things, not necessarily the way that you want to model it, not necessarily the way that is most intuitive, and not necessarily the way that the domain has it, but the way the type checker needs it.\nAt the end of the day, for me, it comes down to what I'd rather do and who I trust more. Could I personally catch more bugs if I was modeling it my way, and having fun doing it? Or would the type checker catch more bugs if I modeled it its way, and felt frustrated throughout the process :yum:\nSo in practice, I found I do better with Clojure over Java,C#,C++, but I do worse with Python, JS and Ruby.\nI guess though,  I need to give Haskell, OCaml and PureScript a real good try to see if I end up doing better with them\nHave to run to dinner, but definitely up for talking more about types and trade offs.\nThe biggest hurdle for me with Haskell was getting comfortable with the handling of Effects through types. OCaml or others that aren\u2019t pure (i.e., monads or some other effects system isn\u2019t required) are maybe a good place to start exploring\nAnd Idris\u2019 dependent types are really cool \nHave a good meal\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1363",
    "text": "check out Rich\u2019s _Maybe Not_ talk. he discusses having a spec schema from which you can select a subset of fields and provides motivation\nOkay, maybe I thought you were responding to me. That's why I got confused. But now I think you were talking to todo.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1364",
    "text": "What is the use case of `type` function when there is `class`? When it's useful to put `:type` on something's metadata?\nsince you can \"type\" anything supporting metadata I guess one answer could be that it's useful with multimethods dispatching via (type ... )\noh, makes sense\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1365",
    "text": "is there any book or written series about clojure compiler?\nnot to my knowledge\nwish I had the time to write such a thing :) in a broad sense, the clojure compiler is just translating a relatively small set of possible expressions to java bytecode, and as such is pretty simple as far as compilers go\nthere's essentially no optimization - really Clojure leans on the JIT rather than doing much itself\nfortunately, the jvm is pretty great at it\nthe defn podcast with the guy working on ClojureCLR was super interesting. he went into differences between JVM and CLR and how one could optimize things for one over the other\nsounds very interesting, is this the one? <https://player.fm/series/defn-2464514/ep-48-david-miller-and-clojure-on-the-clr>\nyep\nThe nice thing about the clojure compiler is that it's a one pass translator to bytecode\nAnyone else have this issue? I'm using the Clojure CLI and have dependency that is a git repo. If I try to update the sha I get this error. ```Destination path \"my-repo\" already exists and is not an empty directory\norg.eclipse.jgit.api.errors.JGitInternalException: Destination path \"my-repo\" already exists and is not an empty directory```.\nI'm also having a hard time finding exactly where the code gets checked out.\nI've had that error before and I haven't been able to pinpoint it, but I remember something about auth\nAll the files go in .gitlibs <@Abbey> \nThis was really good\nI would buy this day one :slightly_smiling_face:\nwell, don't hold your breath\nyeah i've seen this one few days ago\n<@Leda> check `future-done?` function\nthere's also `realized?`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1366",
    "text": "Thanks, <@Marlyn>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1367",
    "text": "Hello guys, i'm writing tests for an async function that uses `future`\nBut in order to test it, i need to know when the background process have finished, but because it's async i have a return value right when i call it. How can i handle this situation?\n:)\nwow, thanks\nwhats the difference?\nI think realized? is more general though (but I've heard multiple warnings about using it on lazy things)\nrealized? works on promises, delays, futures, and lazy-seqs\nand from what I hear, using it on lazy-seqs is a bad code smell\ni mean if we have realized why do we have more specific future-done?\nprinciple of least power I guess  - also it uses the java Future api, and not the IPending api so it works on java futures, not just clojure's specific implementation of futures\nevery clojure future isa java.util.concurrent.Future, but not every j.u.c.Future is a clojure future\nwell, i can use `future-done?` but still i have to supply a `Thread/Sleep` ? or i can use something like this `await-for` ?\nyeah i see\n<@Leda> what do you  want to do if the future takes to long?\nrealized is bound to be used for IPending implementors\nif you always want to wait for it, just use deref / @\nif you want to timeout, that's an optional arg to deref\n<@Dann> nothing, the test will fail i guess\nin neither case do you actually need to explicitly check if it is realized\n<@Leda> then I'd use deref, with the timeout arg (how long is too long? probably more than 0 ms...) then use the timed-out value as your failure condition in the check\nok i'll try\n<@Leda> ```(ins)user=&gt; (let [f (future (Thread/sleep 1000) ::OK)] (deref f 500 ::failure))\n:user/failure\n(ins)user=&gt; (let [f (future (Thread/sleep 1000) ::OK)] (deref f 5000 ::failure))\n:user/OK```\nwas about to write that snippet :smile:\nso, `deref` waits for the future to be done?\nyes it blocks\nnice\nyes, by default it blocks, but with the extra arg it has a timeout\nthere's also future-cancel, if you know your code calls some cancellable method\nnice to know, async is something i didn't really used before on clojure or other langs\ntry core.async also, it provides a nice way to build concurrent applications\ndon't think i need that much, it was just a function that needed to be async because it's just a HTTP response 201, Accepted and being processed\n```\n(deftest download-musics--return-file-string\n  (let [result (deref (core/download-musics test-links) 180000 ::failure)\n        _      (shell/sh \"unzip\" result :dir core/resources-folder)]\n    (is (string? result))\n    (is (.exists (io/as-file (str core/resources-folder result))))\n    (is (= (+ 1 (count test-links)) ;; This is because file-seq add's the own arg folder at the beginning of the seq\n           (count (file-seq (io/file (str core/resources-folder (subs result 0 (- (count result) 4))))))))))\n\n\nUncaught exception, not in assertion.\nexpected: nil\n  actual: java.lang.ClassCastException: class java.lang.String cannot be cast to class java.util.concurrent.Future (java.lang.String and java.util.concurrent.Future are in module java.base of loader 'bootstrap')\n```\n\n<@Dann> what i'm doing wrong here?\nstring\nThe error message you\u2019re getting is because you\u2019re trying to treat a string (the result) as a ref (like an atom)\noh ok\nbut i can't really change the behavior of this function and it's output, guessing if i could make a wrapper that returns some kind of ref?\nyou can change `download-musics` but not the deftest?\ni can change deftest but not `download-musics`\nit's output goes directly to a handler that returns an HTTP response based on it, and using a `ref` as return value would break the response pattern that i'm using for all my functions\nwhy does the deftest try and `deref` it?\nbecause `download-musics` is async and i need to wait the background process to finish\n`deref` blocks the main thread until it's done, but i didn't know that it expects a `ref`, or, i knew it but i forgot :disappointed:\naccording to the error, you don't\nit's returning a string. not a future\nyes, because i need an immediate response from this function, in this case, a string\ni'm struggling to write a test for it\nit sounds like you should remove the `deref`\nI dont' really understand what's going on. are you redefing the `download-musics` to just return a string or something?\n`download-musics` is an async function, which returns a string. Inside it's body, there is a `future`, to do the background work (download the musics), but i need an immediate response of where this musics are going to be stored, so it returns the string (the name of the zip file that will be created).\n\nall i need is to write a test that waits the completition of the `future` inside it's body, so i can test it propperly\nguess i'll need to write a simple `Thread/Sleep` for now, just to write the test and refactor it later\nthanks!\nno idea. either download-musics returns a string synchronously, or it returns a future that resolves with a string. I don\u2019t understand your test\nCan you post the source of `core/download-musics`?\n<@Leda> one pattern for what you are doing is to return a hash-map, eg. `{:f the-future :s the-string}` so a client can use the parts of the result that matter\nif the consumer needs a string, you can make a thin wrapper that just pulls the string out, but you can use the real return value in your test\nyou don't really need a unit test for a function that does nothing but a single key lookup\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1368",
    "text": "Does `core/download-musics` return a ref or a string?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1369",
    "text": "Sorry for silly question, but can you suggest me, what project I can create and share on github, to make any interest to my person as a remote employee (keeping in mind, that I live in Russia). If it is possible, of course :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1370",
    "text": "is there something like the inverse of \"-&gt;\" out there? a macro that takes a nested lisp expression and a symbol and returns it in threaded form?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1371",
    "text": "I\u2019m having a hard time contemplating what you mean. Could you elaborate? Maybe some pseudo-code would help\nDo you mean something like this? <https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-thread-first-all>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1372",
    "text": "Hello! I'm taking a new job and going back to Rails land from Clojure world. I'm a little sad to leave functional programming, and would like to maintain some of the fp mindset, so if anyone knows any good resources/blogs that discuss what fp concepts  work well for OO codebases and how best to apply them, I would greatly appreciate it :pray:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1373",
    "text": "I don\u2019t think this is a normal thing, but you could try writing one :D\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1374",
    "text": "Anthony, sad to see a Clojurist lost to Rails : )\nTake a look at, which begins by outlining a Ruby path from OO to functional way of thinking: <https://medium.com/@aarontdixon/dynamic-validations-in-rails-8019570f9c59>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1375",
    "text": "clj-refactor seems to be what I'm looking for\nHow do I access \"this\" inside `toString` ? And how to control the creation of the instance?\n```\n(.toString (proxy [PersistentArrayMap] []\n             (toString []\n               \"42\")))\n```\nthat empty vector is the list of args to the superclass constructor\n<@Elaine> there's an implicit `this` you can access ```user=&gt; (str (proxy [Object] [] (toString [] (clojure.string/reverse (str (supers (class this)))))))\n\"}tcejbO.gnal.avaj yxorPI.gnal.erujolc{#\"```\nthere's also `proxy-super` for delegating to the superclass explicitly  ```user=&gt; (str (proxy [Object] [] (toString [] (clojure.string/reverse (proxy-super toString)))))\n\"b94e08c1@a47291ff$tcejbO.gnal.avaj$yxorp.resu\"```\n`:&gt;&gt;` in condp feels like a cousin of that\nyeah - not the same thing, just a similar \"magic\" feeling\nalso marginal cases: catch, finally, inside try, and thrown? and thrown-with-message? inside clojure.test/is\nin that they are not bound anywhere, but they have meaning implemented by a parent macro\n<https://dev.clojure.org/jira/browse/CLJ-2201>\n:exclamation: good to know, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1376",
    "text": "the `this` in `proxy` is the only \"magic\" anaphoric macro symbol in clojure I think\na little, but all keywords evaluate to themselves, so no issue there (vs symbols which evaluate to something else)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1377",
    "text": "let's vote :exclamation:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1378",
    "text": "I'm reading about `core.spec` and I came across one passage in the design rationale that I'm having trouble understanding.\n\n&gt; Invariably, people will try to use a specification system to detail implementation decisions, but they do so to their detriment. The best and most useful specs (and interfaces) are related to purely information aspects.\n\nWhat's an example of \"trying to use a specification system to detail implementation decisions?\", as contrasted with a purely informational use of a spec?\nspec'ing intermediate internal functions\nor like some of the specs for clojure.core that people have written fall into this\nthey look at exactly what a function currently implements and spec that, which may eliminate things that will be supported in the future\nclojure core functions are aggressively polymorphic and we continue to add cases over time - spec'ing that stuff is a form of unnecessarily reducing future options\nThat's what I thought it might be, but I was having trouble putting it into the right words. So I guess using spec for \"implementation decisions\" would be arbitrarily limiting what you can pass to or return from a function so that a given spec is always satisfied.\nthanks!\nso it seems like from the rest of that passage that spec is most useful at the edges of a program - informing and adding context to what other programs can send to or get from the program which uses spec.\ncertainly focused on the the functions that consume, transform, and emit maps of attributes\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1379",
    "text": "Thanks!\n\nI am very interested to see how the transition goes : o But I'm also gonna try to make sure and stretch my fp muscles periodically with walk-throughs/tutorials I've been meaning to get to, so I won't totally be leaving clojure behind :wink:\nIs there a common trick to have `clojure.walk/postwalk` stop walking a data structure similar to how `reduced` can be used to stop `reduce` in walking a list?\nNot that I recall from the source\nNope, unless you check something stateful like an atom\nI have a hacky solution that walks a structure twice, but I'll try to come up with something better\n<https://github.com/clojure/tools.analyzer/blob/master/src/main/clojure/clojure/tools/analyzer/ast.clj#L26-L115>\nhere's an implementation of `walk`/`prewalk`/`postwalk` over an AST that can be terminated via `reduced`\nshould be easy to extract general versions a la `clojure.walk`\n<@Harris> Cool, thanks\nI just came up with this ```\n    \n(defn postwalk-reduced [f form]\n  (clojure.walk/walk\n   (fn [x]\n     (if (reduced? x)\n       (unreduced x)\n       (postwalk-reduced f x)))\n   f\n   form))\n\n\n(defn postwalk-reduced-demo [form]\n  (postwalk-reduced (fn [x] (print \"Walked: \") (prn x) x) form))\n\n(comment\n\n  (postwalk-reduced-demo {:a (reduced {:b 1})})\n  (postwalk-reduced-demo {:a {:b 1}})\n\n  )```\nVery basic, but seems to do what I want so far\n(i probably have it wrong. I'll experiment a bit more and report later)\nactually postwalk seems more complicated, but with prewalk I get what i want - stop changing nested datastructures)\n```\n(do\n  (defn prewalk-reduced [f form]\n    (clojure.walk/walk\n     (fn [x]\n       (if (reduced? x)\n         x\n         (prewalk-reduced f x)))\n     unreduced\n     (f form)))\n\n  (prewalk-reduced (fn [x]\n                      (if (and (seq? x) (contains? #{'fact 'facts} (first x)))\n                        (reduced x)\n                        (if (= '=&gt; x)\n                          '=?&gt;\n                          x)))\n                    '(5 =&gt; 5\n                        1 =&gt; 1\n                        (fact\n                         2 =&gt; 2\n                         (fact =&gt; 1)))))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1380",
    "text": "is there a predicate for knowing the state of a future? e.g. failed\n`future-done?`? - ah, failed... hmm\nLooks like deref-to-map (private in clojure) does this:\n\n```\n(let [[ex val]\n        (when-not pending\n          (try [false (deref o)]\n               (catch Throwable e\n                 [true e])))])\n```\nmakes sense\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1381",
    "text": "Anyone experienced in solving leaked sockets stuck in CLOSE_WAIT status? as reported in <https://github.com/http-kit/http-kit/issues/326>\n\nSeems relatively common in JVM servers.\n\n<http://www.serverframework.com/asynchronousevents/2011/01/time-wait-and-its-design-implications-for-protocols-and-scalable-servers.html> has some some promising advice which seems to apply to my case:\n\n&gt; Don't design a protocol whereby a client connects to the server every minute and does so by opening a new connection. Instead use a persistent connection design and only reconnect when the connection fails\n\nBut still, our usage of http-kit is pretty vanilla so maybe there's a hard-and-fast fix\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1382",
    "text": "Has anyone here experimented semi-extensively (aka more than just a hello world) with GraalVM\u2019s native images for Clojure? I am curious as to whether it works well enough to use in production on a medium-sized project.\npushing such an experimental thing to production, when normal jvms exist and run java bytecode great seems like such a bad decision\nlike, all my experience with clojure professionally has been writing backend systems with it, and the jvm works great there, so it is just so hard to see any upside\nthat being said <#CAJN79WNT|graalvm> is a channel that exists and you might try asking there\nI think <@Matha>\u2019s use case is AWS Lambda\nwe were speaking in <#C03S1L9DN|clojurescript> about it\nthere is no good, only good for...\nI'm pretty down on native-image and my personal opinion is that we spend a disproportionate amount of time fetishizing fast startup\nrather than attacking bloat in dependencies\nI see a lot of projects and when I run `lein deps :tree` or `clj -Stree` i'm always astonished\nit isn't surprising though\na feature of targeting the jvm is getting access to all the libraries, so people go nuts with them\npeople also like fast food\nindeed; thanks <@Meagan> for specifying :stuck_out_tongue:\nRing still depends on clj-time and Joda, for example\nfor one tiny little use case\nlots of projects pull in jaxb to do date parsing\nan xml binding library, for date parsing\nput that in your pipe\nall of this slows down startup\nAs <@Meagan> said my use case is to run the application in a serverless setting; multi-seconds startup times of the JVM are unacceptable there unfortunately :disappointed:\nanyways you're going to sink a lot of time into just getting native-image to compile on anything but the most trivial projects\n<@Clarine> has gone through this recently with clj-kondo\nmany people have spent time getting graalVM native image to play... you won't be able to take a random jar or dependency and compile it blindly.  Look into `jaotc` <@Matha>, it doesn't have any of the restrictions that native-image has\nif Java is ice cream, graal native-image is \"frozen dairy treat\"\njaotc is still ice cream\n<@Marlyn> I see; and does jaotc work with most hjars then? and does it speed up startups a lot?\nyes it should\nit is a bug if there is code that jaotc cannot handle\nit does reflection, invokedynamic, etc\nall the stuff native-image barfs upon\nit comes with the jvm\nAlso based on Graal, totally different strategy though\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1383",
    "text": "Alright I\u2019ll try it out; thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1384",
    "text": "The following doesn't appear to work - I see no `meta` changes:\n\n`(alter-var-root #'something vary-meta assoc :deprecated true)`\n\nAny ideas?\nyou want `alter-meta!` right?\nright! thanks, had forgotten about that one :slightly_smiling_face:\n\nI would have expected the `alter-var-root` to work though\nthe doc implies it works on the binding not the var\nbut don't \u00af\\_(\u30c4)_/\u00af\n*know\ngood one, root binding != value mutation\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1385",
    "text": "I'm trying to create vars to mimic the mathml structure, and there's a tag named `true`, which I obviously can't `def`. Is there a good suffix I should use? I'm reserving `*` for the function versions (unless I go for true** I guess?)\n`True` maybe?\nI like that, my only hesitation is that completion for `tr` wouldn't pick it up I guess :thinking_face:\nHmm, I'm trying to write a macro which writes a macro, and I'm getting a bit stuck with doing the unquote splicing in the nested defmacro. Any wizardry?\nOh, I can literally do a backtick inside a backtick!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1386",
    "text": "How fast is the startup of a hello world program with jaotc compared to Graal native?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1387",
    "text": "why doesn't clojure core have a `div` function that truncates toward negative infinity?\nseems odd to have both `mod` and `rem` but no counterpart to `quot`\nProbably because it is an uncommon use case?  I don't recall anyone ever asking for one before.\nWhat languages have such a thing?\nHaskell, under the exact same names\n<https://stackoverflow.com/questions/8111120/integral-operators-quot-vs-div>\nI need it for some basic modulo arithmetic, it's easy enough to define on my own but it seemed like an odd omission\nit seems, that the roots of many decisions in Clojure came from the Java. maybe this case is the same?\nI suppose so, couldn't find anything about the matter though\nyes, that's it! Thanks :slightly_smiling_face:\nfor performance reasons clojure only goes far from the java Math stuff for opt-in accuracy reasons\nso if what I'm looking for mathematically isn't a correctness / precision improvement, I usually check the java.lang.Math API\nI see, so the difference is that clojure.core functions take in all sorts of polymorphic types like BigInts and Ratios at the expense of some performance?\nmore importantly they have contexts where they auto-promote to preserve accuracy, if you opt in\neg. use `+'` instead of `+`, `inc'` instead of `inc`\nor use `/` instead of quot or java interop (?)\nhmm I'll keep that in mind, thanks!\nYes\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1388",
    "text": "I'm not sure, but would `Math/floorDiv` be related to what you want?\nreturns largest int smaller than the  or equal to the quotient\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1389",
    "text": "would ^\"[B\" be the right way to typehint the java equivalent of string[] ?\nah forgot the semicolon in `^\"[Ljava.lang.String;\"`\n<@Liliana> how would I do that for an array of BigIntegers?\n<@Micheal> make an instance of it in clojure and do .getClass interop\n`(str (class (make-array String 0)))` can spit that out for you i think? <@Liliana>\nthat works too\ni bet there's a way to get it without the class keyword at the beginning\nall in all, this typehint does look very cryptic to me, but I guess the combination of arrays/types is almost too infinite for a special typehint symbol to be implemented for each and one of them?\nwell, I'll get used to it, I'd imagine all alternatives would conflict with the reader\nYou can take a look at the source and see it is just using `and`s. <https://github.com/clojure/clojure/blob/841fa60b41bc74367fb16ec65d025ea5bde7a617/src/clj/clojure/core.clj#L7316-L7354>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1390",
    "text": "`every-pred`'s docstring doesn't guarantee the order of evaluation, just that it will stop on the \"first\" one that returns a logical false value. Is it improper to do `((every-pred integer? even?) nil)`? Are we guarnteed that `integer?` will check before `even?`?\ninverting the order will throw an illegal argument exception\n(also says set of predicates which is why first might be ambiguous)\n<@Suzann> I see the source now allows for that. But I want to know if clojure will guarantee this going forward or if it just happens to be ordered now \nI know you think the doc string is ambiguous, but arguments are vectors, not sets. It does say it takes the first argument and that it short circuits. Short circuiting is an ordered operation. But more than that Clojure takes backwards compatibility very seriously. Changing the order would be a huge breaking change. It will remain that way for as long as Clojure exists.\nI don\u2019t believe the arg is a vector. I understand the backward comparability but I\u2019m not sure this is considered a contract of every pred or just an implementation detail \nAnd I certainly grant this is unlikely to change.\nJust wondering if it can\u2019t change\n<@Becki> What sort of evidence are you looking for that it won't change?\nA docstring that the preds are applied left to right\nMaps are ordered up to 8 elements. But it\u2019s not in a docstring so relying on it is crazy and it\u2019s best ignored\nBut also just being told it\u2019s no big deal. Just musings on this one\nfair enough :slightly_smiling_face:\nSo I'm with <@Becki> that the docstring gives no explicit guarantees about the order that `f` will apply the predicates (to each argument).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1391",
    "text": "The docstring is trying to say that.  But it is just not explicit. \"Note that f is short-circuiting in that it will stop execution on the first\n  argument\". I know you think this is ambiguous, but arguments to a function are ordered and that is what first is referring to here.\n\nThe docstring definitely isn't going to change to remove the ambiguity. But this code hasn't changed in 8 years and won't change in the future.\nunordered arguments would break so many things...\nAlso test cases imply this.\n\n```\n ;; 2 preds, short-circuiting\n   false    ((every-pred number? odd?) 1 :a)\n   false    ((every-pred number? odd?) 1 3 :a)\n   false    ((every-pred number? odd?) 1 3 5 :a)\n   false    ((every-pred number? odd?) 1 3 5 7 :a)\n   false    ((every-pred number? odd?) 1 :a 3 5 7)\n```\n<@Suzann> The docstring is clear that the returned function `f` will short-circuit on the \"first argument\" but says nothing about the order of the _predicates_. Just the order of arguments to `f`.\nIt just says it will stop at the first argument for which not all the predicates return false. It could apply the predicates in any order.\n<@Celestine> Yes, you are right, I misread.\nIt would still be a very large breaking change. And the tests seem to expect that the preds are applied in order.\nI don't see that happening.\nAye, I agree it would be unlikely -- but it is still an implementation detail -- and the core team _has_ changed implementations occasionally in the past that break behavior _that was not guaranteed by the docstring_.\n<@Celestine> you are saying what i was thinking _much_ more concisely and clearly :slightly_smiling_face:\nits like a contract, what isn\u2019t promised isn\u2019t guaranteed :slightly_smiling_face:\nThe confusion stems from both `every-pred` _and_ the function it returns both being variadic.\nI sometimes wish there was a bit more chaos in programming. Things that werent guaranteed randomly changing behaviour\n(only in tests!)\nI expect that a change in `every-pred`\u2019s order would be a breaking change though\nthere\u2019s implicitly _some order_\nYears ago, I worked on a C compiler system that deliberately had variable behavior for undefined and unspecified situations :slightly_smiling_face:\nthe docstring just doesn\u2019t say which one exactly\nYeah, I toyed with the idea to make a map/set impl that randomized its order\nso I wouldn\u2019t expect the order to change\nIt was a code checking system, so it detected these situations explicitly in the runtime and handled them -- rather than just letting things blow up or always behaving in a predictable manner :slightly_smiling_face:\nIt could apply the predicates all in parallel :slightly_smiling_face:\ncalm down djikstra :slightly_smiling_face:\ni think i remember him envisioning conds all working like that. thought it was right around the corner\nI think that\u2019s contra to the _short circuiting_. :stuck_out_tongue:\n<@Marlyn> did you have thoughts? I saw you typing\ncan a man rage type into an input box and then delete it in peace? :joy:\nhahaha\nabsolutely. but i always enjoy your thoughts\nhahah, typing notifications are so annoying\ni was going to say that there is implied order\nand changing order is a solution -- what's the problem?\ncan always augment the docstring\ntype\u2026 think\u2026 revisit\u2026 remove\n<https://dev.clojure.org/jira/browse/CLJ-1872> - empty? is broken for transient collections\n\nI spent a little time staring at what it would take to submit a patch for this. Do I understand correctly that RT seqFrom and RT canSeq would need to include logic for TransientVector and company?\nyou might try <#C06E3HYPR|clojure-dev>\nI might, figured I'd throw it out here first.\nI\u2019m not super familiar with the RT stuff\nI feel like I've seen this pattern over and over - transient collections working for a specific use case (blindly accumulate items in one big reduce then persist), and all kinds of ops we expect for collections not working or working weirdly on transient collections\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1392",
    "text": "Hello every one. Are there any reporting tools available in Clojure. Any body tried integrating BIRT into your clojure app ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1393",
    "text": "posted it over there\nthe bugs get fixed eventually (I don't know if any of the collection features have been called wontfix yet), but they keep coming up\nor maybe my memory is skewed\nalso iirc at best that transient coll will give you ~15% perf boost, and that's if it's in your main bottleneck\n<@Dann> yes, there definitely are more than a few transient tickets\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1394",
    "text": "I'm trying to write a small wrapper of jline, but git lost in deciding the pattern. Do I wrap the constructor and provide functions that takes an object a parameter, or do I instantiate and hide the jline class in the wrapper namespace in a var or atom, and provide functions that implicitly use the hidden object?\nCould someone point me to some tutorial or examples?\nI think that depends on the answer of: would you ever need _two_ instances of the jline class?\nAt some point, the answer to that is going to be yes. I would not hide the object. If you do, then provide multi-arity functions: one without the object that uses your ns def and one that takes the object explicitly \nIf I don\u2019t hide that object, the code to use it would be something like:\n```\n(def line-reader (mywrapper/line-reader))\n(mywrapper/readline line-reader \"this is a prompt\")\n```\nDoes this look good?\nyep, that seems good :slightly_smiling_face:\nmaybe you could provide a 1-arity version that automatically constructs the reader\nI\u2019m not familiar with line readers or jline specifically, so it\u2019s hard for me to comment\nI somehow feel it\u2019s smelly, but don\u2019t know where and how to fix it. Probably because it\u2019s also side-effect code.\nlike take e.g. a database library. you\u2019ll almost always create a db connection object, and pass that to all of your other functions (query, transact, etc.)\nI guess another question could be: what would happen if you created an object _every time_ you did something with the jline class?\nI don\u2019t know. That might work, but then I will need to do the same for all the util classes, like completer, highlighter and maybe history handler.\nthen I\u2019ll have to save the states, for example completion candidates, outside the object, like in an atom or something.\nHmm I just feel java and clojure don\u2019t work alone well.\nsounds like you have some mutable resource you\u2019re managing, which you should provide as an object you can pass to the various functions\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1395",
    "text": "Wrapping an OOP library with a function layer that creates and passes the objects is really no improvement.\nIf you can figure out how to wrap the library with _data_ and a simple function API, you have a win.\nOtherwise you might as well just use the underlying Java OOP library with interop.\n<@Celestine> But what do you mean by wrap with data and simple function API? Could you give me an example?\nI think <https://github.com/cognitect-labs/aws-api> is a great example\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1396",
    "text": "Yeah that\u2019s how I feel, not really an improvement. It\u2019s just `(.readline obj)` vs `(readline obj)`\n<@Nisha> you may find \u2018memfn\u2019 from the core library a useful too when creating these thin idiomatic wrappers around Java libraries. I agree with <@Celestine>, re: not getting too deep into the rabbit hole. It\u2019s entirely possible when doing something like this, to write a lot of code that really doesn\u2019t end up improving the situation, but \u2018memfn\u2019 can often be used to create a very thin layer that allows the calling code to appear slightly more idiomatic. \nIt is true\nWhat's \"alpha-omega\"?\n<http://insideclojure.org/2018/05/04/add-lib/>\n<@Sonny> it\u2019s more alpha than alpha\nHaha! Yeah, honestly the thought had crossed my mind before that by calling all these things \"alpha\", there was going to be no names left for stuff that has yet to make it into the alpha. Cache invalidation and naming things :stuck_out_tongue:\nAnd off-by-one errors\nOutofNamesException\n:laughing:\nOn that note, my son told me (when I praised him): If everything I do is great, everything I do is average.\ncan\u2019t argue with your son\nNope\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1397",
    "text": "I think a more accessible version of what\u2019s being described is something like hiccup or ring.\nsomeone mentioned to me it's possible to add a dependency to deps.edn and not have to restart the java process. is that true, and how would I set up my app to do that?\n<@Mireille> it\u2019s called add-lib, it\u2019s a alpha-omega feature\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1398",
    "text": "When using `go-loop` in core.async... can the logic in the loop occur concurrently... by that I mean if I have input channel with 10 items, and I poll the channel in go-loop and process an item, will the items get processed concurrently?\nWhy `when-let` only support one pair binding?\n<@Raina> nope, If you have only one `go-loop`, it will process item one by one. If you want parallel processing, you can use `pipeline` or `pipeline-blocking`.\nthank you\nSo basically that is about the same concurrency as if using a single agent\nYeah. An agent will have an actual thread though so there's no overhead of IOC threads.\nSo the benefit of core.async is only there if I spawn a lot of go-blocks, because they can share a small number of threads\nSo if I have like 1 continuous process per user and I have 1000 users, then I should make a `go-loop` for each person and it will work with limited number of threads?\nThe biggest obstacle to naive implementation for me is that some processes have to be throttled in my case, and if I use naive sleeping in the process, then it takes up a thread.\nYeah, core.async is good for that too\n<@Raina> you should not sleep in go block.\nI know, but I think I've found a solution\nYou usually don't have to worry about sleeping in go blocks. When waiting on channels they sleep automatically.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1399",
    "text": "Yeah.\nBut if you have a bunch of independent things to do. This might not be the best approach. `pmap` and reducers might be a better way to go about it.\n_core.async_ is more appropriate when the processes have to communicate with each other (using channels)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1400",
    "text": "I have a quick question about a micro-benchmark i'm running\nusing <https://github.com/hugoduncan/criterium>, i'm checking two different versions of the same code, and i'm confused why the single-pass version that uses reduce is slower than the version that does multiple passes with filter and map\nreduce version:\n```\n(-&gt;&gt; (server-cards)\n     (reduce (fn [acc card]\n               (if (ice? card)\n                 (concat acc (split (:subtype card) #\" - \"))\n                 acc))\n             [])\n     distinct\n     sort)\n```\n`(server-cards)` returns a list of maps, `ice?` checks the `:card-type` attribute to see if it's an `ICE` type, `:subtype` is a string of course\nfilter/map version:\n```\n(-&gt;&gt; (server-cards)\n     (filter ice?)\n     (map :subtype)\n     (mapcat #(split % #\" - \"))\n     distinct\n     sort)\n```\nare they doing different things, and i don't realize it?\n`(-&gt;&gt; (server-cards) (reduce (fn [acc card] (if (ice? card) (conj acc (split (:subtype card) #\" - \")) acc)) #{}) sort)` (conj and #{}) seems to be the fastest, at roughly half the time of the filter/map version\nAh, it's the repeated calls to `concat` in the reduce version. using `conj` with a `'()` makes it faster than the filter/map version, from a mean of 1 ms to about 770 us, and using a set instead of calling distinct at the end reduces it further to 600 us\nwell, thanks for listening, y'all! lol\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1401",
    "text": "Side note: I really like combining criterium benchmarks with clj-async-profiler, so I can see both time spent and where it was spent\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1402",
    "text": "Does anyone know a good way to auto generate API requests/responses tests by making use of an OpenAPI 3.0 specs?\nI've been searching for some kind of solution based on this, and i've found in other languages, but nothing using Clojure, i thought it would be nice for me to try to create a lib/lein plugin that could do this\nI REFUSE manually writing tests for my API Endpoints since i have it well documented using OpenAPI 3.0\nand certainly i could generate automated tests for it because the specs from OpenAPI have all the necessary info to do so\ni just want to make sure that if i could make something like this in clojure, this would be appreciated or used by other Dev's\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1403",
    "text": "I had a interesting conversation recently with two people who work in IT/networking/cybersecurity who said they had mostly given up on programming as a frustrating and tedious task (having programmed only in Java and Python). I tried to sell them on Clojure and the part that interested them the most was the idea that programming could be interactive via the REPL. I told them about how you can build programs while evaluating each form inline and debug by revisiting your small pure functions instead of stepping through with breakpoints or printlns. Good reminder to focus on emphasizing interactivity when evangelizing as it truly is the most intuitive way to write programs!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1404",
    "text": "I don't know anything about Java HTTP servers, how do I pick between the available Clojure ones? :slightly_smiling_face:\ngo with Jetty if you're just starting out. it's fairly easy to get started and well supported\nlots of guides + examples using Ring and Jetty\ni started with Ring also\nin fact i didn't knew anything about backend development when i started with clojure. i learned by looking to real world examples\nWe use the embedded Jetty server (with Ring, Compojure, Component, and Selmer -- for HTML templates) at work -- heavily in production.\nI'm not sure you need this to be in Clojure? It sounds like you want to send requests based on a Swagger spec, right?\n<@Celestine> when building API's, do you ever make use of Selmer/HTML templates?? i don't see how this would be possible/useful when building REST apis, just asking to know if i'm missing something\n<@Leda> No, if we're not producing HTML pages from a web app, we don't use Selmer.\nWell, we also use Selmer to render HTML emails that we send to our members -- so we use Selmer inside REST APIs for that.\noh nice to know\ndo you ever built a medium/large product directly rendering HTML in server?\ni mean, entirely\ni imagine if this is easier to maintain than a REST API\nI think it's easier for a small/1 person team because you don't need to maintain a separate front-end build process\nforcing a global singleton on an end user is pretty much never a good idea\nand you get SEO and page load speed benefits for free\npretending something that is intrinsically about side effects is somehow functional is a bad idea without a global system for managing state. We don't and won't have a global state management system in clojure (jline is there for its side effects, right?)\n<@Leda> Prior to Clojure, our main member-facing app was server-side-rendered HTML. We have a few smaller apps now that do that (in Clojure, with Selmer), but we've mostly replaced the SSR HTML with a React.js-based SPA backed by a REST API.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1405",
    "text": "I had an idea about extending one protocol onto another protocol; doesn't seem like that's doable. I know it opens up a rats nest of inheritance issues, but still feels like something useful.  My scenario was to define a protocol InterceptorComponent that defines some callbacks, then extend io.pedestal.interceptor.IntoComponent onto it.  My imagined behavior is that this would be effectively equivalent to extending IntoComponent onto any record that implements the InterceptorComponent protocol.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1406",
    "text": "so basically, `IntoComponent` uses `InterceptorComponent`\u2019s methods in some way and as long as a type implements `InterceptorComponent`, you can also use `IntoComponent` methods?\nit's intentional that protocols cannot be extended onto protocols. that said, protocols are nothing more than maps of functions and as such, there are ways to programatically get this effect. generally though, I've had better luck by extending a protocol to Object, then using conditional code to dynamically extend the concrete type you've received (which satisfies some secondary protocol) to the first protocol\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1407",
    "text": "Basically what you're saying is that `InterceptorComponent` describes a superset of `IntoComponent` behavior and thus anything that extends `InterceptorComponent` implicitly can implement `IntoComponent`. Trying to extend the one protocol onto the other lies madness, but you could write an adapter fn that returned a `reify`ed instance with implementations for both `IntoComponent` and `InterceptorComponent`. It would be indistinguishable from the input value (with regards to the `InterceptorComponent` protocol...) and could also participate in the `IntoComponent` protocol.\nAlternatively, if you actually could implement `IntoComponent` with your new protocol, an implementation of `IntoComponent` can be expressed entirely in terms of the interface `InterceptorComponent`. Extension is just saving you having to write the `IntoComponent` implementations when you're defining your record/type, so why not macro your way out of that hole with e.g. `definterceptorcomponent` which expands to `deftype` with the `IntoComponent` protocol specs tacked onto the end of the user supplied body?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1408",
    "text": "are there tools to provide performance details (mainly time-to-run) of all functions called from a parent function at runtime? i have a main function that kicks off loads of queries, calculations etc. i could `time` each one, but given how nested this code is i was hoping for an automatic solution.\n<https://github.com/clojure-goes-fast/clj-async-profiler> is quite good\ncheers!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1409",
    "text": "Hi I\u2019m trying to write my own client for a telnet-like protocol, for a mud game. I need to parse a byte stream, and the type of messages are identified by some special bytes, you know, just like telnet.\nIs there a lib that I can use to help parse the byte stream?\nThanks, but it doesn\u2019t seem to be for parsing bytes?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1410",
    "text": "<https://github.com/ztellman/byte-streams>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1411",
    "text": "Is anyone using `gerritjvv/clj-tcp`?   Somehow I\u2019m getting error with it.\ncan I package all the dependencies in one uberjar, and my code in another jar. So I can deploy the dependencies only once(if no dependency changes).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1412",
    "text": "Is it possible to use Cognitect's AWS library with Ring? I reported one dependency issue when using both libraries in <#C09N0H1RB|aws> channel.\n<@Nannette> looks like a dependency conflict with Jetty which you should be able to fix by specifying a compatible version directly in `project.clj`. \n<@Celestine>, thanks. I'll check that tomorrow.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1413",
    "text": "Simple question\nhow do I execute a full sql file with jdbc\njust a bunch of `CREATE TABLE IF NOT EXISTS` calls\n<@Antwan> slurp it in, break it into statements (str/split on ;), and call db-do-commands on each one\nNone\nlike that?\nYeah something like that \nWhen I'm at my computer I'll pull up the code we use at work to do the same thing \n```\nExecution error (SQLException) at org.sqlite.core.NativeDB/throwex (NativeDB.java:478).\nThe prepared statement has been finalized\n```\nYou probably need to tell db-do-commands not to use a transaction \nsame error\nHard to debug when I'm on my phone :upside_down_face: If you can post more details in <#C1Q164V29|sql> I can take a look when I'm at my computer later \nI remember looking into migratus for something. But use a different separator and split on that. I thought I remember the underlying thing not liking terminating semi colons\nI don't know if this is the issue, but `clojure.string/split` has some non-intuitive behavior with separators at the end. TLDR; use a negative `limit` parameter. See <https://clojuredocs.org/clojure.string/split> for some examples. I got bitten by this recently.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1414",
    "text": "I think the end result was that the batched statements can\u2019t have terminating semicolons (this was on Postgres not sure what your dB is)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1415",
    "text": "The split ended up producing an empty SQL statement and that's what throws the exception.\n`(str/split contents #\";\\s*\\n\")` or `(str/split contents #\";.*\\n\")`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1416",
    "text": "should I use `*ns*` to get the qualified symbol in macro? like `(my-macro (+ 1 2))`, I want `+` as `clojure.core/+`.\nYou want to use syntax quoting in this case\n\n``` \n`x =&gt; clojure.core/+\n'+ =&gt; x\n```\nThanks for the reply. but the code in (my-macro ...) will not use syntax quote.\nis there a way to know the namespace of that symbol?\nlooks great. I'm trying to write a macro that can be used in both `-&gt;&gt;` and `-&gt;`.\n```\n(-&gt; (call (/ 1 0))\n    (then (inc))\n    (then (/ 2)))\n;; =&gt; #error {\n;;  :cause \"Divide by zero\"\n;;  :via\n;;  [{:type java.lang.ArithmeticException\n;;    :message \"Divide by zero\"\n;;    :at [clojure.lang.Numbers divide \"Numbers.java\" 188]}]\n;;  :trace ...}\n\n(-&gt; (call 1)\n    (then (inc))\n    (then (/ 3)))\n;; =&gt; 2/3\n\n(-&gt;&gt; (call 1)\n     (then (inc))\n     (then (/ 3)))\n;; =&gt; 3/2\n\n(some-&gt; {:a 1 :b 2}\n        (then (:a))\n        (then (/ 2)))\n;; =&gt; 1/2\n\n(some-&gt;&gt; {:a 1 :b 2}\n         (then (:a))\n         (then (/ 2)))\n;; =&gt; 2\n\n(some-&gt; {:a 1 :b 2}\n        (then (:c))\n        (then (/ 2)))\n;; =&gt; nil\n\n(some-&gt;&gt; {:a 1 :b 2}\n         (then (:c))\n         (then (/ 2)))\n;; =&gt; nil\n```\nThis is what I have currently.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1417",
    "text": "Can you explain more about what you're trying to do?\n```user=&gt; (defmacro my-macro [x] (first x))\n#'user/my-macro\nuser=&gt; (my-macro (+ 1 2 ))\n#object[clojure.core$_PLUS_ 0x1f38957 \"clojure.core$_PLUS_@1f38957\"]\nuser=&gt;  ```  The symbol is `clojure.core/+` here.\nIn case this helps: ```user=&gt; (defmacro my-macro [x] (.ns (resolve (first x))))\n#'user/my-macro\nuser=&gt; (my-macro (+ 1 2 ))\n#object[clojure.lang.Namespace 0x707b1a44 \"clojure.core\"]\nuser=&gt;                ```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1418",
    "text": "anybody used `toucan`? I am looking for help on alias name.  Ex: `SELECT column_name AS alias_name FROM table_name;`\n<@Marylouise> ^^\n<@Jennie> Not sure I see the point of using `toucan`. It doesn't look very idiomatic to me.\nWhy not use pure SQL?\n<@Jennie> the great thing about toucan is that you can use honeysql\n```\n(-&gt; (select :a [:b :bar] :c [:d :x])\n    (from [:foo :quux])\n    (where [:= :quux.a 1] [:&lt; :bar 100])\n    sql/format)\n=&gt; [\"SELECT a, b AS bar, c, d AS x FROM foo quux WHERE (quux.a = ? AND bar &lt; ?)\" 1 100]\n```\nWell, that doesn't use `toucan` at all -- that's the great thing about HoneySQL and `clojure.java.jdbc` :slightly_smiling_face:\n<@Celestine> how is toucan not idiomatic?\nIt tries hard to be an ORM :disappointed:\nThe fact that someone has to ask about something as basic as a column alias says there's a problem with `toucan` if it doesn't support that.\nYes that's the good thing about toucan (vs korma for example), it's still data driven\nUse toucan where it makes sense, otherwise use honeysql\nIt uses a lot of global dynamic variables as well, which is terrible practice. It makes using multiple databases nigh on impossible.\nAgreed, the globals aren't nice. PRs welcome :slightly_smiling_face:\n<@Celestine> <@Marylouise>  Thanks for the reply. First I looked at hugsql, but my team felt it is too much laborious which contradicted my reasoning to go with Clojure (our app is in Kotlin). I find toucan is enough to avoid too much of repetition and also I am convinced in case of more complex SQL there is HoneySql.\nYeah, I'm not a fan of HugSQL because I don't like the SQL separate from the code that uses it.\nBut there's nothing wrong with SQL. It's a pretty good DSL :slightly_smiling_face:\nUsing data is a lot more reusable and composable. A logical data translation layer really helps (like honeysql vs SQL, hiccup vs HTML).  SQL strings have various limitations and can cause security issues (if parameters aren't used)\n`(sql/get-by-id connectable :table-name the-key)` seems a pretty concise way to get a hash map of a single row by primary key (one of Toucan's misleading examples makes it looks like this needs to be a lot of work).\n<@Marylouise> Sure, HoneySQL provides composability. We use it heavily.\nMy point is that Toucan makes a lot of strawman comparisons to try to show it is \"better\" than an unrealistic alternative that nobody would actually use anyway.\nToucan adds a lot of useful things. For example, how would you do hydration easily using SQL? It also has nice post and pre process functionality.\n`datafy`/`nav` provides that feature out-of-the-box in both `clojure.java.jdbc` and `next.jdbc`.\nLazily.\nAhh in `next.jdbc`. That wasn't available when we implemented or DB layer. I'll check it out :slightly_smiling_face:\nBut you'd be better off doing a `join` in SQL in the first place instead. That sort of \"convenience\" is one of the bad/misleading things that ORMs try to make \"easy\" for you.\nYes but joins don't create nested structures. Is there a way to do that easily?\n(I'm very down on ORMs after decades of work with them)\nI don't like ORMS either. Toucan doesn't add a `.save` method on the data. You pass on the model definition and just data.\nSo toucan isn't the least ORM \"ORM\" I've used\n<@Jennie> is better to use the specific channel for questions. See <#C592R5P8F|toucan>, <#C66EM8D5H|honeysql>, and <#C1Q164V29|sql> channels\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1419",
    "text": "When we create a sub-vector it holds on original vector, but what happens to original if we conj onto sub-vector and throw it away?\nhopefully nothing, otherwise i have to rewrite all my code\nright, nothing happens\nif you have a moment maybe you can watch the video from here ? <https://youtu.be/wASCH_gPnDw?t=1753>   , it explains some things very well\nv.assocN(end, o) is being called on original, new subvector returned\nso almost the same thing as creating subvector of a subvector\nI'm banging my head against a jetty server that after a `(.stop svr)` and `(.join svr)` is still using the port. The server is configured for websockets, so I'm not sure if that's related at all. Hoping this sounds vaguely familiar to someone who can help me out :slightly_smiling_face:\nis it still listening after the stop ?\nor is the port just in some wait linger and not listening ?\nand just to make sure, you are trying that on windows, are you ? :slightly_smiling_face:\nThat's a good question, I'm not certain. I think it resolves it itself given a little time (human typing time) this only happens on `(reset)`.\n\nNope, linux!\njust check    `netstat -anp | grep LISTEN`\nif it's still there listening for real after the join\ni use the same pattern myself in some integration tests and i don't remember it misbehaving\nI'm pretty sure this is related to websockets somehow, because it only happens if the server-side component of that is activated. Well, more specifically, if figwheel is trying to start a repl.\nnetstat's output also lists the process id's , there's always a chance you have forgotten another process around that lives on the same port :wink:\nNa, I've got a \"mostly reproducible\" (because it's racey) `echo '(future (cljs-repl)) (go)' | clj -A:dev` which succeeds for one of them, and fails for the other with \"Address in use\"\nI stuck a `clojure.java.shell/sh` in after the `.join` and I can't see the port in there at all :disappointed:\nso what on earth is going on!\ni think join itself is just there to wait for the thread to stop after the server has been shut down ... join itself shouldn't do anything with the port by itself\nThe join may well not be necessary, it was a guess I added. I suspected that the server wasn't completely shutdown yet.\ntested here locally,   right after i do  (.stop server)   the port is not being listened on anymore\nso it does sound like there is indeed something racey going on in your machine , but i wouldn't blame it on jetty right away :wink:\nit's definitely racey. With the addition of `ss` it's much less likely to happen.\nif it solves in little time then perhaps make the server restart thingy more persistent in it's actions :slightly_smiling_face:\nwe used to that on servers too before all the operating systems started to support the reuse flags on sockets\nthen you'd see an apache server going down and having to wait a minute before a you could do a rebind (on a badly configured linux server)\nThis is in development, and is pretty much just the internal figwheel stuff being stopped/started quickly via the api.\nthe thing is, I'm not seeing 9900 in time-wait either.\n<http://hea-www.harvard.edu/~fine/Tech/addrinuse.html> I only get this if I try and start a cljs repl (server side). I don't _think_ that's a websocket client, but maybe it is (or maybe it just alters the timing just so)\nbut I should still be seeing time_wait if that's the case.\nand you are sure there is no accidental duplicate process trying to rebind at the same time either ? :slightly_smiling_face:\nThat would also show up in the `ss` I'm running just before starting (or, at least it should _once_)\nI have no java processes open, and I don't write any other code :smile:\nno funny macro business going on either evaluated at a different time than you think ? :slightly_smiling_face:\nNope. Functions and multi-methods here only.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1420",
    "text": "It worked. <@Celestine>: thanks for your help!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1421",
    "text": "I've used tufte ( <https://github.com/ptaoussanis/tufte> ) and its `defnp` with good results\nIt's worth noting that, although the primary workflow of HugSQL is to allow separate SQL files, the library contains all of the necessary functions to use SQL inline in your code or at the repl.  Specifically, `db-run` and `db-fn` accomplish this and give you the same HugSQL parameter replacement abilities.  <https://www.hugsql.org/#using-other-fns>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1422",
    "text": "Hm... could not closing `chan` async channel cause a memory leak?\nI have code that is passed a channel, reads an item from the channel and throw it away.\nand the code that creates the channel doesn't hold on to it\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1423",
    "text": "If no one is using it, should be gc\u2019ed\n<@Marylouise> It worked for me like this `  (db/select [m/Facility :id [:facility_name :facilityName] [:standing_orders :standingOrders]])`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1424",
    "text": "I'm looking for libraries which enable suspendable evaluations in clojure. Nothing in mind too much, just looking at implementing something which parallels excel.\nThat's what I was thinking of, yes!\n<https://kcsongor.github.io/time-travel-in-haskell-for-dummies/>\nnot to say the m word\nbut maybe something close to this?\n<@Lavette> made a delimited continuations lib awhile ago\n<https://github.com/swannodette/delimc>\nthere\u2019s another library that people were talking about on clojureverse a few months ago\nfor something like excel it feels like \"lazy evaluation\" might not be enough\nor rather, even if it technically represents what is happening it isnt super useful beyond actually computing the values\nexcel has a \"restarting scheduler\" where it pauses evaluation on request of a cell, and re-orders the evaluation, then starts again. A little bit like what pedestal does with interceptors I guess.\nIs there anything you can learn from the way Kotlin does it, their coroutine support, via libraries, is very well developed.\nI believe they use a state machine\nOf course, when Project Loom makes its way into the JVM, I'm sure the approach may change then too!\na state machine? sounds like how the go-block works :thinking_face:\n<https://github.com/Kotlin/KEEP/blob/master/proposals/coroutines.md>\nI'm not that familiar with the depths of the approach that they took\nI think the \"reordering\" part is cruicial\nThere are quite a few videos from the designer of the coroutine support of kotlin on youtube.\nyou basically need to make sure that the computations are a DAG and that you do them in topological order\nso if someone makes a change you could do a \"virtual dom\" for each cell\nand only recompute the values that have changed\nor you could compute the whole batch of values\nexcel is slightly heavy-handed with it's approach to dependencies, but it does generally satisfy minimality.\nI do recall too that they (kotlin guys) changed the way coroutines worked, before making it public (i.e, non-experimental). Here's the post from Roman about it: <https://medium.com/@elizarov/structured-concurrency-722d765aa952>.\nIf you use INDIRECT then you'll be recomputed very often.\nI think it would be exciting to have coroutine support in Clojure :slightly_smiling_face:\n(go to town with macros)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1425",
    "text": "like continuations?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1426",
    "text": "dharrigan what problem would it solve ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1427",
    "text": "I don't know whether it has the ability to \"pause evaluation\" in the way you're describing, but I immediately thought of Matrix when I thought of \"excel-like\" dataflow in Clojure\n\n<https://github.com/kennytilton/matrix>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1428",
    "text": "Hello! I use deps.edn with cognitect/test-runner / Kaocha and cannot figure out how to get some namespaces AOT-compiled (needed due to `gen-class` in test files). Any [googling/solution] tips? Thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1429",
    "text": "hey, I just asked the same questions few days ago over at the <#C6QH853H8|tools-deps> room: <https://clojurians.slack.com/archives/C6QH853H8/p1557397085170000>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1430",
    "text": "is there a way to generate a hash-map with test.check.generators where one of the values is calculated from two of the other values?\nNone\nbasically I don't know how to do the gen for the :frame-rate\nhmm maybe with a gen/let?\nyeah, that should work\nMaybe drop the `-f`, removing with force always is ill advised \nDecades-long habits are hard to break :slightly_smiling_face:\nHaha just as guilty ^^!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1431",
    "text": "is there a deps.edn version of `lein clean`?\n<@Mireille> `rm -rf .cpcache` :slightly_smiling_face:\nYou can use `clj -Sforce` to force the dependencies to be recalculated and the cache ignored, but I'm not sure if that _overwrites_ the `.cpcache` folder...\nthanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1432",
    "text": "Have a look at <https://github.com/leonoel/cloroutine> it's a low-level macro that can be used to implement the patterns mentioned in the articles you linked.\nI'm not aware of any clojure implementation of trio-like structured concurrency but that lib would definitely be a good start if you're willing to explore this path.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1433",
    "text": "Does anyone have any experience with jnr-ffi? I am trying to write some clj bindings for a c library. i saw from caesium's source code how to do it when the functions return primitives, but the ones i am trying to bind return structs, and i haven't a clue how to approach it. it looks like, from java examples, that I need to extend the struct class with fields, but i don't know how to do that in clojure.\nan \u00e0 la carte build system perchance?\n(in jnr-ffi, it looks as though in order to use structs you need to extend the Struct class with additional fields. that's the bit i don't know how to do.)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1434",
    "text": "<@Meagan> it would be good to wrap your hooks/userReducer to work with multimethods\nor maybe even with whatever implementes Ifn\nhad to wrap it myself\nActually for aero, but ideas from that yeah\nI'd love to implement that paper, I don't think it's as general as it suggests, it's evaluation behaviour is pretty dependent on various haskell things like applicative\n&gt; Actually for aero\n\nAhh ok, so you\u2019re trying to manage a graph of effects inside an immutable edn tree?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1435",
    "text": "A question related to maps and sequences.\nSome of the sequence functions work on map e.g. first, rest, map (they convert a map to a sequence via seq)\nHowever nth doesn\u2019t work on a map\nIs there a good reason for that?\nhash-things (hash-map and hash-set) has no notion of order. Do not make sense ask for \"the second item\"\nfirst and rest make some sense once you can understand \"give me 'any' first item\"\nsecond works on maps\nI'm trying to model the completely dynamic dependency graph without setting my hair on fire. The first two implementations have set my hair on fire :fire:\nI'm trying to add macro support at the same time, where macro means that #profile stops running all paths.\nThe interface needs to stay fairly similar because it is easy to use\nahh so dynamic dependencies as in that talk too\nI wanted this so many times...\nbut input may be huge for example.\nI guess it's hard to solve in general.\nso it should be in a separate stacktrace like *e2 or something...\ndisagree, this is one way for personally identifiable information to end up in logs\nThis could be enabled only in \"dev\" mode.\nBut I guess the problem is that it really isn't that easy - exceptions can occur at many different levels - at each step you'd need to capture the input and possible decide whether (and what) to show it.\ndoes clojure have a `trace` (from CL) equivalent?\n\"Whenever a traced function is invoked, information about the call, about the arguments passed, and about any eventually returned values is printed to trace output.\"\n\n``` (defun fact (n) (if (zerop n) 1 (* n (fact (- n 1)))))\n=&gt;  FACT\n (trace fact)\n=&gt;  (FACT)\n;; Of course, the format of traced output is implementation-dependent.\n (fact 3)\n&gt;&gt;  1 Enter FACT 3\n&gt;&gt;  | 2 Enter FACT 2\n&gt;&gt;  |   3 Enter FACT 1\n&gt;&gt;  |   | 4 Enter FACT 0\n&gt;&gt;  |   | 4 Exit FACT 1\n&gt;&gt;  |   3 Exit FACT 1\n&gt;&gt;  | 2 Exit FACT 2\n&gt;&gt;  1 Exit FACT 6\n=&gt;  6```\nnth is for integer indexed cols, maps and sets are not integer indexed\nah, <https://github.com/clojure/tools.trace>\nYes, this is useful and something I (sometimes) use (via Cider).\nHowever, you need to instrument the function beforehand - it may be harder if the error isn't that easy to reproduce (which is a problem anyway) or it may just took way longer or it may be deep down in java call stack...\nhaven't tried this, but does this help at all? <https://github.com/kkinnear/zpst>\nNot sure how practical this approach is, but I think you ultimately need JVMTI agent (or something equivalent) - this could be an interesting thing to explore:\n- <https://stackoverflow.com/questions/42226592/how-to-get-the-values-of-method-local-variables-and-class-variables-using-jvmti>\n- <https://github.com/cretz/stackparam>\nyes,  it overwrites (for the specific command you ran)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1436",
    "text": "who could agree with me: stacktraces should show what was the input...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1437",
    "text": "You mean you can't pass a mulimethod to useReducer?\nIf so can you open an issue please so I remember\n[ANN] Cognitect Labs' aws-api 0.8.305 <https://groups.google.com/forum/#!topic/clojure/rKAbv6-U3CM>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1438",
    "text": "Can I make `(instance? \"Ljava/lang/Integer;\" x)` work?\n\n(`instance?` rejects strings as criteria)\nwhich is logical because an array is not an object...\n\nanyway my question stands - can I check if something is an array of x?\nok, this is a FAQ easy to find, sorry for the noise\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1439",
    "text": "&gt; (instance? (Class/forName \"[Ljava.lang.String;\") (into-array String [\"s\"]) ) =&gt; true\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1440",
    "text": "What are the exact relationships between collections and sequences?\nHere <https://clojure.org/reference/sequences#_the_seq_interface> the Seq interface is describe by means of 3 functions first, rest and cons but in the description (and the signature of the function), the term collection is used instead of sequence. Can someone clarify it?\nsequences are (logical) collections\nCollections are (in Clojure) defined by IPersistentCollection\nSequences are defined by ISeq (which extends IPersistentCollection)\nNice one!\n\nI ended up avoiding the scary notation completely:\n\n`(instance? (class (make-array String 0)) (into-array String [\"s\"]))`\nIPersistentCollection extends Seqable (to request a seq view of a collection)\nThanks <@Jasmine>. I am going to meditate on it\ngiven that sequences are collections, collections are not necessarily finite\none term used in some of the clojure  reference docs to refer to list, vector, map, set. sorted set, sorted map, etc is \"data structure\", which are finite\nit uses ByteBuffer, which has all the methods needed for pulling other types out of bytes\nthere is no \"type\" in the Clojure impl that contains those data structures but not sequences\nin fact, that's straightforward enough that I'd skip clojure libs / bindings and just feed the InputStream into a ByteBuffer via interop, and use that API\n<https://clojure.org/reference/data_structures>\nsometimes \"collection\" is used to mean \"the data structures but not seqs\" and sometimes it is used to mean \"all collections, including seqs\". this is not done consistently either in the docs, or the code, or the broader community.\nYeah, it's worthwhile to understand the context that the word 'collection' is being used, with more precision than 'talking about Clojure the language'\n<@Jasmine> I am trying to understand exactly what is the meaning of \u201cCollections are represented by abstractions, and there may be one or more concrete realizations.\u201d from <https://clojure.org/reference/data_structures#Collections>\nBut you're still gonna be doing the Java interop yourself\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1441",
    "text": "One thing I think is useful when contemplating sequence vs. collection: A collection is a finite, non-scalar grouping of some 'things', e.g. List, Vector, Set, Map. A seq is an interface to data that makes sense to apply to collections, and also to non-collection, infinite things like `(range)`, `(iterate)`, `(cycle)`, et al. You can compute infinities with a seq, but not with a collection.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1442",
    "text": "I need to write some code that writes to a unix socket (in this case, `/dev/log` so I can write a timbre appender to send logs direct to syslog). Right now I'm puzzling my way through netty code as it seems to be the only java library that packages the native integration sensibly, but their relative lack of docs is making that pretty slow going. Does anyone know of a clojure library/feature I may have missed for doing so?\nI think it means that the actual underlying type might change, but the interface will stay the same if you have an operation that produces the same collection type\nfor instance, I believe Clojure maps use a `PersistentArrayMap` under the hood up until a certain size, which then switches to a different type `PersistentHashMap`\nfor various performance reasons\nlike in scheme and common lisp there are map-hash, map-vector, but in clojure you just use `map`?\nthis difference is opaque to you, because they have the exact same interface\nyes, the seq interface is even more general\ni think F# is kinda annoying in this way.\nit must have gotten it from OCaml :stuck_out_tongue: `+`, `+.`, oh-my!\nclojure of course has `+` and `+'`, but the meaning is much different\n<@Lesa> Did you take a look at <https://github.com/RackSec/unclogged>\nYes, unfortunately only supports udp/tcp (and is also abandoned)\nIf Unix socket's a hard req I dunno if there's much pre-existing help out there. You can find some other stuff that'll do the JNI lifting for you (e.g. <https://github.com/jnr/jnr-unixsocket>, and I'm inclined to trust Charles Nutters' code...)\nYeah I'm chatting with our sysadmins to see if they'll consider opening up a plain old net socket, that'll simplify things considerably\njnr-unixsocket looks like a possible option though, much simpler than going the netty route. thanks :slightly_smiling_face:\nAnother question about sequences and collections. In <https://clojure.org/reference/sequences#_the_seq_interface> the `Seq` interface is said to be made of `first`, `rest` and `cons`. Why `empty?` is omitted?\n<http://insideclojure.org/2016/03/16/collections/> expands on the question above in a lot more detail\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1443",
    "text": ":+1:\nempty? is just the negation of clojure.lang.RT/seq\nSo, I have a weird problem where I *removed* a circular namespace dependency, and now I'm getting a spec failure on `ns` inside a third party library.  If I put it back, it works.\nI'm baffled at how to even debug this.\nThoughts?\nmaybe share the error?\nhere: <https://gist.github.com/eraserhd/8efd4d3ab0183d2c5375bfd059b582a2>\nthat was a real spec error, fixed here <https://github.com/pedestal/pedestal/commit/64b8f877590c8bb66341544728da576d8e33124f#diff-5695192ae2429b3d8cf22903401a1be9>\nprob your prior cycle was hiding the load of it somehow\noh, weird!\nlatest pedestal is 0.5.5\nnot sure when that was fixed exactly\nI guess it was in 0.5.5\nyou'll only see that fail as of Clojure 1.10.0\nwelp, I figure you've just saved me three hours of debugging.  I'll buy you some kind of bevarage at the next conj.\nno need, happy to help ;)\nNo worries. I have this book\ni\u2019ve used <https://github.com/ztellman/gloss> before. e.g. in <https://github.com/wiseman/turboshrimp/blob/master/src/com/lemondronor/turboshrimp/navdata.clj>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1444",
    "text": "and also in Clojure Applied, ch 2, which has a great picture that I am unable to share with you due to copyright :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1445",
    "text": "Is it possible to use items from an lazy seq one by one in order?\nFor example, repeatedly wait for 1 second and print a number from `(range)`\nyes. loop/recur with first/rest should support that\nNone\nor\nNone\nor `(run! (fn [x] (Thread/sleep N) (println x)) (range))`\nwhere N is the magic amount of time to sleep between items\nor ```(doseq [item (range)]\n  (Thread/sleep N)\n  (println item))```\nMy real use case is I want to print a lazy-seq of bytes read from socket.\n`(repeatedly #(.read (.getInputStream (Socket. \"localhost\" 8888))))))`\nOh! thanks!\nso you aren't actually sleeping, just a blocking read?\nYeah, a blocking read.\nyeah, I'd use run! if it wraps up nicely in one function, or doseq if you have multiple imperative steps\n(and doesn't make sense to abstract the operation as a function for any other usage...)\ndoseq also accepts all the syntactic tricks that for does (but imperative / eager)\ndo you mean to open the socket repeatedly? or only read from it?\noh my bad. I meant only repeatedly reading, not opening.\n:thumbsup:\nOK it works! I was previously evaling from vim that\u2019s why it didn\u2019t print anything and hang. I tried it in the repl and it worked as expected. :relieved:\nThanks all\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1446",
    "text": "Anyone ever get cljfx working with lein?  I'm asking around in <#CGHHJNENB|cljfx> but it seems pretty empty.  I installed the clojars package dependency in project.clj and ran lein deps, but when I try to include the ns, it errors out\nnot found in classpath etc.\nWhat error do you get <@Donetta> and what version of Java are you running?\n```(! 1107)-&gt; java -version\nopenjdk version \"11.0.1\" 2018-10-16\nOpenJDK Runtime Environment 18.9 (build 11.0.1+13)\nOpenJDK 64-Bit Server VM 18.9 (build 11.0.1+13, mixed mode)\n\nMon May 13 20:11:03\n(sean)-(jobs:0)-(~/clojure)\n(! 1108)-&gt; clj -Sdeps '{:deps {cljfx {:mvn/version \"1.2.9\"}}}'\nClojure 1.10.0\nuser=&gt; (require '[cljfx.api :as fx])\nnil\n```\nSeems to work with Leiningen too ```(! 1109)-&gt; lein new app jfx\nGenerating a project called jfx based on the 'app' template.\n\nMon May 13 20:12:02\n(sean)-(jobs:0)-(~/clojure)\n(! 1110)-&gt; cd jfx\n\nMon May 13 20:12:05\n(sean)-(jobs:0)-(~/clojure/jfx)\n(! 1111)-&gt; vi project.clj \n\nMon May 13 20:12:46\n(sean)-(jobs:0)-(~/clojure/jfx)\n(! 1112)-&gt; lein repl\nnREPL server started on port 57958 on host 127.0.0.1 - <nrepl://127.0.0.1:57958>\n...\njfx.core=&gt; (require '[cljfx.api :as fx])\nnil\njfx.core=&gt; Bye for now!\n\nMon May 13 20:13:18\n(sean)-(jobs:0)-(~/clojure/jfx)\n(! 1113)-&gt; cat project.clj \n(defproject jfx \"0.1.0-SNAPSHOT\"\n  :description \"FIXME: write description\"\n  :url \"<http://example.com/FIXME>\"\n  :license {:name \"EPL-2.0 OR GPL-2.0-or-later WITH Classpath-exception-2.0\"\n            :url \"<https://www.eclipse.org/legal/epl-2.0/>\"}\n  :dependencies [[org.clojure/clojure \"1.10.0\"]\n                 [cljfx \"1.2.9\"]]\n  :main ^:skip-aot jfx.core\n  :target-path \"target/%s\"\n  :profiles {:uberjar {:aot :all}})\n\nMon May 13 20:13:22\n(sean)-(jobs:0)-(~/clojure/jfx)\n(! 1114)-&gt; \n```\nThanks - let me test - I have used openjfx with  openjdk version \"1.8.0_212\" just fine in the past, but perhaps i'm hitting an issue now.  let me give your samples a try\nI've never managed to get it to work with openjdk 8, only Oracle JDK 8 and OpenJDK 11.\n<https://github.com/ahungry/ahubu> - That was my clojure browser project, it used openjfx, but I didn't use any of the clojurey abstraction libs like fn-fx or cljfx - it basically loads up the openjfx portion via .java files and hooks into it on the clojure side\nopenjfx with openjdk 1.8 that is\nMaybe some class path is hardcoded in cljfx and can't be found under the openjdk hmm\nWhen you got it to work with openjdk 11, was that by building openjfx from source?  or does it shop as part of 11? (or as a separate package like with openjdk 1.8?)\nopenjdk11 does not include javafx -- cljfx brings it in as dependencies I think.\nYeah <https://github.com/cljfx/cljfx/blob/master/deps.edn>\nThanks - let me give 11 a whirl\n<@Donetta> I figured I'd just try it on Windows PowerShell too\nseems like I can't get any luck with arch linux and this setup using lein - I can get the require to work without lein using deps, maybe lein isn't needed\nis there a way to have lein leverage deps installed from the deps.edn?\n<@Donetta> There's a plugin for that -- `lein-tools-deps` I think it's called.\nFWIW, we started with `lein` in 2011 at work, switched to `boot` in 2015, and switched completely to `clj`/`deps.edn` last year and we haven't looked back.\nthanks, maybe that's the best way forward for me as well, I'll have to spend some more time on deps.edn\ndoes anyone in your environment use Emacs/Cider with that setup?\nWe use Socket REPLs and plain text REPLs. I used Emacs for years but switched to Atom (with ProtoREPL at first, but with Chlorine now). My colleague <@Rosaline> uses Emacs but I'm pretty sure he's stopped using CIDER/nREPL these days.\nThanks again for the advice\nI'm a big fan of the simplest possible tools that work and support an effective REPL-driven workflow.\nI use Emacs/CIDER and deps.edn every day. it\u2019s good!\nYea, this does seem nice - with nothing more than a core.clj, deps.edn and cljfx as a dependency, I have the sample working now.  I guess the other things I've used in lein, clj can replace as well?  (generating an uberjar etc.?)\nThere are some libs out there that try to fill those various holes to different degrees\n<https://github.com/clojure/tools.deps.alpha/wiki/Tools>\n<@Donetta> We use (my fork of) `depstar` to build uberjars for production deployment. Then we run them with `java -cp path/to/the.jar clojure.main -m entry.point`\nI publish libs to Clojars using `clj -Spom`, `depstar` and a `mvn` deploy task.\n(and there's a `tools.deps`/`clj` tool for publishing to Clojars if you prefer)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1447",
    "text": "ah, what a frustration\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1448",
    "text": "Ehhh not quite\nIn my libraries, I use leiningen to publish. In my apps, I install CLJ on the host I\u2019m running on\n^^ for libs\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1449",
    "text": "Something is still confusing me:\nOn one hand, when we call `seq` on a  map we get a sequence that is not indexed, on the other hand `nth` works on it\n```\n(indexed? (seq {:a 1})) ;; false\n(nth (seq {:a 1}) 0) ;;  [:a 1]\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1450",
    "text": "Hi, I had a doubt about core.async,\n(async/alts!!\n   [channel-im-expecting-data (async/timeout 30000)])\nWhat happens to the timeout channel if i get the data from the other channel?\nDoes my thread get occupied for the next 30 seconds till the timeoutchannel emits something or is it picked up by GC immediately after the alts!! gets the 'winner' channel\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1451",
    "text": "I'm trying to preserve the type of a collection after calling `map` over it. My attempt of `(into (empty xs) (map f xs))` doesn't work for vectors because it reverses the arguments. Is there any other good tricks for this?\n`((if (vector? xs) mapv map) f xs)` ?\nThat's probably sensible tbh :) although strictly speaking, ` (not= (type (list 1 2 3)) (type (map inc (list 1 2 3))))`\nof course, lazy raccoon is not obvious raccoon )\nbut at most cases it dont need to make him strict before needed )\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1452",
    "text": "Hi, related to my previous question about lazy-seq of bytes from a socket:\n```\n(let [in (.getInputStream (Socket. \"localhost\" 8888))]\n  (run! handle-byte (repeatedly #(.read in))))\n```\nWhat\u2019s the advantage of doing seq operation here over recursively handling bytes?\nLike\n```\n(let [in (.getInputStream (Socket. \"localhost\" 8888))]\n  (loop [b (.read in)]\n    (handle-byte b)\n    (recur (.read in))))\n```\nDo you mean the second style, which uses loop and recur, is procedural? And why should I escape it?\nThe way I see it is, even it\u2019s procedural, it\u2019s just the byte-reading part, which has side-effect anyway. Most of my business logic is inside `handle-byte`, which can still be functional.\nYes, it\u2019s not a big deal. Still, what you are doing can be represented as mapping over a bytestream (which also correctly handles when it eventually runs out, unlike the versions you posted).\nSee for inspiration:\n<https://github.com/cgrand/xforms/blob/master/src/net/cgrand/xforms/io.clj#L14>\nyou can easily implement a `bytes-in` based on this\nI see. So now I raise back my original question: why `nth` doesn\u2019t work on a map (with an implicit transformation of the map into a seq)?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1453",
    "text": "Why are business use cases, like timestamps etc a bad fit for Clojure metadata?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1454",
    "text": "There\u2019s an overhead to the `seq` abstraction, which at this level is quite significant. If you want to escape procedural code, I advise you turn to transducers\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1455",
    "text": "Hi! I am not sure it\u2019s a right channel, but is there anybody who ever worked with flatbuffers from Clojure? Its Java API seems reasonable, however at first look it does not seem it can be clojure idiomatic enough. I can miss something tho.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1456",
    "text": "Is `tap&gt;` suitable for data? I send a map to it but REBL shows it only as a string, and only first N characters (30??) so it is useless as most of it is namespaced keys :disappointed: <@Celestine>, you use REBL and tap&gt;, do you know? Thank you!!!\nUpdate: Mouse over shows the whole map for a few seconds, which solves the problem, though I would prefer to be also able to inspect it in REBL's viewer.\nsounds like `business use case` is the definition of data, not metadata :shrug:\nIn general, ops in Clojure have strong perf expectations and you\u2019d expect nth to only work on indexed things. However, nth has a fallback mode that does a linear search so it works on seqs. This is the only example like this I\u2019m aware of in Clojure (and I believe it\u2019s probably to support destructuring)\nShould be data and I believe there was talk about ways to inspect and def as it, but not sure where that is\nIt\u2019s a collection function, not a sequence function, so does no seq coercion\nSince maps are unordered, asking for the nth thing is meaningless\nIf you explicitly convert to a seq, then you have something ordered, and you can ask the question\nWould it be accurate to say that seq coercion occurs only   inside functions where the perfs on seq are good?\nNo, seq coercion occurs on all seq functions \nNot a perf thing\nthe functions described at the bottom of <https://clojure.org/reference/sequences> - functions that take a seqable as last arg and return a sequence (really a seqable)\nas opposed to collection functions which take a data structure as first argument and operate on the data structure (assoc, conj, nth, disj, contains?, get, etc)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1457",
    "text": "What is the exact meaning of a seq function?\nI don\u2019t want to drag your attention to unimportant details, but `nth` appears in the list at the bottom of <https://clojure.org/reference/sequences>\nAlso, I noticed that `last` works on maps\nlast is a seq function so coerces to seq\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1458",
    "text": "<@Brent> are you using nrebl-middleware?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1459",
    "text": "what about transient business data?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1460",
    "text": "on Windows GraalVM native I get a nullpointer for `io/resource` because `(.getContextClassLoader (Thread/currentThread))` returns `nil`. What should I use instead?\nit\u2019s probably a bug in GraalVM, but maybe there\u2019s a workaround?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1461",
    "text": "I\u2019m writing a macro that uses eval to do a series of requires and then uses them inside the body (like `(mymacro (:require [my.ns :as m]) (m/some-fn))`). It works fine except if I use a namespace aliased keyword (like `(mymacro (:require [my.ns :as m]) (m/some-fn ::m/my-kw))`). It throws an error saying it can\u2019t resolve `m`. Curious if this is possible to get working and generally when are namespace aliased keywords resolved?\nnamespace aliasing is done at read time\nwhich happens before your macro runs\nI believe this is known as the Gilardi scenario\n<https://technomancy.us/143>\nThanks <@Dann>, that makes sense. <@Clarine> reading\u2026\n<@Clarine> interesting article, and i\u2019m already using a wrapping `do` (my macro is based off of the one found here <https://github.com/mfikes/chivorcam/blob/master/src/chivorcam/core.cljc>). AFAICT though, as <@Dann> said, the namespace aliased keyword expansion is happening before anything gets eval\u2019d.\nDoes anyone have experience with Jib for Clojure containers? What would be required to get that into boot or lein?\nWhich I guess means that the compiler is analyzing the file using the requires in `ns` perhaps to do that namespace resolution?\n<@Mildred> one work around would be something like the macro turning `m my-kw` (or anything else that isn't an aliased keyword) into `::m/my-kw` on output\nit could be symbols, strings, whatever\nit could even convert `:m/my-kw` into `::m/my-kw` - if that makes any sense for the macro internally\nSort of implementing my own version of the expansion\nyeah - it really depends on what your macro is meant to do\nfor this specific case I can work around it by just avoiding those namespace aliased keywords (it\u2019ll be used in a fairly limited way, so that\u2019ll be possible)\n~also, there's nothing stopping you from just using :my.ns/some-key - :: is never needed, just convenient~ - what you said\nright, I did that initially too\n<@Brent> Currently, `tap&gt;`'d values in REBL just display as strings -- you can't `datafy`/`nav` into them which is a bit of a shame. I use `tap&gt;` for debugging and being able to see output alone is valuable but, yes, it would be a lot more valuable if you could drill down into `tap&gt;`'d values in REBL like you can with regular values from the REPL. <@Jasmine>\nIt's also kind of annoying that `tap&gt;` returns `true`/`false` instead of the value you are \"tapping\". Makes it harder to use in a pipeline (you end up with `(doto tap&gt;)` instead of just `(tap&gt;)` and you can only use it with `-&gt;` not `-&gt;&gt;`).\nI think we have a CLJ ticket for that\nI don't see one <@Jasmine> -- I searched for both `tap&gt;` and `REBL`.\nMaybe we\u2019ve just talked about it then\nThere's <https://github.com/cognitect-labs/REBL-distro/issues/20> about `tap&gt;` failing altogether in REBL on certain JDK versions (due to a reference to a class that has been removed).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1462",
    "text": "Wondering if anyone can help me find a more elegant way to do this. So for this puzzle here <https://adventofcode.com/2017/day/18> I've got a simple parser function to translate an instruction string into an instruction function. It's pretty boiler-platey though. In the end, I want to try multiple regexes to find what I need (with capture) and I want to short-circuit when I've got it (not try all the matches). I don't mind the repetition within regex strings, but the repeated `when-let` is pretty ugly:\nNone\nthat could be cond\noh, but the destructuring - you want a match type thing that has destructuring built into the clauses\nExactly.\nyou could do the regex as `#\"([a-z]+) (\\d+)\"` then you can use cond on the a-z\nor even case\nSure. I had considered some trick like that, but I guess I was hoping for something a bit more generic for this kind of thing. Not the end of the world, guess I could invest in some macro or something if I do this enough (suprisingly a lot in these AOC puzzles).\nI think one parsing rule then dispatching on data is better than N parsing rules\ndoesn't `match` work with regex?\nmatch isn't in clojure.core\nah. if that's part of the desire then i suppose its closed off\nusually with puzzles like these people aren't able to use deps? dunno\nI can use whatever (no requirements, just for fun), but for sure I'll prefer things in core or more standard stuff when available.\nmatch is standard even though not core\n(imo)\nRight. Can you see how it would fit in with my above example? If it's elegant and not too off the beaten path (not trying to refactor my whole solution into some prolog type thing) I'd for sure consider it\n<@Keenan> what about something like this:\n```  (defn parse-instruction [i]\n    (let [[_ op x y] (some identity\n                  [(re-matches #\"(snd) (\\d+)\" i)\n                   (re-matches #\"(set) ([a-z]) (\\d+)\" i)\n                   (re-matches #\"(add) ([a-z]) (\\d+)\" i)\n                   (re-matches #\"(mul) ([a-z]) (\\d+)\" i)\n                   (re-matches #\"(mod) ([a-z]) (\\d+)\" i)\n                   (re-matches #\"(rcv) ([a-z])\" i)])]\n      (case op\n        \"snd\" #(assoc % :snd (Long/parseLong x))\n        \"set\" #(assoc % x (Long/parseLong y))\n        \"add\" #(update % x (partial + (Long/parseLong y)))\n        ,,,\n        )))```\nOf course as soon as I write that my brain is screaming `defmulti` at me, but \u2026\ni looked back and I just mapped read-string over the strings once they were split by space\n^^^ Haha. That's another way.\nhere's the evaluator: <https://github.com/dpsutton/advent/blob/master/2017/src/advent/day18.clj#L15> and here's where i prepare the data: <https://github.com/dpsutton/advent/blob/master/2017/src/advent/day18data.clj#L50>\n<@Evonne> I do like that better, works with the speculative destructuring\nIt kinda separates it into a lexing step and a parsing step, which I like\nthe code becomes quite a bit simpler if you do the regex once: ```(defn try-number                                                                                                                                      \n  [s]                                                                                                                                                 \n  (try (Long/parseLong s)                                                                                                                             \n       (catch Exception _ s)))\n\n(def instruction-re #\"(\\w+) (\\w+) ?(\\w+)?\")                                                                                                           \n\n(defn parse-instruction                                                                                                                               \n  [i]                                                                                                                                                 \n  (let [[_ op a b] (re-matches instruction-re i)                                                                                                      \n        x (try-number a)                                                                                                                              \n        y (try-number b)]                                                                                                                             \n    (case op                                                                                                                                          \n      \"snd\" #(assoc % :snd x)                                                                                                                         \n      \"set\" #(assoc % x y)))) ```\noh, I should have read the scrollback :D\nI guess speculatively trying to treat everything as a number in order to use only one regex is weird though :/\nLooks like you could do it with 3 regexes though: op-digit, op-var-digit, and op-var.\nthat's true\nthat's probably the most elegant version\nor even just a map of functions that are keyed by the instruction string\nYeah, that was what I was thinking as soon as I wrote out the `some`-based version\nThe nice thing about `some` + regexes is that you can specify that, for example, the `add` operator has to be followed by exactly a 1-character channel name and an integer value.\nThe multimethod would have to add extra logic to provide those constraints.\nyeah i saw this but, deleting when the JVM exits is not a good solution\nbecause it will be always online\nit may be a solution by now, but not in the future\nthere\u2019s a line at the bottom showing how to delete the file without waiting for the JVM to exit\nyes, but i don't know how to trigger this delete\ni don't know how to tell if a user have tried to access the file, and if he finished downloading or not\ni'm trying to figure out something within Ring that does do this\nyou might consider deleting after a certain period of time. in case the user needs to re-try downloading it\nyeah that's good too\nsomething like 10 mins / 20 mins / 1 hr, whatever you feel is best\nbut in that case, there is any sort of lib that does this kind of job? runs a function every X minutes?\nbut the function would need to be specific to each created resource, because every resource has a different trigger time\nwow, that seems to be hard to scale\nthere\u2019s a few libs out there for running tasks on a timer. I\u2019ve used <https://github.com/juxt/tick>\nyou could probably run it on a batch process: every 10 mins or so, run a function that checks if any files are over their expiration time and if so, delete them\nI would probably do something like: have a task that checks the temps/ directory every few minutes, get the create-datetime for each file, and if the file is older than \u201cX\u201d minutes, delete it.\njinx! :smile:\nsounds good\nLol, typing and not reading\nThe nice thing about periodically \u201csweeping\u201d is that if your app crashes and restarts, it\u2019ll automatically clean up after itself.\ni'll check this `tick`library and see if i can create the task, thanks guys\n<@Leda> if you need something solid and scalable I recommend pushing the zip-files to AWS S3 and programmatically generating download URL that\u2019s valid for x seconds. It\u2019s a pretty common use-case.\nwow, that sounds nice, definitely i can possibly use this later on, after my beta phase is over...\nbut i'll have to study this later, because my zip files vary from 10mb to 200mb, and i don't want the user waiting to download for too long...\nYou don\u2019t either want that your servers fill up from the zip-files and crash. :slightly_smiling_face:\nthat's also true haha\nand tell the user to get it from there, maybe directly, maybe via a redirect\nYep, it\u2019s a good idea to offload all the nasty bits to Amazon. :wink:\naccording to the previous definition, `last` is not a seq function as it doesn\u2019t return a sequence\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1463",
    "text": "you could split on spaces and have a defmulti that dispatches on first. then the defmethod can just take the whole space split line and do what it needs to do with it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1464",
    "text": "Hey guys, i'm creating a zip file for the client download with Ring. But i want after the user download's it, it automatically deletes the zip file, any ready solutions for that?\nMaybe this? <https://github.com/clojure-cookbook/clojure-cookbook/blob/master/04_local-io/4-10_using-temp-files.asciidoc>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1465",
    "text": "for the cases of \"user has to download some generated content\" - as my stuff is on aws i would definitely put the downloadable thing on s3\nstreaming big stuff out to possibly slow clients from your appserver is just looking for trouble :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1466",
    "text": "<@Leda> what if the zip never had to be a file? you can provide a download that's simply bytes generated into your output\nthis isn't something that ever needs to touch a file system\n(or worst case you can use a file system that's just in-process heap memory - which guarantees cleanup when the process exits anyway)\nok, \"most\" return a sequence :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1467",
    "text": "hey everyone. i\u2019m trying to work out a really simple example of parallelization to see if i can get some performance increase. is there any way i could potentially parallelize `(apply min-key second {1 2 2 3 3 4 .. })`?\nmy first thought was something like splitting the list into `n` components and then running `pmap` across them, but i feel like the overhead would dominate\n<@Onita> How big is that map likely to be?\nlet\u2019s say on the order of 1000s\nthis function would likely run super hot however, so any improvement would help\n`clojure.core.reducers` will probably help you here -- `r/fold` can do work in parallel.\ncool, thanks. i guess this is a good excuse to dive into that library\n<https://clojure.org/reference/reducers#_reduce_and_fold> should get you started\n<@Onita> using `val` instead of `second` is ~2x faster on my laptop:\n```\n(def m (zipmap (range 1000) (range 1000)))\n\n(require '[criterium.core :refer [bench]])\n(bench (apply min-key val m))\n;;  Execution time mean : 41.214976 \u00b5s\n(bench (apply min-key second m))\n;; Execution time mean : 100.534521 \u00b5s\n```\nwow. good find, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1468",
    "text": "second walks it through the key, val is an indexed lookup\nand particularly special-cased for map entries\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1469",
    "text": "Why `last` is slower then `val` ?\n`val` performs like `#(nth % 1)`\n<@Elaine> ```user=&gt; (source val)\n(defn val\n  \"Returns the value in the map entry.\"\n  {:added \"1.0\"\n   :static true}\n  [^java.util.Map$Entry e]\n    (. e (getValue)))\nnil\n```\n`val` is a fast operation on a `MapEntry`\nYou can't call `val` on an arbitrary two-element vector :slightly_smiling_face:\n`last` is linear time :open_mouth:\nI thought that last was constant time in counted structures\n```\nuser=&gt; (time (apply min-key val m))\n\"Elapsed time: 842.254296 msecs\"\n[0 0]\nuser=&gt; (time (apply min-key peek m))\n\"Elapsed time: 838.988506 msecs\"\n[0 0]\nuser=&gt; (time (apply min-key last m))\n\"Elapsed time: 2076.809707 msecs\"\n[0 0]\nuser=&gt; (time (apply min-key second m))\n\"Elapsed time: 1531.45713 msecs\"\n[0 0]\n```\npeek performs like val :slightly_smiling_face:\nsecond is slow\nlast is slower\ncould someone help me understand what\u2019s happening in the combine step of a fold when it\u2019s called with no arguments?\nhaving trouble getting my head around it\nbut i guess that makes sense\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1470",
    "text": "You're thinking of `peek` perhaps?\n```user=&gt; (doc peek)\n-------------------------\nclojure.core/peek\n([coll])\n  For a list or queue, same as first, for a vector, same as, but much\n  more efficient than, last. If the collection is empty, returns nil.\nnil\n```\n<@Elaine> Yup, `peek` is special-cased for performance and seems to work just fine on `MapEntry` objects too ```user=&gt; (let [x (first {:a 1})] (quick-bench (val x)))\nEvaluation count : 91382334 in 6 samples of 15230389 calls.\n             Execution time mean : 4.912437 ns\n...\nuser=&gt; (let [x (first {:a 1})] (quick-bench (peek x)))\nEvaluation count : 92238174 in 6 samples of 15373029 calls.\n             Execution time mean : 4.878394 ns\n...\n```\n```user=&gt; (let [x (first {:a 1})] (quick-bench (last x)))\nEvaluation count : 4457562 in 6 samples of 742927 calls.\n             Execution time mean : 139.544772 ns\n...\nuser=&gt; (let [x (first {:a 1})] (quick-bench (second x)))\nEvaluation count : 7887582 in 6 samples of 1314597 calls.\n             Execution time mean : 76.811493 ns\n...\n``` Big difference in this case.\n<@Onita> Both the reducef and the combinef can be called with no arguments, and should return the identity element.\nSince you're looking for a minimum, I would imagine you'd need to return a \"maximum\" int value so all other values are smaller?\nyeah i think that\u2019s where i got stuck, trying to conceptualize what the identity element of an application of `min-keys` would be\nIt's a little odd in your case <@Onita> because your \"identity\" is to return an arbitrary `MapEntry` that contains a maximum value.\nYour reducef could look like this: ```(defn mk ([] (clojure.lang.MapEntry. nil Long/MAX_VALUE)) ([a x] (min-key val a x)))```\nand then you'd do ```(r/fold mk (seq your-giant-map))```\n(you need the seq there, otherwise you seem to get a `reduce-kv` style call of your reducef with the accumulator, the key, and then value)\n(although I wonder if calling `seq` here defeats some of what `r/fold` can do? I haven't experimented much with it...)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1471",
    "text": "hmm, ok, let me give this a try\nso i\u2019ve got this, which at least returns the correct result\n```\n(defn faster-mk [m]\n  (fold (fn reducef\n          ([] [nil Long/MAX_VALUE])\n          ([a b] (min-key second a b))\n          ([a b c] (min-key second a [b c])))\n        (seq m)))\n```\nbut it seems to perform worse than the serial version, even for large sizes of `m`. tbc\nyou may be right about the `seq`.\nin fact, it\u2019s on the order of 100x worse\nactually, the results are unclear. still testing\nUse `(clojure.lang.MapEntry. nil Long/MAX_VALUE)` and `(clojure.lang.MapEntry. b c)` instead of vectors. Use `val` instead of `second`. Don't `seq` the map.\n```(defn faster-mk [m]\n  (fold (fn reducef\n          ([] (clojure.lang.MapEntry. nil Long/MAX_VALUE))\n          ([a b] (min-key val a b))\n          ([a b c] (min-key val a (clojure.lang.MapEntry. b c))))\n        m))``` that should be faster\n(although when I tested `(apply min-key val large-map)`, that was pretty fast)\nyeah, the simple version seems better. interesting\nalthough, that example helps a lot in understanding fold\nI tried it with a 20,000 element hash map... I think there's just not enough computation in there to benefit from concurrent execution?\nyeah. seems like it.\nfor my usage i don\u2019t think i should optimize for maps consistently larger than 50k.\nall the same, thanks a lot for your help\nIt's an interesting little puzzle :slightly_smiling_face: Happy to help!\nOnce you get up to 50k, there's more of a difference ```user=&gt; (let [v (into {} (take 50000 (repeatedly #(clojure.lang.MapEntry. (rand-int 10000) (rand-int 10000)))))] (quick-bench (apply min-key val v)))\nEvaluation count : 1206 in 6 samples of 201 calls.\n             Execution time mean : 522.122368 \u00b5s\n...\nuser=&gt; (let [v (into {} (take 50000 (repeatedly #(clojure.lang.MapEntry. (rand-int 10000) (rand-int 10000)))))] (quick-bench (r/fold mk v)))\nEvaluation count : 3420 in 6 samples of 570 calls.\n             Execution time mean : 172.390103 \u00b5s\n...```\n(weirdly I'm seeing more of a difference at 20k than I did before -- benchmarking can be weird)\n<@Onita> If you know the performance changes at a particular size, that seems very reasonable.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1472",
    "text": "would it be bad practice to check how big a thing is before deciding how to operate on it?\n`(if (&gt; (count thing) 20000) (parallel) (serial)))`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1473",
    "text": "I'm observing weird behaviour around watches on a ref. Any idea what's wrong? <https://gist.github.com/jeroenvandijk/90650bd5d4b8e3ba346e3483bf70d3ab>\n```(let []\n  (def ^{:flag 1} v 1))\n\n(def ^{:flag 2} v 2)\n\n(add-watch #'v ::listener (fn [_key _ref old-value new-value]\n                            (println \"old \" old-value \", new\" new-value \"new-meta \" _ref (select-keys (meta _ref) [:flag]))))\n ``` Wrapping the def in a let block \"fixes\" the meta assignment\nthe watch function will be called *before* the var\u2019s value will be set\nNone\nthat doesn't seem to be the case for when it is wrapped in the let block\nthere is an inconsistency if i didn't make a mistake myself\nIn this gist you can see a sequence of evaluations that show this inconsistent behaviour\nyeah seems there\u2019s a difference indeed\nthough this probably falls under \u201cthat\u2019s not what you\u2019re supposed to use it ffor\u201d\nyou\u2019re also not guaranteed to have the state of the ref immediately before or after setting the value\nyeah i can imagine combining meta, watches and vars is not very common. You might be right :slightly_smiling_face:\n\" Note that an atom\u2019s or\n  ref\u2019s state may have changed again prior to the fn call, so use\n  old/new-state rather than derefing the reference. Note also that watch\n  fns may be called from multiple threads simultaneously\u201d\nSorry for interjecting but I believe we are talking about vars here, not refs.\nyeah.\nBut note the value of the var (`_ref`) is given to the watch function so it's not doing a deref\nNo, the `_ref` argument is the box the holds a value\nNot the value itself\nThe third and fourth args are old and new values in the box which is the second arg\nThe value of the ref i mean\nyes but the meta data on the var is mutable.\nand you\u2019re setting the meta of the var, not of the value\nsee alter-meta!\nExactly. This meta is on the box (var), not the value in the box\nStill doesn't explain the different behaviour  in the let though\nso `(meta some-var)` is doing an implicit deref on `some-var` if that's correct\nI found the same thing's happening in my REPL:```user=&gt; (declare a)\n#'user/a\nuser=&gt; (add-watch #'a ::listener (fn [_ ref old-val new-val] (pprint {:old-val old-val :new-val new-val :meta (select-keys (meta ref) [:flag])})))\n#'user/a\nuser=&gt; (def ^{:flag 1} a 1)\n{:old-val\n #object[clojure.lang.Var$Unbound 0x5e26f1ed \"Unbound: #'user/a\"],\n :new-val 1,\n :meta {}}\n#'user/a\nuser=&gt; (def ^{:flag 2} a 2)\n{:old-val 1, :new-val 2, :meta {:flag 1}}\n#'user/a\nuser=&gt; (def ^{:flag 3} a 3)\n{:old-val 2, :new-val 3, :meta {:flag 2}}\n#'user/a\nuser=&gt; (let [] (def ^{:flag 4} a 4))\n{:old-val 3, :new-val 4, :meta {:flag 4}}\n#'user/a\nuser=&gt; (def ^{:flag 5} a 5)\n{:old-val 4, :new-val 5, :meta {:flag 4}}\n#'user/a\nuser=&gt; ```\nvars have an identity, and you can change the metadata on the var, so yeah it works *like* deref, but it\u2019s not a deref since the deref gets the associated value instead of the metadata\nThe symbol `some-var` gets evaluated to a var(box) which is then deref'ed and the metadata on that value is given\nnot really in this case\n`ref` here is really `#'a`\n```user=&gt; (def ^{:var-meta 1} a ^{:value-meta 2} {:value-itself 3})\n{:old-val 5, :new-val {:value-itself 3}, :meta {:flag 5}}\n#'user/a\nuser=&gt; (meta a)\n{:value-meta 2}\nuser=&gt; (meta #'a)\n{:var-meta 1, :line 1, :column 1, :file \"NO_SOURCE_PATH\", :name a, :ns #object[clojure.lang.Namespace 0x1cf336fd \"user\"]}\nuser=&gt; ```\nThis might elucidate the difference.\nso you\u2019re dealing with the var `a` and that var has metadata which can be set directly (by `def` in this case)\nyou can also set the meta data using `alter-meta!`\nThanks guys. I'm trying to make something work for a naive user that set a meta flag on a var so options like `alter-meta!` are good, but not what i'm after. Maybe I'll have to manage expectations instead!\nredeffing a var with `def` is not a good idea anyway (other than in dev)\nI don't think i'm doing explicit deref-ing. It's documented that watches support var's here and they get the var <https://clojuredocs.org/clojure.core/add-watch> . But if (meta some-var) is an implicit deref you might be right\nor maybe i should *not* rely on the metadata of a var, since like Joost said, it is a mutable reference\nthank you , Sean! Let's hope it will be getting. better...\nIf you can, you might want to switch to using the meta data on the value instead. \nDepends on your use case of course \nI'm doing weird stuff with monitoring vars so I don't have that option for this use case\nI'll look into sayid to see how they do this <https://github.com/clojure-emacs/sayid/blob/8ea70573e6eb1a0d1a450fd501f38c2cf26ce27f/src/com/billpiel/sayid/trace.clj#L134>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1474",
    "text": "any ideas why map-indexed 3 times faster on avg 580 vs 140 ms for 1m entries?\n(map vector (iterate inc 0) v)\n(map-indexed #(vector %1 %2) v)\n<@Roselia> map does not handle chunks when given multiple sequences, that might be why.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1475",
    "text": "Morning all - I am considering starting a side project to create a clojure to Dart compiler mainly for fun but also with mind to use it to create Flutter apps. What would be the best compiler to work from as a base - Clojure, ClojureScript or CLR? Dart is single threaded so more like JavaScript but the syntax is closer to java/C#. Thoughts?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1476",
    "text": "Hi everybody, I got an issue what I don\u2019t really understand.\nI am trying to import a protocol to my namespace and then use `satisfies?` to check an instance. In my ns I have the following: `(:import taoensso.carmine.connections.IConnectionPool)`, but when I try to use it like `(satisfies? IConnectionPool \"\")` then it throws an NPE\n```               clojure.core/eval          core.clj: 3214\n                             ...\n      boot.user$eval34439.invoke                  :    1\nboot.user$eval34439.invokeStatic                  :    1\n         clojure.core/satisfies?  core_deftype.clj:  569\n clojure.core/find-protocol-impl  core_deftype.clj:  536\n          clojure.core/instance?          core.clj:  144\njava.lang.NullPointerException:```\nam I doing something wrong?\nFor use in this way, you should require, not import\nIt\u2019s a little confusing, but IConnectionPool here is both a var (the protocol map), and an interface (generates internally)\nsatisfies expects the former\nthank you <@Jasmine> it fixed the problem\n<http://clojuredocs.org/clojure.core/satisfies_q#example-5cdc105ae4b0ca44402ef725>\nthanks <@Jolanda> I\u2019ve checked the <http://clojuredocs.org|clojuredocs.org> first if there is an example like that\nbut there have been none yet :slightly_smiling_face:\nmaking the world a better place, one clojuredoc at a time :stuck_out_tongue:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1477",
    "text": "what's the latest preferred way to profile Clojure code ? I want something similar to Smalltalk's `MessageTally` which returns a tree with time spent at each branch (in Smalltalk's case that's messages in Clojure it would be function applications)\n<https://github.com/clojure-goes-fast/clj-async-profiler> is not bad\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1478",
    "text": "Oh, I'm sure Cognitect will continue to improve REBL...\nindeed\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1479",
    "text": "Hello!\n\nIs this a known issue with Clojure 1.10.0?\n\n```\nuser=&gt; (declare foo)\n#'user/foo\nuser=&gt; (def wrap-foo (partial foo \"hello\"))\n#'user/wrap-foo\nuser=&gt; (defn foo [s] (print (str s \" world!\")))\n#'user/foo\nuser=&gt; (wrap-foo)\nExecution error (IllegalStateException) at user/eval2006 (REPL:1).\nAttempting to call unbound fn: #'user/foo\n```\nthat isn't a bug\npartial is a function, which means its arguments are evaluated\nfoo is a declared var that doesn't have a value\nso when evaluated the \"foo\" passed to partial, the result is a special object designed to catch these kind of bugs when it is invoked\nWhy does it not throw right away?\ni.e. when defining wrap-foo\nbecause then it would have to operate in such a way as to make declare useless\n```\nClojure 1.10.0\nuser=&gt; (declare foo)\n#'user/foo\nuser=&gt; (def wrap-foo (partial (var foo) \"hello\"))\n#'user/wrap-foo\nuser=&gt; (defn foo [s] (print (str s \" world!\")))\n#'user/foo\nuser=&gt; (wrap-foo)\nhello world!nil\n```\n\nJust to show what <@Rosaline> is saying even more clear. If instead of `foo` you refer to the var, it works how you want it to.\nThe var here defers the look up.\nAh, so when I `declare` something I have to use `var`?\n```\nuser=&gt; (declare foo)\n#'user/foo\nuser=&gt; (def f #(foo \"bar\"))\n#'user/f\nuser=&gt; (defn foo [s] (str \"foo\" s))\n#'user/foo\nuser=&gt; (f)\n\"foobar\"\nuser=&gt;\n```\nusing partial at the top level like without understanding that partial is just a function, so it's arguments are evaluated like any other function at call time is a common source of bugs\n<@Melynda> Not sure why you are writing code like this. If you are just playing around with things, sure. But I wouldn't expect to see declare in actual code.\n```\nuser=&gt; (def x 1)\n#'user/x\nuser=&gt; (def f (partial + x))\n#'user/f\nuser=&gt; (def x 3)\n#'user/x\nuser=&gt; (f 0)\n1\nuser=&gt;\n```\nThanks. So I generally should use `var` in this case? Or is there a better / more recommended way?\n<@Melynda> what are you trying to do? just define things out of order (that's the usual usage of declare)\nusually instead of using `(var x)` explicitly we use the reader macro `#'x` which expands to the same thing\nthe best advice is don't use partial for top level functions like that\n<@Suzann> I have a map that contains coercion functions as values (and the keys they shall be applied to as keys). And one of these coercion functions calls other functions that will eventually make use the the coercion map again. So in theory this setup is cyclic, but in practice it is not, because the data structures it operates on are not cyclic.\n<@Melynda> if the functions can all be defined in one form, there's `letfn` that allows cyclical references between the functions it creates in local scope\nanother variant is to have every fn take an argument containing a hash-map that includes all the other fns - that way, you can even add more functions at runtime or from another namespace\nSo the data structure I operate on looks like this:\n```\n[{:foo 1\n  :bar {:foo 2 ...}}\n {:foo 3 ...}]\n```\nAnd in these few instances where the object contains a \"sub object\" in the :bar key, I want to apply the same coercions to the sub object, which is why I need access to the coercion map.\nsounds like it could be a job for `clojure.walk/prewalk` with a function testing for map entries and calling a multimethod on key\nHm, thanks. I never considered this to be a full walk, because :foo 2, the object under :bar, is of a different type that never contains other sub objects.\nprewalk is a blunt tool, agreed, but it might lead to simpler code\nI will try that. :slightly_smiling_face:\nMight reduce the amount of code.\nThanks <@Suzann>, <@Rosaline>, <@Dann>!\none more note: I specify prewalk rather than postwalk specifically because you can't test for map-entries in postwalk (the code turns them into two element vectors, and that works fine for hash-map, but it removes a distinction you likely need to check for, prewalk avoids that issue)\nThanks!\nI am trying to create a vector-based zipper where the children of a node are (next node).\nFor navigating around, this works fine:\n```(defn vec2zip\n    \"Return a zipper where the children are (next node).\"\n      [root]\n     (z/zipper vector? next (fn [n c] (into n c)) root))```\n\nBut editing doesn't work as I'd expect:\n\n```(-&gt; (vec2zip [:X [:A] [:B] [:C]]) z/down (z/insert-child [:a]) z/root)\n[:X [:A] [:B] [:C] [:A [:a]] [:B] [:C]]```\n\nAm I doing something stupid? I tried to attach metadata in the children and make-node functions, but it doesn't seem to stick. Might that be the problem?\n<@Sherice> have you looked at `z/vector-zip`? - or is the point to implement this from scratch as an exercise?\nbecause n is the existing vector\nI looked at z/vector-zip but it really doesn't seem to have the semantics I want.\nhow so?\nyou need something like (into [(nth n 0)] c)\n<@Dann> the children don't 'have names', if that makes sense.\nI would strongly recommend using maps instead of vectors for tagged data like this\nthe built in xml-zip basically has the semantics you want\n(using maps with {:tag tag :children children})\n<@Rosaline> Yeah, I have that working just fine with {:n :X :c [{:n :A} {:n :B} {:n :C}]} for example. Just gets a bit busy.\n```(defn map2zip\n  \"Return a zipper for a map representing a plan.\"\n  [root]\n  (z/zipper map? :c (fn [n c] (assoc n :c (vec c))) root))```\nThanks <@Dann> and <@Rosaline>. I've tried everything I can think of. Given what I've seen, I agree that maps are the best approach.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1480",
    "text": "<@Rosaline> let me try this.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1481",
    "text": "Hello, what is the equivalent of `:java-source-paths` of leiningen in tools.deps? Some of my code is in Java and I really wanna use it as it is.\ntools.deps does not support java compilation\nyou can use it in combination with javac etc if you want that to work\nor you can split your project into java-only and clojure-only parts and have the latter depend on the former\nah okay. Thanks for the info <@Jasmine> Is java compilation planned soon? Really love using tools.deps!\nnot planned - deps does a) dependency resolution, b) classpath building, c) program launching\ngot it. thanks again :smile:\nAre there any books on Clojure that explain it's philosophy as opposed to just teaching syntax? I am interested in learning about choices Rich made and trade-offs resulting from those choices. I know he talks about it in his talks but I would like (if it exists) to have a single place with all this information, so to say. To *understand* Clojure, not only to _learn_ it\nprobably the best you'll get for that are either talks by Rich, or the <http://clojure.org|clojure.org> reference pages, or in book form - Programming Clojure (written by Stu Halloway and latest revised by me, both of us working with Rich)\nIt's amazing to get an answer in less than a minute, and especially from you Alex! :slightly_smiling_face: Thank you! I love this community :heart:\n<https://github.com/matthiasn/talk-transcripts/tree/master/Hickey_Rich> &lt;- more time efficient than watching videos\nsibling dirs contain other relevant stuff probably\nif it is transient and doesn't matter, then it doesn't matter and you shouldnt bother keeping it\nif it matters, then it is part of your data and it shouldnt be metadata\nor <https://www.youtube.com/playlist?list=PLZdCLR02grLrEwKaZv-5QbUzK0zGKOOcr> :)\nthank you!\nthat was missing some videos so I added them and reverse date sorted\nthe talk Rich did at JavaOne years ago is actually a pretty great intro <https://www.youtube.com/watch?v=VSdnJDO-xdg>\nnot in learning the language, but why the language exists\nThank you, again!\n\nMeanwhile, I've ordered your book :blush:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1482",
    "text": "Hi, I am no expert but I would believe that Cljs is best because it was written after Clojure, with lessons taken from it (e.g. relies heavily on protocols rather than Java interfaces).  Also.\nClj and CLR emit bytecode while you likely want to emit code. Cljs uses Google Closure heavily - not sure whether there is something similar for Dart.\nthey make great gifts - buy 10!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1483",
    "text": "Asking for the most ideomatic approach: suppose we have a mutual recursion\n```\n(defn a [x] (if .. (b x))\n(defn b [x] (if ...(a x))\n```\nNow I\u2019d like to inject another arg `y` into `a` but in order to do so I also have to:\n1) change `b` *arity* (in case b call a not directly but there\u2019s a longer call chain it gets tedious).\n2) Another variant is introducing a *dynamic* var and do `binding` across everything (but it becomes opaque and var always means toplevel)\n3) in case x is even not `{}` I could handle it with metadata containing `y` (looks like a hack)\n\nWhat would you prefer?  (please vote) Am I missing yet another approach?\n\nIn short: 1=explicit pass args | 2=implicit | 3=hack\ncan you write out the two implementations?\n3) Use `(declare b)` before defining a?\nSee here <https://github.com/DomainDrivenArchitecture/smeagol/blob/master/src/smeagol/formatting.clj#L159>\nI\u2019d like to add an arg to `process-text`\nSorry, maybe I expressed myself not clearly, I know how to define/declare, the question is actually -&gt; pass something explicit or implicit\nAlso <@Mona> you can get quite a good sense of philosophy and the \"Why?\" of Clojure from The Joy Of Clojure book, if you haven't already read that.\nmaybe ideal situation is when x is a `{}` and passing around `(assoc x)` is very cool, but in this case it\u2019s not :confused:\nGiven it's mutual recursion with two fns colocated next to each other in the same file and calling each other directly, I'd add an explicit argument (and maybe another arity so clients can maintain their present interface)\nyeah, preserving interface makes 1. even more verbose :disappointed:\n\nthis situation makes me think one more time that only passing hashes around rocks\nuse another main :slightly_smiling_face: <https://github.com/bhauman/rebel-readline> (uses `compliment` library for autocomplete, same as reply afair)\nFor this specific example you linked to I would get rid of those auxiliary functions. The 4 arguments passed around add a lot of cognitive overhead and the body of these functions don't do much.\nyep, a valid point :+1: but still, it\u2019s not always an option to incorporate everything inside a single scope\nbut I also aware that recur is more optimal than trampolines (which are even omitted in this case -&gt; stackoverflow possible)\nstill, people often argue about scala implicits but they\u2019re really handy instead of passing smth around\n<@Viki> I'm still not super clear about the context here\nyes it does, but only in `a`; `b` could only pass it around\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1484",
    "text": "hey ya'll, what are people using for repl autocomplete etc when using just `clj` instead of leiningen? Is reply still common?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1485",
    "text": "I agree, I use dynamic vars when I have a context to pass everywhere or to pass through a long list of functions that do nothing with it other than forwarding it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1486",
    "text": "does your \"y\" change over the course of the mutual recursion?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1487",
    "text": ":+1:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1488",
    "text": "With something like ring, is it normal to layer your middleware from most app specific to most general?\n```\n(-&gt; handler\n    middleware-a\n    middleware-b\n    middleware-c)\n```\nYes, I normally stack them from application to configuration middlewares.\n\n```\n(-&gt; handler\n      api-middleware-a\n      api-middleware-b\n      wrap-json-response\n      wrap-gzip\n      wrap-errors\n      ;; etc...\n)\n```\n\nI hope that make sense :slightly_smiling_face:\nYes, exactly what I was trying to find out!\nIf you have something that deals with authentication where would you put that?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1489",
    "text": "That will depend on where in the process you want the auth to apply. We've taken different approaches with different apps, depending on exactly what we need.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1490",
    "text": "Is there a macro library for supporting 'array syntax' in Clojure?  If not, is it feasible to write one?  How does a macro like that work - do you sort of deal with the list elements as strings and break them apart to understand what to do?  This is something like what I had in mind:\n```\n(def a (double-array [1.0 2.0 3.0])\n(macroexpand '(array-syntax a[0])            ; =&gt; '(aget a 0)\n(macroexpand '(array-syntax a[0] = 4.0)  ; =&gt; '(aset a 0 4.0)\n```\nno\nmacros are code -&gt; code transformations, the input has to be well formed code\nYou can actually cheat here by abusing the fact that the Clojure reader will read a[0] as the symbol a and the vector with one element 0\nyou cannot\nbecause there are places where you want a single thing, and the reader will not read in a[0] as a single thing\nreader macros are not extensible for this very reason, because in other lisp people started to create new syntax constructions incompatible with code as data paradigm\ncorrect me if i'm wrong\nNot sure I understand why that would break anything <@Rosaline>. If the macro reads a then [0], seems like you can key off that appropriately in the simple cases specified\n[0] is a vector of 1 element, multiple of such simple cases will make language unbearable to learn, look at scala's underscore\nThat makes sense. Thanks! After a bit of trial and error the sweet spot for me is between general configuration middlewares and the APIs.\nYeah, sadly, clojure doesn't allow for reader macros, unlike Racket\nI'm not say anyone should do this :joy:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1491",
    "text": "Hi everyone, I have a memory leak problem with my clojure program, I am trying to debug it with yourkit however the heap usage does not change, I only see the ram usage increase constantly with `htop`, not sure how to find where the leak is\nI think i badly misunderstand how namespaced keywords work\n```\n::http/routes\n=&gt; :io.pedestal.http/routes\n```\ni am not in the `:io.pedestal.http` namespace\ni thought `::symbol` would resolve to `:my.ns/symbol`\nI bet you have aliased io.pedestal.http to http tho\n...that would do it\nooooh that makes sense\nThat's correct if it is in the last part. If you do ::foo/bar it will look up the symbol foo as an alias in your current ns\n`::alias/thing` goes to `:full.path.of.alias/thing`\nnew issue\ni have a macro which reads a resource from the classpath to generate functions\nI think i need to go AOT for the program i am working on\nduring compilation i cant find that file\n...okay scratch that question\njust like 9/10 times AOT isnt needed\nbut i still need to figure out how to get the clojure files into the jar\nnot sure where to put\n```\n            &lt;resources&gt;\n                &lt;resource&gt;\n                    &lt;directory&gt;src/main/clojure&lt;/directory&gt;\n                &lt;/resource&gt;\n            &lt;/resources&gt;\n```\nif you're using a pom, I think that goes in &lt;build&gt;\nthink that did it, thanks\nalways hate working with maven, but at the end of the day it works\nhmm. I need to read an EDN file, assoc some stuff in it, and then spit it out\u2026 while maintaining comments\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1492",
    "text": "have a look at `rewrite-clj`? I think that's what many tools use for that purpose\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1493",
    "text": "hello :smile:\nHow to remove tag `a:`  ?\nIn ClojureScript: ` (emit-str {:tag \"{<http://www.w3.org/1999/xhtml>}html\"})  ;; =&gt; \"&lt;html xmlns=\\\"<http://www.w3.org/1999/xhtml\\>\"&gt;&lt;/html&gt;\" `\nIn Clojure: `  (xml/emit-str {:tag \"{<http://www.w3.org/1999/xhtml>}html\"})   ;;=&gt; \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;&lt;a:html xmlns:a=\\\"<http://www.w3.org/1999/xhtml\\>\"/&gt;\" `\n<@Meagan> ok, will do\nand yes that was the issue\nmultimethods are very convinient with respect to state management\nissue opened\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1494",
    "text": "Even when there is non-trivial state that may be changed by users, passing explicit args is better IMHO. We can get back the convenience of not having to pass args each time by implementing Component and/or Integrant's abstractions.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1495",
    "text": "hey, is anyone here working at juxt? need a hint on how to start a repl properly in the yada repo.\nor even if you don't work at juxt :stuck_out_tongue:\n<@Izetta> have an ask in <#C0CFGN25D|juxt>\n<@Sixta> is a juxter iirc, and of course <@Robbi>\nah, didn't see that channel\nshould be `lein repl` though. Feel free to mail me at <mailto:mal@juxt.pro|mal@juxt.pro>\nThere's also a <#C0702A7SB|yada> channel\n<@Izetta> asking in <#C0702A7SB|yada> is the best place\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1496",
    "text": "Well regardless of the problem context, if you want functions calling each other on the same level, usually something is wrong. It\u2019s always good to call functions from top to bottom.\n\n```\n    / a\nfoo\n    \\ b\n```\n\nMy bet is you just need a proper data/context shape + `(recur)` like\n\n```\n(defn foo\n  [ctx]\n  (recur\n    (cond (condition)\n      :a (a ctx)\n      :b (b ctx))))\n\n(defn a\n  [ctx]\n  (assoc ctx ...))\n\n(defn b\n  [ctx]\n  (assoc ctx ...))```\nAgain, it\u2019s hard to guess but the rule is simple and works all the time just great.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1497",
    "text": "Hello guys\ni'm in situation which i need to make two things depend on each other for example:\n1- write something to DB\n2- if step#1 success write another something\nhow can i make both behave like if they run inside one transaction, both must be success not only one?\nmaybe dosync will help here?\nso maybe i create a ref object with initial val = false and when event#1 success  i change ref to be true and make condition to run event#2 if ref is true?\nor how better to make this?\nThis is not really a Clojure question. If db and thing 2 don\u2019t actually support 2PC distributed transactions like XA, then you are in the world of effectively doing your own distributed transactions and managing your own rollback in the case of failure.\nRefs don\u2019t help you afaict\ndon't ask how this situation occured. :stuck_out_tongue:\n`(get-in data [1 3 :key])`, no?\n@art yep. *slaps forehead*\n<@Jasmine> what do you mean i need to implement rollback methods if one of the events failed, suppose event#1 success and be inserted to the DB, and event#2 failed, then i need to run the rollback method to delete the record from the db which be inserted by event#1 ?\n<@Toccara> depending on the DB you use, but usually modifications to the same row are serialized in the database, so you can safely wait for transaction #1 to finish, check the return value, then do #2\nokay got it\nthanks guys :+1:\n<@Bart> if  transaction #1 success and then try to invoke transaction #2 which failed, then i need a rollback methods implemented for event#1 to roll back\ni guess that's what <@Jasmine> means\nyes, unless the database supports rollbacks on it's own (most don't yet)\nI am not quite sure I understand what you are trying to do <@Toccara>\nokay\nAre you writing to a single db twice?\nlemme explain in more details what i'm trying to do\nAre you writing to different destinations sequentially?\ni would like to save reference of objects into postgresql and save the actual objects into s3 for example\nso i need to make 2 operations here\n1- insert reference data into postgresql of the object\n2- push the object itself into s3\ni would like to make both run in one transaction, to make sure i pushed reference and the object, but not any of them\nmy try now is to handle the failure of any for any reason\n@art got what i'm trying to do?\nWell, it\u2019s postgresql \u2013 in that case use transaction and if s3 upload fails roll it back, no?\nyou are right\nwhat i missed postgresql has roll back, but everything clear\nNormally if an exception occurs somewhere inside it\u2019s rolled back implicitly.\nHowever the best rule to follow is trying to avoid writing to multiple destinations in a single user transaction because if the transaction fails because of other reasons _after_ the file has been uploaded it needs to be deleted. In your case that does not seem necessary but still good to keep in mind.\n<@Antonia> good thanks :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1498",
    "text": "is there a nice way of getting data out of a map where the keys are not keywords? f.ex. get the map at the innermost level here `{1 {3 {:key true}}`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1499",
    "text": "anyone know how to insert a whitespace character (e.g. newline) using rewrite-clj?\nthat\u2019s exactly what I was looking for! thanks!\nah, there are utilities in `rewrite-clj.node`\nHeya; I'm using leiningen and need some dynamic eval in project.clj to get the absolute path to the project.clj directory; I'm using:\n\n```\n[\"--verbose\"\n \"--no-fallback\"\n \"-Dclojure.compiler.direct-linking=true\"\n \"-H:+ReportExceptionStackTraces\"\n \"--report-unsupported-elements-at-runtime\"\n \"--initialize-at-build-time\"\n \"--enable-https\"\n ~(fn [proj] (str \"-J-Djava.security.properties=\" (:root proj) \"/java.security.overrides\"))\n \"--rerun-class-initialization-at-runtime=org.bouncycastle.crypto.prng.SP800SecureRandom\"\n \"--rerun-class-initialization-at-runtime=org.bouncycastle.jcajce.provider.drbg.DRBG$Default\"\n \"--rerun-class-initialization-at-runtime=org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\"]\n```\n\nI was expecting that fn to be called with the project map, evaluating to a string, per <https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L347-L348>  but clearly lein native-image isn't happy, because when I run it I get:\n\n```\n$ lein with-profile +client native-image\nError encountered performing task 'native-image' with profile(s): 'base,system,user,provided,dev,client'\njava.lang.IllegalArgumentException: array element type mismatch\n```\n\nI tried to debug using `lein pprint`, but instead it's just getting unquoted and so I get a literal function object in pprint (that might not be a bug? I'm not sure when the fn eval is supposed to happen):\n\n```\n   :native-image\n   {:name \"transgressor\",\n    :opts\n    [\"--verbose\"\n     \"--no-fallback\"\n     \"-Dclojure.compiler.direct-linking=true\"\n     \"-H:+ReportExceptionStackTraces\"\n     \"--report-unsupported-elements-at-runtime\"\n     \"--initialize-at-build-time\"\n     \"--enable-https\"\n     #object[leiningen.core.project$eval493$fn__494 0x1ec22831 \"leiningen.core.project$eval493$fn__494@1ec22831\"]\n     \"--rerun-class-initialization-at-runtime=org.bouncycastle.crypto.prng.SP800SecureRandom\"\n     \"--rerun-class-initialization-at-runtime=org.bouncycastle.jcajce.provider.drbg.DRBG$Default\"\n     \"--rerun-class-initialization-at-runtime=org.bouncycastle.jcajce.provider.drbg.DRBG$NonceAndIV\"]},\n```\n\nAny ideas? Do I need #= or whatever? (That wouldn't be great because I probably need the project map :))\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1500",
    "text": "<@Rossie> `~(fn [] ....)` evaluates to a function\nnever mind, special unquote handling is some lein magic\n<https://github.com/technomancy/leiningen/blob/master/sample.project.clj#L438-L449>\nWell, allegedly :)\nwhat is the simplest job scheduler lib you guys can recommend?\ntried `tick` from juxt but the scheduling feature  is disabled right now\n<https://github.com/clojure/data.xml/blob/41366e182519a763700b7c58ec46379062c01b78/src/main/clojure/clojure/data/xml/jvm/emit.clj#L172-L192>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1501",
    "text": "anyone seen this error before?\n```\nNo implementation of method: :xml-str of protocol:\n   #'clojure.data.xml.protocols/AsXmlString found for class:\n   org.joda.time.DateTime\n```\nor better: does anyone has an implementation of that protocol lying around?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1502",
    "text": "does anyone know of an alternative to `jvisualvm` or `jmc` that works with `adoptopenjdk-12`?\nthat\u2019s not yourkit :slightly_smiling_face:\nyourkit has a lot more information than htop does. The VM will never allocate more memory than the maximum you configure at startup, you can use that config to make sure the vm doesn't misbehave, then use yourkit (or even visualvm) to figure out where the free ram under that limit went if it is running out\nusing keys that aren't keywords is fine - Strings, Numbers, even other hashmaps or sets. You can use the hashmap itself `({\"a\" 0} \"a\")` -&gt; `0`, you can use `get` which is the function that a keyword is actually calling when you use it as a function\nkeywords aren't a syntax for map lookup, they are just objects that know how to use get\nthe one thing you should never use as a hash-map key is anything with value equality that is mutable (eg. a java ArrayMap)\n<@Madelene> I dont' think I have your answer directly, but which set of features do you need?\ncpu profiling/instrumentation\nI know you asked about alternatives, but what is the reason `jvisualvm` doesn't fit the needs?\nit doesn\u2019t ship with adoptopenjdk \u2026 and old versions won\u2019t (for me at least) connect to an adoptopenjdk vm\nif it worked it would fit my needs :slightly_smiling_face:\n<@Madelene> there's HPROF if you don't need a UI or are comfortable with a fronted that loads its dump files\nyou tried <https://visualvm.github.io/>  ?\nyeah I downloaded it and tried it\nare you using the jvm arg for accepting a dt socket connection?\n<@Dann> yeah I\u2019d really like a UI\u2026 I can at a push use hprof, but it\u2019s not as easy as clicking a start/stop button around your repl interaction\nif you use clj + the hprof agent you can eliminate noise like nrepl from your measurements though\nit's not very convenient though, agreed\n<@Dann>: no\u2026 though you\u2019ve made me realise it didn\u2019t even get that far\u2026 I think it\u2019s trying to use java 12 to load itself\nthis stuff used to be easy\n<https://github.com/oracle/visualvm/pull/133>\nseems like you need to build master\nthat's annoying\n<https://github.com/oracle/visualvm/issues/130>\nthere seem to be other workarounds (i only scanned quickly)\nhmm thanks for that\u2026 I tried passing the `--jdkhome=/Library/Java/JavaVirtualMachines/jdk1.8.0_121.jdk/Contents/Home/` but it displays an error screen saying please use jdk 8, 9, 10 or 11 \u2014 which is kinda annoying as I gave it the jdk 8 home\nI also have `JAVA_HOME` set to jdk8\nok installing the official release from that site, and starting it with the command:\n\n` ./bin/visualvm -J-Dcom.sun.tools.visualvm.modules.startup.DisableStartupCheck=true`\n\nto disable startup checks at least starts up the UI.\n\nNo idea if it\u2019ll work if I connect to something yet.\nconnecting to jdk8 vms works at least if you do that\nok you can get heap profiles on jdk12 \u2014 but you can\u2019t access local samplers for CPU or memory :disappointed: \u2014 though you might be able to do it if you setup jmx :disappointed:\nthose can be enabled at runtime IIRC\nyeah I don\u2019t do the JMX stuff very often\nso always need to consult what you need to do\nI might be better building from master if that works\ni don't think you need to do that\nprobably only need to flip some options on the target VM\nit likely will be\u2026 just seeing whats involved in building it from source\nahhh `ant` well this is a fun trip down memory lane!\nshave that yak\nlooks like the next yak is building netbeans\u2026 I might have to leave these unshaved\noh joy netbeans requires mercurial ~not~ *and* git\nyou do not need to do any of this\njust need to connect already built jvisualvm to the target vm\nyeah i\u2019ve aborted and am trying that now\nI just have the fear because last time I did this I really struggled with RMI port stuff\u2026 but that was through a tunnel, so should be much more straightforward this time.\nugh cannot connect\n```\n\n  :jvm-args [\"-Dcom.sun.management.jmxremote\"\n             \"-Dcom.sun.management.jmxremote.port=9199\"\n             \"-Dcom.sun.management.jmxremote.local.only=true\"\n             \"-Dcom.sun.management.jmxremote.authenticate=false\"\n             \"-Dcom.sun.management.jmxremote.ssl=false\"]\n```\nstill failing to connect when trying `localhost:9199`\nugh giving up for the evening\n<@Madelene> Not sure if this will help your situation, but when I\u2019ve had network stuff get in the way of `jvisualvm`, I\u2019ve added this to my startup: `-Djava.rmi.server.hostname=localhost`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1503",
    "text": "thanks!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1504",
    "text": "I forget how though\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1505",
    "text": "<https://github.com/aphyr/tea-time>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1506",
    "text": "is it by design that `clojure.data.xml` preserves newlines like this?\n```\n(parse-str \"&lt;foo&gt;&lt;bar/&gt;\\n&lt;bar/&gt;\\n&lt;/foo&gt;\") ;;=&gt;\n{:tag :foo,\n :attrs {},\n :content\n ({:tag :bar, :attrs {}, :content ()}\n  \"\\n\"\n  {:tag :bar, :attrs {}, :content ()}\n  \"\\n\")}\n```\nit is by spec I believe\nthere is a flag to change this behavior though\niirc\nI guess so yes:\n&gt; From 0.1.0-beta3 to 0.2.0-alpha1\n&gt; Preserve whitespace by default\nis it relatively safe to use the newest clojure.data.xml? I really need the namespace stuff :slightly_smiling_face:\nI've used latest extensively without any issues\n0.2.0-alpha6\nthanks. the zipper stuff comes in really handy in something I had to do today :smile:\nlet me know if you run into a node which has the same name as its parent. There's a patch that I think shouldn't have gone in: <https://dev.clojure.org/jira/browse/DZIP-3>\n`:include-node? #{:element :characters}`, the question mark is a bit weird I guess. maybe it went from a boolean setting to a enumeration later?\nWhat's going on here? I'm trying to get `for` to work and I'm getting strange output for doing a simple `(for [n (range 1 101)] (println n))` and getting this output:\n```\n(1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30\n31\n32\nnil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 33\n34\n35\n36\n37\n38\n39\n40\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60\n61\n62\n63\n64\nnil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 65\n66\n67\n68\n69\n70\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90\n91\n92\n93\n94\n95\n96\nnil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil nil 97\n98\n99\n100\nnil nil nil nil nil)\n```\nNo idea why that didn't collapse\n`println` returns nil. you have a collection of 100 nils. Your repl is also printing the side effect interleaved\nyou may be looking for `(doseq [n (range 10)] (println n))`\n`for` is intended to return a value that is a sequence.  It isn't really intended to perform side effects like printing in its body.\nSo then `doseq` is intended for side effects?\n`doseq` is intended to iterate through a sequence and do arbitrary side effects on each one.\nok\nSo in other words, `for` is lazy?\nit produces a lazy result, yes.\nmy first thought would be using `cond` instead of multiple `if`s\n`cond` doesn't evaluate after something is true\nNeither does a daisy-chained (or nested) sequence of `if` expressions.\n\"Takes a set of test/expr pairs. It evaluates each test one at a\ntime.  If a test returns logical true, cond evaluates and returns\nthe value of the corresponding expr and doesn't evaluate any of the\nother tests or exprs. (cond) returns nil.\"\n<@Latonya> No idea what you're talking about because the above code works as expected\n<@Nella> That's fair. I forgot about that shortcut, but I was referring to the sprawling structure\nBut technically what I have is shorter\n`fizzbuzz2` below has the same behavior as `fizzbuzz` above does\n```(defn fizzbuzz2 []\n  (doseq [n (range 1 101)]\n    (cond (and (= 0 (mod n 3)) (= 0 (mod n 5))) (println \"FizzBuzz\")\n          (= 0 (mod n 3)) (println \"Fizz\")\n          (= 0 (mod n 5)) (println \"Buzz\")\n          :else (println n))))\n```\nOk. Then I guess there was a typo somewhere when I tried that\nThat's better then, thanks\nI think that the natural typo to make when using cond at first is to wrap the condition and result in a pair of parens\nthat would cause some weird things to happen\nProbably what happened\nI also haven't written Clojure in a minute too\nPart of why I wanted to do FizzBuzz\nYet I'm still baffled as to how so many people fail to do it\nI\u2019m not currently in front of a Clojure machine, but I believe that if you cheat and use `cl-format` you can DRY it up quite a bit:\n\n```\n(defn fizzbuzz [n]\n  (doseq [i (range 1 (inc n))]\n    (cl-format true \"~&amp;\")\n    (when (zero? (mod i 3))\n      (print \"Fizz\"))\n    (when (zero? (mod i 5))\n      (print \"Buzz\"))))\n```\nInteresting, but the `cond` is more readable\nNot repeating anything anyway\nAnd that's wrong\nhaha\nUnless I'm misunderstanding `cl-format`\n<http://www.lispworks.com/documentation/HyperSpec/Body/22_cac.htm>\nAlso not sure why you made it variable length. FizzBuzz is explicitly [1 100]\nIf I had to guess the biggest mistake is doing [1 100)\nFrom quick testing, this is close (but not identical) to the original `fizzbuzz`:\n```(defn fizzbuzz3 []\n  (doseq [i (range 1 101)]\n    (clojure.pprint/cl-format\n     true \"~&amp;~%\"\n     (when (zero? (mod i 3))\n       (print \"Fizz\"))\n     (when (zero? (mod i 5))\n       (print \"Buzz\")))))\n```\nI wish I had a real Clojure REPL in front of me (displaced Common Lisper here), but the identical logic in CL works fine\nThe difference is that it does not print numbers when neither Fizz nor Buzz are printed.\nThen that's not FizzBuzz\n```\n;; This is CL; see above for the Clojure version\n(loop for i from 1 to 100 doing\n  (progn\n    (format t \"~&amp;\")\n    (when (zerop (mod i 3))\n      (format t \"Fizz\"))\n    (when (zerop (mod i 5))\n      (format t \"Buzz\"))))\n\nFizz\nBuzz\nFizz\nFizz\nBuzz\nFizz\nFizzBuzz\n\u2026\n```\nI wonder why Clojure needed the extra `~%`, but now we\u2019re getting distracted\nIt's 101!\nLiterally just talked about that\nTim's version is Common Lisp, not Clojure.\nCL is inclusive for range endings?\nBut either way still wrong. It's not printing the other numbers\nLine 6 (`(println n)`) in the original solution above was cut off for me and I didn\u2019t realize I had to expand it. Anyway, it seems like the answer to the original question is \u201c`cond` and `zero?` can clean things up a bit, and avoiding repetition of the `mod` logic is probably more trouble than it\u2019s worth\u201d\nI don't think anyone is claiming it has the same behavior as your original version.  I think Tim presented it as food for thought, as a potentially interesting way to reduce the number of explicit conditions written in the code.\n(I don\u2019t have a FizzBuzz spec in front of me)\nYes.\n<@Latonya> And that is meaningless when the spec must include that functionality, but anyway\nAnd `zero?` might be \"easier to read\" for some people, but it's actually not shorter\nI actually prefer the `cond` version because it is more readable, despite being a bit longer\nOh, sorry, I see what you did with it. Not unreasonable\nIf you want a fun challenge, think about how to do fizzbuzz with no booleans (or pattern matching). I've given the challenge to a few different people and its always interesting to see what people come up with. You can assume you have a `range` function and can iterate over each element of it.\nThat's interesting for sure\nAnd there is an actual solution to that?\nThere are multiple.\nI'm guessing it's something pretty subtle\ndoes no boolean mean no way to check equality?\n^\nThat's where I'm stuck\nThis does not attempt to solve it in the way jimmy described -- just another variation similar to Tim's that does behave the same as the original:\n```(defn fizzbuzz4 []\n  (doseq [n (range 1 101)]\n    (let [msg (str (if (= 0 (mod n 3)) \"Fizz\" \"\")\n                   (if (= 0 (mod n 5)) \"Buzz\" \"\"))]\n      (println (if (= msg \"\") n msg)))))\n```\nCute\nyou can remove the empty strings from the if clauses defining msg ```(ins)user=&gt; (str nil \"OK\")\n\"OK\"\n(ins)user=&gt; (str nil nil)\n\"\"\n(ins)user=&gt; (str \"OK\" nil)\n\"OK\"\n```\nI know.  I'm just not (yet) comfortable relying on such things :slightly_smiling_face:\nand that doseq is so close to a dotimes...\nHere's some DRY cleanup\nyou can replace `(if (= msg \"\") n msg)` with `(or (not-empty msg) n)` ```(ins)user=&gt; (not-empty \"\")\nnil\n(ins)user=&gt; (not-empty \"foo\")\n\"foo\"\n```\nThat's another one that is technically shorter, but different readability\nas far as I'm concerned both not-empty and zero? are clearer - they are weak constructs so their meaning is more direct\nI like using `=` because it's consistent with forms that don't have those shortcuts\nI prefer specialization when it exists in the standard library, it reduces ambiguity\neg always use val instead of second/last for map entries\nFor example, there are short forms for &lt; and &gt;, but not &lt;= or &gt;=. You have to use an additional form to negate\noh you mean pos? and neg?\nyes\nIs this cheating :stuck_out_tongue:?\nSo for &gt;= 0 you have to do `(not (neg? n))`\nWhen you could have just did `(&gt;= n 0)`\nI prefer consistency with outliers\nAlso the former is two operations while the latter is only one\ndata first!\nWell it's not FizzBuzz\nHmm how do you mean, because it doesn\u2019t print? It produces the exact sequence here: <https://en.wikipedia.org/wiki/Fizz_buzz>\n\"Write a program that prints the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\".\"\nRight, but thats trivial: `(run! println (take 100 fizz-buzz))` :wink:\nIts a bit sad that the next question obviously would be: \u201ccool, and now for 5 and 7\u201d\nThat would seem unnecessary. If you can't do regular FizzBuzz you aren't going to do that and if you can you can do both\nWhat's sad is how many people can't do it\nI think Lennart's comment is that his approach can generalize for arbitrary number instead of 3 and 5, but the size of the table required gets bigger with larger number (or at least with larger values of their least common multiple)\n<https://blog.codinghorror.com/why-cant-programmers-program/>\nCool, but it's not what was asked so it would fail the test\nThe purpose of having an applicant do FizzBuzz is to establish that they can do basic programming, but more importantly, read a spec\nIf he were to give such a solution in an interview he would fail it\n<https://haacked.com/archive/2007/02/27/Why_Cant_Programmers._Read.aspx/>\nI don\u2019t understand why, because it doesn\u2019t print, is that what you are falling over?\nWhat is the spec?\nwhat are you implying here. The program I wrote correctly produces an infinite sequence of numbers with all multiples of 3 replaced by \u201cFizz\u201d and multiples of 5 by \u201cBuzz\u201d. The only thing it doesn\u2019t do, and was in the spec, is to limit to 100 and to print. That is however trivial to add:\n\n```\n(defn print-fizz-buzz\n  []\n  (run! println (take 100 fizz-buzz)))\n```\nIt uses the fact that FizzBuzz (or at least the replacements) repeat themselves after the least-common-multiple of 3 and 5, which happens to be 15.\nThats why it becomes \u201charder\u201d to write this replacement table for 5 and 7, because their least common multiple is 35\nWow...so the spec is \"Write a program that prints the numbers from 1 to 100. But for multiples of three print \"Fizz\" instead of the number and for the multiples of five print \"Buzz\". For numbers which are multiples of both three and five print \"FizzBuzz\".\"\n\nYour code does not do this so you failed to understand the spec, thus failing the test. I don't know where the disconnect is...\nAs stated, the point is not can you do some trivial code; it's can you adhere to a simple spec.\nDuring an interview, some interviewers are looking more for how well the applicant thinks, explains, understands, and communicates, and would not fail someone automatically if you pointed out to them that their function returns a sequence, but doesn't print it out.  Especially if the applicant then says \"Oh, yeah, to print it out, here are the changes required\".\nThat's a poor interviewer then\nThe whole point of the test is to check your reading comprehension\nYour opinion differs from mine on that point.\nMy opinion is irrelevant. The purpose of the test is well established\nIf you pass over applicants that miss minor point, but solve the meat of the problem, and quickly understand and fix the problem when it is pointed out, I think the interviewer is potentially missing out on a great candidate.\nYeah, and on mine. I think its more important that an applicant has the ability to abstract and adapt than to follow the test to the letter.\nThe question was clear. The question did not ask for an abstraction, thus you failed the test\nThis is pretty amazing I have to say...\nGreat, then you are not hiring us :slightly_smiling_face:\nthe efficacy of fizzbuzz et. al. is murky anyway, but getting the correct answer is never the point of these questions but how they approach problem solving.\n\nIf you read the problem wrong the first time, I am not going to fault you for it. If you respond to feedback and correct it, you still pass.\nIf you didn't follow the spec, which is your job as a developer, hell no\nI've stated multiple times what the purpose of the question is, which is well established. It's supposed to be dead simple so you can easily follow it. If you can't follow a deliberately blatantly simple spec the chances you are going to follow a complex spec is very slim to none.\nWe understand your view\nConsidering that a large portion of \"bugs\" come from not adhering to the established spec, this is critical\nWhich is why it is testing that\nOther questions are indeed looking for how the applicant reasons and not caring about the actual answer, but this isn't one of them\nHiring managers that pass people that fail such tests are a huge part of the problem\nLets agree to have different opinions here, some of us like to test the reasoning capability of applicants (and this is what we do at my company) and others like to test the way they read specifications.\nYou're again missing it. Our opinions are irrelevant. The FIzzBuzz question tests a specific thing, which has been stated repeatedly. What you think it is testing or what you think it should be testing is irrelevant.\nWould you agree that companies should be able to set their own hiring policies?\n...\nHiring managers that ask folks to program in an interview is a huge part of the problem :slightly_smiling_face:\nsigh\nOn-the-spot tests in interviews _just don't work_. They don't reflect real-world programming experience at all.\nThat is an over-generalization\nThere are certainly bad questions, FizzBuzz is not one of them\nFizzBuzz reflects real-world very well. CAN YOU READ A SPEC?\nI've been a hiring manager for two decades. I've never asked these sorts of \"performing monkey\" questions in interviews, and I've never had to fire anyone I've hired for an inability to program.\nthere are many hills to die on, the exact purpose of fizzbuzz is not one of them\nWell that there is an Appeal to Authority fallacy so ok?\nI think FizzBuzz is a stupid interview question/technique. It's as simple as that.\nGood for you?\nAnd, to be honest, this whole discussion belongs in <#C0KL616MN|jobs-discuss> if it belongs anywhere at all in this Slack.\nI don't recall the original conversation being about whether or not it is a good idea, but what it is\nIt could have been moved there, but the original conversation was about Clojure so it was on-topic.\nThis is also a thread so if people don't want to read it they don't have to. You nitpicking about where this should be is unnecessary\nSean is a moderator on Clojurians Slack, and often helpfully points out to people where discussions most appropriately belong (or in some cases, do not)\nYes, I would like to add that your tone can be seen as hostile, or it it least felt hostile to me. Please realise that you are on a public forum full of humans who can get their feelings hurt, and are here to wind down and relax. This is obviously not a real job interview ^^.\nThere is no tone in text conversations, which is the issue here. I did not mean any negative \"tone\" and suggest that perhaps your defensiveness made you interpret what I said as such.\n\nGiven the initial conversation was about adhering to the spec of FizzBuzz, stating that your proposed solution fails the spec is perfectly valid and wasn't implied as a defect with you, but just an objective statement. I'm sorry that you interpreted it that way.\nYeah same, I agree that 3-arity get is a cheat because it will use a conditional internally.\nIt\u2019s a fun problem to think about abstractly, like how would you write it for using Fizz for 3, Barr for 5 and Buzz for 7. And then how would you write it when this mapping was arbitrarily given as an input.\nMakes you realize what mathematical properties such a simple program really has.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1507",
    "text": "Why does `for` behave this way?\nSo my reason for asking is I never actually did FizzBuzz in Clojure and wanted to see how that looked. This works as expected, but it looks pretty bad. Is there a more concise way to do it?\nI'm not sure what you mean by that\nalso, it's nicer to use `zero?` rather than `(= 0 ...)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1508",
    "text": "I use them even when they are longer\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1509",
    "text": "<@Clarine> I have 2 convenience parsers for XML here using clojure.data.xml and tagsoup\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1510",
    "text": "I usually count the third param to get as kind of cheating. I usually let it slide. But ask people to rewrite without using it or `or`.\nDisclaimer: I don't do this in interviews. Just for fun.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1511",
    "text": "how do y'all go about performing major refactors?\nany recommendations as I embark on my own?\n(major being about 5500 lines of source total, lol)\nI'd want to start out with pretty good test coverage, to be honest, for a refactor of that scale.\nAlso, \"refactoring\" for me tends to be small, incremental changes that I can verify in the REPL, via spec, or a small set of tests/test expressions. Tackling 5,500 lines sounds more like a \"rewrite\"...\nI'm mostly attempting to spread what is currently one giant namespace across 11 files into a bunch of namespaces, as dealing with the interconnectedness is reaching high complexity\nmy goal is to actually change as little as possible, more some much needed organization\nDepending on what the code currently does, maybe you can come up with some scenarios where you could generatively test the old code and the new code produce identical results for random, conforming input data?\nNot a bad idea in general! this is a game-engine, so generating correct random data is a little harder. Thankfully, I have a fairly extensive integration test suite so I can rely on that for now\nthanks for the ideas!\nAs a sanity check on namespace size, we have just under 300 `src` namespaces in our codebase at work. Less than a dozen have more than 1,000 lines. Only one exceeds 2,000 lines (it has 2,017 lines). The total is 65k lines.\nholy crap\nI'm glad to know \"many namespaces\" works even when larger\nWe also have just over 300 `test` namespaces, totaling just under 20k and only two namespaces exceed 1,000 lines (one is just over 1,000, one is just under 2,000).\nCode organization is an ongoing issue. We're pretty much constantly looking at small refactorings to improve navigability and cognitive load.\nthat's my biggest issue: navigability and cognitive load\nWe started with a pretty flat structure and some fairly large namespaces. Then we moved to a more nested structure and smaller, more numerous namespaces.\ninteresting, thank you\n```Clojure build/config 50 files 1000 total loc\nClojure source 276 files 64691 total loc,\n    3065 fns, 625 of which are private,\n    411 vars, 29 macros, 56 atoms,\n    504 specs, 19 function specs.\nClojure tests 307 files 19396 total loc,\n    4 specs, 1 function specs.\n``` We have a simple shell script that counts lines and certain forms.\nWe have lots of little EDN files for configuration -- and each subproject in our monorepo has its own `deps.edn` file.\nThat's super cool\nhaha hey thanks! I'm pretty sure you're the only other person to have ever looked at it!\nI like flat and big namespaces personally.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1512",
    "text": "I'm looking at your code to parse Netrunner data. I do similar, less elegant things, with Star Wars Destiny, Magic, and Warhammer Champions data.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1513",
    "text": "Hi :wave: how's <#C1ZU4NUA2|bangalore-clj> doing??\n<@Trevor> going gud\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1514",
    "text": "I was wondering if anyone else would chip in. I've heard pros and cons of both.\nWe're reorganizing our code because some namespaces have become sort of \"kitchen sinks\" of stuff that's only vaguely related to the original purpose (and should have been put elsewhere in the first place).\nWe've also evolved our thinking a lot on just naming stuff in the seven years we've been working on this codebase.\n(it still seems amazing to me that we have had Clojure in production for seven years now!)\nWe joke at work that \u2018everything is in `utils`\u2019\nYeah, it's _really_ hard to avoid having some sort of \"util\" namespace I think :slightly_smiling_face:\nThe con of a big flat namespace is that reloading takes ages\nand that the likelyhood of having to reload that huge NS is steeply increased\nyeah I tried that this time too and it still didn\u2019t seem to work\nI strongly believe applications are better organised first by vertical/features then inside them horizontally.\n\nThere are many reasons the main being:\n\n1. People tend to work on a feature at a time.\n2. Parallelising work is easier to do by feature, so structuring your code by feature means less merge conflicts.\n3. Code is much easier to navigate, and it\u2019s way easier to find things and on-ramp people.  You can get a good idea on what an application does by looking at it\u2019s top level namespaces.\n4. When creating new code it\u2019s much more obvious where to put it; which leads to greater consistency.\n\nCross cutting concerns can be colocated under an `app.concerns`, or even another root namespace, i.e. an `app-lib` ns; and eventually moved into separate libraries if it makes sense.\n\nThe biggest barrier to doing this, is that most clojure app templates organise horizontally by the framework first, e.g. they create you an `app.handler`, `app.model` namespace first.\n\nI also agree that you shouldn\u2019t prematurely split; beyond giving each feature its own ns.\nso a trivial `app.feature` ns may contain the view and model code (still separated but together)\u2026 at some point you may break it out into `app.feature.view` and `app.feature.model`.  A good reason to do this is when you start wanting to test the models and views independently; so it will give you parallel test ns\u2019s.\nLibraries on the other hand make often make more sense to organise horizontally\u2026 though usually each library is a horizontal anyway.\n<@Madelene> have you seen the behaviour programming paradigm?\n<https://lmatteis.github.io/react-behavioral/>\nI don\u2019t think so\nThe demo can explain it better, but it's essentially about implementing each feature independently\nlooks like it\u2019s based on CSP \u2014 or something similar\nbut that\u2019s just based on a 20 second glance\nRx did introduce me to marble diagrams though \u2014 which are pretty great for this kinda thing.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1515",
    "text": "util is another name for \u201cjunk drawer\u201d\npremature splitting of namespaces is a sin imo. I prefer to grow an ns until natural splits reveal themselves.\nbut I think that was the solution in the past\nlots of util namespaces often contain a significant number of fns which never see reuse across a codebase in my experience. And when they do it is often limited to a couple instances.\nnot saying that\u2019s a rule, but I\u2019ve actually dumped disparate namespaces back into one big namespace to tease out the right splits after the fact.\nPremature splitting forces new names into existence which often aren\u2019t the names that capture what\u2019s actually going on in the domain.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1516",
    "text": "It is possible to use functions in lein project.clj file. But it doesn't work here:\n:essthree {:deploy {:type          :uberjar\n                     :bucket        \"uberjars.foo\"\n                     :path          \"bar\"\n                     :artifact-name ~#(str (:version %)) }}\n~#(str (:version %))  function gets converted to a string\nI'd go a little deeper, that seems important but isn't. I think the async nature is important though.\n\nThe important thing are the events and then collecting all the behaviours and make some decision based on interpreting them in a whole.\n:thumbsup: yeah I see that\u2026 seems to me that the logical conclusion to this stuff is event streaming and a query language on events\u2026 which is where a bunch of independent efforts have ended up\u2026 e.g. FRP.\n\nYears back I experimented with using Rx to create a reactive model of XMPP\u2026 It\u2019s definitely an approach that has its appeal, but the general problem with FRP is time leaks\u2026 and I\u2019m not sure if anyone has solved that one.  Though FRP doesn\u2019t necessarily mean what it used to.\nIt's kind of like event streaming, but I assumed you asked all your producers if they had a message before moving on.\nisn\u2019t that still a potential form of time leak?  How long must the producer hold the message for?\nFor JavaScript, I'm not sure you get a choice. It may operate on a closed world assumption, and it will queue up productions while it waits.\nI think clojure could work fine with that via interop\ncould definitely try that. picocli's features seem quite cool though. <@Sixta> whats the best way of doing a Java interop with java annotations?\nI think it's reify\nBut I'm trying to go off the top of my head\nright. Im not familiar with this kind of interop. Will try looking into it.\n<@Alyce> Im not sure if it supports subparsers\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1517",
    "text": "Any suggestions for a Clojure library doing CLI args parsing with the ability to add arbitrary sub parsers like Python's argparse? I tried `tools.cli` which seems too low level and have to write a lot of manual parsing and boilerplate myself. Also tried <https://github.com/l3nz/cli-matic> which is based on tools.cli and is quite nice and declarative but it doesn't allow nested parsers yet.\n<@Katherina> I saw this yesterday. I don\u2019t know if it supports what you want, but it looks cool. maybe it works from clojure? <https://picocli.info/>\nit seems to be annotation-heavy and no idea how that interacts from clojure\nI see there\u2019s a Clojure issue here: <https://github.com/remkop/picocli/issues/231>\nso probably not suitable right now\n<@Clarine> Those were precisely my thoughts too. The best contender for a Clojure wrapper I see is <https://argparse4j.github.io/> but was hoping if there is a more data driven solution out there\nwrite one based on that? seems pretty useful\nHow about commons CLI?\n<https://commons.apache.org/proper/commons-cli/>\nkk\nHm what\u2019s wrong with `tools.cli`? <https://github.com/clojure/tools.cli#in-order-processing-for-subcommands>\n&gt; Note that the options to log are not parsed, but remain in the unprocessed arguments vector. These options could be handled by another call to parse-opts from within the function that handles the log subcommand.\nDefine options, parse, check if there\u2019s an arg, parse its options against another sub-command definition\n<@Antonia> I felt its too low level and involves me writing a lot of boiler plate for validation and dispatch. <https://github.com/l3nz/cli-matic> built on top of it has a more declarative API and spec validation, but hides the subcommand aspect\nthe problem came from writing\n```\n(defn validate-args\n  \"Validate command line arguments. Either return a map indicating the program\n  should exit (with a error message, and optional ok status), or a map\n  indicating the action the program should take and the options provided.\"\n  [args]\n  (let [{:keys [options arguments errors summary]} (parse-opts args cli-options)]\n    (cond\n      (:help options) ; help =&gt; exit OK with usage summary\n      {:exit-message (usage summary) :ok? true}\n      errors ; errors =&gt; exit with description of errors\n      {:exit-message (error-msg errors)}\n      ;; custom validation on arguments\n      (and (= 1 (count arguments))\n           (#{\"start\" \"stop\" \"status\"} (first arguments)))\n      {:action (first arguments) :options options}\n      :else ; failed custom validation =&gt; exit with usage summary\n      {:exit-message (usage summary)})))\n```\nfor every subcommand using `tools.cli`\nplus a dispatcher like this:\n```\n(defn -main [&amp; args]\n  (let [{:keys [action options exit-message ok?]} (validate-args args)]\n    (if exit-message\n      (exit (if ok? 0 1) exit-message)\n      (case action\n        \"start\"  (server/start! options)\n        \"stop\"   (server/stop! options)\n        \"status\" (server/status! options)))))\n```\nLet the root command validate common args and sub-commands validate their own args so the life is simpler.\nIsolation is always good\ni totally agree. what im having trouble with is writing all the `(cond ...)` and the `ifs` by hand. And that makes it more error prone. `cli-matic` for example gives me the ability to define the whole thing in a map:\n```\n(def CONFIGURATION\n  {:app         {:command     \"toycalc\"\n                 :description \"A command-line toy calculator\"\n                 :version     \"0.0.1\"}\n\n   :global-opts [{:option  \"base\"\n                  :as      \"The number base for output\"\n                  :type    :int\n                  :default 10}]\n\n   :commands    [{:command     \"add\"\n                  :description \"Adds two numbers together\"\n                  :opts        [{:option \"a\" :as \"Addendum 1\" :type :int}\n                                {:option \"b\" :as \"Addendum 2\" :type :int :default 0}]              \n                  :runs        add_numbers}\n\n                 {:command     \"sub\"\n                  :description \"Subtracts parameter B from A\"\n                  :opts        [{:option \"a\" :as \"Parameter A\" :type :int :default 0}\n                                {:option \"b\" :as \"Parameter B\" :type :int :default 0}]\n                  :runs        subtract_numbers}\n                 ]})\n```\nalso gives me the function dispatch too\nI\u2019m guessing the consensus might be that this is overkill and/or maybe too low level \u2026 but I think from now on, whenever I need to parse anything (including command line stuff), I\u2019m going with instaparse. It\u2019s so awesome and you have so much control. instaparse + a cond statement ftw :wink:\nThats the all conquering solution i guess :stuck_out_tongue:\nif ya need to parse, might as well do it right! lol\n<@Clarine> Seems like it has a programmatic API too: <https://picocli.info/picocli-3.0-programmatic-api.html>\ncould be useful\nlet me know if you get it working, I\u2019m curious :slightly_smiling_face:\n<https://memegenerator.net/img/instances/x300/84483335/what-does-quote-say-to-repl-not-now.jpg>\nSure, trying to get to work on this Graal based CLI im putting together\nexciting! :slightly_smiling_face:\n`(meta ^:m 'm)` returns nil\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1518",
    "text": "Does anyone know how to find from which remote repo (ex. enonic, maven, clojars) that a project dependency wall pulled from using leiningen?\naah\nthat seems a lot better\nwhat are you making?\n<https://github.com/bob-cd/wendy>\nits a CLI to a CI tool I've been building for a while now. Was in Python, now \"Graaled\" my way back :stuck_out_tongue:\nIm trying to implement <https://github.com/bob-cd/wendy/blob/master/docs/commands.md>\naah\nwhats in the repo works for a single command, but was having a nightmare to extend it\nRegarding quotes\nso replacing the `'` with `(quote ` is the only way out or is there something else?\n`with-meta` works\nI\u2019m often confused by the ^ meta reader, it seems to have some surprising behavior in certain cases (like this) so the only time I use it now is in a `def` to attach meta to a var\notherwise, I use `with-meta` explicitly\n`^:m 'm` is attaching meta to the compile time expression `(quote m)`\nwhat you want to do is `'^:m m`\nthe behavior of `^` here is perfectly consistent\nanother way to understand what is going on here is to use `1` instead of `m`\n```user=&gt; ^:foo '1\n1\nuser=&gt; '^:foo 1\nSyntax error reading source at (REPL:3:0).\nMetadata can only be applied to IMetas```\nthere's no difference at all between `'` and `(quote`\nit might be entirely consistent :sweat_smile: I just find it doesn\u2019t match what I want to do most of the time, so my tiny brain figured out `with-meta` is usually what I want\n`with-meta` operates at runtime, `^` at read-time\ngotcha\n(in fact, `^` _is just_ `with-meta` at read-time)\nI\u2019m actually not sure why `'^:m` works\nit expands to `(quote ^:m m)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1519",
    "text": "anyone have the <@Rosaline> ticket about iterating over a paginated collection?\ncan't remember enough to find it\nah found it. <https://dev.clojure.org/jira/browse/CLJ-1906>.\nI wonder if that\u2019s a use case for `nav` / `datafy` in actual application code\nis it just me or does 400-500ms for 800 `insert-multi!` rows in jdbc seem\u2026 like a lot\nare you sure that is time is being burnt in jdbc and not in your db?\ni\u2019m not sure, i just have an adhoc profiling call around the insert\nany ideas on how i can dig further?\nIf I recall correctly \u2014 but I am by no mean an expert \u2014 insertion performance depends on how many indices there are on your rows\ni have a primary key on 3 of 4 columns in the table\nmaybe there\u2019s a way to get an explain out of jdbc?\nYou could try inserting the same rows using the mysql client/psql, see how long that takes. I wouldn\u2019t expect something like jdbc to add any large amount of overhead. But this is just a hunch, you should ask Sean Corfield when he\u2019s around!\n<@Onita> How exactly are you inserting multiple rows?\n`insert-multi!`\nso it\u2019s provided with a vector of column names, and then 800 tuples for row values\nif that\u2019s what you mean\nIf you provide multiple maps, it does multiple inserts (per the docs). If you provide a vector of column names and a vector of rows (a vector of vectors of row values), it tries to do a single insert -- but the actual behavior is, like so many JDBC-related things, database-specific. For example, PostgreSQL requires that you provide a special option.\nwhat does the option indicate?\nThe auto-gen'd docs haven't been updated for a while (infrastructure issues, I believe), but I've recently added this paragraph to the docstring for `insert-multi!` ```  Note: some database drivers need to be told to rewrite the SQL for this to\n  be performed as a single, batched operation. In particular, PostgreSQL\n  requires :reWriteBatchedInserts true and My SQL requires\n  :rewriteBatchedStatement true (both non-standard JDBC options, of course!).\n  These options should be passed into the driver when the connection is\n  created (however that is done in your program).\n```\nSo if you're on PostgreSQL or MySQL, you'll need to provide the appropriate option in your db-spec when you create your DB connection.\n(and, of course, they're different options -- thank you JDBC :disappointed: )\nBTW, there's <#C1Q164V29|sql> for SQL-specific / JDBC-specific questions -- which I'm much more likely to see as I don't have that channel muted (but I do have this one muted).\n(JDBC is one of the biggest piles of frustrating, non-standard, quirkiness I've ever had to work with!)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1520",
    "text": "interesting idea\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1521",
    "text": "Hoping someone here might have some experience: I'm trying to set a log level inside a `log4j.properties` file just for a specific clojure namespace. Is there an easy way to do this that doesn't involve using Java interop to set the logging level inside the clojure code itself?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1522",
    "text": "Look in `~/.m2/repository/&lt;group&gt;/&lt;name&gt;/&lt;version&gt;/_remote.repositories` - that should list the repo the artifact came from:\n\n```\n~&gt; cat ~/.m2/repository/ring/ring/1.7.1/_remote.repositories\n#NOTE: This is an Aether internal implementation file, its format can be changed without prior notice.\n#Mon Apr 22 09:08:21 EDT 2019\nring-1.7.1.jar&gt;clojars=\nring-1.7.1.pom&gt;clojars=\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1523",
    "text": "So you said. What _exactly_ does your call look like?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1524",
    "text": "Given Clojure/JVM, cljs, graal, ... what is the 'lowest startup delay' method of running clojure on aws lambda ?\n<@Felix> clojure on jvm8 is as fast as go, the jar is even smaller than go binary. But don't try to use 128mb of mem, too small. The rest is too abstract, you need to run your benchmarks depending on the case. VPC is still slow so probably if you really need lambda, you are limited to public databases like Aurora Serverless (MySQL atm, Postgres in preview), Dynamodb, Kinesis and so \u2014 the ones that give access through iam role and not force you to keep everything in a VPC. They said they should fix it some time in 2019. And this is applicable to all runtimes. From my observation, clojure does not really add any big overhead.\n&gt; clojure on jvm8 is as fast as go\n\n<@Felix> As fast for startup time? I very much doubt that, especially if you need to load more than just `clojure.core`!\nDependencies is the thing to keep an eye on, right.\nLike I said, it does not add big overhead, but still does some. If a lambda somewhere behind Kinesis Stream, Dynamodb Stream, SQS, SNS, it's fine to have it starting a bit longer than go or node.js.\nI would not use lambda as an http handler tho, forgot to mention that, sorry.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1525",
    "text": "<@Felix> I don\u2019t know about AWS Lambda but on my machine native with Graal is definitely the fastest. it can also be a bit limiting in terms of what it supports, e.g. no eval\n<https://clojure.atlassian.net/projects/CLJ/issues/CLJ-1906>\n@art <@Arlen> <@Clarine>: this is my fault for not specifying it earlier -- but yes, I want to use Clojure on Lambda as HTTP REST API / handler. This is why I care about the code start time.\nWhat is the best way to minimize the clj/lambda startup delay?\nyou're having in mind aws lambda ?\n<@Felix> as I said, on my own machine Graal is definitely the fastest startup, but I don\u2019t know how AWS Lambda works\n<@Clarine>: I know nothing about Graal+CLJ. Is this something that can be deployed to Lambda? (I\"ve deployed Go, Rust, and Clj-JVM functions.)\nGraal can compile to a binary for linux, MacOS or Windows. I assume AWS can run linux binaries\naws lambda's  jvm startup is a major pain , there is no real way around it (i have invested tens of hours onto optimizations there) ...\nif you want stuff that starts fast,  pick either python or nodejs there. (or maybe graalvm and native-image ... maybe maybe)\nmaybe clojurescript on top of nodejs ?\nlumo might also work?\nor yes cljs + node\ngot it, so if I want clj-like on lambda, I should look into:\n\nclj/graalvm, cljs/nodejs, planck, lumo\n\n?\ny\neven plain java stuff on the java vm is slow as hell for the first request\nI can't tell if 'y' is for 'yes' or 'why' :slightly_smiling_face:\nby the looks of it amazon is actually booting up a fresh jvm there and the performance of those has never been great off the line ... even my java lambdas are having trouble and they are much smaller than clojure itself.\nso the overhead of planck, lumo, and cljs/nodejs should all be ~ the same right? boot a js vm + load cljs primitives ?\n<@Felix> if you\u2019re really going for speed I would use a compiled CLJS -&gt; nodejs project, no self-hosted stuff\nor graalvm\nI'm really not a fan of Node. Googling \"clojure graalvm\" is bringing up lots of youtube talks. Do you have a link for setting up a nice clojure/graalvm workflow?\nI would look into <https://github.com/taylorwood/lein-native-image> or <https://github.com/borkdude/clj.native-image>\nor just use `lein uberjar`. there\u2019s an example here: <https://github.com/borkdude/cljtree-graalvm>\n<@Felix> for questions about Graal, there\u2019s also the <#CAJN79WNT|graalvm> channel\n<@Felix> yep :slightly_smiling_face:\nthat\u2019s how I\u2019ve been developing <https://github.com/borkdude/clj-kondo>\nthis makes sense; thanks\nthere are some things that GraalVM cannot handle, e.g. eval. there\u2019s also an issue with `locking`. so YMMV.\n<@Felix> <https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1526",
    "text": "Hi,  I'm trying to change the default print output for functions to into ```(doc f)```\n\nWhile the following works fine in the default clj repl ```(remove-method print-method clojure.lang.Fn)\n  \n(defn- pretty-demunge\n   [fn-object]   \n     (let [dem-fn (clojure.repl/demunge (str fn-object))\n            pretty (second (re-find #\"(.*?\\/.*?)[\\-\\-|@].*\" dem-fn))]\n      (if pretty pretty dem-fn)))\n      \n(defmethod print-method clojure.lang.Fn [f w]  \n    (.write w (:doc (meta (find-var (symbol (pretty-demunge f)))))))```\n It doesn't work in lein repl (I keep getting the default #function output, any idea why this is the case? (my guess is that I need to implement an nrepl middleware but id like to find an easier way of doing this)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1527",
    "text": "dumb question: so during development, I'm still developing vs JVM Cloljure REPL, but when everything is done, I say \"hey lein, take these java class files, and convert them over to graalvm\" ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1528",
    "text": "i am curious if there is a simple way to recursively descend into a nested hash  and make a copy that has certain keys removed   .. i have tried clojure.walk and friends but that is good for transforming keys and not removing them\n`update-in` with `dissoc`?\noh .. let me try that one ( was not sure if that would descend the hash )\nproblem with update-in is that is expects the path  to dissoc from but I am decending tree and don't know the path exactly .. i guess I could collect those paths ?  but might be better way ?\nmaybe assoc them by nils can help? or why you need \"copy\" without some keys? you have a side function, which logic depends on this keys?\nclojure.walk/postwalk-replace can be used for this\ni tried post-walk .. but i could not figure out how to &gt;&gt; remove &lt;&lt;  just transform the value\nso i can transform it but not remove it with the walkies function\ni have a tree with key values and want to walk and remove certain keys\nso yes, i have a function to determine which to remove\n```user=&gt; (clojure.walk/postwalk #(if (map? %) (dissoc % :a :b) %) {:a 1 :e {:c 2 :b {:f 3}}})\n{:e {:c 2}}```\nsomething like that to remove all :a and :b at all levels\noh .. wow .. trying that now\nbasically it will (bottom first) visit every node of the tree and replace the node it's on with the value returned from the fn\nthe if is important to only apply the dissoc on map nodes, and not on individual leaves, etc\nok .. got it .. it works really well .. and i love it of course, but gimme a few moments to let it soak in and then i will change the if to dissoc the keywords that i need\nAlso see <https://github.com/FieryCod/holy-lambda>\ngenerally, this is a perfect use case for specter. And it is totally general and will always maintain data types. In my experience/use it is simpler and far better for this sort of thing than  core stuff +  clojure.walk/*\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1529",
    "text": "Hi everyone. I\u2019ve got this little code\n```\n(let [image-fields [:thumbnail_image :featured_image :display_image]]\n    (cond-&gt; updated-data\n      (pos? (count changed-images))\n      (assoc :images (mapv #(image-updates in-updated in-original %) changed-images))\n\n      :always\n      (dissoc :thumbnail_image :featured_image :display_image)))\n```\nand I want to `apply` that `dissoc` using `image-fields` but cannot figure out how to. so basically I want to do something like\n```:always\n(apply dissoc image-fields)\n```\nbut because it\u2019s in a `cond-&gt;`, I guess it ends up as being `(apply updated-data dissoc image-fields)`.\n\nI tried it like this as well\n```:always\n#(apply dissoc % image-fields)```\nrather than tacking that on the end, \"always\" stuff can be done at the beginning\ndo you mean up here?\n```(cond-&gt; updated-data```\n(cond-&gt; (apply dissoc updated-data image-fields) ... )\nyeah\nyeah that makes sense :smile: thank you\ncond is for conditional things :)\nthanks again. it cleared up a few other things before that chunk of code :+1:\ngood point <@Darci> I have watched the video on specter 2 times actually and thought of it but my partner prefers to use less libraries ( BUT ) in this case it makes sense ( so thanks for suggestion )\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1530",
    "text": "i've been getting drunk on this code for a few hours\n```\n(clojure.walk/postwalk #(if (map? %) (dissoc % :a :b) %) {:a 1 :e {:c 2 :stuck_out_tongue: {:f 3}}})\n```\nto remove key/values from a tree   when key matches  a pattern\nbut could not figure out how to make it so that i dynamically check the keys ( to see if they match a regex ( lets say ) .. this code assumes that they are known keys like ( :a  or : b )  but I don't know the keys in advance.\ni tried oh so many things, but i  could not figure it out  ( even tried specter )\n<@Dreama> You have the whole map right there. You can get the `keys` and do whatever you need, based on them.\neven nested keys ??  i guess you suggesting i ( step 1 )  pick out the paths  i want to remove  ( with my function )   then step 2 ( dissoc them ? )\nmy tree ( hash )  also looks more like  {:a [{:b 1} {:c 2}] :d { :e 4}}  where key values can be array of more hashes\nPerhaps you could explain more clearly what problem you are trying to solve?\nWith `postwalk`, you can look at the whole of each hash map within the tree -- inside the `(if (map ? %) ... % ... )` branch\njust walking tree and removing key/values that match a pattern ( like if key has \"ui\" in it )\nThen, yeah, you can absolutely do that.\ni know i can do that .. i just flailing .. but i keep trying though ..\n`(apply dissoc % (map keyword (filter (partial re-find #\"ui\") (keys %))))` -- something like that?\n(I should pull up a REPL and try that before recommending it)\noh .. so your saying if you find a hash   do that\nok .. let me slap that sort of thing in the REPL myself\nYou may need to check that the list of keys returned that way is not empty before attempting the `dissoc`...\nHmm, no, `dissoc` supports just one argument so that should work without a condition.\ngot it but your idea is to get list of keys to remove .. ok .. that interesting\nIf your problem is \"remove all keys that have `ui` in their name, from all hash maps in the tree\" then that code solves that. But I get the impression that isn't quite the actual problem?\nno no .. that is exactly it\nit is that simple\nalmost got it .. gimme a few more minutes\nthis was good suggestion by the way\ngot it .. oh man .. that was 3 hours well spent .. thanks  <@Celestine> and <@Jasmine> for both suggestions .. that was a whooper\nIn the phrase \"I wanted something reified I can pass around\", it sounds like they want X to be a value that can be bound to a parameter, or returned as a value from a function call.\nIt would surprise me if everyone used the word \"reify\" identically to each other, BTW.\n`reify` does not \"define an anonymous type\". It creates an object that satisfies one or more interfaces or protocols.\nIt hadn't occurred to me that it would implement `IObj` and `IMeta` but that makes sense...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1531",
    "text": "I see the word \"reified\" come up a lot and sometimes in ways that makes me think i dont understand how its used, at least in the clojure community.\n\n1. its a verb, so it acts on something and that action is to make it less abstract. I reified my health and wellness plan by signing up for the local gym.\n2. reify, in clojure, does just that, it defines  an anonymous type and creates an instance of that type.\n\nso when i see it used like this:\n\n&gt; X uses a global singleton for the fact base; I wanted something reified I can pass around.\n\nI get confused. because im not sure how to interprate this, maybe they are saying that X only had the idea of a singleton, but they flushed out the implementation?\n(if that has to create a Java class that implements a bunch of things, that's an implementation detail)\n<@Liane> ^\nYeah, I found the same thing when debugging last week. Not expected, but reasonable.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1532",
    "text": "```user=&gt; (reify Runnable (run [this]))\n#object[user$eval140$reify__141 0x546621c4 \"user$eval140$reify__141@546621c4\"]\nuser=&gt; (type *1)\nuser$eval140$reify__141\nuser=&gt; (ancestors *1)\n#{java.lang.Runnable clojure.lang.IObj java.lang.Object clojure.lang.IMeta}\nuser=&gt;    ```\nim out of my depth, but i am quoting the clojure docs directly:\n<https://clojure.org/reference/datatypes#_reify>\ninteresting, thanks <@Celestine>, that makes sense. i think <@Latonya> is right here and it might have been a slight mis-use on the original authors part. Normally i dont get tripped up on such things but I wasnt comfortable with reify yet so its hard to see where the misconception is.\nYeah, I think the \"defines an anonymous type\" is secondary to what it does. I mean, it has to \"Because Java\", but that's not really the _point_ of `reify`. The important part is \"creates an instance of ...\" something that implements the specified protocols and interfaces (and `IObj` and `IMeta`).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1533",
    "text": "I\u2019m trying to call a server from my `clojure` app using `http-kit + enlive`. I\u2019m basically trying to scrape a single page daily, but that page is JS rendered. Is there a way to somehow wait for javascript to render the page?\nyou\u2019ll have to use a headless browser like chromium\nI believe there\u2019s a Clojure library for doing this: <https://github.com/igrishaev/etaoin>\n<https://github.com/igrishaev/etaoin#using-headless-drivers>\nthank you :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1534",
    "text": "How to set `*print-namespaced-maps*` to `false` via `project.clj` for nrepl 6.0 `:init` doesn't work\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1535",
    "text": "Is there a library that would parse edn (as edn not text), kind of like spec but maybe with more of a focus on speed ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1536",
    "text": "Could someone tell me (or link me) the way in which I can define the \"entrypoint\" for a project using clj?  as if I were to type `clj -m my-package.core` ?  I assume some setting in deps.edn?  But main-opts at the top level doesn't seem to do the trick so May have missed something\n<@Donetta> just define a `-main` function in the namespace my-package.core and make sure you have `:paths [\"src\"]` in your deps.edn, so clojure can find your namespace definition\nthank you - will the paths [\"src\"] setting assist with tools like Cider finding / auto-loading the file(s) on repl start?  I notice in lein projects that happened automatically for me, but with the deps.edn set up, I have to manually load each file\n`:paths` sets the classpath, where clojure searches for classes/namespaces. If currently `(require 'your.namespace)` doesn't just work and you have to load files manually, then you are missing `:paths` definition in your deps.edn\nty\nnp\nYou can check in *Messages* buffer to see the command Cider ran to start nRepl\nYou should see it using your deps.edn\nIf not, it could be an issue there, where Cider is not starting nRepl in the context of your deps.edn\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1537",
    "text": "I think their usage is correct if you read it as _reified as a value_.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1538",
    "text": "hi everyone. where do you usually deploy your clojure apps?\nI've tested a few - heroku, digitalocean, aws. heroku seems to be the most straight forward, easy and super quick one. it took me more than an hour on the other two. so was wondering if there are any other services out there\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1539",
    "text": "Hey! I might be asking in the wrong channel but here it is:\nI am looking for a library to create gists on github\na clojars search for github yielded decade old libs\nd you have a recommendation?\nGithub API looks very straightforward. I\u2019d personally approach this by generating the required HTTP-request(s) with `clj-http` or something similar. <https://developer.github.com/v3/gists/#create-a-gist>\nAnother option could be using one of the Java libraries via interop, for example <https://github.com/eclipse/egit-github/tree/master/org.eclipse.egit.github.core>\nthank you <@Fatima>\nI'm inclined towards clj-http\nHmmm this is not maintained but it might just work <https://github.com/Raynes/tentacles>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1540",
    "text": "tricks I keep on forgetting :\n\u2022 when you need a function that ignores its argument and returns nil, you can use `{}`\n\u2022 when you need a function that ignores its first argument and returns its second argument, you can use `{}`\n```(update {:a 1 :b 2} :a {})\n#_=&gt; {:a nil, :b 2}\n(update {:a 1 :b 2} :b {} 3)\n#_=&gt; {:a 1, :b 3}```\nI think the \u201cnew\u201d `:skip-whitespace` option should default to `true` in data.xml because upgrading from 0.0.8 to 0.2.0-alpha6 broke our code\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1541",
    "text": "What could possibly result in exceptions disappear silently?\nHere and there I found some functions in my code failing silently, where I expect them to throw exceptions and break the loop. I don\u2019t understand why.\nHa that\u2019s it. Thanks!\nHowever, `Thread/setDefaultUncaughtExceptionHandler` doesn\u2019t seem to fix it for `future` in my case. I use `future` to run a loop and never deref the future.\n\nDoes that mean I should get rid of `future` and use something else instead?\nyes, a future that is never derefed is a code smell. you may consider using a plain j.u.c.Executor instead\nThat\u2019s pathetic\u2026 Why don\u2019t we have a simple `thread` in the core?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1542",
    "text": "looking at asynchronous constructs such as futures, agents or go blocks is usually a good start\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1543",
    "text": "maybe this is related <https://stuartsierra.com/2015/05/27/clojure-uncaught-exceptions>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1544",
    "text": "Hi, everyone\nI had a question about state and persistence :\nThe thing is I have an atom as the main state of some module ... and the persistence (into db) is handled by adding a watch on that atom that translates the diff of two subsequent states into a transaction (put new state + put the transition)\nHowever due to asynchronous behavior of watches (and fast state updates) ... I get foreign key errors, since the previous state is not inserted (transition has a foreign key constraint to state)\nMy questions :\n- what is the best way to handle it?\n- and is such a scheme for state managment rational, at all?\n\"pathetic\" seems harsh\nprobably because the core is already big enough and java interop works well for this kind of stuff\nBTW clojure functions implement java.lang.Runnable so spawning a thread manually from clojure is a one-liner\nI think part of your problem is that you're using one identity (an atom) to try and control a huge grid of identities (each column of each row of a table, assuming that you're only trying to sync your atom to one table). It's worth calling out first because it's essential to what you are trying to do, and you cannot change that aspect of your plan without changing your plan.\nwhat are some repo\u2019s that use reader conditionals + `:cljr` ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1545",
    "text": "<@Clarine> there is this branch: <https://github.com/sogaiu/specter/tree/clr-support> - is that the sort of thing you are looking for?\nyes\nthere is also this: <https://github.com/sogaiu/compliment/tree/clr-support> - in both cases the work is incomplete, fwiw\nyeah, I would rather test with established libraries, but it seems they are rare\nit seems orchestra is compatible with cljr: <https://github.com/jeaye/orchestra/blob/master/src/clj/orchestra/spec/test.cljc>\n<@Clarine> yes, iiuc, <@Tonda> recently added clr support\nTims did all the work, for use with Arcadia: <https://github.com/jeaye/orchestra/pull/37>\nah, i see, thanks for the clarification\nSo, we have three concerns we need to juggle:\n- Identity: a place where we hold a successions of states\n- State: a single coherent value \"of the world\"\n- Persistence/Durability: Storing things between processes so that there's a long term record of something of value.\nAn atom takes care of two of these things, State and Identity, and one Atom allows you to work with one Identity with one State at a time.\nYou want to take this one Atom and map it down onto a SQL database. Most SQL databases give you strong durability through a table semantic. One table is an NxM matrix of identities, each row/column pair is one thing that can get updated of the other columns in that row and the other rows in that table. If your one atom sprawls over multiple tables, you have an LxNxM matrix of identities you want to stuff into one identity.\nSo your problems are:\n- You are trying to map a 3 dimensional LxNxM matrix of identities into one identity, an atom.\n- The tool around atoms you're trying to use to do this, add-watch, does not guarntee each successive state will be handed to the watch in order.\nIf you want ordering guarantees, then you could maybe look at replacing the atom with an agent. With the agent, you can't synchronously write; you dispatch a write and it completes when every other write previously queued before it completes. You can still use add-watch.\nBut I think you'll still have a lot of problems by trying to hide your DB away behind an atom, or an agent, or any other in memory identity in Clojure, and encourage you to not do that.\nyep makes sense, thanks sean\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1546",
    "text": "<@Thuy> irresponsible seems to take care of tentacles: <https://clojars.org/search?q=irresponsible%2Ftentacles>\n<@Thuy> this is what I ended up using for <https://github.com/exoscale/pullq> and it does the job well\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1547",
    "text": "Thanks Alex,\nI didn\u2019t quite got that. But I could reaally use help.\nI have an async component whose entire state is kept inside an atom and each value of the state has a version (i.e. every swap! will increment it)\nUpon changing its value the watch will be called which then translates the changes into multiple inserts to multiple tables. The thing is watches invocations aren\u2019t always in order.\nSo the watch will try to persist sth that depends on a version that itself is not yet written into db\nI greatly appreciate your help\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1548",
    "text": "how does one AOT a clojure var, I'm using isBound on clojure.lang.Var\nboth `^clojure.lang.Var var` and `(:import [clojure.lang Var]) .... ^Var var)` result in\n```\njava.lang.NoClassDefFoundError: clojure/lang/Var\n```\nhow are  you aot compiling and how are you trying to run your aot compiled code\nit sounds like you are not including the clojure runtime with your aot compiled code\nI'm using badigeon via tools.deps, yes that's most likely the reason, it's a new api, so wasn't sure if this was the code or the build tool.\nwell wasn't sure with that var as well, since I'm trying to prevent reflection on mikera's namespace tool\nYep that\u2019s it\nThanks alot, Alex\nAm I right to think that by the last comment you mean to push all state into db and not to hold any in identity in memory then?\nThere is some static clojure parser, that support reader macros, reader-eval and maybe read some \"unreadble\" things like `#object[...]`\nit even preserves comments and whitespace\ndepending on how desperate you are ```user=&gt; (require '[clojure.tools.reader :as r])\nnil\nuser=&gt; (defrecord reader-eval [v])\nuser.reader-eval\nuser=&gt; (with-redefs-fn {#'r/read-eval (fn [rdr _ opts pending-forms] (reader-eval. (#'r/read* rdr true nil opts pending-forms)))} #(r/read-string \"[#=(prn 1)]\"))\n[#user.reader-eval{:v (prn 1)}]```\nJust need to figure out how to \"patch\" `::foo/bar` to return something like `#namespaced-keyword [foo :bar]`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1549",
    "text": "thank you, I found the problem, it came from me not freeing some tensorflow ressources\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1550",
    "text": "I'm trying to get the duration of some mp3 files, anyone around that can point me in the right direction for doing that with clojure?\nthere's a java sound api in the JDK, googled:  <https://stackoverflow.com/questions/3009908/how-do-i-get-a-sound-files-total-time-in-java>\nYeah thats what I came across as well. Looks like thats what I'll be going with, thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1551",
    "text": "Thanks! I'll take a look.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1552",
    "text": "You're already holding state in the DB; the only question is what interface you put over it. If you give yourself good tools for reading information out of the DB that you can reason with, then you'll have a program that's easier to reason about as a whole. As a start, you could pull maps, or vectors of maps out of the DB as a discrete read operation, and likewise have discrete writes. And there's a lot of tools already built to support you doing this, e.g. honeysql, hugsql\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1553",
    "text": "in what way do LispReader.java or tools.reader not satisfy the bill?\n```\n(LispReader/read (new PushbackReader (io/reader (.getBytes \"[#=(prn :ok)]\"))) {})\n;; -- expected\n;; =&gt; [#reader-eval (prn :ok)]\n;; -- actual\n;; :ok ;; printed\n;; =&gt; [nil]\n```\nso you want read-eval to not eval?\nYep\nwell then, no that doesn't exist afaik :)\nmaybe rewrite-clj can read that?\n```\n(binding [clojure.tools.reader/*default-data-reader-fn* (fn [tag value]\n                                                          {:tag tag :value value})]\n  (with-redefs [clojure.tools.reader/read-eval (fn [rdr _ opts pending-forms]\n                                                 (#'clojure.tools.reader/read* rdr true nil opts pending-forms))]\n    (clojure.tools.reader/read-string\n      {:read-cond :preserve}\n      \"[#=(prn :ok) #?@(:clj [1] :cljs [2]) #object[] ::foo]\")))\n```\nI think that I will use tools.reader\nI will look too. But tools.reader seems to be OK for now\nthe resolver is pluggable, so you can do that\nwell, maybe not that pluggable\nyeah you're out of luck for that unless you redef <https://github.com/clojure/tools.reader/blob/master/src/main/clojure/clojure/tools/reader.clj#L343-L361>\nnot quite sure what a good pluggable mechanism for this would be that avoids exposing the entirety of `read-keyword`\nbut I'm open to suggestions\nmay I suggest that you don't do that? :)\naye\nI\u2019m looking for design advice on a feature. I\u2019m writing some code which hits a REST API. The interface to that API exposes some abstractions like \u201ctags\u201d, which are strings. I want to my code to hide those strings behind a mapping, so that the caller of my namespace can pass in data (which I could spec) which will be replaced with the correct string before calling the HTTP endpoint.\nFor abstracting over the tags, should I be using \u2026 vars? I could write a namespace that just defs each string and have the caller pass those as arguments.\nOr maybe just normal keywords, instead? Maintaining a mapping of keyword to string for the tags.\nDo namespaced keywords make sense here?\nif tags is an open set of strings then I would just leave them as strings\nstrings are a very flexible first class data type\nthe thing is they\u2019re kind of all over the place \u2014 they\u2019re tags on some products. So the punctuation and casing and whitespace is inconsistent. I was hoping to design so the caller doesn\u2019t have to know if the \u201cchristmas\u201d tag is \u201cChristmas\u201d or \u201cXMAS\u201d or whatever, they can just say `tags/christmas` or `:christmas`\nplus then if the tag itself changes, which is fairly likely to happen (maybe there is an effort to make them more consistent), I can change the value in one spot instead of searching for all occurrences\nI think then that means it\u2019s a closed set from my code\u2019s perspective?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1554",
    "text": "I have timeseries data that is a collection of events. the data is sparse, that is for certain timeframes there are no events. how am I supposed to build on this? do I let the collection with a lot of _nil_ propagate through the system and put nilchecks everywhere? or should I treat the whole timeseries data as a _function_ of time?\nmaybe a sorted set, sorted by timestamp? that makes grabbing all items between times X and Y cheap\nwhile avoiding any need for keys with nil values\n```(cmd)user=&gt; (sorted-set-by #(compare (:t %1) (:t %2)) {:t 0 :a 12} {:t 1 :a 3} {:t 4 :a 0} {:t 8 :a 1})\n#{{:t 0, :a 12} {:t 1, :a 3} {:t 4, :a 0} {:t 8, :a 1}}\n(cmd)user=&gt; (def s *1)\n#'user/s\n(cmd)user=&gt; (subseq s &gt; {:t 0} &lt; {:t 5})\n({:t 1, :a 3} {:t 4, :a 0})\n```\nthe first arg to sorted-set-by needs to be a comparator of two events\nsubseq takes the sorted set, and two comparison functions / compared item pairs (it can also take a single pair)\ninstead of saying \"what's the data at time t\" you'd say \"what are the known data points between t and t'\"\nhmmm let me see how this works out.\nyou can do the same with a sorted-map with timestamps as keys\nwhatever the representation, you shouldn't have nils laying around\nlike, in general, if I had a time series of data it would just be a collection of events, and any time period where there were no events, well there just wouldn't be events from that time period in the collection\nif you need to reify your notion of time periods, then you have a set of time periods, and each event refers to a timeperiod, so a time period with no events would be added to the set of time periods, but have not events referencing it\nini either case no weird nils\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1555",
    "text": "I think that I found a bug\n```\n(clojure.tools.reader/read-string \n  {:read-cond :allow}\n  \"[#?(:cljs #=(prn :ok) :default 1)]\")\n```\ndon't you want :read-cond :preserve ?\nwell, maybe I'm ahead of you - what do you get and what do you want?\nATM I'm just playing and understanding how `clojure.tools.reader` works\nThen I see that reader-eval occur in all reader-cond branches\nI'm trying antlr now\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1556",
    "text": "To expand about nils, this is just for data, functions returning nil is perfectly fine correct? (As long as it doesn't leak into data)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1557",
    "text": "[(let [x 20]\n  '`~x)\n\n(let [x 20]\n  `'~x)\n\n(let [x 20]\n  `~x)\n]\nresults in [x 20 20] ;; I am confused why the first two differ\nthe first one is a literal, and is not evaluated; that's what the single quote is for --- it's like saying (quote `~x)\nCan you walk me step by step through how\n\n(quote (quasiquote (unquote x))\nand\n(quasiquote (quote (unquote x))\n\neval to different things ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1558",
    "text": "_man ... cant escape this backtick_\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1559",
    "text": "has anyone done any benchmarking on moving from regular maps to defrecords? I know they\u2019re theoretically faster, but I\u2019d like to have some numbers and performance characteristics\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1560",
    "text": "They\u2019re not necessarily faster. They are faster in certain ways, so it really depends on your use case.\nFor instance, records don\u2019t do structural sharing. Depending on your mutation pattern, this could mean using a lot more memory and affecting gc. It\u2019s hard to test that in a micro benchmark.\nConstruction and access is usually faster. Mutation creates a new object, which may be slower, I really don\u2019t know. Probably depends on number of fields.\nWell, access of known fields is probably faster. Access of extra fields is probably slower (since it\u2019s really map access plus a field lookup).\nIf you really want to know how it affects your particular app, you probably just have to try it.\nyeah, but that takes a lot of work, since you have to refactor all the places where you access the known keys, so I wondered if there\u2019s already some research done on this. until I know more, I\u2019ll probably won\u2019t change anything\nI guess using (map-&gt;Foo ...) can be an anti-pattern too if you're micro-optimizing\nwell like I said, it's entirely dependent on what you're doing, so there can't be any research that applies to /your app/\nI know, but there can be research that describes certain scenarios and heuristics. if the win is only a few nano-seconds I won\u2019t bother\nwell, that doesn't exist\nI've microbenchmarked various things in the past, but that doesn't tell you gc effects etc\nfor example rewrite-clj has a lot of defrecords, but when you replace the `children` of a node, it creates an entirely new object. that hadn\u2019t occurred to me. so the benefit isn\u2019t clear at all here\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1561",
    "text": "Hi!\nWhile running lein release from Jenkins the vcs push part does not work, git considers the repo to be in a detached HEAD state\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1562",
    "text": "I think I got it\n<@Felix> my understanding is\n1. `tilde` is a *syntax*-unquote, `backtick` is a *syntax*-quote, `apostrophe` is short for `quote` special form\n2. first check for `~ those cancel each other out (syntax- quote/unquote)\n3. ` stops evaluation and namespaces\n4. ' stops evaluation\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1563",
    "text": "When I connect to a closed socket, it throws a connection exception, but with a syntax error. Why does this happen?\n```Syntax error (ConnectException) compiling at (/private/var/folders/_m/m545vvvx28j2x50v81pjs3bh00l3wz/T/form-init4854649086981149918.clj:1:125).\nConnection refused (Connection refused)```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1564",
    "text": "anything that happens while loading forms (top level of source, top level of repl) will often be reported as a syntax error\neg. `(def foo (/ 1 0))` is a syntax error because the divide by zero happens while compiling foo\n```user=&gt; (def foo (/ 1 0))\nSyntax error (ArithmeticException) compiling at (REPL:1:10).\nDivide by zero```\nform-int*.clj usually means lein was doing something at the top level of a namespace, you probably shouldn't be doing anything with sockets inside def or the top level of a namespace\nUse the new cljc.java-time from Clojure/North:  <https://youtu.be/UFuL-ZDoB2U>\nCan also do `(zdt/now (ZoneId/of \"US/Hawaii\"))`\nOr `clojure.java-time` that has existed for quite some time ```(! 504)-&gt; clj -Sdeps '{:deps {clojure.java-time {:mvn/version \"RELEASE\"}}}'\nClojure 1.10.0\nuser=&gt; (require '[java-time :as jt])\nnil\nuser=&gt; (jt/zoned-date-time)\n#object[java.time.ZonedDateTime 0x6d67f5eb \"2019-05-22T12:14:41.190-07:00[America/Los_Angeles]\"]\nuser=&gt; (str *1)\n\"2019-05-22T12:14:41.190-07:00[America/Los_Angeles]\"\nuser=&gt; \n```\nEither way, I'd highly recommend using a Java Time based solution, like either of those or just raw Java Time with interop, instead of `clj-time` (and I'm one of the `clj-time` maintainers -- that library, and Joda Time, has been superseded by Java Time).\nAnd just to be clear <@Larissa> you _don't need a Clojure library at all for this_: ```user=&gt; (java.time.ZonedDateTime/now)\n#object[java.time.ZonedDateTime 0x2a448449 \"2019-05-22T13:23:03.927-07:00[America/Los_Angeles]\"]\nuser=&gt; (str *1)\n\"2019-05-22T13:23:03.927-07:00[America/Los_Angeles]\"\nuser=&gt; \n```\nThat's baked into Java from Java 8 onward. Which is a big part of why Joda Time is considered deprecated -- Java Time was the \"next gen\" of Joda Time, designed by the same folks.\nAnd here's the formatting in full, if you need it: ```user=&gt; (.format (java.time.ZonedDateTime/now) (java.time.format.DateTimeFormatter/ofPattern \"yyyyMMddHHmmss\"))\n\"20190522132639\"\nuser=&gt; \n```\n(and you can use `:import` to clean that up, rather than typing out the package names each time)\nthe name `clojure.java-time` for a library is admittedly confusing and misleading\nYeah, and the use of a single-segment namespace `java-time` is awful too.\nbut like <@Celestine> says, everything you need is already at hand\noof, really?\nwhat's with all these clojure projects that do that?\nDid you know the Java Module System will *reject* module jars with single segment names?\nI suspect it's \"pushback\" against the `everything.core` convention that Leiningen accidentally gave us all those years ago? :slightly_smiling_face:\nclj-tuple is an offender I've found\nwhat's a \"single-segment namespace\"?\nmeh I don't know what it comes from, the namespacing advice/suggestion has been there for 10 years\n<@Shayla> when you have a namespace named `foo`\nrather than `noah.foo`\n`date-clj` is another one you can hate on :slightly_smiling_face:\nyou don't have to go \"full Java\" by doing `com.noah.whatever.foo` but namespacing is there for a reason\nAnd `date-clj`'s coord is `date-clj/date-clj` :slightly_smiling_face:\nlots of projects have `config` as a namespace, yuuuck\nwhat could possibly go wrong\nyou can't mix that with another project with the same defect\noh that\nyeah no biggie\n(personal opinion: lots of projects that do this aren't worth using for other reasons.)\nbut to do `clojure.java-time` is especially bad because it implies endorsement of sorts\nsame with `clojure.jdbc` or whatever that one is called\nYeah, don't get me started on that one...\nBut it's not really surprising people put `clojure` or `clj` or `cljc` or `cljs` into namespaces and/or artifact names given that they have a single concept in mind and it's for Clojure :slightly_smiling_face:\nI called `next.jdbc` that because it's the \"next generation\" of `org.clojure/java.jdbc` / `clojure.java.jdbc` but I didn't want to imply \"authority\" via `clojure` unless it ends up in Contrib and that's looking less and less likely at this point (I have CircleCI and cljdoc in place so most of the benefits of Contrib are accounted for).\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1565",
    "text": "Hello all, I\u00b4m trying to use clj-time to print local time, but it always get UTC time,  I tried use `(f/unparse (f/formatter \"yyyyMMddHHmmss\") (l/local-now))` and `(f/unparse (f/formatter \"yyyyMMddHHmmss\") (t/now))`but no success. How does it work?\nI tried this `(.toString (org.joda.time.DateTime/now) \"yyyyMMddHHmmss\")` and works, it\u00b4s better using java-time?\n<@Celestine> Thanks for information\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1566",
    "text": "Yeah Joda is deprecated\nIf you have the flexibility/choice, switch\nIf it ain't broke, don't break it :)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1567",
    "text": "anti-contrib ?\nI agree that thin wrappers have limited value, but you may wish to check out the video for `cljc.java-time`.  It is a _*cross-platform clj/cljs implementation*_ that avoids the `js/Date` problems.  The clj part is auto-generated wrappers of `java.time`, so that is simple &amp; convenient.  The cljs part is a re-implementation of most `java.time` classes, and does not use `js/Date` at all.  See Clojure/North video for details:    <https://youtu.be/UFuL-ZDoB2U>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1568",
    "text": "hey, does the clj repl support tab completion for namespace members? i know the lein repl does, but it doesnt seem to work when i use `clj -r`\nno, the clj tab completion is very rudimentary\nlol hey justin. damn, okay\n'sup\nchillin :sunglasses:\nyou can check out rebel-readline for a minimal terminal style thing <https://github.com/bhauman/rebel-readline>\nahh cool, tyty\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1569",
    "text": "woah cool\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1570",
    "text": "~Is it possible to exclude part of my project from being included in the uberjar depending how I call leiningen?~ nevermind\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1571",
    "text": "in Clojure, is it possible to construct looping (but non lazy) values x, y such that `(= x y)` infinite loops?\nBoth infinite and non-lazy?\n`(defn loop-forever [number] (do (println number) (recur (+ 1 number))))` use at your own risk :stuck_out_tongue:\nfollowing on from that, and just for jest, would it be possible, just thinking, of using clojure reducers, to pretty much cause heat death by having each processor core sum an infinite sequence of numbers...\nsomehow it put full load on 2 cores when used\nwould it make sense for clojure itself to enable some sponsporing options? via Github you can now enable several sponsporing links, e.g. patreon, opencollective. if most of the Clojure users would chip in for a couple of dollars a month, would that make a difference to the development of Clojure?\n\u201cSomehow.\u201d I\u2019m sure with a little work it could tie up more cores.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1572",
    "text": "hey everyone, got a super weird bug i\u2019m kind of stuck on. i have a collection of 6000 32-byte arrays that i\u2019m sorting with a function `compare-bytes`. `(sort compare-bytes coll)`. when the comparison function hits a particular element, it throws an exception `Comparison method violates its general contract!`\nif i generate a separate collection of 6000 randomized 32-byte arrays, it works fine. even beyond 50,000 elements, no exception is thrown\nit\u2019s only with this specific collection. i can see nothing odd about the element on which the comparison function breaks down\nalso, `(= 6000 (count (distinct (map bytes-&gt;hex coll))))`\ncan you post your compare-bytes fn?\noh yeah, should have mentioned: it\u2019s not mine, it\u2019s the one in `ztellman/byte-streams`\ni\u2019ll get a link\n<https://github.com/ztellman/byte-streams/blob/3e0822b58172b8d351b366213eda6090892e32b3/src/byte_streams.clj#L912>\nwrap it in your own comparator function that catches and prints the inputs\ni tried this earlier, but the exception comes from the sort and not the comparison, so i\u2019m not sure how to grab the breaking elements\ni guess i could just print all of them. one sec\nI believe you get this exception in Java when the transitive property doesn't hold (that is, e1 &gt; e2 and e2 &gt; e3 but NOT e1 &gt; e3), which is presumably something the sort relies on\nyeah, that\u2019s what google seems to say\nmust the function only return something \u03b5 [-1, 0, 1]? i noticed it can return other values\nOoh!  Debugging why a comparator is not a total order.   Looking at it ...\ncan be other values\nThe JVM can handle negative, 0, positive fine.\ni mean they seem correct (negative when l&lt;r etc)\ngiven that this is a property, it's a perfect candidate for a generative test with test.check\nha, seems it\u2019s been done <https://github.com/ztellman/byte-streams/blob/b5f50a20c6237ae4e45046f72367ad658090c591/test/byte_streams_simple_check.clj>\nthat's not a transitivity test\noh, guess it\u2019s not really checking transitivity\nyeah\nbut could easily be extended to do so! :)\njust gen a / b / c, and verify that if a&gt;b and b &gt;c, that a&gt;c\ntest.check will spit you back a failing example\nsweet! on it\nSomething that seems odd to me in cmp-bufs, which the function you linked calls in most/all cases - it calls a ByteBuffer .getInt method in some cases, or .get.  From my reading of Java API, those mutate a \"position\" member of a ByteBuffer object.  I don't yet see anything that initializes this position back to the beginning of the ByteBuffer, which would be a problem if the same ByteBuffer was compared more than once.\nI will let you know if I find anything, or give up on it.  Haven't given up yet.  My current suspicion is that most of the calculations and the return value are longs (64-bit signed integer), but Java comparator functions expect int (32-bit signed integer), and Clojure takes any value returned from a comparator function and coerces it to int via the .intValue method, which can be a different sign than the long value.\nI suspect I can find a 4-byte ByteBuffer content for three byte buffers such that their comparison results are consistent if you look at the sign of the long, but inconsistent if you look at the sign of the coerced values returned by .intValue on those longs.\nThis may be a case where it requires having an \"extreme\" combination of 4-byte values, e.g. those that when looked at as a 32-bit int, are either at or near the min possible value, max possible value, or near 0.\nunless your random test case generation artificially stresses such values, it could take a very long time to find such corner cases.\nwould it help if i provided you with the actual collection i was using?\n<https://pastebin.com/Hh3EVYXy> (6000 32-byte strings, not delimited)\nfails on 5632nd element\nmaybe  can email info to me at <mailto:andy.fingerhut@gmail.com|andy.fingerhut@gmail.com> if data is not secret or anything\nit\u2019s in that pastebin link\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1573",
    "text": "Digging a bit further, I don't think that is it.  cmp-bufs appears to be using the \"absolute\" variants of the .getInt and .get methods, which might not mutate the position field at all.  It didn't on my first attempt trying it, to see if it did modify the position field.\nNext guess to investigate -- cmp-bufs has an optimization where for buffers that contain at least 4 bytes, it gets 4 bytes at a time to compare, until it gets to the end, then does 1 byte at a time.  It uses p/- to subtract 2 32-bit integers, which can wrap around when the result is a 32-bit integer, too, and cause a JVM comparator to behave in undesired ways, as described in \"Beware using subtract\" section of this article: <https://clojure.org/guides/comparators>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1574",
    "text": "quite the rabbit hole..\nthanks a lot! this is definitely out of my league at this point. i ran a test.check for transitivity and it passed, as i kind of expected\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1575",
    "text": "I have a pair of 4-byte ByteBuffer values such that (compare-bytes b1 b2) and (compare-bytes b2 b1) both return a negative value when converted to 32-bit int, so that looks wrong.  I don't think it causes the exception, but shows that the comparator is not good.\nI have a proposed change to function cmp-bufs in that library that I think should correct the problem.\nWould you be interested in trying it?  The change is replacing the first of two occurrences of `(p/* sign cmp)` in the file byte_streams.clj in function cmp-bufs with `(p/* sign (if (pos? cmp) 1 -1))`\nyeah, sure!\nI'd like to find my own smaller sequence than yours that also causes the exception to be thrown, but I may not generate the necessary enthusiasm for that if that change fixes it for you, and just submit a PR with that change, plus some other tests that give wrong results without the change\nIn my limited testing, that change fixes the problem I found with a pair of values where (compare-bytes x y) and (compare-bytes y x) both return a negative value, meaning \"x &lt; y\" and also \"y &lt; x\".  I suspect it will also eliminate the exception you saw thrown.\nCreated a PR here, if you want to follow along: <https://github.com/ztellman/byte-streams/pull/39>\ncase anyone is interested in the issue <@Onita> was asking about, but doesn't want all the gory details in the thread, I do not know if I have fixed the bug he found, but I have a proposed fix that definitely improves the result of compare-bytes for a bad case I found where it can return (x &lt; y) and also (y &lt; x) for many pairs of byte streams x and y.   <https://github.com/ztellman/byte-streams/pull/39> is the PR if you want to track it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1576",
    "text": "I thought datafy could transform a Java object into Clojure data, am I wrong?\nLike say I want to extract all values from a Java object into a Clojure datastructure instead like say EDN\nAnd I want that to be deep\nyes\nin the sense that datafy by default doesn't do anything\nSo, when I call datafy, it just prints the object memory address\nright\n```\n(defprotocol Datafiable\n  :extend-via-metadata true\n\n  (datafy [o] \"return a representation of o as data (default identity)\"))\n```\nif you have something you want turned in to data in a particular way, you have to extend the protocol to do it\nOh. Okay I guess I assumed that Java objects had a smarter default then identity\nI am also not sure how deep the 'datafy' should go\nfrom my understanding a intended use case is kind of a cycle from datafy to nav and back again\nyou datafy something, then nav to something it references, then datafy that, etc\nOh right, so each datafy is one level. And to go deeper you have to recursively datafy. Makes sense. So it handles circular graphs\nor things that are method calls returning data under that object, which may be newly generated or may just be a getter for existing contents\nThink of `datafy`/`nav` as an extended, explicit form of laziness.\nI still wished there was a default datafy for objects.\nDon't really want to implement my own reflection field parsing\nfor things that use normal getter methods, there's `bean`\nand there's definitely other reflection libs for making data out of objects that satisfy a few assumptions, IIRC TimMC made one...\nYa, bean is there, but not deep. It's okay, I'll just use GSON\nAnd then Cheshire to pull that into Clojure\nHum... there seems to be clojure.java.data\nyes, java.data works too and makes different choices\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1577",
    "text": "does cognitect's aws-api library support signing CloudFront URLs? i inspected the ops of `com.cognitect.aws/cloudfront` but don't see anything related. same with `com.cognitect.aws/signer`.\nit does not <@Johnathon>\nit may be worth having an add-on library that does presigned URLs for cloudfront + s3\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1578",
    "text": "out of curiosity, what would you name this function?\n```\n(defn- foo\n  \"Take `n` random elements from `coll`, choosing those that satisfy `pred` first.\"\n  [n pred coll]\n  (let [[preferred rem] ((juxt filter remove) pred coll)]\n    (take n (concat (shuffle preferred) (shuffle rem)))))```\n\ne.g.\n`(foo 3 even? [1 2 3 4 5 7 9])  =&gt;  (4 2 1)`\nextract or pluck would be my suggestions\nI was thinking something like `take-rand-preferring`\nor `take-rand-biased` but bias might suggest probability\nI like the word draw (as in drawing a hand of cards), but that would probably be more confusing due to double meaning\nnaming things is hard. :sweat_smile:\nrandom-sample\n`random-sample`  is in clojure.core\nit\u2019s hard but I find it weirdly enjoyable\n`sample-randomly` :laughing:\nI accidentally wrote random-sample on IRC, and someone on the channel was like \"I know you are joking but that's actually useful\" and it ended up in core\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1579",
    "text": "thanks again, <@Marlyn>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1580",
    "text": "it's too simple to take much credit for, but I found the whole process amusing\nnewbie question:   in :   \"(wrap-cors :access-control-allow-origin [#\"<http://localhost:3000/>\"])\nwhat \"#\" means?\n```user=&gt; (class #\"foo\")\njava.util.regex.Pattern```\n#\"\" is a data reading literal for regular expressions, and can be used with things like string/replace, re-matches, re-find\n<@Cherri> a guide to various weird sigils in clojure programs <https://clojure.org/guides/weird_characters>\nlink directly to the regular expression syntax <https://clojure.org/guides/weird_characters#_regular_expression>\ncool! thanks a lot!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1581",
    "text": "Is there a way in a test to tell it to just fail ? like for instance if the wrong dispatch function is called\nand without resorting to (is (= 1 2)) or some (assert false ...) trickery\nhum maybe just throwing an exception would make it i guess\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1582",
    "text": "Does anybody know who I have to contact if I want to delete my own package in clojars?\nHi <@Lelia>, did you see <https://github.com/clojars/clojars-web/wiki/About#how-do-i-delete-a-jar>\nThank you. It seems deleting it just put another burden for the admin.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1583",
    "text": "Is there any `Redis` library that implements delayed task scheduling?\n\nI need to delay a task which is distributed and kept in redis, something like this one: <https://stackoverflow.com/questions/10868552/scalable-delayed-task-execution-with-redis>\n\nI currently listen to `expire` keyspace notifications.. not sure if that is so scalable.\nhmmm funny sounds very similar to what i'm looking at right now (maybe i'm wrong)\nyou can put timestamps in redis keys so you are independent of Redis time constructs? (need to put the expiry on keys big enough so it doesn't interrupt with your own logic)\nare you working in a particular domain?\nNot really, its just that I want to do it in a way that scales :slightly_smiling_face:\nthen not use Redis :slightly_smiling_face:\nbut <https://www.aerospike.com/docs/guide/llist.html>\nor maybe the wrong datastructure one sec\n<https://discuss.aerospike.com/t/how-would-one-implement-a-sorted-list-like-redis/1046/2>\nAnyway hard to say if that will solve your issue, and if Redis is the bottleneck at all\nin the card game I'm working on, I have a \"card\" object, which is just a map with certain properties. To make interacting with the objects easier, I have a bunch of \"accessor\"/getter functions: `corp?` returns true if the card is a Corp card, `installed?` returns true if the card is currently installed, etc. These functions are all solely reliant on the card map passed in\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1584",
    "text": "Is there any \"best practice\" with organizing groups of functions like this? Seeing as I'm not creating multiple types, I don't see a benefit necessarily of using a protocol. if this was in java, these would all be normal \"attributes\": `public isCorp()` etc\nI've moved them into a `card-properties` namespace and `[card-properties :refer :all]` them, but I feel like I'm falling into a trap or a code smell, lol\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1585",
    "text": "Collecting them in a namespace seems reasonable to me\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1586",
    "text": "for the basic ones you could do away with the `fn` and replace with keyword `(:installed? card)`\ngiven `(def card {:installed? true})`\nSadly, a lot are more like `(= \"Hardware\" (:type card))`, which is a little more annoying and messy to write inline. And then of course, because it's a complex game, others are `(or (= \"Identity\" (:type card)) (= \"Fake-Identity\" (:type card)))`, which is _really_ annoying to write multiple times\nI feel like I've heard <@Cher> talk about this kind of decision on his podcast, <http://Lispcast.com|Lispcast.com>. I'm sure he's got way more insight than me :wink:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1587",
    "text": "Can `[pre|post]walk` be used to extract selected leaves from a nested data structure? How? I want to descend only into some submaps and extract particular key from the leaf maps.\n<@Brent> do you want to prune the tree or get a series of values out of it?\n```\n(w/postwalk (fn [m] (if (map? m) (select-keys m [:a :b]) m)) {:a 1 :b 2 :c {:a 1 :b 2 :c 3}})\n{:a 1, :b 2}\n```\nthanks for the recommendation! i'll check it out\n<@Brent> I've used `tree-seq` plus a filter to select leaves for this sort of thing\nI want to get out a seq of (leaf) values but exclude some branches\nhow far above the leaves are the branch points you know you won't want?\nsomething like:\n```\n(remove map? (tree-seq map? #(vals (select-keys % [:a :b])) {:a 1 :b 2 :c {:a 1 :b 2 :c 3}}))\n(1 2)\n```\n?\ntaking a look at clojuredocs for those functions might give you an idea\ndoesn't tree-seq return all nodes instead of only leaves?\n\u00b1 1 and 2\nThanks, I think tree-seq doesn't do what I need but I can look at its implementation and copy that for my use case. (The thing is I have a nested data structure consisting of maps _and_ seqs)\nusually with tree-seq my predicate is `coll?` which catches maps and seqs\nbut instead of `coll?` you can use a predicate that both checks for `coll?` and removes branches you don't want\n`(fn [node] (and (coll? node) (not (ignored? node))))` - where ignored? checks for k/v pars with excluded keys, or whatever\nright, but you can take the final sequence of nodes and return only leaves\nin your `branch?` and `children` functions, you can prune nodes whose children are not wanted\nin fact the function to return only the leaves should just be `(filter (complement branch?) ...)` where branch? is the same function you passed to tree-seq initially\nthat declines to descend into keys and only returns vals out of key/value pairs, and removes all keys in a blacklist instead of descending deeper when found\n<@Brent> You can easily process tree-like data structures with the Tupelo Forest library.  See the Lightning Talk:  <https://youtu.be/RtavTnRr0oM>\nthe README:   <https://github.com/cloojure/tupelo/blob/master/docs/forest.adoc>\nand many live examples:   <https://github.com/cloojure/tupelo/blob/master/test/clj/tst/tupelo/forest_examples.clj>\nand the API docs:   <https://cloojure.github.io/doc/tupelo/tupelo.forest.html>\nare there any libraries for doing bidirectional transformations of Clojure data?\nthanks!\nthanks a lot!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1588",
    "text": "```(cmd)user=&gt; (load-file \"/tmp/foo.clj\")\n(1 4 6 7)\n(ins)user=&gt; (print (slurp \"/tmp/foo.clj\"))\n(def input\n  {:a 1\n   :b {:a 2\n       :b 3}\n   :c {:a 4\n       :b 5\n       :c 6}\n   :d {:a 7\n       :b {}}\n   :e {:c 8}})\n\n(def unused-keys\n  #{:b :e})\n\n(def branch? coll?)\n\n(def children\n  #(map (fn [node]\n             (if-not (map-entry? node)\n               node\n               (if (contains? unused-keys (key node))\n                 []\n                 [(val node)])))\n           %))\n\n(remove branch?\n        (tree-seq branch?\n                  children\n                  input))\nnil\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1589",
    "text": "are there any other clojure/clojurescript streamers?  i know of <https://www.twitch.tv/jplur_>\nThere's a <#C3M107FGW|livestream> channel where folks used to talk about that but it's been inactive for a long time :neutral_face:\nI think it would be fun if folks got that back up and running <@Jenny>... it's always very interesting to see different people's workflows!\nyeah, that\u2019s mostly what i\u2019m interested in. the details of workflows that don\u2019t always get documented on github pages, etc.\nI can't remember what I tried to use to stream with back then... Not Twitch, for sure. But mostly I work on a proprietary code base so streaming isn't something I can really do much of the time.\nI did do a short YouTube video recently of my workflow with REBL (and Atom/Chlorine).\n(because folks kept asking about \"how to use\" REBL)\nsomeone livestreamed (and recorded) their advent of code solutions. I think <@Phebe> and <@Simonne>?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1590",
    "text": "What do you mean by \"bidirectional\"?\nprecisely <https://en.wikipedia.org/wiki/Bidirectional_transformation>\nex. have a transformation `t` that takes some clojure data `a` and transforms it into `b`, and can also apply the transformation to take `b` into `a`.\none of the things that seems to come up in literature is taking an updated `b` and transforming it into an updated `a` as well\ndoes that make sense? :grimacing:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1591",
    "text": "yep! <https://potetm.com/videos.html>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1592",
    "text": "So here's a surprising thing I just found: (java.net.URI. \"<https://google.com>\") actually fetches the page\nThe javadoc didn't mention that, as far as I can tell.\nAlso, it seems to throw up on localhost uris. Is there a good way to validate uris without fetching?\n<@Rosalba> Why do you think `(URI. \"<https://google.com>\")` makes a network call?\nbecause it dumped the response in my repl\ndoes it not do that for you?\nfor me:\n\n```\n(java.net.URI. \"<https://www.google.com>\")\n=&gt; #object[java.net.URI 0x7abeb19d \"<https://www.google.com>\"]\n```\nThis is a bad cider feature unfortunately\nIt can be disabled and should be by default. This is the feature to show images in the repl. \n<https://media.tenor.com/images/8170135a5927612c8f3ee75c4c1daa92/tenor.gif>\nah, I see\nthanks :smile:\nDo you know what the feature is called, that I may disable it?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1593",
    "text": "i think you want `(setq cider-repl-use-content-types nil)`\nthank you\nI was surprised to find that form metadata doesn\u2019t contain `:file` by default for quoted forms, only `:line` and `:column` - I thought it did.\nActually, no, it looks like `:file` is only added for vars in the compiler. I guess this is because the reader is reading from Reader, not necessarily a file.\nSure. I don't know of any library that does that, except of course for very narrow cases like serialization.\nOr, you know, inc and dec :p\n<https://github.com/gfredericks/bijector>\nSounds right\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1594",
    "text": "Reading the source, it looks like this is because `:file` metadata is added by the compiler, not the reader - is that correct? Is there any trickery I can use to get the file from quoted forms?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1595",
    "text": "[clojure deps question] in an Ubuntu env, I can run `git clone git@github.com:my-workspace/my-project` and it runs fine using the SSH keys, but when this project is added as dependency for other project like `my-project {:git/url \"git@github.com:my-workspace/my-project\" :sha \"0123...\"}`  I get an error:\n```Cloning: git@github.com:my-workspace/my-project\nError building classpath. connector is not available: \ncom.jcraft.jsch.agentproxy.AgentProxyException: connector is not available```\nAm I missing a configuration somewhere? :slightly_smiling_face:\n<@Hilaria> Have you looked at the `Git configuration` section of <https://clojure.org/reference/deps_and_cli>   Perhaps that can help.\nthanks <@Erna>! I just fixed it. it was an issue with ssh-agent on that machine.\nGreat. Glad it is resolved.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1596",
    "text": "hey everyone, is there an easy way to load edn files with env vars attached to specific lein tasks?\n\n`lein test` would load `test-config.edn` while `lein run` would load `dev-config.edn`\nsounds like an \"xy\" problem tbh... are you using Component/Integrant in the first place? They make it straightforward to have per-env systems, with different configs\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1597",
    "text": "Using reitit, I have an html file in my resources/public that I wish to serve as my root \"/\". With the following code it serves it, but does so with a `302 redirect` to `/index.html`. How can I just straight up serve without the redirect? Why is it redirecting at all?\n\n`(response/file-response (str (io/resource \"public/index.html\")))`\n^ (response is ring.util.response)\nwhy not using resource-response ?\nHmmmm.... I'll try that; I didn't know about it\nThanks; that does the trick! Still not sure why the file-response was resulting in a redirect, though\nOops; actually, doesn't work, because it tries to download as an octet stream when I hit it with a browser\nyou could read the file as a string\nand respond with it in the body and content type set to text/html\nYeah, I figured that would be a last resort\n<https://github.com/gnl/ghostwheel>\n\napparently, yes.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1598",
    "text": "Ill take a llok into component thx :smiley:\nI wouldn\u2019t rely on that to be exhaustive though! There\u2019s nothing in the language to make such a guarantee.\nI don't think it's minimal. Like any function that does something on a data structure using an uuid is unlikely to be called twice with the same.\nAn interesting aside on the ClojureScript side, once Google Closure knows a function is pure, it does certain optimizations with it. Here is one case where it is incorrect: <https://github.com/google/closure-compiler/issues/3079>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1599",
    "text": "Can the clojure compiler detect side effects in functions? Can it decide at compile-time whether a function is pure?\nI\u2019m interested in whether the compiler could automatically memoize all pure functions. Could effect massive speed improvements, minimal amounts of memory increase, with very little risk\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1600",
    "text": "I suppose they have a notion of \"no side effects\" in this case, which is different than \"pure\" via their terminology <https://github.com/google/closure-compiler/wiki/Annotating-JavaScript-for-the-Closure-Compiler#nosideeffects-modifies-thisarguments>\nClojure as it\u2019s written can not. But a runtime certainly could detect at runtime and do certain optimizations. Or if code was written to be explicit about its effects\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1601",
    "text": "Yeah my initial impression was that you could probably do a whole dissertation on this topic and still only come up with a method that only works on a restricted scope of language features\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1602",
    "text": "It has probably been discussed numerous times but I can't find any answer.\nI have these macros:\n```\n(defmacro format-query [q]\n  `(cond-&gt; ~q\n     (map? ~q) (sql/format :quoting :ansi)))\n\n(defmacro query [c q params]\n  `(jdbc/query ~c ~(format-query q) ~params))\n```\nThe issue is that `(query 1 2 3)` expands to `(jdbc/query 1 2 3)` whereas I want it to expand to `(jdbc/query 1 (cond-&gt; 2 ...) 3)`. Is it possible to do so?\nbased on your code, i\u2019m not sure why it would expand to `(jdbc/query 1 2 3)`\nbut I think in this case you can change `format-query` to be a function, rather than a macro\nand that might be what you want?\nshould be\n```\n(defn format-query [q]\n  `(cond-&gt; ~q\n     (map? ~q) (sql/format :quoting :ansi)))\n\n(defmacro query [c q params]\n  `(jdbc/query ~c ~(format-query q) ~params))\n```\nfirst macro should be a function <@Enola>\nSure. But now I can't use `format-query` anywhere except for other macros. I guess a solution in this case would be to extract the common part to another macro.\nThat's what I'll probably do. Thanks!\nCan you help me understand why it's expanded the way it is with two `defmacro`?\nThe way I read it: `~` in `~(format-query q)` unquotes this part, so that the macro is expanded here. It expands in a form `(cond-&gt; ...)`. The thing I cannot understand is why this form is being computed during macro expansion.\nOkay, all interesting stuff - thanks everyone!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1603",
    "text": "It was being computed during macro expansion because you used the macro in a macro\nSo the `format-query` macro was being executed, expanded and then the `query` macro continued evaluating and expanding\nI have a need for a sparse vector. Any ideas how I might represent that?\nIt's a semantic thing rather than a perf thing. I need the inverse of `nth`: construct a vector with a value at position `n`.\nAnd then I also need a way of merging the sparse vectors...\nBleh\nWhat other operations do you need to do?\nPretty much just those\nWhat I'm trying to do is, for example start with a source like `[1 2]` and project it using `second`. So it would produce `2`.\n\nThen, I could change the projection to `3` and use that to update the source to `[1 3]`\n\"Project it\" and \"change the projection\" sound a lot like what Specter does.\nI'm basically implementing a lens. I am trying to figure out how to implement it myself rather than use a lib like specter :sweat_smile:\nThe operations you mention above sound like they could be easily done on a hash map instead of a vector with regular old `assoc` and `merge`. It's not entirely clear to me how those things fit in to your lens implementation.\nI suppose you could hold onto the novelty in a hash map and do the merge by `assoc`ing the novelty from the hash map into the vector.\nRight, the issue is the source to the data is a vector and that needs to be preserved\nto check for non-nil value\nlooks a bit weird :smile:\n<@Roslyn> I thought it would throw an exception if I did it without `some-&gt;`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1604",
    "text": "hi everyone. is this an overkill?\n```(some? (some-&gt; project :images :thumbnail))```\nwhy not just `(-&gt; project :images :thumbnail)`? thumbnail is probably not a boolean, so just having a value where you do check for nil is ok\nor `(-&gt; project :images :thumbnail some?)` if are you really into booleans :slightly_smiling_face:\nbtw. if you want to get your clojure hat on on the raspberry pi 3 b+ .... installing zulu jdk &amp; lein works surprisingly easy\nbut trying to use openjdk from adoptopenjdk won't work , something with ssl connections and elliptic ciphers is broken there :disappointed: ... so zulu instead and life is good\nkeywords, when called as functions on nils just return nil `(:a nil) =&gt; nil`\ngotcha, thank you\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1605",
    "text": "looks like this got merged in, great! should be really easy to check if this worked, but i\u2019m not sure how to tell if the jar has been updated. the version number is the same, so i assume not yet\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1606",
    "text": "Is there a way to fan out a seq, turning a seq into multiple seqs?\nIt seems straight to me how to fanout a channel into multiple ones, but I\u2019m not using async, so I wonder if there\u2019s a way to achieve the same thing for seq.\nMy real use case is that, I\u2019m parsing a stream of bytes from a socket with a telnet-like protocol. I want to separate the telnet command bytes from the text bytes.\nYou could use juxt maybe? Or partition?\nCurrently what I\u2019m doing is turning the bytes into a seq of packets, so something like\n```b b b b ... b -&gt; {:type :telent :bytes [1 2 3 4]}, {:type :text :bytes [1 2 3 4]}, ...\n```\nThen I need to parse all the `:text` to parse out some bytes for another protocol. I guess I can re-assemble all the `:text` packets into a byte seq again, but I am afraid that there will be some performance issue.\nIn what way?\nSeems in your case you could just do sort-by\nSorry I mean group-by\nwell I don\u2019t see a clear way to do this with `group-by`. To parse a byte and know which type it belongs to, I need to also check its previous and next bytes.\nOh, sorry I thought your example was showing the datastructure and you had them already parsed into maps\nI do have them already into two maps, but this doesn\u2019t work well if I want to parse the bytes of the third type.\nYou need to parse the byte array in the map? Or across them?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1607",
    "text": "Using cljfx, is there a way to use openjfx Canvas?  I can't find a sample on the site, and it isn't immediately intuitive as to how I would do it (or even make a plain OpenJFX element and add it to a cljfx node)\nIMO, Should considering `TreeMap, TreeSet, PersistentTreeMap` on fn `last`  implementation\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1608",
    "text": "<@Nisha> So how do you want to groupo your bytes ? By a fixed number ?\nSo 4 bytes apiece ?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1609",
    "text": "Has anyone experimented with grpc/protobuf and deps.edn? Is there a good library for compiling protobufs?\ngoogle protobuf java library?\nDoes anyone know if Clojure works OK in WSL (<https://docs.microsoft.com/en-us/windows/wsl/install-win10>)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1610",
    "text": "just generate java code from protobuf and use it with java interop thats how i do it with kafka\nI'm running some compute intensive calculations on my Macbook like an idiot, when I have a monster of a gaming PC sitting in the next room twiddling its thumbs. I though maybe I could kick up a REPL on it and outsource the job.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1611",
    "text": "It does, yeah\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1612",
    "text": "I have a project that has a sever side component and a client side component. they have different dependencies, and I'm keeping them separate via lein profiles. For development convenience I want to merge the two, and I tried  `:repl [:client :server]` in my project.clj. However, while `lein repl` does not include server-only or client-only deps, `lein with-profile +repl repl` does. Am I misunderstanding hwo the `repl` profile works? Do I add it somewhere else instead? Am I misunderstanding how `lein repl` works?\n<https://github.com/technomancy/leiningen/blob/master/doc/PROFILES.md#task-specific-profiles> seems to confirm your expectation.\n&gt; Some tasks automatically merge a profile if specified. Examples of these are the :test profile, when running the test task, and the :repl profile, when running the repl task.\nI\u2019d add them to :dev profile, which `:repl` should also source\nputting it in the :dev profile appears to work\n`:dev` will also make the deps available to your tests.\n:+1:\nawesome, thanks! sorry, I just figured this out and then read your message :smile:\n(and yes that does appear to work)\nthat might be worth raising an issue. the code appears to try to get the repl profiles.\ni think it doesn't track down the transitive profiles there\nIt\u2019s a telnet like protocol, so the sequences are identified by certain byte patterns. For example `255` is used as an escape character, so `255 249` means `go ahead`, and `255 255` means `255`, kinda like escaped 255, and etc.\n<@Sixta> I've been working a side project to do protobufs without Java interop\nbyte array -&gt; Clojure map -&gt; byte array\n<@Marlyn> on my god please yes\nthe wire protocol isn't that tricky\nMy experience with protobuf (and grpc) was not great. I spent an hour on it, and I didn't get anywhere.\nI know that's not much, but it was incidental to what I wanted to do.\nAnd so they are not grouped by a fixed length.\nYeah it would be really cool if we could participate more smoothly in that ecosystem\n<@Marlyn> neat! what's that look like -- gloss?\n(I'm interested in that as well because GCP)\nThat would be great.\nTime to make sure I'm following you on github\nread the `.proto` definitions with instaparse and do some analysis on them, turning each `message` into a encoder/decoder\nI haven't published it yet\nbut I haven't made progress on it in a couple months, so maybe I should just push the code up\nthe output of the analysis phase should be plain data so that you could write it down and skip analysis if desired\nkinda like cognitect aws-api spits out `.edn` descriptors of AWS api's\nyes please, my thing consumes that data and only incidentally the apis themselves\ndoesn\u2019t look like this fixed my issue. :&lt;\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1613",
    "text": "Does anyone know why <https://clojure.github.io/clojure/clojure.core-api.html#clojure.core/gen-class> does not mention that it is possible to attach Java annotations to methods and constructors? <@Jasmine>? (Neither does the Java Interop page, but that is not so surprising)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1614",
    "text": "You can see when new releases are made on Clojars here: <https://clojars.org/byte-streams>\nSame data set still throws the same exception?\nIf so, I will try testing with it, then, and stop assuming I have found the last problem :slightly_smiling_face:\nI'm having an issue in a large app where a top-level expression is causing a block on startup. Is there some flag I can pass to something to see what point clojure is at when it stops?\nthat\u2019s right, same issue\noh!  `:verbose`is new to me, nice\nWell, wrong if you do not know that fact and plan for it in advance, yes :slightly_smiling_face:\nThere may be another problem I haven't found and fixed yet, but the first problem I found with the comparator function was that it was returning what appeared to be a correctly signed Long value, but when truncated to 32-bit int would sometimes change the sign and not be the desired result.\nProbably because you can attach annotations to code without using `gen-class`?\nFor example <http://corfield.org/blog/2013/05/01/instrumenting-clojure-for-new-relic-monitoring/>\nI know that's not adding annotations to methods/constructors, just saying that you can do that in the general case outside of `gen-class`.\nIs the syntax much different for doing this within `gen-class`?\n(and, yeah, it would be nice if adding annotations was better documented somewhere...)\nI tried with those 6000 32-byte sequences, converted with some little bit of code I wrote to convert those hex strings into 32-byte long java.nio.ByteBuffer objects, and sorting them with the updated compare-bytes caused no exception to be thrown.\nI do get an exception thrown when I try to sort using the original definition of compare-bytes that you reported.\nProbably a good idea to double check what method you are using to get the new version rather than the one currently published on Clojars.\nDoing 'git clone' on byte-streams, then 'lein install' should install the modified version in your local $HOME/.m2 directory, where lein and other tools should be able to find it if you give the proper version number, which I think is 0.2.5-alpha2\nYou can also change the version string in the first line of the project.clj file to something that has never been released on <http://clojars.org|clojars.org> if you want to be sure your code is getting that version, instead of one from clojars.  You can search for byte-streams on <http://clojars.org|clojars.org> to see what versions have been released there, and the dates.  The last release date is in 2018, so cannot include the latest fix.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1615",
    "text": "<@Venice> start clojure with clojure.main and manually require your code entry point namespace with `(require 'your.code :verbose)`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1616",
    "text": "Is this another example where clojures compare-machinery sometimes returns the wrong result because of truncating longs to int?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1617",
    "text": "if you write `'foo/bar` or\n````foo/bar```\nor\n```(quote foo/bar)```\nhow should that affect linting required but unused namespaces? In Clojure, you do not need to require namespace `foo` in either case, although joker counts `foo` as used in the case of the syntax-quote. Currently clj-kondo does the same for syntax-quote and `quote`, although it probably shouldn\u2019t in all these three cases.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1618",
    "text": "Hi!\nSay I want the 4 fastest non-nils answers from 10 concurrent api calls, what is a good and fast way to do it?\n```\n(def ids `[1 2 3 4 5 6 7 8 9 10])\n(defn ask \n  \"may return nil\"\n  [id] \n  (:body (http/GET {...}))\n(defn take-4-first-non-nils [ids] ...)\n```\n<@Hugh> you will need `async/alt!` from <#C05423W6H|core-async>\n<@Elaine> Thanks :slightly_smiling_face: Any example where we wait for first n results before returning them?\nI\u2019ve always seen example with *the* first result, but not more\nthought it would start like so, but I don\u2019t know actually `(async/take 4 ...)`\nYeah. something like **the** first result, 4 times in a row :sweat_smile:\nNot sure about the answer but I'm sure that <#C05423W6H|core-async> and `alt` will compose that answer\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1619",
    "text": "<@Onita> ^\nthanks! you\u2019re right, i was probably using the wrong version. will check this again\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1620",
    "text": "I think it's a good idea to lint\n\n```\n`foo/bar\n```\n\nas a fault if the `foo` alias does not exist in the current ns.\n\nElse:\n\n```\n`foo/bar\n```\nwill likely evaluate to sth different than what the programmer intended\nI would distinguish syntax-quote from plain quote though: only the former has the alias-expanding semantic, so I would only lint for the former\nI have made two comments here:\n<https://github.com/borkdude/clj-kondo/issues/210#issuecomment-496293314>\nI think that\u2019s the same as what you\u2019re saying here right?\nso syntax-quote handles the symbol as \u201cusing\u201d the namespace, but normal quote doesn\u2019t\nI agree if in:\n\n&gt; but these do not give the warning, which I believe is the incorrect behavior.\n\n\"the warning\" means a warning other than `is required but never used`, possibly a new one\nYou can play with pmap and a blocking queue.\n\nEach fn in the pmap pushes to the blocking queue. Then you grab 4 elements from the queue, which by definition will be the fastest ones\n\nShould be simpler than core.async code\n(just beware that grabbing 4 elements may block forever if done incorrectly)\nthx, I had no idea! And I'd correct\n&gt;, it would be nice if adding annotations was better documented somewhere...\nto\n&gt; it would be nice if adding annotations was documented somewhere...\n:)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1621",
    "text": "Hah... yeah. I thought they were documented _somewhere_ but I remember it being hard to find anything about it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1622",
    "text": "Is there anyway to get Scheme hygienic macros for Clojure?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1623",
    "text": "<http://clojure-doc.org/articles/language/macros.html#macro-hygiene-and-gensym> is a pretty good intro to how Clojure handles hygiene\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1624",
    "text": "I'm hitting a very strange bug atm, I'm using node-jre to run a (uber)jar. But somehow the resource paths are weird, in that I can only io/resource files from jar, if they are file and not folder, and the file is not nested. Not the newest jre running the jar, could that be the reason or something else?\n(think I solved it, had some pom.xml from totally unrelated java project lurking around)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1625",
    "text": "anybody good at compojure routing? I want to have different wrappers for my login routes vs. other routes, then combine it all into one ring handler\n<@Bart> it's a bit of a hassle if you're using cemerick's friend. I hade a terrible time getting the auth sent the right way. But solveable, just combine the protected routes with public routes in the handler.\nand make sure the session cookie isn't dissoced anywhere in some middleware\n<@Bart> You can use `(routes ..)` to combine multiple set of routes (since they're just handlers). ```(routes\n  (wrap-login (routes ... your login routes ...))\n  (wrap-other (routes ... your other routes ...)))``` something like that I think...\nwait, you can nest `routes`? doh\n`routes` is just a function that takes handlers as arguments and combines them. Compojure goes through the list of routes/handlers until one of them returns non-`nil`, which with routes like `(GET \"/foo\" [] something)` which is a handler will return `nil` if it doesn't match...\n```user=&gt; ((routes (routes (GET \"/foo\" [] \"Get Foo\") (GET \"/bar\" [] \"Get Bar\"))\n                (routes (GET \"/quux\" [] \"Get Quux\") (POST \"/quux\" [] \"Post Quux\"))) {:uri \"/quux\" :request-method :get})\n{:status 200, :headers {\"Content-Type\" \"text/html; charset=utf-8\"}, :body \"Get Quux\"}\nuser=&gt; ((routes (routes (GET \"/foo\" [] \"Get Foo\") (GET \"/bar\" [] \"Get Bar\")) (routes (GET \"/quux\" [] \"Get Quux\") (POST \"/quux\" [] \"Post Quux\"))) {:uri \"/bar\" :request-method :get})\n{:status 200, :headers {\"Content-Type\" \"text/html; charset=utf-8\"}, :body \"Get Bar\"}\nuser=&gt; ((routes (routes (GET \"/foo\" [] \"Get Foo\") (GET \"/bar\" [] \"Get Bar\")) (routes (GET \"/quux\" [] \"Get Quux\") (POST \"/quux\" [] \"Post Quux\"))) {:uri \"/bar\" :request-method :post})\nnil```\nI didn't add any middleware into that, but hope it gives the idea? <@Bart>\nyeah I got the idea at your first post <@Celestine>, thanks. somehow I was not seeing that `(compojure/routes)` just takes handlers &amp; assembles a handler\nalso works just as well on just windows\nwithout the IO tax of WSL\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1626",
    "text": "<http://danboykis.com/posts/things-i-wish-i-knew-about-core-async/>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1627",
    "text": "How to set *Content-Security-Policy* headers in Pedestal? Application is giving following errors.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1628",
    "text": "How do I profile the overhead of using lazy seq? Assuming my app is slow, how do I find out if it\u2019s because I\u2019m using too many lazy operations?\nI add `(time` to some forms trying to find a bottleneck\ni will fix it :)\nhow do I `eval` a `fn` declaration and keep type hints? I can't get it to work. the expected result is that `(eval generated-fn2)` won't give me reflection warnings.\nhere's the problem on <http://repl.it|repl.it>, if someone wants to give it a go: <https://repl.it/repls/ExcitedDetailedRedundancy>\nResolved it using this issue: <https://github.com/pedestal/pedestal/issues/499>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1629",
    "text": "is this an implementation detail, or one can rely on it?\n`(map f coll)` returns \"chunked lazy seq\", which gets realized 32 elements at a time\n`(map f coll1 coll2 ...)` returns \"proper lazy seq\", when gets realized 1 element at a time\nNone\nchunking is always an impl detail\n(both its presence, lack of, or rate of)\n(I mean \"rely on the 1 at a time for 2nd arity\")\nok\nno (you can't rely on that either)\nso if I'd want the laziest seq, I should do proper lazy-seq implementation myself?\nyep\n```(defn unchunk [s]\n  (when (seq s)\n    (lazy-seq\n      (cons (first s)\n            (unchunk (next s))))))``` is usually how it's done\n`(-&gt;&gt; coll (map f) unchunk)`?\n(question came from reading lots of duplicated ~code~ effort here <https://github.com/dakrone/clojure-opennlp/blob/master/src/opennlp/tools/lazy.clj> )\n`(-&gt;&gt; coll unchunk (map f))`\nhm\nwhat controls the chunking is the input collection\nso in my example it is `range` who initiates chunks of 32?\ncool\nwell no\nTIL\nit's `map` who decides to iterate on chunks rather than els, based on the type of the input coll\nDoes it now? Maybe I'll just try that straight up then.\n<@Nisha> profiling: <https://github.com/clojure-goes-fast/clj-async-profiler>\nif you pass an \"unchunkable\" coll to map it will traverse it one element at a time\nthat's what `unchunk` does\n<@Nisha> Benchmarking: <https://github.com/hugoduncan/criterium>\nFor some reason I thought `clj` wasn't stable under Windows native.\nbeen using clojure on windows since beta, making artifacts that would later run on solaris etc\n```(defn map  \n([f coll]\n   (lazy-seq\n    (when-let [s (seq coll)]\n      (if (chunked-seq? s)\n        (let [c (chunk-first s)\n              size (int (count c))\n              b (chunk-buffer size)]\n          (dotimes [i size]\n              (chunk-append b (f (.nth c i))))\n          (chunk-cons (chunk b) (map f (chunk-rest s))))\n        (cons (f (first s)) (map f (rest s)))))))```\nYou can also use VisualVM\n<http://clojure-goes-fast.com/blog/profiling-tool-jvisualvm/>\nso map just checks, but not enforces\n`(chunked-seq? (range 30))` =&gt; true\n`(chunked-seq? (unchunk (range 30)))` =&gt; false\nthe newish clj tool has trouble on windows yes, i have a workaround for that... let me find it\nthe functions that \"understand chunking\" work by preserving the chunkiness\nso, follow the procedure outlined on the clojrue web site to install it on windows\nso if chunked-seq comes in, chunked-seq comes out\nthen in your project root put this file\nif normal seq comes in, normal seq comes out\nNone\nit will launch clj from a normal command prompt\nis there a way to know which (core?) fns return chunked seqs?\nusefull for some tools that go around powershell\n\"rule of thumb\" or something\nanyways depending on your workflow you might not even need it\nif you're not using deps.edn, no need\nor rather \"when would I want to return chunked seq?\"\nThanks, I'll try this. I use `deps.edn` exclusively, so I do need it.\n(Datomic Cloud)\nhave fun !\nwhy isn't `unchunk` - a core fn? is it because chunks are an implementation detail?\nyeah\nthere's really no good documentation on this, because you \"shouldn't be thinking about it, it's an implementation detail\" is the core position I think\non the other hand things might get expensive\nbe careful though\u2026 laziness is hard to benchmark because it also includes the cost of doing the work.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1630",
    "text": "\u00af\\_(\u30c4)_/\u00af\n:thisisfine:\nI can tell you that the current impl produces chunked seqs off of:\n- vector or their seqs\n- bounded integer range\n- Iterables that are not otherwise Seqable\n- the return values of `sequence` used with a transducer\n- the return values of `iterator-seq`\nand most of the seq functions (`map`, `filter`, `keep`, `for` etc) are \"chunkiness preserving\", while `reduce`/`trasnduce` \"understand\" the chunkiness of its input coll\n<@Lorenza> For connecting, I'm getting timeouts on the REPL connections (so the REPL server isn't answering, I'm guessing), even though I've added rules for both ingoing and outgoing TCP connections on the correct port in Windows Firewall. Do you happen to know if I would need to do anything else to open the ports?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1631",
    "text": "you're connecting to a remote repl ?\nYeah, but I'm an idiot. I forgot the configure `:host` and `:bind` for nREPL.\n(They default to localhost)\nhah ! anyways i never had to go remote like this so i couldn't help\nYeah I assume it\u2019s hard, because it\u2019s impossible to compare it to the non-lazy version, unless we have it implemented, which is hard again, and is the very reason why we implement the lazy version in the first place.\nYeah, I'm setting it up so that I can essentially use my laptop as a thin client to a much more powerful machine. But the laptop is still nicer to work on :slightly_smiling_face:\nYeah you really need two implementations\u2026 but a profiler can guide you to the right decision\u2026\n\nlazy sequences are usually fast enough though; but it depends on how much data you have going through them; and how many transformations you\u2019ve stacked ontop \u2014 and of course how fast you need it to be :slightly_smiling_face:\n\nA sign laziness is a problem is lots of GC activity; but that can also be caused by other things.  Also if you\u2019re holding onto the head of seq accidentally can cause a lot of memory pressure/OOMs etc.\nit uses the # of available processors + 2 <https://github.com/clojure/clojure/blob/clojure-1.9.0/src/clj/clojure/core.clj#L6941>\nRight. Well, that is 3 threads for the one processor then. I guess I have to look into other means of parallelization.\n3 threads for one processor?\nYes, there is one physical processor, albeit 8 cores.\nOr did I misunderstand what \"processor\" means in this context?\npmap should then use up to 10 parallel threads (or 18 if you you're talking about physical cores and have hyperthreading)\nit's a logical core as seen by operating system\ntypically on machines with HT, that means `2 * #physical cores + 2`\nAh, gotcha. Yes, 16 logical cores. Alright, so for some reason it only reached 4 physical cores. Something else is going on then.\nit may depend a lot on the type of operations you're doing. you might not get benefits you hope for just by running things in parallel In extreme cases, it may even be slower\nIn this case it's reading fairly large XML documents, extracting data, and doing transformations. `pmap`ing should be a pretty straightforward way of optimizing in my mind. Each document is fairly long-running.\nMaybe it's strangled by IO and I need to buffer some documents ahead of time.\nMaybe, but you may get a lot of IO or memory contention. As always, it's best to measure :slightly_smiling_face:\nBtw. for `pmap` this is the interesting line related to \"semi-lazy\" -&gt; it tries to stay ahead \"enough\" (factor `n`): <https://github.com/clojure/clojure/blob/clojure-1.9.0/src/clj/clojure/core.clj#L6948>\nin general, Claypoole is interesting alternative to consider: <https://github.com/TheClimateCorporation/claypoole>\nthat may be it, also i never end up using pmap bc they dont work with transducers and transducers are typically faster for me\nThe entire thing is lazy from start to end, with no transducers mixed in. It should be realized only on the accumulation of results outside of `pmap`.\n\nYep, `def`ing the `pmap` expression returns immediately.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1632",
    "text": "I've used Criterium to measure performance of running some data imports on my MacBook vs. my PC (PowerShell vs. WSL), and got these results:\n\n```WSL: 9.075001 seconds\nPowerShell: 5.753443 seconds\nMacBook: 12.337244 seconds```\n\nThings are better on the PC, but not as good as I expected (16GB 2017 MacBook vs. 32GB AMD Ryzen 2700X PC). Upon inspecting the PC, I notice that only four cores out of eight in total are utilised.\n\nThe function I'm testing is using a simple `pmap` to process things in parallel. Is there a limitation to `pmap` in only using four cores, or are there things I might need to tweak with the JVM?\n\n(Oh, and BTW, the tax paid by using WSL seems very high indeed)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1633",
    "text": "If you look at the source code for pmap you can see the expression it uses to determine the maximum parallelism: `(+ 2 (.. Runtime getRuntime availableProcessors))`  You can run that expression in a REPL on your system to see what the JVM considers that number to be.\nEven if it is `(+ 2 8)` or 10, pmap can only give good performance increases if a couple of things are true: (a) the work done for each element of the sequence is large, compared to the work required for the JVM to create a new thread, which is what pmap does for each element.  (b) Each element should take about the same amount of time to process.  If they take wildly different amounts of time to complete, then pmap limits the parallelism because it does not work more than a certain amount ahead of the last unfinished element.\nThere are other libraries, e.g. using Java's ExecutorService, that try to keep N threads busy at all times, which avoids issue (b) that `pmap`'s implementation has.\nI have not used it myself, but I believe this library offers some bit of Clojure API around Java's capabilities, but I have heard that several people go straight to Java interop for this, too: <https://github.com/TheClimateCorporation/claypoole>\nCool, thanks <@Latonya> (and <@Karren>, <@Olympia>). That might be the bottleneck in that case. The documents I process _are_ wildly different in size.\n\nI think the minimum time I've spotted for a single document is ~40ms for an outlier. Is this small compared to the cost of setting up a thread? If so, I guess I might need to chunk them into linear bits.\n\nEven then, it wouldn't load every core evenly. I guess I could try to organise them into chunks of roughly the same size.\nOr go with a threadpool solution.\nI suspect one could do a lot of fiddling to try to make `pmap` use its max parallelism as often as possible, whereas the thread pool solution would be likely to get you there with less fiddling.\nIf max parallelism was a relatively important goal for you.\nYeah, max parallelism is by far the easiest optimization I can do, as fiddly as it is.\nI'll look into the less fiddly versions though, that seems sensible.\nthe reason I don't use keyword params is because you can't pass them around as data\nYeah, as soon as you want to composite a fn with keyword params, it's caller is responsible for splatting out the options instead of just passing in some map it might have gotten from its own caller\n```\n(defn foo [big-ball-of-params]\n  ;; I have to peel each arg one by one off of the map\n  (bar :a (:a big-ball-of-params)\n       :b (:b big-ball-of-params)\n       :c (:c big-ball-of-params)))\n\n(defn bar [&amp; {:keys [a b c]]\n  (println a b c))\n```\nThat\u2019s what it was, composition. Tks folks.\nTo be fair you can still get there with apply, but as soon as your caller is drawing the keyword args from n&gt;1 maps your caller has a lot more to juggle.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1634",
    "text": "We were just discussing keyword parameters in <#C053AK3F9|beginners> , and I think I remember a conversation somewhere back a ways where people were saying there was a reason to prefer plain maps over keyword params. Can\u2019t remember what the reason was, though. Sound familiar to anyone?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1635",
    "text": "`claypoole` and some minor refactoring sees a good improvement: `3.416247 seconds` in PowerShell.\nIt's now keeping all cores nearly maxed out.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1636",
    "text": "isn\u2019t destructuring a little bit too forgiving in the `:or` here?\n```\n(let [{:keys [:a] :or {x 1}} {}] #_[a x]) ;; this is fine\n(let [{:keys [:a] :or {x 1}} {}] [a b x]) ;;=&gt; error about x\n(let [{:keys [:a :x] :or {x 1}} {}] [a x]) ;; works\n```\nMacroexpand it -- see what it expands to...\nyeah, the x in `:or` is ignored when it\u2019s not part of the previous symbols\nIt is the kind of thing a linter could warn about.  Eastwood has not implemented it, although I created an issue to remind developers about it a while back: <https://github.com/jonase/eastwood/issues/225>\nMaybe this one is related, too: Maybe this one, too: <https://github.com/jonase/eastwood/issues/157>\n<@Latonya> that\u2019s what I figured: <https://github.com/borkdude/clj-kondo/issues/214>\n(<@Marlyn> I saw you typing for a moment, if you have feedback on this, I would be happy to hear)\nmight want to lint on `(let [{:keys [patient/id order/id]}  value]...)`\nGIGO (seen in <#C053AK3F9|beginners>)\nsimilarly for `:syms`\nah I see, multiple keys with the same \u201cname\u201d part\ni mean, it would never get past simple REPL testing\n(ugh MBP keyboards)\nunless one of the symbols was unused\nyes, the idea of clj-kondo is that it catches errors before your REPL sees it, there is this interval in time where thoughts are transformed into sexprs into your buffer, but have not been evaluated yet\nthanks\nworks: <https://www.dropbox.com/s/zjbbgpvhx7fc70e/Screenshot%202019-05-28%2023.30.11.png?dl=0>\n<@Clarine> unused binding?\nthat particular binding is unused, because it\u2019s shadowed by the next one?\nthe message could maybe be clearer, I\u2019m all ears. this is the general message you get when you don\u2019t use a binding, e.g. in `(let [x 1])`\nthe detection mechanism is the same for all \u201cunused bindings\u201d but I could make a few tweaks here and there.\nthat link idea is nice, it\u2019s the same that shellcheck does, I might implement something like that\n(btw if you\u2019re not using shellcheck and write bash sometimes, it\u2019s lovely)\nI use such a small subset of bash's capabilities, that it is self-linting :slightly_smiling_face:\none thing that it should have linted but didn\u2019t: `if [ false ]; then ...`\n~I think that document answers a slightly different question~\nthe document answers the question, I misread\nBut not one at a time, they're realized in chunks. I thought this was the question.\nright, chunking means there's no guarantee of one at a time processing\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1637",
    "text": "Hey <@Jenny>, I just recently challenged myself to try and build a twitch chatbot during livestreams on twitch: <https://www.twitch.tv/upgradingdave>\nThere\u2019s also another clojure livestreamer here: <https://www.twitch.tv/rhonin52/>\nI try to stream every M, W, F 7:30 eastern time. If you\u2019re around, please stop by, love to have some help building the twitchbot!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1638",
    "text": "Maybe \"duplicate binding id\", if you can have a different detection and/or message for this case vs. an unused binding?\nI don't know if you maybe already have this for clj-kondo, but a short description or message, and then a link to a place you can get more details / examples / workarounds / etc., can be useful in explaining to users what is going on.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1639",
    "text": "if i reduce over a lazy seq, will the list get realized one at a time? e.g `(reduce ... (for [x (range 2)])`\nSee:\n<http://clojure-doc.org/articles/language/laziness.html#lazy-sequences-chunking>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1640",
    "text": "is this the only way to typehint \"strings array\"? `#^\"[Ljava.lang.String;\"` (not only strings, but array of any non-primitives)\n<@Fae> You can use `^{:tag (class (into-array TheType []))}`\nthank you, Sean\n<@Celestine> I get reflection warning with your method (in repl)\nShow your code...\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1641",
    "text": "Is there any reason syntax-parse style macros are not available on Clojure? They seem very convenient for a large class of macros.\n<@Felix> <https://clojure.org/guides/faq#reader_macros>\n```\n(set! *warn-on-reflection* true)\n(let [spans (into-array opennlp.tools.util.Span [])\n      s \"foo\"]\n  (opennlp.tools.util.Span/spansToStrings\n    ^{:tag (class (into-array opennlp.tools.util.Span []))}\n    spans\n    ^java.lang.String\n    s))\n```\n~damn, it has into~ same\n<@Celestine>: I'm no asking about reader macros. I'm asking about Scheme hygienic macros of syntax-case / syntax-parse.\ncursive does not disambiguate it either\n`^\"[Lopennlp.tools.util.Span;\"` and\n`#^\"[Lopennlp.tools.util.Span;\"` do work though\n<@Fae> Pretty sure `:tag` only works on vars, not locals or expressions...\nso I have to `def` spans for it to work?\nThat would work (but I know isn't ideal). I'm not sure what exactly you need to explicitly hint an expression with type expression... I'd have to dig in the compiler source I expect...\nI was curious if I could avoid string in a type hint, but it seems to be not worth it\nwhy there is no `array?` predicate in core? Is it useless to know the collection is an array without knowing elements' class as well?\n<@Fae> what sort of collection? Only primitive arrays have an inherent element type, right? Not any of Clojure's collections...\nlike the array of custom Spans from example above. This is mostly (or only) for interop with java/js\nthere is\n(.isArray (class (into-array String [])))\n=&gt; true\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1642",
    "text": "In cljs, `cljs.core/array?` does exist\nthanks, i\u2019ll check those out\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1643",
    "text": "Thanks to some helpful people here, I started using Claypoole yesterday (<https://github.com/TheClimateCorporation/claypoole>). I was delighted to notice that when I `reduce` over the results of `upmap`,  `reduce` is handed a result immediately when when `upmap` is done with it. It doesn't wait for the entire `upmap` expression to be done to do so. Feels like getting streaming for free.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1644",
    "text": "Anyone know of simulation tools (like simulant) that do something with time manipulation? E.g. <https://github.com/Datomic/simulant/wiki/Todo#variable-clock>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1645",
    "text": "When using namespaced keywords, is it possible to create a short alias when the namespace part of the keyword does not correspond to an actual Clojure namespace? I tried ```\n(alias 'dom 'my.awesome.app.domain)\n{::dom/greeting \"hello\"}``` but it fails with\n&gt; Syntax error ... Caused by: java.lang.Exception: No namespace: my.awesome.app.domain found\n<@Brent>\n```\n(alias 'bar (create-ns 'foo))\n\n::bar/x\n=&gt; :foo/x\n```\n(just in case: there is no `alias` in clojurescript)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1646",
    "text": "Has anyone ever faced such an issue with `lein-modules` lein plugin? <https://github.com/jcrossley3/lein-modules/issues/42>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1647",
    "text": "Hello. I'm often developing for Android and I was wondering: Is Clojure on Android dead, as of 2019?\nLast commit for lein-droid is from 3 years ago.\n<@Danita> Not exactly what you asked, but it's worth knowing that React Native + ClojureScript is often used to target Android.\n\n(I don't know the answer to the question you asked.)\nI used to develop a mobile app with re-natal, it worked well.\nI see. Thanks for the info.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1648",
    "text": "Hello, is there an equivalent to `clj-time.spec` in  `clojure.java-time`?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1649",
    "text": "does this function have a name? #(%1 %2)\n`invoke` if you're looking for a name, but it's not defined in `clojure.core`\ni see\nwhat is this time format?\n\"2015-09-27D00:01:48.788186000\"\nhow do i parse this with java-time?\nclj-time.coerce/from-string manages to parse it when I replace the D character with T!\nI still can't find a way to parse it with java-time though.\n<@Jeannette> I had the same problem, and I also changed the D for T to make it work, I\u2019m interested in knowing if you find a different answer for this , thanks!\nsure\nJust a guess: \u201cD\u201d for \u201cDaylight Savings Time\u201d?\nYeah, not finding any online references to a \u201cD\u201d in place of a \u201cT\u201d\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1650",
    "text": "that datetime doesn't have a zone on it, so it's unlikely to have random info about DST\n```\n(import java.time.Instant)\n(import java.time.ZoneOffset)\n(import java.time.format.DateTimeFormatter)\n(def fmt (-&gt; (DateTimeFormatter/ofPattern \"yyyy-MM-dd'D'HH:mm:ss.n\")\n  (.withZone ZoneOffset/UTC)))\n(Instant/from (.parse fmt \"2015-09-27D00:01:48.788186000\"))\n#object[java.time.Instant 0x121c54fa \"2015-09-27T00:01:48.788186Z\"]\n```\n<@Jeannette> simplest way to turn it into a java.time.Instant\n(if you want to anchor it at UTC)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1651",
    "text": "has anyone paid attention to the what the Elixir folks are doing with Phoenix LiveView? \ncan one specify mirrors in `.clj/deps.edn`?\nAFAICT the webpage basically opens a websocket connection to the server and the server handles streaming updates to the DOM based on user interactions \nI assume that this scales OK for Elixir because of it\u2019s ability to spin up thousands of light-weight processes to handle each page session\nI wonder if this would be tenable for Clojure\nGo threads should make it work\ni have a compojure/routing question. i've got a login process that reroutes to a certain URL, let's call it `/loginsuccess`, that should launch some work then redirect.\nso I have a function that does some work then returns `(response (redirect \"/\"))` to get to my original root-URL.\nbut now `/loginsuccess` ends up being used as referer, so it shows up in the browser as `/loginsuccess/#/browser-route` instead of `/#/browser-route`\nI just wonder how many concurrent sessions you\u2019d be able to handle per node\nI'll naively say it's the same amount, and someone can come tell me I'm wrong\nBut my understanding is that it's the same\nhaha\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1652",
    "text": "with how much people talk about BEAM, OTP and Erlang/Elixir\u2019s concurrency story I figured it must be better than using a thread pool\nGo doesn't though, go is a green thread\nif you\u2019re talking about core.async, I thought core.async is basically a state machine / scheduler on top of a thread pool?\nhonestly I\u2019m totally naive about the way both core.async and BEAM actually work so I\u2019m just going off of shallow readings I\u2019ve done about both\nRight, so I guess my question still is: how does core.asyncs green threads scale in this case compared to BEAMs processes?\nI wish someone had some benchmarks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1653",
    "text": "It is a state machine, yeah. But that is copied from the .net model for the same kind of thing. That's basically what green threads are I think.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1654",
    "text": "<@Jeannette> Now I\u2019m not sure what you\u2019re asking. IIUC, the `#(\u2026)` macro generates an anonymous closure. `invoke` is called on the resulting closure (`IFn`) when\u2026 well, invoked. Am I grokking the question?\n<@Zita> I was wondering what is the equivalent of the idea of (fn[f x] (f x)), if there is a core function that names it for example. I was not conscious that functions are implementations of an interface under the hood though.\nAh, yes. So to At the clojure level, `#(%1 %2)` just yields an anonymous closure `(fn [f x] (f x))` which implements `IFn`, as above. When the form is evaluated, `invoke` is called on the resulting `IFn` object.\nI'm trying to use jsonista custom encoders to emit epoch milliseconds when given a ZonedDateTime... anyone know why this isn't working? It's copied almost directly from the custom encoder example:\n```\n(let [encoders {java.time.ZonedDateTime\n                (fn [zdt gen] (.writeString gen (-&gt; zdt .toInstant .toEpochMilli str)))}\n      mapper   (j/object-mapper {:encoders encoders})]\n  (j/write-value-as-string (java.time.ZonedDateTime/now) mapper))\n```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1655",
    "text": "I guess jackson-databind which jsonista uses has its own date handlers, which seem unable to be overridden like this. Is there another way to override them easily or is this not meant to be done?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1656",
    "text": "How do I call `public static Path get(String first, String... more)` from Clojure? `(Paths/get \"mydir\")` fails because it invokes `get(URI path)`. There must be better way then `(Paths/get \"mydir\", (into-array String nil))`, no?\nwhy must there be?\nclojure's interop is generally more jvm interop then java interop, and varargs like that exist in java the language, not the jvm, where you must pass an array like that\n`T...` is Java's syntactic sugar for `T[]` at the JVM level -- which is what all non-Java languages have to interop with.\nTo add to Sean\u2019s comment: you can see there are two arguments required for the string kind unfortunately\n```(-&gt;&gt; (clojure.reflect/reflect Paths)\n                    :members\n                    (filter (comp #{'get} :name))\n                    (map :parameter-types))```\nthe second being the array\n:clap:\nregarding performance:\n```\nuser=&gt; (defn contains [t] (contains? #{:foo :bar} t))\n#'user/contains\nuser=&gt; (defn contains2 [t] (or (= :foo t) (= :bar t)))\n#'user/contains2\n```\nit seems that contains2 is ~twice as fast, although the idiom in contains is very common.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1657",
    "text": "<https://hashrocket.com/blog/posts/websocket-shootout>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1658",
    "text": "Hello all, is there any one that used `fn-fx` for JavaFX?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1659",
    "text": "Does anyone know how to set a custom entity resolver with `clojure.xml/parse`? I need to reroute online DTDs to local ones. Currently I'm rewriting the XML itself with regexes, which seems a bit non-idiomatic.\nit is clear, in first case it have to create additional set structure and search in it. But it is more readable and noone thinks about 2 times fast on nanoseconds\nmaybe Clojure optimizes the first case by creating the set at compile time? but maybe not\nNot sure about sets (they can hold values unknown on compile stage), but I guess that `case t` will most fastest way for this code\nor something like this:\n```\n(defmacro one-of [x elements]\n  `(or ~@(for [e elements]\n           `(= ~e ~x))))\n\n(let [x 10] (one-of x [1 2 3]))\n```\nyou can indeed also write: `(let [x 10] (case x (1 2 3) true false))`\nBut why you try to catch nanoseconds but not clear readable code with `some?` or using `set`?\ncase appears to be much faster:\n```\nuser=&gt; (time (dotimes [_ 10000000] (one-of :bar [:foo :bar])))\n\"Elapsed time: 221.057525 msecs\"\nnil\nuser=&gt; (time (dotimes [_ 10000000] (case :foo (:foo :bar) true false)))\n\"Elapsed time: 61.048416 msecs\"\n```\nAnd I am afraid that `for` macro also expands in a tremendous batch of forms\noh, I see, it will on compile time\nat load time, but yes\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1660",
    "text": "For my project, some modules are loaded from `~/.m2`, and some from `/var/maven`. How can I control the exact location (e.g. force all to load from `~/.m2`)?\nWhat kind of os are you using?\n/var/maven is a very non-standard thing, so either it is some setting in some tool you are using, or some non-standard packaging of some tool you are usig\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1661",
    "text": "Nix?\nyour maven config should be controlling where it looks for local archives\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1662",
    "text": "Is the clojure syntax indescernable from edn, or is edn specifically used in the context of serialization?\nEdn is for serialization. Clojure syntax is a superset of edn.\nedn is a string format\nyou can essentially change a clj file to edn and it's still valid?\nor does edn have some declaration standards?\nYou can change anything you edn and it's valid edn?\n<@Alease> I'm pretty sure there's things in clojure that the edn standard doesn't' accept\n#() is the easy one\nAlso ' behaves differently in edn\nhaha, just as I was about to paste this ```user=&gt; (clojure.edn/read-string \"#()\")\nRuntimeException No dispatch macro for: (  clojure.lang.Util.runtimeException (Util.java:221)```\nand java interop, yes?\n```user=&gt; (clojure.edn/read-string \"`(foo ~bar)\")\nRuntimeException Invalid leading character: `  clojure.lang.Util.runtimeException (Util.java:221)\n```\nWell, java interop is valid edn\nBecause symbols\nah you're right\ninterop seems fine ```user=&gt; (clojure.edn/read-string \"(java.util.Date.)\")\n(java.util.Date.)\nuser=&gt; (clojure.edn/read-string \"Math/PI\")\nMath/PI\nuser=&gt; (clojure.edn/read-string \"(. Math PI)\")\n(. Math PI)\n```\nanother big one: ```user=&gt; (clojure.edn/read-string \"::foo\")\nRuntimeException Invalid token: ::foo  clojure.lang.Util.runtimeException (Util.java:221)\n\n```\nedn can't have a current namespace, so auto-namespaced symbols don't make sense\nI kinda wish edn had a facility for namespaces :(\nit does, just not a \"current namespace\" ```user=&gt; (clojure.edn/read-string \":foo/bar\")\n:foo/bar```\nneat info, I wasn't sure, I was watching an older rich video and he ploped some clojure code and showed it as edn, so I wasn't sure if there was some connection outside of serialization to the language\nit's intentional that everything that is valid edn (or nearly so) is valid in clojure source (as syntax or literal)\nbut it doesn't extend to everything in the other direction\non the other hand, metadata (and the `^` metadata shorthand) does work on edn, and transfers to the read value\n```user=&gt; (clojure.edn/read-string \"^:foo []\")\n[]\nuser=&gt; (meta *1)\n{:foo true}```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1663",
    "text": "Hello all, how can I translate this to clojure?\n```table.setOnMousePressed(new EventHandler&lt;MouseEvent&gt;() {\n    @Override \n    public void handle(MouseEvent event) {\n        if (event.isPrimaryButtonDown() &amp;&amp; event.getClickCount() == 2) {\n            System.out.println(table.getSelectionModel().getSelectedItem());                   \n        }\n    }\n});```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1664",
    "text": "I ran into a weird issue just now where I was wrapping `with-redefs` in a `fn`. When I tried to execute the function, the `with-redefs` would _fail_ for a function that I was rebinding but _succeed_ for an atom that I was rebinding. After relocating `with-redefs` so that it wrapped the `fn` instead, everything works.\n\nI'm actually struggling to put this into a toy example, for whatever reason.\n\nClearly there is something going on I don't understand. Just wondering if there is any obvious \"gotcha\" that I ran into.\nregexes and `#'var`\nI also miss regex (in config files)\nwas the fn called by something lazy that might escape the context of the with-redefs form?\ni don't think it would be evaluated lazily. here's what was calling `fn`:\n\n```(defn with-props\n  \"Temporarily rebinds props and calls `f`\"\n  [props-map f]\n  (let [old-props (atom {})]\n    (doseq [[k v] props-map]\n      (swap! old-props assoc k (.getProperty props/properties k))\n      (.setProperty props/properties k v))\n    (f)\n    (doseq [[k v] @old-props]\n      (.setProperty props/properties k v))))```\nand where is the with-redef? - oh it's inside f\nbasically i had been calling\n\n```(with-props {} \n  (fn [] \n    (with-redefs [my vars]\n      (do-stuff))))```\nyeah, my question was if any of (do-stuff) might be lazy, or otherwise execute after with-redefs exits\n(eg. if it uses other threads)\noh. that's exactly what it is :slightly_smiling_face:\nwas writing to a channel, and the consumer of the channel had the var i was trying to redef\nof course\nalso - with-redefs is a really blunt tool - it's redefining those vars in all your other threads!\nif two threads both use with-redefs, you have a race condition that could lose the original pre-redef values\na (grabs bindings)\na (stashes bindings)\na (sets bindings)\nb (grabs bindings)\na (resets bindings)\nb (stashes bindings)\nb (sets bindings)\nb (\"resets\" bindings)\nthat last step actually sets the bindings from a, not the original bindings\nI wouldn't use with-redefs outside tests, and even then I'd be sceptical\n(that is, if your tests use threads at all it's still likely to cause problems)\nfortunately it's (mostly) single threaded test code, but point taken\nat the end of the function body for multi-arity\n```user=&gt; (defn foo ([]) {:extra true})\n#'user/foo\nuser=&gt; (-&gt; #'foo meta :extra)\ntrue```\nsince there's no single argument list to put the meta on\nerr.. but a hash-map before the function bodies also works ```user=&gt; (defn bar {:also :OK} ([]) {:extra true})\n#'user/bar\nuser=&gt; (-&gt; #'bar meta :also)\n:OK\nuser=&gt; (-&gt; #'bar meta :extra)\ntrue```\nso those are the normal hashmaps as metadata, but in which positions can people put metadata? `(defn ^String bar ...)`, `(defn bar ^String ([] ...)`? I\u2019d like to have a comprehensive overview\nmetadata can be expected anywhere\ngood point :slightly_smiling_face:\ntype hints (a specific kind of metadata) can only go certain places\nand only certain metadata is copied from the read forms to evaluated obejcts\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1665",
    "text": "where can I find in which places in `defn` or `fn` metadata can be expected? on the fn name, on arguments\u2026 where else?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1666",
    "text": "Hi! Could someone explain to me why `(every? vector? nil)` evaluates to `true`?\nLike, does it make sense <https://github.com/clojure/clojure/blob/e72ffdcd039189e3fe230d160e093ae6ba8f24cf/src/clj/clojure/core.clj#L2680> ?\n<@Zenaida> \"is every member of an empty set a vector?\" - this is considered true in classical logic\ncolloquially you can think you need a counter example to disprove the universal. There are no counter examples in empty collections.\nhmmm nice! thanks for the clarification!\nAnyone got any preferences for picking things out of parsed xml these days? I like the look of the approach in <https://juxt.pro/blog/posts/xpath-in-transducers.html> but there's no library there or anything, just some notes - wondering if maybe there's something out there now\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1667",
    "text": "Hi, is there a something equivalent to GOPROXY in maven for fetching dependencies. In our CI whenever it tries to build a jar it fetches the dependencies every time from Clojars.\nBut to build up m2 it will still fetch it from clojars right,\nOnly the first time\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1668",
    "text": "It sounds like using docker without keeping your .m2 cache between builds, so persist your m2 between builds\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1669",
    "text": "maybe try spectre\nI use `clj` with powershell\nit seems fine?\nI want to read a long file, processing the lines, without keeping all of it in the memory. Is there a nice way to ensure the resource is closed once the whole line-seq is consumed? I guess I could wrap the processing in a transducer as they have the 1-arg \"completion\" arity... Thoughts? Thanks!\nthis might help, its from data csv but it might apply to whatever you are doing <https://github.com/clojure/data.csv#laziness>\nThank you. The proposed solution - move with-open up - is usable but not as nice :)\n<@Brent> I've had success with things like\n```\n(defn csv-maps\n  \"generic low overhead way to turn (massive) csv file\n   into lazily evaluated stream of maps\"\n  [ff &amp; opts]\n  (reify clojure.lang.IReduceInit\n    (reduce [_ f init]\n      (with-open [^BufferedReader r (jio/reader ff)]\n        (let [hdr (first (apply csv/read-csv (.readLine r) opts))]\n          (transduce (map (partial zipmap hdr))\n                     (completing f)\n                     init\n                     (apply csv/read-csv r opts)))))))\n```\nyou can `reduce` over that and you get maps of the row data\nThank you! Does it close properly when there is an exception during the processing?\nyeah the `with-open` should take care of that\nit expands to a\n```(try\n...\n(finally (.close\n```\nThanks!!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1670",
    "text": "Anyone here have experience with Clj on Windows through PowerShell versus Windows Subsystem for Linux?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1671",
    "text": "is it correct that you can never see two sequential reader macros?\nI don't think it is, I have never seen it done, but I believe that is supported behavior\nsorry, no, I am thinking of tag literals\nfor reader macros, you can for exmaple, do things like #_#'+\nah i think i am more precisely talking about tag literals. `#js`, `#uuid`, etc\nyeah, tag literals stack\nmakes sense i suppose. its just function composition, yes?\nwell sure, but the way the reader works it is basically \"read the next form and hand the read result to this function\", and if the next form is also a tag literal it just does that again\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1672",
    "text": "Aero configs use this a lot\nI suspect the reason you\u2019re not seeing a lot of answers to this question is that it is a non-specific question about some code with no context or explanation. If you could be more clear about what specific parts you are having trouble with, it would be easier to help. After a bit of research, it looks like you are using JavaFX, which I never have, and I don\u2019t know if anyone else on this channel has either. Because of that, I am not going to be able to put together a test environment to really try out my answer, which means it will likely contain mistakes. But with that caveat, and assuming that you are asking how to express that code using Clojure Java interop syntax, it would be something like this\u2026\nFirst, I am assuming you have your table object in a Clojure local `table`.\n```\n(.setOnMousePressed table\n  (proxy [javax.event.EventHandler] []\n    (handle [event]\n      (when (and (.isPrimaryButtonDown event)\n                 (= (.getClickCount event) 2))\n                 (println (.. table getSelectionModel getSelectedItem))))))\n```\nThat\u2019s not the indentation/line breaks I would really use but I adjusted it to be more readable in the narrow thread window.\nTo more closely parallel your Java code (and avoid some reflection), you could type hint the `event` parameter, which would look like `(handle [^javafx.scene.input.MouseEvent event]` \u2026)\nAnd you could shorten this code by importing the `EventHandler` and `MouseEvent` classes in your Clojure namespace so you would not have to fully-qualify them in your code.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1673",
    "text": "Using the build in `clojure` cli is there a way to make it download all the deps? The equivalent of `lein deps`?\nwith the clojure/deps.edn ecosystem, is there a good reason to stuff a project with multiple components (let's say server/client binary) that don't make sense separately but are developed mostly in tandem in 1 deps.edn file or multiple?\nI ask  because i've currently done that with leiningen and hit a whole bunch of long-standing profile-related bugs\njust running `clojure` alone will download the deps declared in deps.edn\nthat will start a repl\nif you don't want that run `clojure -Spath &gt; /dev/null`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1674",
    "text": "Thank you \n<@Marlyn> what does -Spath do?\ncomputes the classpath\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1675",
    "text": "<@Rossie> in JUXT/edge we use separate deps.edn files, and then use :local/root to pull them together.\nOn client projects (this hasn't been demo'd too much) we have designed extensive setups where the configs are factored out to make it easier to pull applications together this way.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1676",
    "text": "i\u2019m using http-kit to write a simple API server. does anyone know how to add SSL support to it directly with Clojure? by directly I mean without using an external reverse proxy (like nginx) or SSL terminator. Internal ones (i.e. inside the JVM where I could control with Clojure) are perfect\nthe reason i\u2019d like to have control over the SSL part is because the API server is a test server for a custom SSL client on MCU, and we want to be able to generate new SSL certificate and have multiple SSL sockets listening with different certificates (for testing successful cases and unsuccessful cases)\ni\u2019ll try jetty for now but if anyone has better suggestion it would be great\nThis still sounds like a perfectly doable thing with nginx or other proxy: <https://stackoverflow.com/a/38054382/1184752>\nyeah sure i\u2019m using a configuration like that for the production server but this is for the testing server and would like direct control over ssl configuration (including certificate generation) directly from the Clojure codebase\nthat\u2019s a great note. this file has many interesting snippet:\n<https://github.com/pedestal/pedestal/blob/09dd88c4ce7f89c7fbb7a398077eb970b3785d2d/jetty/src/io/pedestal/http/jetty.clj>\nnot sure who else is interested but i may post a gist after cleaning the code a little bit another day\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1677",
    "text": "The pedestal codebase might have some ready-made code you can either use directly or copy-paste \nfor anyone who\u2019s curious, i finished the exploring and got a working piece so far by using\n- Bouncy Castle to generate a keypair and a self-signed certificate\n- a KeyStore instance of type \u201cpkcs12\u201d to hold the certificate + private key\n- Jetty with a ServerConnection configured with a SslConnectionFactory and a HttpConnectionFactory to finally get a running server\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1678",
    "text": "where do you host your stuff ?\nif on amazon i would recommend using alb or elb instead of doing the ssl stuff yourself ... yes it costs a little extra but is well worth the money\neven locally, an nginx reverse proxy can alleviate lots of that pain\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1679",
    "text": "Could you have a look, is this solution good enough, or am I misusing protocols this way?\n\nThe problem: I have a code that reads/writes things to a serial port. There are places in program where a number of reads/writes is expected to be finished by a specific deadline (protocol description contains phrases like \"if the whole data frame was not received within 1500ms, application should stop receiving it and return to idle state.\") I have tried to weave the operation deadline through reading/parsing routines (the data frame cannot be read in one operation, as it contains embedded lengths), but it was awkward. At the end I bound a `deadline` to a port object. (edited: moved `read-byte` out of interface)\nHello guys\nhow can i embed values into xml files in clojure?\nsomething like erb in ruby for example\ni guess i found <https://freemarker.apache.org/>\nif someone interested too :slightly_smiling_face:\n<https://github.com/yogthos/Selmer> also\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1680",
    "text": "Are `#`, `%` and `&amp;` valid characters in a Clojure(script) symbol? I couldn't find an official language spec, and the rules given in <https://clojure.org/reference/reader> seem overly restrictive\n```\nSymbols begin with a non-numeric character and can contain alphanumeric characters and *, +, !, -, _, ', ?, &lt;, &gt; and = (other characters may be allowed eventually).\n```\nThe rules given at <http://clojure.org|clojure.org> are what is explicitly supported.  The implementation does not prevent you from using other characters, but using some of those other characters can cause some use cases to break\nIf you are looking for an implementation of (symbol \"some string\") or (keyword \"some string\") that throws an exception if you give it a character that is outside of a particular set of characters, you will have to write it yourself or find it in some third party library.\nDoes that mean that using e.g. `a#b$c` as a variable name could potentially be broken in a future release of Clojure?\nI am not the decision maker on what changes in future releases of Clojure, so can't authoritatively answer such a question, but I can say that the Clojure maintainers do a great job at maintaining backwards compatibility, and rarely make changes that break such things.  They know that because the implementation allows other characters, that many people take advantage of htat.\nBut for example if you find that using such a variable name causes, say, printing your code or data to a file, then reading it back, to break, then if you are using characters outside of the allowed set, and that is the reason it is breaking, you will likely not get a lot of people rushing to change Clojure to make that work.\nFor example, if you use a space in a symbol or keyword, that will break the ability to print code/data and read it back and be equal to the original.\nthat makes sense, spaces are definitely off-limits\nThere is a Clojure JIRA issue that suggests some kinds of actions in this area -- I am forgetting whether it was only adding more documentation for Clojure, or adding a function that would check whether a proposed string was a supported symbol/keyword\nSemicolons would be another thing that might be a bit grey in terms of print-read round-tripping.  Probably many others.\ncommas\nYou can easily extend printing and reading though. I've added support for spaced namespaces and symbols in some use cases where it was convenient\nI was wondering because clojure-mode in Emacs highlighted a variable name `foo#bar` wrongly, and I couldn't find out if it was an actual bug or according to spec\nAnd it can round-trip if you need it serialized\nHere is the JIRA issue I was thinking of: <https://clojure.atlassian.net/browse/CLJ-1527>\nI don't think I've ever seen a breakage related to what are valid symbols and namespaces. Like no version of Clojure ever broke that.\nSo I'd say, it it works, you're probably good to go\nBut if you go to significant lengths, e.g. days and days of work, trying to get color highlighting \"working\" (whatever that means to you) for arbitrary sequences of characters, you may go mad. :slightly_smiling_face:\nthanks for the clarifications! :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1681",
    "text": "Is it possible to use tools.reader to read a form as a string? Preserving whitespace. I'm guessing there might be some trick with the pushback reader, but not sure.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1682",
    "text": "Yes, also in the Clojure reader\nSee <http://clojure.github.io/clojure/clojure.core-api.html#clojure.core/read+string>\nThis is a known issue, but using R and C should be a workaround\nA will always be applied last right now\nah, gotcha -- thanks :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1683",
    "text": "I'm running: `clj -A:cli:client -m aot some-args`\nthe `client` alias has both an `:extra-deps` and a `:main-opts`. I was expecting the main-opts on the command line to override those from the alias, but instead the main-opts from `:client` are used. Is there an order to specify them in that fixes that, or is this why -R/-C exist?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1684",
    "text": "locally, for testing purpose\nyeah, for another project i\u2019m doing exactly the same--using elb for ssl termination--yet this stuff is for developing and testing the \u201chardware\u201d part of a solution (an MCU controlled gateway-ish thing that connects an input device to the application server running in the cloud)\nso finally the production server will be hosted behind elb as planned now, but i was trying to make the local server and want more flexibility on certificates for testing purpose\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1685",
    "text": "How would I quote the symbol `/=` ?  `'=` is fine, `'/` is fine, but `/=` says `unmatched delimiter: )`.  Do I need to escape the slash or something?\n```\n[dan@fedora datascript-todo]$ clj\nClojure 1.9.0\nuser=&gt; (quote \\=)\n\\=\nuser=&gt; '\\=\n\\=\n```\ni'm guessing this is an issue with your repl?\nThat's backslash, I was trying with forward slash\noh apologies\n&gt; /' has special meaning, it can be used once in the middle of a symbol to separate the namespace from the name, e.g. my-namespace/foo. '/' by itself names the division function.\n<https://clojure.org/reference/reader>\nthat's not a valid symbol is what i'm reading there\nyeah even this doesn't work: `(read-string \"/=\")`  =&gt; `invalid token: /=`\nin jvm clojure i get Syntax error for (def /= 1)\nin clojurescript i get Failed to read\nso i'm making a toy library for array syntax to learn macros\nand was trying to support e.g. `a[0][1] /= 2`\nbut I can't define a symbol `/=` to recognize\nperhaps because / is used for &lt;namespace&gt;/&lt;name&gt; like situations?\nyeah just not sure how to work around it\nperhaps there is no workaround\nnot sure you can. same as you can't make `bob)` a symbol\nI guess I'd have to recognize it as a string\nlike turn the list body into a string and parse it\nif you're breaking in the reader i'm not sure you can do that\nI think I could turn the body into a string and find `/=` in the string and handle it accordingly\nunless you mean turn it into a string literal\nbut it would probably mean I'd have to do all the other cases (e.g. `*=` the same way) :confused:\nIf you are trying to \"write a language\" with Clojure macros that has the full library of Clojure available as well, then I'd recommend using a different symbol than `/=`, e.g. `div=`, even if that looks ugly.\nIf you are trying to write a language with its own custom syntax, and you are writing a compiler in Clojure to translate it into some other language that isn't Clojure, then you should be able to define whatever syntax you want that you can write a parser for.  I am guessing that is not what you are trying to do, though.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1686",
    "text": "Checking for a non-empty collection, `not-empty` or `seq`?\n`not-empty` is just `(when (seq coll) coll)`, so `seq`\nalso `empty?` is implemented as `(not (seq coll))` which is why complementing it again with `(not (empty?))` is also not idiomatic\nassuming you're just checking for non-emptiness, `not-empty` is still useful for `conj` purposes for example\nThis is just to short-circuit a function, so I'm looking for the thing that will do the least amount of work possible. Sounds like `seq`.\nit's the recommended idiom for testing non-emptiness on any collection, yes\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1687",
    "text": "I believe that many Clojure programmers consider (seq coll) as idiomatic for this purpose.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1688",
    "text": "for counted collections, `(zero? (count coll))` should be faster (`seq` will allocate an object if non-empty)\n`seq` basically just returns an iterator though doesn't it? it doesn't do anything besides that, like attempting to convert the sequence\nWhich collections are counted?\n`seq` wraps the collection in a lazy sequence if not already one. If you call it on e.g a vector, it will coerce it and create a sequence. It's cheap, but not totally free.\n<@Ali> eager collections are counted\nsome lazy seqs are counted as well but I would not rely on that\nSome measurements <@Latonya> <@Alleen>\n\n```;; list \n(seq a-list)           ;; 18,208247 ns\n(count (zero? a-list)) ;; 11,566028 ms\n  \n;; Vector\n(seq a-vector)           ;; 14,460552 ns\n(zero? (count a-vector)) ;;  5,665201 ns\n  \n(defn yo? [a-something]    \n  (if (vector? a-something)\n    (zero? (count a-something))\n    (seq a-something)))\n  \n;; Conditional\n(yo? a-list)   ;; 29,218636 ns\n(yo? a-vector) ;; 22,279887 ns```\n`(zero? (count \u2026))` appears to be faster for counted collections indeed.\n\nEdit: Actually, rereading the numbers, using `seq` is better than a conditional check. Therfore, `(zero? (count \u2026))` only when it's certain to be a counted collection.\nThis is for a fairly large collection of about 200k items.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1689",
    "text": "BTW `counted?` exists\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1690",
    "text": "Hi, I'm trying to slowly convert some of my company on to Clojure. Do you have any good data on language adoption over the years?\nHow did you measure that?\n<@Karren> `(criterium/bench \u2026)`\n\n<https://github.com/hugoduncan/criterium/>\ncool thanks\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1691",
    "text": "this may be relevant (including survey data) <https://clojure.org/news/2019/02/04/state-of-clojure-2019>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1692",
    "text": "<@Alleen> Remeasuring with `counted?`, it seems to make a surprisingly large difference for the conditional evaluation:\n\n```(defn yo? [a-collection]\n  (if (counted? a-collection)\n    (zero? (count a-collection))\n    (seq a-collection)))\n\n;; Conditional\n(yo? a-list)   ;; 25,774480 ns\n(yo? a-vector) ;;  9,714775 ns```\nYou could also do `(bounded-count 1 xs)`\nempty? may get a counted? check in 1.11\nhow did you build `a-list` ?\nCool! Doesn't really help in situations where `seq` is idiomatic though.\n<@Min> Interesting, didn't know about that one. I'm getting these numbers:\n\n```(zero? (bounded-count 1 a-list))   ;; 54,374905 ns\n(zero? (bounded-count 1 a-vector)) ;; 14,014822 ns```\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1693",
    "text": "`yo?` seems slightly more efficient than `bounded-count`.\nThese things do make a difference. Using `(zero? (count \u2026))` instead of `seq` (I know I'm working with vectors), I dropped the running time of a function from 3.41 seconds to 2.37 seconds (for a computation where I know the evaluation sits in a very hot path).\nI guess you could try also `(nil? (first xs))` since we're having fun with this stuff\nas long as your collection has no nils\nwell it will just call seq on it so might not be so good with vectors, so yeah prolly useless\nwhy are you even checking for a non-empty collection in the first place?\npretty much the only place I ever do this is when loop/recuring through a sequence (in which case you are forcing the seq anyways with first/rest)\nthat yo? function above returns either true/false/nil/seq which seems like a mess\nwhat is the type of the thing being returned that you are checking?\nit's the default prefix for static methods to genclass\nthere\u2019s no special meaning as such it\u2019s just the default option for genclass\nbut that can be changed with an option to genclass\nThe XML documents are in JATS format which is a right mess of data-meant-to-be-read-as-metadata, data-meant-for-display, and data-meant-to-simultaneously-work-for-display-and-metadata.\n\nMy solution (which is probably suboptimal to begin with, but nevertheless) essentially invokes different parsers for different branches, that might return more data to be processed by a different parser and so on (because a \"display\" section, which I turn into hiccup, might return some forms that also needs to be read into proper named fields and so on).\n\nAs a side effect of this solution, parsers return a collection that might or might not be empty. To avoid looking for another parser for nothing, I kill the branch at that point.\nwell, in general, it's better to avoid making the empty collection in the first place if you can avoid it\nthat's why clojure collection functions are polymorphic on nil\nconj, assoc, etc\nyou don't need nil?, you can just use the value itself as a logical value\nwhich is either nil or not\n(if (parse ...) branch-when-parsed branch-when-nothing)\nBefore `(parse \u2026)` there's a lookup to find the correct parser, which reside in a map currently. I'm guessing that's the bottleneck that I'm circumventing.\nInvoking `((get {\u2026} nil) data)`, which resolves to `(nil data)` isn't great, so at some point I have to shut things down before it gets to that.\nAnd it seems to be more performant to shut it down before `(get \u2026)` than on receiving `nil` from the index.\nwhy would you not find a parser?\ncould you return a default \"not-found\" parser that did the right thing?\n((get parser-table nil not-found-parser) data)\nmake the special case not special\nYeah, true, I could do that. `not-found-parser` would return `nil` no matter what. Do you reckon that would be better than checking for emptiness?\nyes\nAlright, I'll give it a shot!\nthis is all general advice applicable in many places...  don't make empty collections, lean on polymorphic collection append functions, use identity/nil as a predicate, etc\nseq is a good predicate when doing seq things. you're not doing seq things.\nthe code above will be smaller, more readable, and more performant\nI'll try it out and measure. Thank you. I haven't internalised the nil case into my collection of idioms like this. It's a good a time as any.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1694",
    "text": "Parsing XML. I use it to halt evaluation early when a previous step in the parser produces no data of interest.\n\nIn practice it does make a difference in performance, and choosing the right way to evaluate whether data is present or not seems to make an additional difference.\nBut also, it's just fun to learn the performance implications of the different alternatives. I didn't initially expect this line of investigation to yield much of interest.\nConsistently return nil and use `nil?`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1695",
    "text": "I seem to remember that the `-` in `-main` has a special meaning, but I\u2019m not able to google it ATM. Anyone have a link to more info about this?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1696",
    "text": "Hello all, is it worth to use <https://github.com/daveray/seesaw> yet?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1697",
    "text": "Use <#CGHHJNENB|cljfx> <https://github.com/cljfx/cljfx>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1698",
    "text": "Hi everyone! What scheduler do you use in your Clojure projects? I am looking for something robust and reliable, like Celery for Python. I found several libraries but from the repos not one specific one was preferred more than others.\ndo you need persistent and distributed scheduling?\nif no, use a ScheduledThreadPoolExecutor via interop\nif yes, I think the only really mature and reliable option is quartz, there's some pain points in using that java lib via interop, so it's worth considering the quartzite wrapper\n(if you use a specific infrastructure tool like mesos, the built in scheduling there is an even better bet, but that's going to be highly dependent on your other infrastructure decisions)\nI haven't yet used mesos but seems cool. I am just making a small ETL tool that's probably not mission critical. I saw this as an opportunity to test out Clojure for this :smile:\nif you don't need distribution (if all your threads can run in one process, which is likely true with a small ETL tool), the ScheduledThreadPoolExecutor is much simpler and easier to use and comes with the JVM. You can persist state between restarts via a normal DB.\nthere's that funny thing with python where the limitation of the GIL means that any tool that needs more than one thread probably ends up being fully distributed, but with clojure threads are easy to use and you can save a lot of complexity if you don't need to be distributed\nTrue. Being a back end engineer for like, forever, I never felt the need to go around the GIL. May be now it would actually be a problem for the data engineering tasks I would likely need to do.\nwhat I mean is that N threads inside one process is much simpler, and better performing, than a distributed multi process solution; though maybe you don't even need threads here\nGot you! Thanks for the suggestion!\nIt provides a nice interface. But tradeoff is that it\u2019s an extra dependency. And ScheduledThreadPoolExecutor is probably way more battle-tested.\nThanks <@Fatima>! tea-time seems pretty intuitive! I will try it :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1699",
    "text": "I\u2019ve used this for simple task scheduling cases <https://github.com/aphyr/tea-time>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1700",
    "text": "Another Quartz wrapper can be found in Immutant:   <http://immutant.org/documentation/current/apidoc/guide-scheduling.html>\nHaven't used yet, was going to use it soon.  Now I need to check out tea-time too :wink:\nyou can find some others on the <https://www.clojure-toolbox.com/>\nunder Scheduling\ndoesn't sound familiar to me re 1.10 error reporting\nrepro? fuller msg? environment?\nRC1 is identical to beta2 (other than updating the changelog)\nthis is in the compiler analyzer, when trying to analyze a symbol in a form\nto get here, it's a qualified symbol, the namespace is found (here, sut), but when it looks up the var, there is no such var in the ns\nif it's failing sporadically, you may be fighting a concurrent load issue with the namespace where it is in the process of loading\nI've seen something like this with spec gen where it dynaloads test.check.generators - if you've got two threads potentially loading the same namespace at the same time, you can get spurious errors like this\nwhy do you think the reporting is wrong?\nThanks for the analysis!\n\nFWIW I could find <https://github.com/benfb/gorilla-repl/issues/10> which seems similar (:compile-syntax-check + `no such var`).\n\nIn my repro I don't use a special Lein, any profiles, etc. It also fails in our CircleCI which is a vanilla one\n\nThe concurrent loading thing seems possible (although I have 0 dynamic loading)\n\n&gt; why do you think the reporting is wrong?\n\nFirst and formost because the var is _there_, the ns form is correct, etc. It's known-good code, used in various projects.\n\nUpgrading an unrelated tiny dependency  (which in fact is only used in _test_ code!) triggered the error.\n\nAnd the reported error does not include the name of this dependency at all. That makes me think the reporter is wrong - a correct one would point in the direction of the dependency, rather than suggesting that the main project has an undefined var\nClojure reader accepts more syntax than EDN but almost all of that is just syntax sugar and after read becomes data that can be put in EDN (excluding `#=()`). Rich Hickey mentioned this in one of his talks AFAIR, emphasising the fact that `eval` deals in data structures and not text, and the LISPs give users the ability to extend the language by participating in this `eval` right after reading.\nClojure for Java Programmers part 1 if memory serves me right.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1701",
    "text": "If you don\u2019t have JavaFX or are more familiar with Swing, seesaw remains quite useful. It\u2019s the basis of my most-used project: <https://github.com/Deep-Symmetry/beat-link-trigger#beat-link-trigger>\nAnyone familiar with getting spurious `No such var` errors?\n\nMight have to do with Clojure 1.10+ error reporting\n\nHard to verify since this project uses 1.10+ fearures, so I can't tentatively downgrade so easily\nknown-good code/project is compiling fine on:\n\n1.10.0\n1.10.1-beta2\n\nand failing with `[org.clojure/clojure \"1.10.1-RC1\"]`, 100% of the times\n\nit also is failing occasionally with 1.10.0\n/ 1.10.1-beta2 with the same error, but I can't find what causes it\n\nstacktrace doesn't appear to say much: <https://gist.githubusercontent.com/vemv/3fd022882c9b2533fb3d669df8bcfc48/raw/56a711137778b25f6c1710721c2b9b8c4ce016ff/gistfile1.txt>\n\nproject will be open-sourced soon. TODOed to provide a repro\nThanks. Now I have found the true culprit: updating a certain dependency.\n\nBut still I don't know the cause of the error at all, and the reporting from the compiler side is wrong, that seems for sure.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1702",
    "text": "is there a way to tell leiningen to have a profile which ignore some files in `src` and dependencies?\nI'm not sure, but `:exclusions` is not about it?\nI'm not sure but I'll try, thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1703",
    "text": "Hello guys, anyone familiar with clojure machine-head? Trying to connect to Azure Iot Hub, but getting this error: `Execution error (EOFException) at java.io.DataInputStream/readByte (DataInputStream.java:267).`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1704",
    "text": "Hi! Say I intentionally `throw` during testing but don\u2019t want the stacktrace in the test output is that possible somehow (w/ `lein test`/`clojure.test`)? hope that makes sense?\nThere's `(is (thrown? ArithmeticException (/ 1 0))) ` and ```\n(is (thrown-with-msg? ArithmeticException #\"Divide by zero\"\n                      (/ 1 0)))``` as part of `clojure.test`. Mentioned here <https://clojure.github.io/clojure/clojure.test-api.html>\nHope that helps!\nah yes! thanks <@Andrea>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1705",
    "text": "Is there a guide or tutorial or some kind of explanation to why we should use `seq` for non-empty checks? I feel like I'm missing something, because semantics of `(not (empty? ...))` are clear, and semantics of `seq` requires deep knowledge of it's behavior and truthiness semantics... Which I know, but don't understand why it is advertised as preferred approach. I also remember there where some discussions on slack awhile ago where Alex Miller suggested to use nils instead of empty vectors, and just use `(when xs ...)`, and I'm interested to know why is this approach considered better, because without this check you might get surprising behavior when conjing will add to beginning instead of end\nI kinda agree. I saw that <@Marlyn> mentioned that `empty?` might get a counted check in the future in which case `(not (empty?` will be necessary again. It feels like `seq` is kinda using the implementation details of `empty?`\nthe reason that `(seq x)` is preferred over `(not (empty? x))` is because `empty?` is implemented as `(not (seq x))`\nso `(not (empty? x))` is just `(not (not (seq x)))`\nright. which was my point about implementation details leaking out. When empty? gets more complicated looking at `ICounted` then using implementation details is bad, no?\nimplementation details?\nI don't buy not-not argument, it's implementation detail\n<@Roslyn> yeah, I don't really either\nI just know that's a reason that is often given\n<http://clojure-log.n01se.net/date/2009-02-19.html#10:24a> has some discussion that rich eventually jumps into\ni don't understand this at all\n`empty?` is defined as `(not (seq ..))` now so the common convention for \"not-empty?\" is just `seq`. My point is that this is true because we know the implementation of `empty`. In the future, if `empty?` were to be optimized by checking `ICounted` the idiom of just using `seq` would both miss the optimization of `empty?` and not have an obvious semantic as \"not-empty?\" any longer\nit would check for counted, then do the existing impl\nwhat is the optimization of `empty?` ?\npresumably a check that if it can be counted its count is 0\nit's not intended as an optimization, but something so that empty? can work on transients\nmy suggestion to <@Roslyn> earlier is primarily due to the use case in that context - the stuff he is doing is collection stuff. In that case, lean on nil and polymorphic collection fns and avoid using empty collections at all. If you're in more of a seq context, then lean on seq.\nin general in Clojure avoid making stuff to hold a \"place\" - if you do that Clojure's design will lead you to code that is simultaneously easier to read, has fewer branches, and is more performant.\nthis applies to putting nil values in maps (just omit), making empty collections (conj or assoc into nil instead), etc\nthat seems to argue in favor of using `(not (empty? ..` on transients then if the standard idiom `seq` is not sufficient?\nif you are working with collections (not sequences), forcing a seq just to check emptiness is not efficient\nseq doesn't work on transients\nat all\nthe advice to use (seq x) as a terminating predicate is primarily of use when working with sequences, where you are going to force the sequence anyways to walk it (and sequences cache that so the additive cost is negligible)\nthat is all my own internalized \"best practice\", so not trying to speak for Rich in any way here, fyi\nI understand what you say about advising to use `(seq x)` where I am going to force sequence anyway, but can you elaborate more on \"avoid making stuff to hold a place\"? Is `(let [x (blah-&gt;possibly-empty-vec blah)] (when-not (empty? x) ...))` somehow a place and `(let [x (blah-&gt;non-empty-vec-or-nil blah)] (when x ...))` is not?\nI also worry about conjing into nil: I'd usually prefer to work on vectors, not lists, and conjing into nil produces a list\nsorry had work. But that's why `seq` as a dual to `empty?` is a poor fit when `empty?` is updated to work on transients but its dual would not work, right?\nah right, I actually was thinking of (conj) for that one\nseq and empty? are not duals\nof those two examples you give, I definitely prefer the latter\nwouldn't you rather avoid constructing an empty vector (which takes time and consumes memory) and also write `(when x ...)` vs writing `(when-not (empty? x) ...)`?\nbut `(identical? [] [])` returns true, what is taking time here?\nI've seen a lot of code that contorts itself to use `empty?` because it's perceived as more literate than `seq` -- but `seq` is a fundamental function and idiom, not some advanced feature\n`identical?` does not work on vectors -- it happens that the compiler interns the empty vector\nClojure rewards you again and again for not making stuff. nils are cool. I like nils. I disagree with Hoare. :)\ngood point\nI just realized I also prefer `blah-&gt;non-empty-vec-or-nil` :slightly_smiling_face:\nif you're going to write stuff like `(when x ...)` though, you are committing to a philosophy and it requires some amount of discipline to return `nil` and not `[]`\nI am all in on that\nbut make sure  everyone in your team agrees ;)\nyeah, this approach should apply to all the codes\nsame thing on omitting attributes from maps when the value is nil\nif you're taking that approach (again, I'm all in), then you need to be careful to avoid adding those attributes when you create the maps in the first place\nand aware of external libs/systems that might give you maps like that\ngenerally, I think it's rarely worth stripping stuff out of maps if you get them from someone else\n<@Marlyn> Agree on `seq` being fundamental idiom, but `empty?` is still more literate, and a function to check if coll is empty in clojure core seems pretty fundamental as well, I don't see an argument here in favor of `seq`\nthese are functions that apply in different worlds\nI always prefer an empty collection over a `nil`.  Also, I wrote my own function `(not-empty? x)`\nFor example, `clojure.java.jdbc` will give you maps with `nil` values if the column in the database was `null`. But in `next.jdbc`, at least on *master*, there's `next.jdbc.optional/as-maps` that will give you maps where `nil` values are omitted.\nin some sense, jdbc is just surfacing sql here, so it makes total sense\n(the default `as-maps` is still `nil` values from `null` columns)\nsql nulls are inherently overloaded\nYeah, right, different worlds. `nil` instead of `[]` for the win\n<@Roslyn> if you are writing seq-oriented code (using -&gt;&gt;, map, filter, etc), seq makes total sense and I think the language designer has been quite clear that it is the proper idiom for checking whether the seq has at least one element or not\nI usually use transducers instead of lazy sequences wherever I can for performance reasons\ntransducers aren't always faster\nnothing wrong with using lazy seqs where it makes sense\nhmm, I thought they are, with exception of mapcat fully realizing intermediate steps...\npast blathering on this topic recorded here: <https://clojure.org/guides/faq#transducers_vs_seqs>\nif you're only going to use 5 values, then it's a lot faster to use lazy seqs\nthere may be a misconception that `seq` and `empty?` are opposites\nit's not?\n```\n(criterium.core/quick-bench\n  (into []\n        (comp\n          (map inc)\n          (filter odd?))\n        [0 1 2 3 4 5 6 7 8 9]))\n;; Execution time mean : 329.302467 ns\n\n(criterium.core/quick-bench\n  (-&gt;&gt; [0 1 2 3 4 5 6 7 8 9]\n       (map inc)\n       (filter odd?)\n       doall))\n;; Execution time mean : 893.769899 ns\n```\nbut you're forcing the seq realization to compute all values\nmy point is, if you don't need all of them, it can be much faster\nah, sure, it's faster when I don't need everything\nit also depends how big your colls are and how many transformations you're doing. transducers win more with bigger colls and more transformations. the majority of code like this uses small colls and 1-2 transformations.\nand in those cases, it literally doesn't matter\nso write the version that's easier to read\nreplies in thread\nbut in example above, with a small coll and 1-2 transformations, transducers are almost 3 times faster, why it doesn't matter?\nmicro benchmarks don't matter\ntry it with a bigger computation in the xform\nwell, it's a good point that real performance issues are not what you think they are, but isn't it a death by a thousand cuts if through all your application you add extra time here and there on every coll operation?\n\"3 times\" sounds really different but we're talking nanoseconds\nso you can pay that a million times before it's 1 second different\nso really more like death by 100 million cuts to care\nhmm you are right, that's true\ntake <https://github.com/clojure/tools.deps.alpha/blob/master/src/main/clojure/clojure/tools/deps/alpha/reader.clj#L84>\ncould easily be written as a transducer, but the typical size of \"merge-deps\" is 3 and I much prefer the way this reads\nlazy seqs are not inherently bad, don't be afraid of them :)\nthank you for explanations!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1706",
    "text": "maybe I misunderstand you?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1707",
    "text": "thanks for this!  haven't heard \"druthers\" in ages :slightly_smiling_face:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1708",
    "text": "is there a short syntax for selecting namespaced keys of off map? e.g.: `{:foo/one 1 :foo/two 2 :three 3}` I want to do `(select-keys m [:foo/one :foo/two])` but without having to repeat `:foo`\nor even better, select all keys that start with `:foo/` without even listing them one by one\n<@Kayce> Not exactly what you are asking, but in the context of destructuring:\n```\nuser=&gt; (def m {:foo/one 1 :foo/two 2 :three 3})\n#'user/m\nuser=&gt; (let [{:foo/keys [one two]} m] [one two])\n[1 2]\n```\nI know you can do that\nBut, presumably you are looking for a shorter version of\n```\n(select-keys m (filter #(= \"foo\" (namespace %)) (keys m)))\n```\nyeah, something like that, but I was hoping there\u2019s some magical trick with `#:foo` maybe\nno magic, just functions :slightly_smiling_face:\nI hate typing. I dunno how people even deal with semicolons and commas and all that crazy garbage in other languages\nbleh\n<https://clojure.org/reference/deps_and_cli#_git_configuration> might help\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1709",
    "text": "Type one namespaced keyword, then copy/paste for the others?\nI guess with data-readers you could define `#foo[:x :y :z]` to become `[:x/y :x/z]` or whatever\nwe've talked about extending the namespaced map literal syntax to vectors `#:foo[:x :y :z]` but then the question is what about sets `#:foo#{:x :y}` ? gross.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1710",
    "text": "deps.edn and private git repositories...  any advice?  getting: `com.jcraft.jsch.agentproxy.AgentProxyException: connector is not available:`\nplatform?\nlinux\nHum, not the prettiest for sets, but it's not that bad either.\nEspecially if you put a space in it `#:foo #{:x :y}`\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1711",
    "text": "Hello, how can I stream System.out.println() to the Clojure REPL? I am using a java class compiled with leiningen, and I want to see its log when calling it in the REPL.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1712",
    "text": "```\n(System/setOut (java.io.PrintStream. (org.apache.commons.io.output.WriterOutputStream. *out*) true))\n\n(.println System/out \"hi\")\n```\n<@Roslyn> btw. I've run the same experiment you did (3x each measurement) and got much smaller difference: ~570 ns for transducers and ~720ns for lazy seqs\n```\nJust another point how misleading microbenchmarks results may be.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1713",
    "text": "Is everyone using `Integrant` together with `Duct` or are you also running it standalone?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1714",
    "text": "If I have clj and cljc file for same namespace, in what order are they compiled? Same for cljc/cljs.\nplatform specific is always preferred\nso for clojure usage, I don't think you would get cljc compiled/loaded at all\ncljs is more complicated as prob different stories for macro and non-macro\nah, so it only compiles one\nyeah - they are alternate versions of the same namespace\nin clojure, it will look for a .class first (if newer than clj or cljc), then .clj, then .cljc\nthank you for that info\n<https://clojure.org/reference/libs#order> - doc ref\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1715",
    "text": "I'm using it without\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1716",
    "text": "hello guys, I have a reservation system which works with `agent`, so people can't reserve at the same time. But sometimes it stops working, it gives me no exception, and it doesn't restart. how is this possible?\nwhat evidence do you have that it stops working?\nagents can fail and won't restart\nwell, on my client-side, when people are reserving the server responds that the agent needs restart, like I wouldn't have setup the error handler.\nthere are lots of options for how errors and restarts are handled\nbut presumably you have a whole stack of code between the client and the agent, how do you know the failure isn't in there somewhere?\nso, the error-handler! doesn't handle everything? <@Jasmine>\nI don't have any of it in my head atm, I just know there's lot of stuff there that I use so infrequently that I have to re-read the source\n<@Rosaline> because the error is specific to the agent, and because I log the errors and the restarts, and sometimes restarts doesnt happen, only the error\nand honestly, approx 0% of users use this stuff so it wouldn't surprise me if there were unsurfaced bugs\nI thought you said you don't get an error?\nwhat is the error that is specific to the agent?\nhow are you configuring the agent wrt error-handler and error-mode?\n<@Rosaline>, I log in the database for certain functions. like restarting the agent. And when agent restarts I put the error in my logs. In the case when restarting doesn't happen, my error is logged, but is an empty string\n<@Jasmine>, well it is in my snippet, I set-error-handler! after defining it\nthe default error-mode of an agent is :fail, not :continue (unless there's an error handler)\nnot sure how that changes if you set the error-handler after the fact\nso it sounds like you do get an error\nit is hard to say since you deleted the logging bits from your example\nI put it back, i didnt want chaos\nbut it sounds like you are getting an error (the error handler is running) and something is going wrong in your error handler\nthat's the code without modification\nexceptions thrown in the error handler itself are ignored and lost\noh\nyeah, you are running the error handler in a future\nso they are racing to handle the error\nyou've introduced a race here by restarting in the future - restarts are ignored if the agent is not in a failed state\nso the error is already cleared by the time you try to get it with agent-error\nI would have to study all that code more closely to really think about the concurrency aspects of this\nso, I take out future and it should be fine?\nit may or may not be fine, depending, but it will take care of the empty string thing\nit would take me a lot more time to answer that question, and I don't have it atm\nI never did concurrency before, this is my first approach on this topic.\nBut it will restart then, that's what matters, I guess.\nwhy not just use error-mode :continue?\nthen the agent will automatically restart?\nin general (depending on the database) you will be much better off using your database features to keep things consistent in the face of multiple writers\n`(set-error-mode! reservation-queue :continue)`\npresumably at some point you want this running on multiple machines, at which point the serialization you get from agents doesn't exist\n<@Jasmine>didn't know such thing existed, thank you very much\nif you read the docstring for `agent` and some of the other functions around it, I think that might help\n<@Rosaline> No, this project will stay with 22 shops, so I guess I won't need nothing more sophisticated. But I am trying to learn more about the topic, I also enjoy it more than the frontend. :slightly_smiling_face:\n<@Jasmine> Thank you, duly noted. If it weren't for a stackoverflow topic, I wouldn't even used future, so yes, next time I start with the docstring.\nNo\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1717",
    "text": "both with duct and standalone here\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1718",
    "text": "Is there a way to have `(edn/read-string \"{:foo 1}\")` read `1` as an `Integer`?\nMaybe a custom data reader?\nThe string above will not trigger any custom data readers\nIf I understand correctly, a custom data reader could cause a string like `{:foo #my-tag 1 }` to read `#my-tag 1` as an `Integer`, but that is a different string.\nYeah but could easily be written as `(edn/read-string \"{:foo #int 1}\")`\nEven that would read 1 as a Long first\nAnd your data reader could convert it to whatever\nThat's fine. I just want the output to be an int.\nWarning: most kinds of Clojure arithmetic done on an Integer will not return an Integer.\nThat's ok. Our app has config files in EDN. Some of those config maps need to be passed via a `Properties` map to a Java library. Java libraries typically have methods declared that take an `int` and not ` long`.\nif you use Clojure to call those methods, it usually does the right thing\nisn't Properties always string-&gt;string?\nHmm, lemme see. I definitely get an exception due to a Long being passed instead of an int.\nProperties extends Hashtable so you can abuse it by using the parent class methods to put other stuff in it\nI do this `(doto (Properties.) (.putAll kafka-config))` and pass it to a Java method.\nIt is one of the worst APIs in Java\nright, but it's not going to be via Properties... at least not via standard methods <https://docs.oracle.com/javase/7/docs/api/java/util/Properties.html#getProperty(java.lang.String)>\n<@Somer> all the kafka configs are strings\nI know that one specifically\nI'm not doubting something wants an int and gets a long, but it's not kafka via properties\nI passed `{\"<http://request.timeout.ms|request.timeout.ms>\" 20000}` as part of the kafka config and it threw the cannot pass a Long exception. This fixed it `{\"<http://request.timeout.ms|request.timeout.ms>\" (int 20000)}`\n`{\"<http://request.timeout.ms|request.timeout.ms>\" \"20000\"}` is canonical\nint happens to work\nOh cool. I'll do that, much cleaner.\n<@Somer> usually I have a function that turns a clojure hash-map into string/string pairs then puts it into a Properties map\nYeah, should probably add helper function for that, especially now that I know it's a nasty api.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1719",
    "text": "hi,  is it possible to require two different versions of a library and use it at the same time?\nnot in any simple way, no\n<@Dann> what would be the trick then?\nisolated classloaders iirc\nthanks! I will search about it\neverything I've tried or heard about it makes it seem frustrating\nA classloader hierarchy along the lines of the one OSGi uses, where peer classloaders do not delegate to their parents when looking for a loaded class. Been a long time since I did this, so the details are very fuzzy.\nand making it work with Clojure iirc requires a pretty intimate understanding of how clojure extends the runtime classloader - my knowledge of this stuff is not very deep, maybe someone else can offer more detail\nI know there was at least one fork of clojure for the express purpose of working with isolated classloaders\nThat allowed OSGi services to use different versions of classes IIRC\nright - the fork I mentioned was for usage with OSGi\nbecause clojure as is wasn't compatible\nbut mixing that with Clojure? No idea how :slightly_smiling_face:\nI think it's less about not delegating to parents, and more about creating two (or more) inheritance trees\nDelegation might be the wrong word. I remember that it allowed a \"child\" classloader, instantiated for a service, to access classes \"sideways\" from other peers, without first looking in the parent. Or something like that :stuck_out_tongue:\nThat allowed for an additional security layer, whether a class was exposed outside its service, etc\nbut this is younger me from ~10 years ago!\noh, that's more than I know about it\nIt was strange stuff in a way, I ported 2 implementations to a \"java on the chip\" box my company at the time made.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1720",
    "text": "you can achieve this isolation in Java by using a post delegation classloader. however, clojure's dynamic classloader explicitly shares a class cache with all other dynamic classloaders\nthanks guys, quite interesting, I also heard that it is possible to have clojure repl running along with a pure java application running under Tomcat and invoke commands from the repl, so , in theory we could  write java code, compile it and call from clojure repl without restarting the embeded tomcat server, am I correct?\nnot exactly - depends what you're doing\nthat's not really a clojure question\ndepends if you're making new classes (then you need a classloader that knows how to load them) or redefining (there are paths  to this in the jvm but it's not trivial to do in general)\nin general, I'd say you should not do any of that. there are probably better ways to accomplish whatever  goals you have\nthanks Alex!\nlike, don't write code, just make new instances using existing classes. and make more flexible frameworks if you need more dynamicity (clojure is great for that via its var system)\nSmall projects are fine to understand stuff, but it really doesn\u2019t teach anything about how a ready to production code is working and should be \nthe idea is, I'm currently working with an old java framework that requires too much time to build, and also, its too coupled so , you never knows how it will behave xD , so I was looking for a solution for faster feedback\nI guess that the only option for that is jRebel or hotSwap agent\nbut anyway, I'm learning clojure now, to leave this crazy java world :stuck_out_tongue:\n<@Cristi> why not make a small set of stubs that call into clojure from the framemwork, then redefine the clojure stuff as needed while developing?\nthe stub should only need to change if you have a major architectural design, and the clojure stuff it calls is freely redefinable without a restart\nuhmm interesting\nI've used this pattern for jsvc for example <https://github.com/noisesmith/clj-jsvc-adapter>\nthanks <@Dann> I will have a look at it!\nthe code is very small - it just makes a tiny implementation of every method needed, that uses the clojure API to look up a var with a \"magic\" name and call it <https://github.com/noisesmith/clj-jsvc-adapter/blob/master/src/java/org/noisesmith/Cljsvc.java>\nit expects an ns with `start`, `init` etc. as vars, then loads the ns and attempts to call them\nyeah, its quite intuitive\nso my hunch is you can do the same with your old java framework - give it methods (probably easier to just do in java), and just make sure everything those methods do can be freely redefined in a repl\nthen no more restarting the framework for code changes\nThis small project was announced just recently, using Seesaw and Clojure: <https://www.reddit.com/r/Clojure/comments/bx698b/i_made_a_small_epub_reader_in_clojure>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1721",
    "text": "Hey guys, there is any Microservices example in Clojure? But I want something full fledged and mostly ready to production. I want to see some real project of a medium size or bigger. Not really interested in small examples, but I guess I won\u2019t find this... \n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1722",
    "text": "Does anyone know of a best practice for taking a non-namespaced map (example: `(def x {:a 1, :b 2, :nested {:h 3 :f 4}})` and producing the `namespaced keyword` version given a spec:\nexample:\n```\n(s/def ::result (s/keys :req [:thing/a :thing/b :thing/nested]))\n(s/def :thing/nested (s/keys :req [:other/f :other/g]))\n```\nand produces given `x` and the spec `::result` =&gt; `{:thing/a 1 :thing/b 2 :nested {:other/h 3 :other/f 4}}`\nOr does a project already do this? For example, I would think the ring swagger coercion would do something like this.\nMaybe I am being silly and `(s/keys :req-un [:thing/a])` is the right choice\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1723",
    "text": "I would do the last - spec the data you have\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1724",
    "text": "<@Phebe> hey if someone wanted to implement the kind of clojure highlighting that you describe in your recent talk, but in emacs, is there anywhere they could steal bits of implementation from...?\nI really like the idea of less noisy, more minimal but meaningful highlighting. At the moment I even don't use any highlighting at all, for performance when files have large maps :smile:\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1725",
    "text": "Hello guys! What is the easiest way of calling clojure functions from an already compiled java class?\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1726",
    "text": "I watched the talk too and was curious to try out the tonsky color scheme! All I found was this <https://github.com/uzhne/alabaster-emacs> but did not try it out yet.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1727",
    "text": "hi guys\nwhat is your opinion on partial functions?\n\nDo you use them often?\nI tend to just use `#()` or something like <https://github.com/we-shop/arrows>\nMaybe i should've asked how do you deal with partial fns\n\nlet say i have defined partial that i will use later on in run time\nhow do i find out information about that partial function `#function[clojure.core/partial/fn--5561]` when it like this? Is there anyway to 'expand' it ?\n\nIs it bad practice to have a lot of partial fns all over the place that are defined during startup but used during run time?\nthere is no way to expand it, it is opaque to users\nusually I prefer passing explicit environment over passing partials that close over it\nas then it's visible\nthere's an example of this in the spec guide via regex for email <https://clojure.org/guides/spec>\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1728",
    "text": "Is there way with spec to validate the content of a string? I.e., can I use spec to ensure that a string is made of two parts separated by a \u2018:\u2019 (e.g. \u201cprocotol:domain\u201d)?\nRight. Thank you!\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1729",
    "text": "I can think of a lot of common instances (eg. `(Thread. #(foo))` - but really the answer depends on what the existing Java Class does and how it goes about finding something to invoke and invoking it.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1730",
    "text": "Does the usage of `future` has any implications/gotcha's when running the program within a JAR ?\nIt seems that it's not being called when running as a JAR\nwhether your code is in a jar or on disk should not effect how it executes, aside from usage of `File` APIs that don't work for resources inside jars\nhow are you starting the future, and what's your evidence it doesn't run?\nyeah i'm having a problem with Files inside the resources too, and i'm trying to figure out how to create folders/files outside of the project folder/jar\nmy evidence is just a simple `println` inside the future, when running on disk it prints on console, and when running as a JAR it doesn't\ncould this be the process exiting before the future is run?\nthere are no Files inside resources, use <http://clojure.java.io/resource|clojure.java.io/resource> instead of file\n<@Leda> note that when an exception is thrown inside a future, it's reserved and doesn't do anything until the future is dereffed\nlikely the code inside the future is broken when in a jar (perhaps trying to use a file, which isn't valid for things inside jars), and the exception never gets thrown because you don't access the return value of the future\nIf you're using `timbre` already for logging, it has `logged-future` which is a replacement for `future` that logs any failures -- very handy!\nyou can also use try/catch inside future for use cases where you intentionally never deref\n(try/catch plus log or print that is)\nIs there a ballpark memory consumption for a pretty trivial clojure \u201cmicroservice\u201d that has:\n- a few routes\n- very moderate traffic\n- returns some json :smile:\nI'd use visualvm and see how much of the heap your program uses\nthe java vm checks how much memory it's allowed to use and just grabs it whether it needs it or not\nbut visualvm shows how much is actually being used\nYes I\u2019m aware, I\u2019m thinking how much is expected for something pretty simple to run. We have java services running with -Xmx=128mb\nWill it be equal or more?\nthat's definitely too low for clojure\nI guess you can also make and endpoint and expose ` (/ (.freeMemory (Runtime/getRuntime)) (* 1024.0 1024))`?\nor usedMemory or whatnot\nuse visualvm because libraries can really change the baseline, I'd expect 500megs at least, in the low gigs is normal\n<@Clarine> yeah, the problem is it\u2019s very hard to monitor the jvm like that\nThe gc will take whatever you give it\n<@Clarine> I prefer visualvm because the actual numbers are constantly oscillating in a sawtooth pattern, but it's easy to see the peaks in the graph\nah\n(I guess with some stats code you could capture peak / mean values but they are easy to eyeball)\nI think a proper test would involve performance testing the service and lowering the memory allowed for the JVM?\nand seeing when stuff stops working\nsince the tool differentiates used and allocated, you can get pretty close without lowering the numbers (and also when you  lower the allocation numbers below a certain point you sacrifice performance since the GC is doing more work)\nI\u2019ve got some pretty zealous colleagues when it comes to RAM memory usage, and I kind of can see their point since our software runs on prem at the customers data centers\nthey won't like clojure\nHehe I\u2019m getting that feeling :slightly_smiling_face:\nthere are many places where clojure explicitly decides to use more heap space (for performance, for simplicity / consistency...)\n<@Dann> the problem was indeed the future throwing an exception. It happens that i'm trying to execute a shell command inside a folder that is inside the JAR. and this seems to be impossible\nthere is no folder inside a jar\nthere's a resource path\nif the shell needs to use your resources, you need to expand the jar\n(or a system level tool that knows how to mount a zip file as a file system, but that would be OS specific)\ni don't necessarily need to access the files within the jar, i could first create them outside of it, but i'm having problems accessing anything outside the scope of the project, it doesn't accept to create a folder with the absolute path like: /home/user/folder\nfor programmatically expanded things I'd opt for /tmp\nor some other file system designed for ephemeral resources created by a program\ni was planning on using docker volumes\nbecause i'm using docker to get prod ready\nOK, there's a /tmp inside the docker image\nExactly, it's also not that useful to use visualvm for the same reason.\nand more importantly, it's mounted to a real file system that you can alter at runtime with a program in that image\nalright, i'll try to write the folder/files to a /tmp\n(real as far as anything in your image is concerned at least)\nI'm successfully running a small Clojure app with -Xmx256m but the only way to check is to run bunch of different settings and workloads and see how it works.\n<@Leda> a more specific gotcha is if you don't drop permissions, root's home dir isn't /home/root, it's /root\nbut /tmp is more reliable anyway\nthis `(.mkdir (java.io.File. folder-path))`  should work with a folder-path like this: `/tmp` ?\nDifferent GCs may give you different results especially in low-memory settings. I've heard that Shenandoah may be pretty good in such situations.\nwell, if folder-path is nested, don't use mkdir - there's one for nested dirs but it's different\nops, `/tmp/my-folder`\nInteresting!\nI think I could probably get away with 512mb but not much more\nbut sure, with a single level, mkdir should work\nbeware that JVM memory consumption isn't just heap though\nAtleast not for services that are also trivial to solve in plain java or kotlin.\n<https://docs.oracle.com/javase/7/docs/api/java/io/File.html#mkdirs()> creates all parents as needed\njust an extra s in your code!\nYeah\nthanks for sharing this\nbut it really is a single level nesting\nit's just a folder that i transform into a zip file later on, in the same function\nThe downside of a really high level language I guess. :slightly_smiling_face:\nKind of conflicts with my current desire to write a bunch of small focused services.\nFWIW, most of the processes on our QA servers run with 256m heaps just fine. Even in production with heavy traffic, most of our processes run with 1g heaps. Only a few have larger heaps (and that's just to avoid GC bottlenecks if there's a really big spike in traffic).\nPrior to Clojure, we used a web stack that really needed 10-15g to run smoothly so Clojure seems very lightweight to us :slightly_smiling_face:\nHehe I guess we all have different contexts - I\u2019ve written the last few services in Go which have been very easy on the RAM\nAnd the CSP implementation actually make it sort of workable with concurrency\nKind of feels like brutalist programming tho compared to clojure :slightly_smiling_face:\nthanks <@Dann> it worked on the JAR now, and i'm using the /tmp/ folder\nYeah, non-JVM systems seem to use tiny amounts of memory by comparison. I know lots of places that run JVM processes with heaps in the tens of GB :slightly_smiling_face:\nnow my Ring middleware only serve files inside the resource folder, so i need to point this files from /tmp/ and make them available :joy:\n<@Leda> just use `wrap-resource` instead of `wrap-file`\ni just saw it on the documentation hehe\ni'll use both, since i need static files on the resources folder\nwrap-resource works on files\n(as long as the directory is on classpath, but that's easy to arrange)\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1731",
    "text": "given a  symbol `'a.b.c`, how can I ask Clojure \"from which file/files you would you fetch this ns?\"\n\nwould help me debug a possible classpath issue\nyou can't\nto be clear, I can just `ps aux | grep classpath` and see the process' classpath, but I want to see the exact thing Clojure would do\neither clojure will load it from `a/b/c.clj` or if AOT'ed from `a/b/c__init.class`\nso run this:\n`(require '[<http://clojure.java.io|clojure.java.io> :as io]) (io/resource \"a/b/c.clj\") (io/resource \"a/b/c__init.class\")`\n*rarely* you should also check foo.cljc\nand you might need to do the underscores for dashes thing\nthere is a munge function for that\nit would be convenient if there was a function that did the exact lookup and showed the resource it found\nor if verbose loading included it\n^ that could be nice\n```\ndev=&gt; (<http://clojure.java.io/resource|clojure.java.io/resource> \"clojure/core/specs/alpha.clj\")\n#object[java.net.URL 0x675c1f6b \"jar:file:/Users/vemv/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/core/specs/alpha.clj\"]\n```\n\nthat was it! very likely I debugged the source of my issue (this library was overwriting the latest-and-greatest `clojure.core.specs.alpha`)\n\nthanks <@Marlyn>\nnp <@Mariela> classpath conflicts are turrible\nit seems that on 2017 or so, there was a giant hype about Functional programming\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1732",
    "text": "Do you know why Clojure in google trends going down since 2017? it is like 40% less.\nnow it's becoming something that all major languages are implementing in some way or another\nbut that's just a guess\nI see how other languages grow, but Clojure going down. Just it worry me a little.\nWell, probably more, than that :slightly_smiling_face:\nit seems that google trends do really show  a trend on functional programming from 2016 to the present\ninteresting that china has a lead on this trend, but probably because there is a billion of chinese people\nyes, I am surprised too\nfortunately, I do not program with Google, so all my Clojure programs still work great\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1733",
    "text": "What do you do on solutions like kubernetes where you create many services to reduce memory consumption in Clojure?\n...the issue above left me quite frustrated (~90m wasted) so probably I will implement a linter based on this snippet:\n\n```\n(defn resources\n  ([n]\n   (resources n (.getContextClassLoader (Thread/currentThread))))\n  \n  ([n ^ClassLoader loader]\n   (.getResources loader n)))\n\n(-&gt;&gt; \"clojure/core/specs/alpha.clj\"\n     resources\n     enumeration-seq\n     (map str)\n     (clojure.pprint/pprint))\n\n;; the above results in:\n'(\"jar:file:/Users/vemv/.m2/repository/clojure-future-spec/clojure-future-spec/1.9.0-beta4/clojure-future-spec-1.9.0-beta4.jar!/clojure/core/specs/alpha.clj\"\n  \"jar:file:/Users/vemv/.m2/repository/org/clojure/core.specs.alpha/0.2.44/core.specs.alpha-0.2.44.jar!/clojure/core/specs/alpha.clj\")\n```\n\n\u2022 list every ns declared/required in your project, fetch their `resources`\n\u2022 if for any given ns there is more than one entry, issue a warning\nHave you already tried trimming the dependencies on a per-service basis?\n\ne.g. all services use the same deps b/c you have some internal framework, but maybe each service actually needs a fraction of that\nno, it is new topic for me\nBut I am not sure I would like to risk to do it and want to maintenance it :wink:\nProbably will be easier paying for RAM heh :wink:\njust to be clear I'm talking about plain project.clj / deps.edn dependencies. No much surgery needed\n\nAre you using a large web framework?\nI don\u2019t use frameworks at all. I prefer to use small libraries instead.\nSo for example I have service only to login user as auth-provider\nbut while it is Clojure it will consume so much RAM for such simple thing\n&gt; I don\u2019t use frameworks at all. I prefer to use small libraries instead.\n\nthen it might be worth a shot. `lein deps :tree` might reveal where the bloat comes from\n\n(if you are complaining about baseline :clj: RAM consumption, then I have no idea)\nProbably Clojure is not a good choice for such services, but I don\u2019t feel confident to write it in for example golang\nyes, it is a little about baseline :wink:\nbut not only, just I would like to listen somebody experienced in this topic\nperhaps there is some useful insight in the `Microservices with Clojure` book. Haven't got my hands to it yet\nBut yeah\u2026 Probably the true is we should use another languages for small services or pay more for RAM :slightly_smiling_face:\nthere will be no magic\nworst-case scenario you can resort to cljs / node.js :stuck_out_tongue_winking_eye:\nPaying for RAM is not so bad :stuck_out_tongue: :wink:\nI am thinking about it, because I am doing my own hobby project, which will became something serious maybe. So I will pay for everything from my own pocket.\nThen you start to count this \u201csmall\u201d bills and it matter heh\nI am going sleep. Goodnight.\nI tried to find where `RELEASE` and `LATEST` are documented but then I read they are deprecated in maven 3?\nHow does this relate exactly to clojure deps and lein, since they use the maven stuff under the hood?\n```\nclj -Sdeps '{:deps {org.clojure/clojure {:mvn/version \"LATEST\"}}}' -e '(clojure-version)'\n```\nbut I consider them to be unsupported from a clj / tools.deps pov\nyeah, I usually only use it for one-off things in the command line when I don\u2019t feel like looking up a version number. I didn\u2019t even know `LATEST` existed until today\n(I don't use `LATEST` for anything tho')\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1734",
    "text": "they still work\nbecause they are not fixed versions\n`clj-new` produces deps like that so that I don't have to keep updating `clj-new`'s templates when new versions of libraries drop. I figured folks would change the deps to specific versions if they wanted.\nAt work, we have some dev-only tooling that uses `RELEASE` so we always pick up the newest versions. If anything breaks in dev, we can easily pin a tool back to a working version.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  },
  {
    "id": "1735",
    "text": "Hi, what would you say is the essential Clojure testing stack? spec, test.check, clojure.test - anything else?\nThere's a lot to factor into that - what are you testing? where? (repl, cli, ci?)\nWe currently use all of the above + `test.chuck` and `eftest`\netaoin if developing web apps\naero or such for having clean per-env config\ncomponent/integrant for having clean per-env systems\nexpound\n\nmore exotic: circleci.test, kaocha\n<@Lesa>  Im talking about CI for medium-to-large commercial projects.\nThanks for the info.\n<@Danita> We have about 80k lines of Clojure at work. About 20k of that is test code. We use `clojure.test` and Cognitect's `test-runner` (since we're all `clj`/`deps.edn`-based). We use `clojure.spec` but mostly in production code for data validation, although we do use some instrumentation in dev/test, and we do some generative testing with it (so we use `test.check` under the hood as well).\nWe also use <https://github.com/clojure-expectations/clojure-test> (I prefer the `expect` style syntax) -- we used to use the core Expectations library but it wasn't compatible with `clojure.test`-based tooling.\nThanks, that's very helpful. I know what to research.\nWe used to have Clojure-based Selenium/WebDriver tests -- and we used `clj-webdriver` for that but we've killed off those web apps and that library is pretty much unmaintained now. I'd probably look at etaoin if I needed that these days. We do have some `HtmlUnit`-based tests, just using `clojure.test` for assertions and plain Java interop.\nAnd, like <@Lesa>, we use `test.chuck` for some stuff above and beyond `test.check` (mostly for string regex generators).\nNoted. I'm checking, because I'm preparing a pitch for the company. The big focus is on testing. Right now a lot of code is in Python which, as far as property-based testing is concerned, only has `hypothesis`.\nClojure seems to be much more powerful in this area.\nalso, for circleci specifically, there's a circleci test namespace that runs clojure.test tests but has some extra ci-friendly features\ncircle uses clojure internally and supports it well\nWhat about Midje? Is it recommended?\nNot recommended <@Danita> \nAgreed re: Midje. Definitely not recommended by quite a few folks <@Danita>\n<@Danita> FWIW, if you end up using spec for generative testing, expound can help format the results: <https://github.com/bhb/expound#printing-results-for-check>\nOrchestra is also useful if you plan to instrument functions during tests\nI use midje like this `(deftest foo (fact (+ 1 2) =&gt; 3))` and it's fine. <#C0744GXCJ|cursive> interation and `clj -A:test:test-runner` via `cognitect-labs/test-runner` works. Also I have the power of `contains/just`\n<@Elaine> I've never found Midje's syntax readable, but it's good to know it can be used like that with `deftest`. With `expectations.clojure.test` that was my goal, so you can write `(deftest foo (expect 3 (+ 1 2)))` -- and `expect` lets you use specs, predicates, and you can \"expect more\" with destructuring etc.\n",
    "metadata": {
      "team_domain": "clojurians",
      "channel_name": "clojure"
    }
  }
]